var Module;
if (typeof Module === "undefined") Module = eval("(function() { try { return Module || {} } catch(e) { return {} } })()");
if (!Module.expectedDataFileDownloads) {
 Module.expectedDataFileDownloads = 0;
 Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
((function() {
 var PACKAGE_PATH;
 if (typeof window === "object") {
  PACKAGE_PATH = window["encodeURIComponent"](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf("/")) + "/");
 } else {
  PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf("/")) + "/");
 }
 var PACKAGE_NAME = "bb.data";
 var REMOTE_PACKAGE_NAME = (Module["filePackagePrefixURL"] || "") + "bb.data";
 var REMOTE_PACKAGE_SIZE = 4158;
 var PACKAGE_UUID = "ae9245ee-bb26-4e67-b99a-a584ecfcf772";
 function fetchRemotePackage(packageName, packageSize, callback, errback) {
  var xhr = new XMLHttpRequest;
  xhr.open("GET", packageName, true);
  xhr.responseType = "arraybuffer";
  xhr.onprogress = (function(event) {
   var url = packageName;
   var size = packageSize;
   if (event.total) size = event.total;
   if (event.loaded) {
    if (!xhr.addedTotal) {
     xhr.addedTotal = true;
     if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
     Module.dataFileDownloads[url] = {
      loaded: event.loaded,
      total: size
     };
    } else {
     Module.dataFileDownloads[url].loaded = event.loaded;
    }
    var total = 0;
    var loaded = 0;
    var num = 0;
    for (var download in Module.dataFileDownloads) {
     var data = Module.dataFileDownloads[download];
     total += data.total;
     loaded += data.loaded;
     num++;
    }
    total = Math.ceil(total * Module.expectedDataFileDownloads / num);
    if (Module["setStatus"]) Module["setStatus"]("Downloading data... (" + loaded + "/" + total + ")");
   } else if (!Module.dataFileDownloads) {
    if (Module["setStatus"]) Module["setStatus"]("Downloading data...");
   }
  });
  xhr.onload = (function(event) {
   var packageData = xhr.response;
   callback(packageData);
  });
  xhr.send(null);
 }
 function handleError(error) {
  console.error("package error:", error);
 }
 var fetched = null, fetchedCallback = null;
 fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, (function(data) {
  if (fetchedCallback) {
   fetchedCallback(data);
   fetchedCallback = null;
  } else {
   fetched = data;
  }
 }), handleError);
 function runWithFS() {
  function assert(check, msg) {
   if (!check) throw msg + (new Error).stack;
  }
  function DataRequest(start, end, crunched, audio) {
   this.start = start;
   this.end = end;
   this.crunched = crunched;
   this.audio = audio;
  }
  DataRequest.prototype = {
   requests: {},
   open: (function(mode, name) {
    this.name = name;
    this.requests[name] = this;
    Module["addRunDependency"]("fp " + this.name);
   }),
   send: (function() {}),
   onload: (function() {
    var byteArray = this.byteArray.subarray(this.start, this.end);
    this.finish(byteArray);
   }),
   finish: (function(byteArray) {
    var that = this;
    Module["FS_createPreloadedFile"](this.name, null, byteArray, true, true, (function() {
     Module["removeRunDependency"]("fp " + that.name);
    }), (function() {
     if (that.audio) {
      Module["removeRunDependency"]("fp " + that.name);
     } else {
      Module.printErr("Preloading file " + that.name + " failed");
     }
    }), false, true);
    this.requests[this.name] = null;
   })
  };
  (new DataRequest(0, 4158, 0, 0)).open("GET", "/pdcfont.bmp");
  function processPackageData(arrayBuffer) {
   Module.finishedDataFileDownloads++;
   assert(arrayBuffer, "Loading data file failed.");
   var byteArray = new Uint8Array(arrayBuffer);
   var curr;
   var ptr = Module["_malloc"](byteArray.length);
   Module["HEAPU8"].set(byteArray, ptr);
   DataRequest.prototype.byteArray = Module["HEAPU8"].subarray(ptr, ptr + byteArray.length);
   DataRequest.prototype.requests["/pdcfont.bmp"].onload();
   Module["removeRunDependency"]("datafile_bb.data");
  }
  Module["addRunDependency"]("datafile_bb.data");
  if (!Module.preloadResults) Module.preloadResults = {};
  Module.preloadResults[PACKAGE_NAME] = {
   fromCache: false
  };
  if (fetched) {
   processPackageData(fetched);
   fetched = null;
  } else {
   fetchedCallback = processPackageData;
  }
 }
 if (Module["calledRun"]) {
  runWithFS();
 } else {
  if (!Module["preRun"]) Module["preRun"] = [];
  Module["preRun"].push(runWithFS);
 }
}))();
var Module;
if (!Module) Module = (typeof Module !== "undefined" ? Module : null) || {};
var moduleOverrides = {};
for (var key in Module) {
 if (Module.hasOwnProperty(key)) {
  moduleOverrides[key] = Module[key];
 }
}
var ENVIRONMENT_IS_NODE = typeof process === "object" && typeof require === "function";
var ENVIRONMENT_IS_WEB = typeof window === "object";
var ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
 if (!Module["print"]) Module["print"] = function print(x) {
  process["stdout"].write(x + "\n");
 };
 if (!Module["printErr"]) Module["printErr"] = function printErr(x) {
  process["stderr"].write(x + "\n");
 };
 var nodeFS = require("fs");
 var nodePath = require("path");
 Module["read"] = function read(filename, binary) {
  filename = nodePath["normalize"](filename);
  var ret = nodeFS["readFileSync"](filename);
  if (!ret && filename != nodePath["resolve"](filename)) {
   filename = path.join(__dirname, "..", "src", filename);
   ret = nodeFS["readFileSync"](filename);
  }
  if (ret && !binary) ret = ret.toString();
  return ret;
 };
 Module["readBinary"] = function readBinary(filename) {
  return Module["read"](filename, true);
 };
 Module["load"] = function load(f) {
  globalEval(read(f));
 };
 Module["thisProgram"] = process["argv"][1];
 Module["arguments"] = process["argv"].slice(2);
 module["exports"] = Module;
} else if (ENVIRONMENT_IS_SHELL) {
 if (!Module["print"]) Module["print"] = print;
 if (typeof printErr != "undefined") Module["printErr"] = printErr;
 if (typeof read != "undefined") {
  Module["read"] = read;
 } else {
  Module["read"] = function read() {
   throw "no read() available (jsc?)";
  };
 }
 Module["readBinary"] = function readBinary(f) {
  return read(f, "binary");
 };
 if (typeof scriptArgs != "undefined") {
  Module["arguments"] = scriptArgs;
 } else if (typeof arguments != "undefined") {
  Module["arguments"] = arguments;
 }
 this["Module"] = Module;
} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
 Module["read"] = function read(url) {
  var xhr = new XMLHttpRequest;
  xhr.open("GET", url, false);
  xhr.send(null);
  return xhr.responseText;
 };
 if (typeof arguments != "undefined") {
  Module["arguments"] = arguments;
 }
 if (typeof console !== "undefined") {
  if (!Module["print"]) Module["print"] = function print(x) {
   console.log(x);
  };
  if (!Module["printErr"]) Module["printErr"] = function printErr(x) {
   console.log(x);
  };
 } else {
  var TRY_USE_DUMP = false;
  if (!Module["print"]) Module["print"] = TRY_USE_DUMP && typeof dump !== "undefined" ? (function(x) {
   dump(x);
  }) : (function(x) {});
 }
 if (ENVIRONMENT_IS_WEB) {
  window["Module"] = Module;
 } else {
  Module["load"] = importScripts;
 }
} else {
 throw "Unknown runtime environment. Where are we?";
}
function globalEval(x) {
 eval.call(null, x);
}
if (!Module["load"] == "undefined" && Module["read"]) {
 Module["load"] = function load(f) {
  globalEval(Module["read"](f));
 };
}
if (!Module["print"]) {
 Module["print"] = (function() {});
}
if (!Module["printErr"]) {
 Module["printErr"] = Module["print"];
}
if (!Module["arguments"]) {
 Module["arguments"] = [];
}
Module.print = Module["print"];
Module.printErr = Module["printErr"];
Module["preRun"] = [];
Module["postRun"] = [];
for (var key in moduleOverrides) {
 if (moduleOverrides.hasOwnProperty(key)) {
  Module[key] = moduleOverrides[key];
 }
}
var Runtime = {
 setTempRet0: (function(value) {
  tempRet0 = value;
 }),
 getTempRet0: (function() {
  return tempRet0;
 }),
 stackSave: (function() {
  return STACKTOP;
 }),
 stackRestore: (function(stackTop) {
  STACKTOP = stackTop;
 }),
 forceAlign: (function(target, quantum) {
  quantum = quantum || 4;
  if (quantum == 1) return target;
  if (isNumber(target) && isNumber(quantum)) {
   return Math.ceil(target / quantum) * quantum;
  } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
   return "(((" + target + ")+" + (quantum - 1) + ")&" + -quantum + ")";
  }
  return "Math.ceil((" + target + ")/" + quantum + ")*" + quantum;
 }),
 isNumberType: (function(type) {
  return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
 }),
 isPointerType: function isPointerType(type) {
  return type[type.length - 1] == "*";
 },
 isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true;
  return type[0] == "%";
 },
 INT_TYPES: {
  "i1": 0,
  "i8": 0,
  "i16": 0,
  "i32": 0,
  "i64": 0
 },
 FLOAT_TYPES: {
  "float": 0,
  "double": 0
 },
 or64: (function(x, y) {
  var l = x | 0 | (y | 0);
  var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
  return l + h;
 }),
 and64: (function(x, y) {
  var l = (x | 0) & (y | 0);
  var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
  return l + h;
 }),
 xor64: (function(x, y) {
  var l = (x | 0) ^ (y | 0);
  var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
  return l + h;
 }),
 getNativeTypeSize: (function(type) {
  switch (type) {
  case "i1":
  case "i8":
   return 1;
  case "i16":
   return 2;
  case "i32":
   return 4;
  case "i64":
   return 8;
  case "float":
   return 4;
  case "double":
   return 8;
  default:
   {
    if (type[type.length - 1] === "*") {
     return Runtime.QUANTUM_SIZE;
    } else if (type[0] === "i") {
     var bits = parseInt(type.substr(1));
     assert(bits % 8 === 0);
     return bits / 8;
    } else {
     return 0;
    }
   }
  }
 }),
 getNativeFieldSize: (function(type) {
  return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
 }),
 dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
   return items.filter((function(item) {
    if (seen[item[ident]]) return false;
    seen[item[ident]] = true;
    return true;
   }));
  } else {
   return items.filter((function(item) {
    if (seen[item]) return false;
    seen[item] = true;
    return true;
   }));
  }
 },
 set: function set() {
  var args = typeof arguments[0] === "object" ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
   ret[args[i]] = 0;
  }
  return ret;
 },
 STACK_ALIGN: 8,
 getAlignSize: (function(type, size, vararg) {
  if (!vararg && (type == "i64" || type == "double")) return 8;
  if (!type) return Math.min(size, 8);
  return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
 }),
 calculateStructAlignment: function calculateStructAlignment(type) {
  type.flatSize = 0;
  type.alignSize = 0;
  var diffs = [];
  var prev = -1;
  var index = 0;
  type.flatIndexes = type.fields.map((function(field) {
   index++;
   var size, alignSize;
   if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
    size = Runtime.getNativeTypeSize(field);
    alignSize = Runtime.getAlignSize(field, size);
   } else if (Runtime.isStructType(field)) {
    if (field[1] === "0") {
     size = 0;
     if (Types.types[field]) {
      alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
     } else {
      alignSize = type.alignSize || QUANTUM_SIZE;
     }
    } else {
     size = Types.types[field].flatSize;
     alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
    }
   } else if (field[0] == "b") {
    size = field.substr(1) | 0;
    alignSize = 1;
   } else if (field[0] === "<") {
    size = alignSize = Types.types[field].flatSize;
   } else if (field[0] === "i") {
    size = alignSize = parseInt(field.substr(1)) / 8;
    assert(size % 1 === 0, "cannot handle non-byte-size field " + field);
   } else {
    assert(false, "invalid type for calculateStructAlignment");
   }
   if (type.packed) alignSize = 1;
   type.alignSize = Math.max(type.alignSize, alignSize);
   var curr = Runtime.alignMemory(type.flatSize, alignSize);
   type.flatSize = curr + size;
   if (prev >= 0) {
    diffs.push(curr - prev);
   }
   prev = curr;
   return curr;
  }));
  if (type.name_ && type.name_[0] === "[") {
   type.flatSize = parseInt(type.name_.substr(1)) * type.flatSize / 2;
  }
  type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
  if (diffs.length == 0) {
   type.flatFactor = type.flatSize;
  } else if (Runtime.dedup(diffs).length == 1) {
   type.flatFactor = diffs[0];
  }
  type.needsFlattening = type.flatFactor != 1;
  return type.flatIndexes;
 },
 generateStructInfo: (function(struct, typeName, offset) {
  var type, alignment;
  if (typeName) {
   offset = offset || 0;
   type = (typeof Types === "undefined" ? Runtime.typeInfo : Types.types)[typeName];
   if (!type) return null;
   if (type.fields.length != struct.length) {
    printErr("Number of named fields must match the type for " + typeName + ": possibly duplicate struct names. Cannot return structInfo");
    return null;
   }
   alignment = type.flatIndexes;
  } else {
   var type = {
    fields: struct.map((function(item) {
     return item[0];
    }))
   };
   alignment = Runtime.calculateStructAlignment(type);
  }
  var ret = {
   __size__: type.flatSize
  };
  if (typeName) {
   struct.forEach((function(item, i) {
    if (typeof item === "string") {
     ret[item] = alignment[i] + offset;
    } else {
     var key;
     for (var k in item) key = k;
     ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
    }
   }));
  } else {
   struct.forEach((function(item, i) {
    ret[item[1]] = alignment[i];
   }));
  }
  return ret;
 }),
 dynCall: (function(sig, ptr, args) {
  if (args && args.length) {
   if (!args.splice) args = Array.prototype.slice.call(args);
   args.splice(0, 0, ptr);
   return Module["dynCall_" + sig].apply(null, args);
  } else {
   return Module["dynCall_" + sig].call(null, ptr);
  }
 }),
 functionPointers: [],
 addFunction: (function(func) {
  for (var i = 0; i < Runtime.functionPointers.length; i++) {
   if (!Runtime.functionPointers[i]) {
    Runtime.functionPointers[i] = func;
    return 2 * (1 + i);
   }
  }
  throw "Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.";
 }),
 removeFunction: (function(index) {
  Runtime.functionPointers[(index - 2) / 2] = null;
 }),
 getAsmConst: (function(code, numArgs) {
  if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
  var func = Runtime.asmConstCache[code];
  if (func) return func;
  var args = [];
  for (var i = 0; i < numArgs; i++) {
   args.push(String.fromCharCode(36) + i);
  }
  var source = Pointer_stringify(code);
  if (source[0] === '"') {
   if (source.indexOf('"', 1) === source.length - 1) {
    source = source.substr(1, source.length - 2);
   } else {
    abort("invalid EM_ASM input |" + source + "|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)");
   }
  }
  try {
   var evalled = eval("(function(" + args.join(",") + "){ " + source + " })");
  } catch (e) {
   Module.printErr("error in executing inline EM_ASM code: " + e + " on: \n\n" + source + "\n\nwith args |" + args + "| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)");
   throw e;
  }
  return Runtime.asmConstCache[code] = evalled;
 }),
 warnOnce: (function(text) {
  if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
  if (!Runtime.warnOnce.shown[text]) {
   Runtime.warnOnce.shown[text] = 1;
   Module.printErr(text);
  }
 }),
 funcWrappers: {},
 getFuncWrapper: (function(func, sig) {
  assert(sig);
  if (!Runtime.funcWrappers[func]) {
   Runtime.funcWrappers[func] = function dynCall_wrapper() {
    return Runtime.dynCall(sig, func, arguments);
   };
  }
  return Runtime.funcWrappers[func];
 }),
 UTF8Processor: (function() {
  var buffer = [];
  var needed = 0;
  this.processCChar = (function(code) {
   code = code & 255;
   if (buffer.length == 0) {
    if ((code & 128) == 0) {
     return String.fromCharCode(code);
    }
    buffer.push(code);
    if ((code & 224) == 192) {
     needed = 1;
    } else if ((code & 240) == 224) {
     needed = 2;
    } else {
     needed = 3;
    }
    return "";
   }
   if (needed) {
    buffer.push(code);
    needed--;
    if (needed > 0) return "";
   }
   var c1 = buffer[0];
   var c2 = buffer[1];
   var c3 = buffer[2];
   var c4 = buffer[3];
   var ret;
   if (buffer.length == 2) {
    ret = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
   } else if (buffer.length == 3) {
    ret = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
   } else {
    var codePoint = (c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63;
    ret = String.fromCharCode(Math.floor((codePoint - 65536) / 1024) + 55296, (codePoint - 65536) % 1024 + 56320);
   }
   buffer.length = 0;
   return ret;
  });
  this.processJSString = function processJSString(string) {
   string = unescape(encodeURIComponent(string));
   var ret = [];
   for (var i = 0; i < string.length; i++) {
    ret.push(string.charCodeAt(i));
   }
   return ret;
  };
 }),
 getCompilerSetting: (function(name) {
  throw "You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work";
 }),
 stackAlloc: (function(size) {
  var ret = STACKTOP;
  STACKTOP = STACKTOP + size | 0;
  STACKTOP = STACKTOP + 7 & -8;
  return ret;
 }),
 staticAlloc: (function(size) {
  var ret = STATICTOP;
  STATICTOP = STATICTOP + size | 0;
  STATICTOP = STATICTOP + 7 & -8;
  return ret;
 }),
 dynamicAlloc: (function(size) {
  var ret = DYNAMICTOP;
  DYNAMICTOP = DYNAMICTOP + size | 0;
  DYNAMICTOP = DYNAMICTOP + 7 & -8;
  if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();
  return ret;
 }),
 alignMemory: (function(size, quantum) {
  var ret = size = Math.ceil(size / (quantum ? quantum : 8)) * (quantum ? quantum : 8);
  return ret;
 }),
 makeBigInt: (function(low, high, unsigned) {
  var ret = unsigned ? +(low >>> 0) + +(high >>> 0) * +4294967296 : +(low >>> 0) + +(high | 0) * +4294967296;
  return ret;
 }),
 GLOBAL_BASE: 8,
 QUANTUM_SIZE: 4,
 __dummy__: 0
};
Module["Runtime"] = Runtime;
var __THREW__ = 0;
var ABORT = false;
var EXITSTATUS = 0;
var undef = 0;
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function assert(condition, text) {
 if (!condition) {
  abort("Assertion failed: " + text);
 }
}
var globalScope = this;
function getCFunc(ident) {
 var func = Module["_" + ident];
 if (!func) {
  try {
   func = eval("_" + ident);
  } catch (e) {}
 }
 assert(func, "Cannot call unknown function " + ident + " (perhaps LLVM optimizations or closure removed it?)");
 return func;
}
var cwrap, ccall;
((function() {
 var stack = 0;
 var JSfuncs = {
  "stackSave": (function() {
   stack = Runtime.stackSave();
  }),
  "stackRestore": (function() {
   Runtime.stackRestore(stack);
  }),
  "arrayToC": (function(arr) {
   var ret = Runtime.stackAlloc(arr.length);
   writeArrayToMemory(arr, ret);
   return ret;
  }),
  "stringToC": (function(str) {
   var ret = 0;
   if (str !== null && str !== undefined && str !== 0) {
    ret = Runtime.stackAlloc(str.length + 1);
    writeStringToMemory(str, ret);
   }
   return ret;
  })
 };
 var toC = {
  "string": JSfuncs["stringToC"],
  "array": JSfuncs["arrayToC"]
 };
 ccall = function ccallFunc(ident, returnType, argTypes, args) {
  var func = getCFunc(ident);
  var cArgs = [];
  if (args) {
   for (var i = 0; i < args.length; i++) {
    var converter = toC[argTypes[i]];
    if (converter) {
     if (stack === 0) stack = Runtime.stackSave();
     cArgs[i] = converter(args[i]);
    } else {
     cArgs[i] = args[i];
    }
   }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === "string") ret = Pointer_stringify(ret);
  if (stack !== 0) JSfuncs["stackRestore"]();
  return ret;
 };
 var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
 function parseJSFunc(jsfunc) {
  var parsed = jsfunc.toString().match(sourceRegex).slice(1);
  return {
   arguments: parsed[0],
   body: parsed[1],
   returnValue: parsed[2]
  };
 }
 var JSsource = {};
 for (var fun in JSfuncs) {
  if (JSfuncs.hasOwnProperty(fun)) {
   JSsource[fun] = parseJSFunc(JSfuncs[fun]);
  }
 }
 cwrap = function cwrap(ident, returnType, argTypes) {
  var cfunc = getCFunc(ident);
  var numericArgs = argTypes.every((function(type) {
   return type === "number";
  }));
  var numericRet = returnType !== "string";
  if (numericRet && numericArgs) {
   return cfunc;
  }
  var argNames = argTypes.map((function(x, i) {
   return "$" + i;
  }));
  var funcstr = "(function(" + argNames.join(",") + ") {";
  var nargs = argTypes.length;
  if (!numericArgs) {
   funcstr += JSsource["stackSave"].body + ";";
   for (var i = 0; i < nargs; i++) {
    var arg = argNames[i], type = argTypes[i];
    if (type === "number") continue;
    var convertCode = JSsource[type + "ToC"];
    funcstr += "var " + convertCode.arguments + " = " + arg + ";";
    funcstr += convertCode.body + ";";
    funcstr += arg + "=" + convertCode.returnValue + ";";
   }
  }
  var cfuncname = parseJSFunc((function() {
   return cfunc;
  })).returnValue;
  funcstr += "var ret = " + cfuncname + "(" + argNames.join(",") + ");";
  if (!numericRet) {
   var strgfy = parseJSFunc((function() {
    return Pointer_stringify;
   })).returnValue;
   funcstr += "ret = " + strgfy + "(ret);";
  }
  if (!numericArgs) {
   funcstr += JSsource["stackRestore"].body + ";";
  }
  funcstr += "return ret})";
  return eval(funcstr);
 };
}))();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;
function setValue(ptr, value, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  HEAP8[ptr >> 0] = value;
  break;
 case "i8":
  HEAP8[ptr >> 0] = value;
  break;
 case "i16":
  HEAP16[ptr >> 1] = value;
  break;
 case "i32":
  HEAP32[ptr >> 2] = value;
  break;
 case "i64":
  tempI64 = [ value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0) ], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
  break;
 case "float":
  HEAPF32[ptr >> 2] = value;
  break;
 case "double":
  HEAPF64[ptr >> 3] = value;
  break;
 default:
  abort("invalid type for setValue: " + type);
 }
}
Module["setValue"] = setValue;
function getValue(ptr, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  return HEAP8[ptr >> 0];
 case "i8":
  return HEAP8[ptr >> 0];
 case "i16":
  return HEAP16[ptr >> 1];
 case "i32":
  return HEAP32[ptr >> 2];
 case "i64":
  return HEAP32[ptr >> 2];
 case "float":
  return HEAPF32[ptr >> 2];
 case "double":
  return HEAPF64[ptr >> 3];
 default:
  abort("invalid type for setValue: " + type);
 }
 return null;
}
Module["getValue"] = getValue;
var ALLOC_NORMAL = 0;
var ALLOC_STACK = 1;
var ALLOC_STATIC = 2;
var ALLOC_DYNAMIC = 3;
var ALLOC_NONE = 4;
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;
function allocate(slab, types, allocator, ptr) {
 var zeroinit, size;
 if (typeof slab === "number") {
  zeroinit = true;
  size = slab;
 } else {
  zeroinit = false;
  size = slab.length;
 }
 var singleType = typeof types === "string" ? types : null;
 var ret;
 if (allocator == ALLOC_NONE) {
  ret = ptr;
 } else {
  ret = [ _malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc ][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
 }
 if (zeroinit) {
  var ptr = ret, stop;
  assert((ret & 3) == 0);
  stop = ret + (size & ~3);
  for (; ptr < stop; ptr += 4) {
   HEAP32[ptr >> 2] = 0;
  }
  stop = ret + size;
  while (ptr < stop) {
   HEAP8[ptr++ >> 0] = 0;
  }
  return ret;
 }
 if (singleType === "i8") {
  if (slab.subarray || slab.slice) {
   HEAPU8.set(slab, ret);
  } else {
   HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
 }
 var i = 0, type, typeSize, previousType;
 while (i < size) {
  var curr = slab[i];
  if (typeof curr === "function") {
   curr = Runtime.getFunctionIndex(curr);
  }
  type = singleType || types[i];
  if (type === 0) {
   i++;
   continue;
  }
  if (type == "i64") type = "i32";
  setValue(ret + i, curr, type);
  if (previousType !== type) {
   typeSize = Runtime.getNativeTypeSize(type);
   previousType = type;
  }
  i += typeSize;
 }
 return ret;
}
Module["allocate"] = allocate;
function Pointer_stringify(ptr, length) {
 var hasUtf = false;
 var t;
 var i = 0;
 while (1) {
  t = HEAPU8[ptr + i >> 0];
  if (t >= 128) hasUtf = true; else if (t == 0 && !length) break;
  i++;
  if (length && i == length) break;
 }
 if (!length) length = i;
 var ret = "";
 if (!hasUtf) {
  var MAX_CHUNK = 1024;
  var curr;
  while (length > 0) {
   curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
   ret = ret ? ret + curr : curr;
   ptr += MAX_CHUNK;
   length -= MAX_CHUNK;
  }
  return ret;
 }
 var utf8 = new Runtime.UTF8Processor;
 for (i = 0; i < length; i++) {
  t = HEAPU8[ptr + i >> 0];
  ret += utf8.processCChar(t);
 }
 return ret;
}
Module["Pointer_stringify"] = Pointer_stringify;
function UTF16ToString(ptr) {
 var i = 0;
 var str = "";
 while (1) {
  var codeUnit = HEAP16[ptr + i * 2 >> 1];
  if (codeUnit == 0) return str;
  ++i;
  str += String.fromCharCode(codeUnit);
 }
}
Module["UTF16ToString"] = UTF16ToString;
function stringToUTF16(str, outPtr) {
 for (var i = 0; i < str.length; ++i) {
  var codeUnit = str.charCodeAt(i);
  HEAP16[outPtr + i * 2 >> 1] = codeUnit;
 }
 HEAP16[outPtr + str.length * 2 >> 1] = 0;
}
Module["stringToUTF16"] = stringToUTF16;
function UTF32ToString(ptr) {
 var i = 0;
 var str = "";
 while (1) {
  var utf32 = HEAP32[ptr + i * 4 >> 2];
  if (utf32 == 0) return str;
  ++i;
  if (utf32 >= 65536) {
   var ch = utf32 - 65536;
   str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
  } else {
   str += String.fromCharCode(utf32);
  }
 }
}
Module["UTF32ToString"] = UTF32ToString;
function stringToUTF32(str, outPtr) {
 var iChar = 0;
 for (var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
  var codeUnit = str.charCodeAt(iCodeUnit);
  if (codeUnit >= 55296 && codeUnit <= 57343) {
   var trailSurrogate = str.charCodeAt(++iCodeUnit);
   codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;
  }
  HEAP32[outPtr + iChar * 4 >> 2] = codeUnit;
  ++iChar;
 }
 HEAP32[outPtr + iChar * 4 >> 2] = 0;
}
Module["stringToUTF32"] = stringToUTF32;
function demangle(func) {
 var i = 3;
 var basicTypes = {
  "v": "void",
  "b": "bool",
  "c": "char",
  "s": "short",
  "i": "int",
  "l": "long",
  "f": "float",
  "d": "double",
  "w": "wchar_t",
  "a": "signed char",
  "h": "unsigned char",
  "t": "unsigned short",
  "j": "unsigned int",
  "m": "unsigned long",
  "x": "long long",
  "y": "unsigned long long",
  "z": "..."
 };
 var subs = [];
 var first = true;
 function dump(x) {
  if (x) Module.print(x);
  Module.print(func);
  var pre = "";
  for (var a = 0; a < i; a++) pre += " ";
  Module.print(pre + "^");
 }
 function parseNested() {
  i++;
  if (func[i] === "K") i++;
  var parts = [];
  while (func[i] !== "E") {
   if (func[i] === "S") {
    i++;
    var next = func.indexOf("_", i);
    var num = func.substring(i, next) || 0;
    parts.push(subs[num] || "?");
    i = next + 1;
    continue;
   }
   if (func[i] === "C") {
    parts.push(parts[parts.length - 1]);
    i += 2;
    continue;
   }
   var size = parseInt(func.substr(i));
   var pre = size.toString().length;
   if (!size || !pre) {
    i--;
    break;
   }
   var curr = func.substr(i + pre, size);
   parts.push(curr);
   subs.push(curr);
   i += pre + size;
  }
  i++;
  return parts;
 }
 function parse(rawList, limit, allowVoid) {
  limit = limit || Infinity;
  var ret = "", list = [];
  function flushList() {
   return "(" + list.join(", ") + ")";
  }
  var name;
  if (func[i] === "N") {
   name = parseNested().join("::");
   limit--;
   if (limit === 0) return rawList ? [ name ] : name;
  } else {
   if (func[i] === "K" || first && func[i] === "L") i++;
   var size = parseInt(func.substr(i));
   if (size) {
    var pre = size.toString().length;
    name = func.substr(i + pre, size);
    i += pre + size;
   }
  }
  first = false;
  if (func[i] === "I") {
   i++;
   var iList = parse(true);
   var iRet = parse(true, 1, true);
   ret += iRet[0] + " " + name + "<" + iList.join(", ") + ">";
  } else {
   ret = name;
  }
  paramLoop : while (i < func.length && limit-- > 0) {
   var c = func[i++];
   if (c in basicTypes) {
    list.push(basicTypes[c]);
   } else {
    switch (c) {
    case "P":
     list.push(parse(true, 1, true)[0] + "*");
     break;
    case "R":
     list.push(parse(true, 1, true)[0] + "&");
     break;
    case "L":
     {
      i++;
      var end = func.indexOf("E", i);
      var size = end - i;
      list.push(func.substr(i, size));
      i += size + 2;
      break;
     }
    case "A":
     {
      var size = parseInt(func.substr(i));
      i += size.toString().length;
      if (func[i] !== "_") throw "?";
      i++;
      list.push(parse(true, 1, true)[0] + " [" + size + "]");
      break;
     }
    case "E":
     break paramLoop;
    default:
     ret += "?" + c;
     break paramLoop;
    }
   }
  }
  if (!allowVoid && list.length === 1 && list[0] === "void") list = [];
  if (rawList) {
   if (ret) {
    list.push(ret + "?");
   }
   return list;
  } else {
   return ret + flushList();
  }
 }
 try {
  if (func == "Object._main" || func == "_main") {
   return "main()";
  }
  if (typeof func === "number") func = Pointer_stringify(func);
  if (func[0] !== "_") return func;
  if (func[1] !== "_") return func;
  if (func[2] !== "Z") return func;
  switch (func[3]) {
  case "n":
   return "operator new()";
  case "d":
   return "operator delete()";
  }
  return parse();
 } catch (e) {
  return func;
 }
}
function demangleAll(text) {
 return text.replace(/__Z[\w\d_]+/g, (function(x) {
  var y = demangle(x);
  return x === y ? x : x + " [" + y + "]";
 }));
}
function stackTrace() {
 var stack = (new Error).stack;
 return stack ? demangleAll(stack) : "(no stack trace available)";
}
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
 return x + 4095 & -4096;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false;
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0;
var DYNAMIC_BASE = 0, DYNAMICTOP = 0;
function enlargeMemory() {
 abort("Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value " + TOTAL_MEMORY + ", (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.");
}
var TOTAL_STACK = Module["TOTAL_STACK"] || 5242880;
var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 16777216;
var FAST_MEMORY = Module["FAST_MEMORY"] || 2097152;
var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2 * TOTAL_STACK) {
 if (totalMemory < 16 * 1024 * 1024) {
  totalMemory *= 2;
 } else {
  totalMemory += 16 * 1024 * 1024;
 }
}
if (totalMemory !== TOTAL_MEMORY) {
 Module.printErr("increasing TOTAL_MEMORY to " + totalMemory + " to be more reasonable");
 TOTAL_MEMORY = totalMemory;
}
assert(typeof Int32Array !== "undefined" && typeof Float64Array !== "undefined" && !!(new Int32Array(1))["subarray"] && !!(new Int32Array(1))["set"], "JS engine does not provide full typed array support");
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, "Typed arrays 2 must be run on a little-endian system");
Module["HEAP"] = HEAP;
Module["HEAP8"] = HEAP8;
Module["HEAP16"] = HEAP16;
Module["HEAP32"] = HEAP32;
Module["HEAPU8"] = HEAPU8;
Module["HEAPU16"] = HEAPU16;
Module["HEAPU32"] = HEAPU32;
Module["HEAPF32"] = HEAPF32;
Module["HEAPF64"] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
 while (callbacks.length > 0) {
  var callback = callbacks.shift();
  if (typeof callback == "function") {
   callback();
   continue;
  }
  var func = callback.func;
  if (typeof func === "number") {
   if (callback.arg === undefined) {
    Runtime.dynCall("v", func);
   } else {
    Runtime.dynCall("vi", func, [ callback.arg ]);
   }
  } else {
   func(callback.arg === undefined ? null : callback.arg);
  }
 }
}
var __ATPRERUN__ = [];
var __ATINIT__ = [];
var __ATMAIN__ = [];
var __ATEXIT__ = [];
var __ATPOSTRUN__ = [];
var runtimeInitialized = false;
var runtimeExited = false;
function preRun() {
 if (Module["preRun"]) {
  if (typeof Module["preRun"] == "function") Module["preRun"] = [ Module["preRun"] ];
  while (Module["preRun"].length) {
   addOnPreRun(Module["preRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
 if (runtimeInitialized) return;
 runtimeInitialized = true;
 callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
 callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
 callRuntimeCallbacks(__ATEXIT__);
 runtimeExited = true;
}
function postRun() {
 if (Module["postRun"]) {
  if (typeof Module["postRun"] == "function") Module["postRun"] = [ Module["postRun"] ];
  while (Module["postRun"].length) {
   addOnPostRun(Module["postRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
 __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = Module.addOnPreRun = addOnPreRun;
function addOnInit(cb) {
 __ATINIT__.unshift(cb);
}
Module["addOnInit"] = Module.addOnInit = addOnInit;
function addOnPreMain(cb) {
 __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = Module.addOnPreMain = addOnPreMain;
function addOnExit(cb) {
 __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = Module.addOnExit = addOnExit;
function addOnPostRun(cb) {
 __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = Module.addOnPostRun = addOnPostRun;
function intArrayFromString(stringy, dontAddNull, length) {
 var ret = (new Runtime.UTF8Processor).processJSString(stringy);
 if (length) {
  ret.length = length;
 }
 if (!dontAddNull) {
  ret.push(0);
 }
 return ret;
}
Module["intArrayFromString"] = intArrayFromString;
function intArrayToString(array) {
 var ret = [];
 for (var i = 0; i < array.length; i++) {
  var chr = array[i];
  if (chr > 255) {
   chr &= 255;
  }
  ret.push(String.fromCharCode(chr));
 }
 return ret.join("");
}
Module["intArrayToString"] = intArrayToString;
function writeStringToMemory(string, buffer, dontAddNull) {
 var array = intArrayFromString(string, dontAddNull);
 var i = 0;
 while (i < array.length) {
  var chr = array[i];
  HEAP8[buffer + i >> 0] = chr;
  i = i + 1;
 }
}
Module["writeStringToMemory"] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
 for (var i = 0; i < array.length; i++) {
  HEAP8[buffer + i >> 0] = array[i];
 }
}
Module["writeArrayToMemory"] = writeArrayToMemory;
function writeAsciiToMemory(str, buffer, dontAddNull) {
 for (var i = 0; i < str.length; i++) {
  HEAP8[buffer + i >> 0] = str.charCodeAt(i);
 }
 if (!dontAddNull) HEAP8[buffer + str.length >> 0] = 0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;
function unSign(value, bits, ignore) {
 if (value >= 0) {
  return value;
 }
 return bits <= 32 ? 2 * Math.abs(1 << bits - 1) + value : Math.pow(2, bits) + value;
}
function reSign(value, bits, ignore) {
 if (value <= 0) {
  return value;
 }
 var half = bits <= 32 ? Math.abs(1 << bits - 1) : Math.pow(2, bits - 1);
 if (value >= half && (bits <= 32 || value > half)) {
  value = -2 * half + value;
 }
 return value;
}
if (!Math["imul"] || Math["imul"](4294967295, 5) !== -5) Math["imul"] = function imul(a, b) {
 var ah = a >>> 16;
 var al = a & 65535;
 var bh = b >>> 16;
 var bl = b & 65535;
 return al * bl + (ah * bl + al * bh << 16) | 0;
};
Math.imul = Math["imul"];
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null;
function addRunDependency(id) {
 runDependencies++;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
}
Module["addRunDependency"] = addRunDependency;
function removeRunDependency(id) {
 runDependencies--;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
 if (runDependencies == 0) {
  if (runDependencyWatcher !== null) {
   clearInterval(runDependencyWatcher);
   runDependencyWatcher = null;
  }
  if (dependenciesFulfilled) {
   var callback = dependenciesFulfilled;
   dependenciesFulfilled = null;
   callback();
  }
 }
}
Module["removeRunDependency"] = removeRunDependency;
Module["preloadedImages"] = {};
Module["preloadedAudios"] = {};
var memoryInitializer = null;
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + Runtime.alignMemory(558955);
__ATINIT__.push();
var memoryInitializer = "bb.js.mem";
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) {
 HEAP8[tempDoublePtr] = HEAP8[ptr];
 HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];
 HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];
 HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];
}
function copyTempDouble(ptr) {
 HEAP8[tempDoublePtr] = HEAP8[ptr];
 HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];
 HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];
 HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];
 HEAP8[tempDoublePtr + 4] = HEAP8[ptr + 4];
 HEAP8[tempDoublePtr + 5] = HEAP8[ptr + 5];
 HEAP8[tempDoublePtr + 6] = HEAP8[ptr + 6];
 HEAP8[tempDoublePtr + 7] = HEAP8[ptr + 7];
}
Module["_rand_r"] = _rand_r;
var ___rand_seed = allocate([ 41108891, 0, 0, 0 ], "i32", ALLOC_STATIC);
Module["_rand"] = _rand;
var aaweb = {
 canvas_node: null,
 ctx: null,
 cols: 80,
 rows: 25,
 x: 0,
 y: 0,
 attr: 0,
 font: "Source Code Pro",
 font_size: 12,
 font_str: "",
 bold_font_str: "",
 fg_color: "#fff",
 bg_color: "#000",
 dim_color: "#777",
 MASK_NORMAL: 1,
 MASK_DIM: 2,
 MASK_BOLD: 4,
 MASK_BOLDFONT: 8,
 MASK_REVERSE: 16
};
function _aaweb_init() {
 var font_test_node = document.getElementById("aa-font-test");
 font_test_node.style.font = aaweb.font_size + 'px "' + aaweb.font + '"';
 font_test_node.innerHTML = "m";
 var devicePixelRatio = window.devicePixelRatio;
 aaweb.char_height = Math.max(1, font_test_node.clientHeight * devicePixelRatio);
 aaweb.char_width = Math.max(1, font_test_node.clientWidth * devicePixelRatio);
 var canvas_node = aaweb.canvas_node = document.getElementById("aa-canvas");
 canvas_node.width = aaweb.cols * aaweb.char_width;
 canvas_node.height = aaweb.rows * aaweb.char_height;
 canvas_node.style.width = canvas_node.width / devicePixelRatio + canvas_node.offsetWidth - canvas_node.clientWidth + "px";
 canvas_node.style.height = canvas_node.height / devicePixelRatio + canvas_node.offsetHeight - canvas_node.clientHeight + "px";
 var ctx = aaweb.ctx = canvas_node.getContext("2d");
 aaweb.font_str = aaweb.font_size * devicePixelRatio + 'px "' + aaweb.font + '"';
 aaweb.bold_font_str = "bold " + aaweb.font_str;
 ctx.textBaseline = "bottom";
}
Module["_i64Subtract"] = _i64Subtract;
var ___errno_state = 0;
function ___setErrNo(value) {
 HEAP32[___errno_state >> 2] = value;
 return value;
}
var ERRNO_CODES = {
 EPERM: 1,
 ENOENT: 2,
 ESRCH: 3,
 EINTR: 4,
 EIO: 5,
 ENXIO: 6,
 E2BIG: 7,
 ENOEXEC: 8,
 EBADF: 9,
 ECHILD: 10,
 EAGAIN: 11,
 EWOULDBLOCK: 11,
 ENOMEM: 12,
 EACCES: 13,
 EFAULT: 14,
 ENOTBLK: 15,
 EBUSY: 16,
 EEXIST: 17,
 EXDEV: 18,
 ENODEV: 19,
 ENOTDIR: 20,
 EISDIR: 21,
 EINVAL: 22,
 ENFILE: 23,
 EMFILE: 24,
 ENOTTY: 25,
 ETXTBSY: 26,
 EFBIG: 27,
 ENOSPC: 28,
 ESPIPE: 29,
 EROFS: 30,
 EMLINK: 31,
 EPIPE: 32,
 EDOM: 33,
 ERANGE: 34,
 ENOMSG: 42,
 EIDRM: 43,
 ECHRNG: 44,
 EL2NSYNC: 45,
 EL3HLT: 46,
 EL3RST: 47,
 ELNRNG: 48,
 EUNATCH: 49,
 ENOCSI: 50,
 EL2HLT: 51,
 EDEADLK: 35,
 ENOLCK: 37,
 EBADE: 52,
 EBADR: 53,
 EXFULL: 54,
 ENOANO: 55,
 EBADRQC: 56,
 EBADSLT: 57,
 EDEADLOCK: 35,
 EBFONT: 59,
 ENOSTR: 60,
 ENODATA: 61,
 ETIME: 62,
 ENOSR: 63,
 ENONET: 64,
 ENOPKG: 65,
 EREMOTE: 66,
 ENOLINK: 67,
 EADV: 68,
 ESRMNT: 69,
 ECOMM: 70,
 EPROTO: 71,
 EMULTIHOP: 72,
 EDOTDOT: 73,
 EBADMSG: 74,
 ENOTUNIQ: 76,
 EBADFD: 77,
 EREMCHG: 78,
 ELIBACC: 79,
 ELIBBAD: 80,
 ELIBSCN: 81,
 ELIBMAX: 82,
 ELIBEXEC: 83,
 ENOSYS: 38,
 ENOTEMPTY: 39,
 ENAMETOOLONG: 36,
 ELOOP: 40,
 EOPNOTSUPP: 95,
 EPFNOSUPPORT: 96,
 ECONNRESET: 104,
 ENOBUFS: 105,
 EAFNOSUPPORT: 97,
 EPROTOTYPE: 91,
 ENOTSOCK: 88,
 ENOPROTOOPT: 92,
 ESHUTDOWN: 108,
 ECONNREFUSED: 111,
 EADDRINUSE: 98,
 ECONNABORTED: 103,
 ENETUNREACH: 101,
 ENETDOWN: 100,
 ETIMEDOUT: 110,
 EHOSTDOWN: 112,
 EHOSTUNREACH: 113,
 EINPROGRESS: 115,
 EALREADY: 114,
 EDESTADDRREQ: 89,
 EMSGSIZE: 90,
 EPROTONOSUPPORT: 93,
 ESOCKTNOSUPPORT: 94,
 EADDRNOTAVAIL: 99,
 ENETRESET: 102,
 EISCONN: 106,
 ENOTCONN: 107,
 ETOOMANYREFS: 109,
 EUSERS: 87,
 EDQUOT: 122,
 ESTALE: 116,
 ENOTSUP: 95,
 ENOMEDIUM: 123,
 EILSEQ: 84,
 EOVERFLOW: 75,
 ECANCELED: 125,
 ENOTRECOVERABLE: 131,
 EOWNERDEAD: 130,
 ESTRPIPE: 86
};
function _sysconf(name) {
 switch (name) {
 case 30:
  return PAGE_SIZE;
 case 132:
 case 133:
 case 12:
 case 137:
 case 138:
 case 15:
 case 235:
 case 16:
 case 17:
 case 18:
 case 19:
 case 20:
 case 149:
 case 13:
 case 10:
 case 236:
 case 153:
 case 9:
 case 21:
 case 22:
 case 159:
 case 154:
 case 14:
 case 77:
 case 78:
 case 139:
 case 80:
 case 81:
 case 79:
 case 82:
 case 68:
 case 67:
 case 164:
 case 11:
 case 29:
 case 47:
 case 48:
 case 95:
 case 52:
 case 51:
 case 46:
  return 200809;
 case 27:
 case 246:
 case 127:
 case 128:
 case 23:
 case 24:
 case 160:
 case 161:
 case 181:
 case 182:
 case 242:
 case 183:
 case 184:
 case 243:
 case 244:
 case 245:
 case 165:
 case 178:
 case 179:
 case 49:
 case 50:
 case 168:
 case 169:
 case 175:
 case 170:
 case 171:
 case 172:
 case 97:
 case 76:
 case 32:
 case 173:
 case 35:
  return -1;
 case 176:
 case 177:
 case 7:
 case 155:
 case 8:
 case 157:
 case 125:
 case 126:
 case 92:
 case 93:
 case 129:
 case 130:
 case 131:
 case 94:
 case 91:
  return 1;
 case 74:
 case 60:
 case 69:
 case 70:
 case 4:
  return 1024;
 case 31:
 case 42:
 case 72:
  return 32;
 case 87:
 case 26:
 case 33:
  return 2147483647;
 case 34:
 case 1:
  return 47839;
 case 38:
 case 36:
  return 99;
 case 43:
 case 37:
  return 2048;
 case 0:
  return 2097152;
 case 3:
  return 65536;
 case 28:
  return 32768;
 case 44:
  return 32767;
 case 75:
  return 16384;
 case 39:
  return 1e3;
 case 89:
  return 700;
 case 71:
  return 256;
 case 40:
  return 255;
 case 2:
  return 100;
 case 180:
  return 64;
 case 25:
  return 20;
 case 5:
  return 16;
 case 6:
  return 6;
 case 73:
  return 4;
 case 84:
  {
   if (typeof navigator === "object") return navigator["hardwareConcurrency"] || 1;
   return 1;
  }
 }
 ___setErrNo(ERRNO_CODES.EINVAL);
 return -1;
}
function _aaweb_gotoxy(x, y) {
 aaweb.x = x;
 aaweb.y = y;
}
function _srand(seed) {
 HEAP32[___rand_seed >> 2] = seed;
}
var _BDtoILow = true;
var ERRNO_MESSAGES = {
 0: "Success",
 1: "Not super-user",
 2: "No such file or directory",
 3: "No such process",
 4: "Interrupted system call",
 5: "I/O error",
 6: "No such device or address",
 7: "Arg list too long",
 8: "Exec format error",
 9: "Bad file number",
 10: "No children",
 11: "No more processes",
 12: "Not enough core",
 13: "Permission denied",
 14: "Bad address",
 15: "Block device required",
 16: "Mount device busy",
 17: "File exists",
 18: "Cross-device link",
 19: "No such device",
 20: "Not a directory",
 21: "Is a directory",
 22: "Invalid argument",
 23: "Too many open files in system",
 24: "Too many open files",
 25: "Not a typewriter",
 26: "Text file busy",
 27: "File too large",
 28: "No space left on device",
 29: "Illegal seek",
 30: "Read only file system",
 31: "Too many links",
 32: "Broken pipe",
 33: "Math arg out of domain of func",
 34: "Math result not representable",
 35: "File locking deadlock error",
 36: "File or path name too long",
 37: "No record locks available",
 38: "Function not implemented",
 39: "Directory not empty",
 40: "Too many symbolic links",
 42: "No message of desired type",
 43: "Identifier removed",
 44: "Channel number out of range",
 45: "Level 2 not synchronized",
 46: "Level 3 halted",
 47: "Level 3 reset",
 48: "Link number out of range",
 49: "Protocol driver not attached",
 50: "No CSI structure available",
 51: "Level 2 halted",
 52: "Invalid exchange",
 53: "Invalid request descriptor",
 54: "Exchange full",
 55: "No anode",
 56: "Invalid request code",
 57: "Invalid slot",
 59: "Bad font file fmt",
 60: "Device not a stream",
 61: "No data (for no delay io)",
 62: "Timer expired",
 63: "Out of streams resources",
 64: "Machine is not on the network",
 65: "Package not installed",
 66: "The object is remote",
 67: "The link has been severed",
 68: "Advertise error",
 69: "Srmount error",
 70: "Communication error on send",
 71: "Protocol error",
 72: "Multihop attempted",
 73: "Cross mount point (not really error)",
 74: "Trying to read unreadable message",
 75: "Value too large for defined data type",
 76: "Given log. name not unique",
 77: "f.d. invalid for this operation",
 78: "Remote address changed",
 79: "Can   access a needed shared lib",
 80: "Accessing a corrupted shared lib",
 81: ".lib section in a.out corrupted",
 82: "Attempting to link in too many libs",
 83: "Attempting to exec a shared library",
 84: "Illegal byte sequence",
 86: "Streams pipe error",
 87: "Too many users",
 88: "Socket operation on non-socket",
 89: "Destination address required",
 90: "Message too long",
 91: "Protocol wrong type for socket",
 92: "Protocol not available",
 93: "Unknown protocol",
 94: "Socket type not supported",
 95: "Not supported",
 96: "Protocol family not supported",
 97: "Address family not supported by protocol family",
 98: "Address already in use",
 99: "Address not available",
 100: "Network interface is not configured",
 101: "Network is unreachable",
 102: "Connection reset by network",
 103: "Connection aborted",
 104: "Connection reset by peer",
 105: "No buffer space available",
 106: "Socket is already connected",
 107: "Socket is not connected",
 108: "Can't send after socket shutdown",
 109: "Too many references",
 110: "Connection timed out",
 111: "Connection refused",
 112: "Host is down",
 113: "Host is unreachable",
 114: "Socket already connected",
 115: "Connection already in progress",
 116: "Stale file handle",
 122: "Quota exceeded",
 123: "No medium (in tape drive)",
 125: "Operation canceled",
 130: "Previous owner died",
 131: "State not recoverable"
};
function _strerror_r(errnum, strerrbuf, buflen) {
 if (errnum in ERRNO_MESSAGES) {
  if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
   return ___setErrNo(ERRNO_CODES.ERANGE);
  } else {
   var msg = ERRNO_MESSAGES[errnum];
   writeAsciiToMemory(msg, strerrbuf);
   return 0;
  }
 } else {
  return ___setErrNo(ERRNO_CODES.EINVAL);
 }
}
function _malloc(bytes) {
 var ptr = Runtime.dynamicAlloc(bytes + 8);
 return ptr + 8 & 4294967288;
}
Module["_malloc"] = _malloc;
function _strerror(errnum) {
 if (!_strerror.buffer) _strerror.buffer = _malloc(256);
 _strerror_r(errnum, _strerror.buffer, 256);
 return _strerror.buffer;
}
Module["_bitshift64Shl"] = _bitshift64Shl;
function _abort() {
 Module["abort"]();
}
var ___async = 0;
var ___async_unwind = 1;
var ___async_cur_frame = 0;
var ___async_stacktop = allocate(5 * 1024 * 1024, "i32", ALLOC_STATIC);
Module["_emscripten_async_stack_restore"] = _emscripten_async_stack_restore;
Module["_emscripten_async_resume"] = _emscripten_async_resume;
function _emscripten_sleep(ms) {
 Module["noExitRuntime"] = true;
 asm["setAsync"]();
 setTimeout(_emscripten_async_resume, ms);
}
var PATH = {
 splitPath: (function(filename) {
  var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
  return splitPathRe.exec(filename).slice(1);
 }),
 normalizeArray: (function(parts, allowAboveRoot) {
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
   var last = parts[i];
   if (last === ".") {
    parts.splice(i, 1);
   } else if (last === "..") {
    parts.splice(i, 1);
    up++;
   } else if (up) {
    parts.splice(i, 1);
    up--;
   }
  }
  if (allowAboveRoot) {
   for (; up--; up) {
    parts.unshift("..");
   }
  }
  return parts;
 }),
 normalize: (function(path) {
  var isAbsolute = path.charAt(0) === "/", trailingSlash = path.substr(-1) === "/";
  path = PATH.normalizeArray(path.split("/").filter((function(p) {
   return !!p;
  })), !isAbsolute).join("/");
  if (!path && !isAbsolute) {
   path = ".";
  }
  if (path && trailingSlash) {
   path += "/";
  }
  return (isAbsolute ? "/" : "") + path;
 }),
 dirname: (function(path) {
  var result = PATH.splitPath(path), root = result[0], dir = result[1];
  if (!root && !dir) {
   return ".";
  }
  if (dir) {
   dir = dir.substr(0, dir.length - 1);
  }
  return root + dir;
 }),
 basename: (function(path) {
  if (path === "/") return "/";
  var lastSlash = path.lastIndexOf("/");
  if (lastSlash === -1) return path;
  return path.substr(lastSlash + 1);
 }),
 extname: (function(path) {
  return PATH.splitPath(path)[3];
 }),
 join: (function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return PATH.normalize(paths.join("/"));
 }),
 join2: (function(l, r) {
  return PATH.normalize(l + "/" + r);
 }),
 resolve: (function() {
  var resolvedPath = "", resolvedAbsolute = false;
  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
   var path = i >= 0 ? arguments[i] : FS.cwd();
   if (typeof path !== "string") {
    throw new TypeError("Arguments to path.resolve must be strings");
   } else if (!path) {
    continue;
   }
   resolvedPath = path + "/" + resolvedPath;
   resolvedAbsolute = path.charAt(0) === "/";
  }
  resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter((function(p) {
   return !!p;
  })), !resolvedAbsolute).join("/");
  return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
 }),
 relative: (function(from, to) {
  from = PATH.resolve(from).substr(1);
  to = PATH.resolve(to).substr(1);
  function trim(arr) {
   var start = 0;
   for (; start < arr.length; start++) {
    if (arr[start] !== "") break;
   }
   var end = arr.length - 1;
   for (; end >= 0; end--) {
    if (arr[end] !== "") break;
   }
   if (start > end) return [];
   return arr.slice(start, end - start + 1);
  }
  var fromParts = trim(from.split("/"));
  var toParts = trim(to.split("/"));
  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
   if (fromParts[i] !== toParts[i]) {
    samePartsLength = i;
    break;
   }
  }
  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
   outputParts.push("..");
  }
  outputParts = outputParts.concat(toParts.slice(samePartsLength));
  return outputParts.join("/");
 })
};
var TTY = {
 ttys: [],
 init: (function() {}),
 shutdown: (function() {}),
 register: (function(dev, ops) {
  TTY.ttys[dev] = {
   input: [],
   output: [],
   ops: ops
  };
  FS.registerDevice(dev, TTY.stream_ops);
 }),
 stream_ops: {
  open: (function(stream) {
   var tty = TTY.ttys[stream.node.rdev];
   if (!tty) {
    throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
   }
   stream.tty = tty;
   stream.seekable = false;
  }),
  close: (function(stream) {
   if (stream.tty.output.length) {
    stream.tty.ops.put_char(stream.tty, 10);
   }
  }),
  read: (function(stream, buffer, offset, length, pos) {
   if (!stream.tty || !stream.tty.ops.get_char) {
    throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
   }
   var bytesRead = 0;
   for (var i = 0; i < length; i++) {
    var result;
    try {
     result = stream.tty.ops.get_char(stream.tty);
    } catch (e) {
     throw new FS.ErrnoError(ERRNO_CODES.EIO);
    }
    if (result === undefined && bytesRead === 0) {
     throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
    }
    if (result === null || result === undefined) break;
    bytesRead++;
    buffer[offset + i] = result;
   }
   if (bytesRead) {
    stream.node.timestamp = Date.now();
   }
   return bytesRead;
  }),
  write: (function(stream, buffer, offset, length, pos) {
   if (!stream.tty || !stream.tty.ops.put_char) {
    throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
   }
   for (var i = 0; i < length; i++) {
    try {
     stream.tty.ops.put_char(stream.tty, buffer[offset + i]);
    } catch (e) {
     throw new FS.ErrnoError(ERRNO_CODES.EIO);
    }
   }
   if (length) {
    stream.node.timestamp = Date.now();
   }
   return i;
  })
 },
 default_tty_ops: {
  get_char: (function(tty) {
   if (!tty.input.length) {
    var result = null;
    if (ENVIRONMENT_IS_NODE) {
     result = process["stdin"]["read"]();
     if (!result) {
      if (process["stdin"]["_readableState"] && process["stdin"]["_readableState"]["ended"]) {
       return null;
      }
      return undefined;
     }
    } else if (typeof window != "undefined" && typeof window.prompt == "function") {
     result = window.prompt("Input: ");
     if (result !== null) {
      result += "\n";
     }
    } else if (typeof readline == "function") {
     result = readline();
     if (result !== null) {
      result += "\n";
     }
    }
    if (!result) {
     return null;
    }
    tty.input = intArrayFromString(result, true);
   }
   return tty.input.shift();
  }),
  put_char: (function(tty, val) {
   if (val === null || val === 10) {
    Module["print"](tty.output.join(""));
    tty.output = [];
   } else {
    tty.output.push(TTY.utf8.processCChar(val));
   }
  })
 },
 default_tty1_ops: {
  put_char: (function(tty, val) {
   if (val === null || val === 10) {
    Module["printErr"](tty.output.join(""));
    tty.output = [];
   } else {
    tty.output.push(TTY.utf8.processCChar(val));
   }
  })
 }
};
var MEMFS = {
 ops_table: null,
 mount: (function(mount) {
  return MEMFS.createNode(null, "/", 16384 | 511, 0);
 }),
 createNode: (function(parent, name, mode, dev) {
  if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (!MEMFS.ops_table) {
   MEMFS.ops_table = {
    dir: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr,
      lookup: MEMFS.node_ops.lookup,
      mknod: MEMFS.node_ops.mknod,
      rename: MEMFS.node_ops.rename,
      unlink: MEMFS.node_ops.unlink,
      rmdir: MEMFS.node_ops.rmdir,
      readdir: MEMFS.node_ops.readdir,
      symlink: MEMFS.node_ops.symlink
     },
     stream: {
      llseek: MEMFS.stream_ops.llseek
     }
    },
    file: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr
     },
     stream: {
      llseek: MEMFS.stream_ops.llseek,
      read: MEMFS.stream_ops.read,
      write: MEMFS.stream_ops.write,
      allocate: MEMFS.stream_ops.allocate,
      mmap: MEMFS.stream_ops.mmap
     }
    },
    link: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr,
      readlink: MEMFS.node_ops.readlink
     },
     stream: {}
    },
    chrdev: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr
     },
     stream: FS.chrdev_stream_ops
    }
   };
  }
  var node = FS.createNode(parent, name, mode, dev);
  if (FS.isDir(node.mode)) {
   node.node_ops = MEMFS.ops_table.dir.node;
   node.stream_ops = MEMFS.ops_table.dir.stream;
   node.contents = {};
  } else if (FS.isFile(node.mode)) {
   node.node_ops = MEMFS.ops_table.file.node;
   node.stream_ops = MEMFS.ops_table.file.stream;
   node.usedBytes = 0;
   node.contents = null;
  } else if (FS.isLink(node.mode)) {
   node.node_ops = MEMFS.ops_table.link.node;
   node.stream_ops = MEMFS.ops_table.link.stream;
  } else if (FS.isChrdev(node.mode)) {
   node.node_ops = MEMFS.ops_table.chrdev.node;
   node.stream_ops = MEMFS.ops_table.chrdev.stream;
  }
  node.timestamp = Date.now();
  if (parent) {
   parent.contents[name] = node;
  }
  return node;
 }),
 getFileDataAsRegularArray: (function(node) {
  if (node.contents && node.contents.subarray) {
   var arr = [];
   for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
   return arr;
  }
  return node.contents;
 }),
 getFileDataAsTypedArray: (function(node) {
  if (node.contents && node.contents.subarray) return node.contents.subarray(0, node.usedBytes);
  return new Uint8Array(node.contents);
 }),
 expandFileStorage: (function(node, newCapacity) {
  if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
   node.contents = MEMFS.getFileDataAsRegularArray(node);
   node.usedBytes = node.contents.length;
  }
  if (!node.contents || node.contents.subarray) {
   var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
   if (prevCapacity >= newCapacity) return;
   var CAPACITY_DOUBLING_MAX = 1024 * 1024;
   newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) | 0);
   if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);
   var oldContents = node.contents;
   node.contents = new Uint8Array(newCapacity);
   if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
   return;
  }
  if (!node.contents && newCapacity > 0) node.contents = [];
  while (node.contents.length < newCapacity) node.contents.push(0);
 }),
 resizeFileStorage: (function(node, newSize) {
  if (node.usedBytes == newSize) return;
  if (newSize == 0) {
   node.contents = null;
   node.usedBytes = 0;
   return;
  }
  if (!node.contents || node.contents.subarray) {
   var oldContents = node.contents;
   node.contents = new Uint8Array(new ArrayBuffer(newSize));
   node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
   node.usedBytes = newSize;
   return;
  }
  if (!node.contents) node.contents = [];
  if (node.contents.length > newSize) node.contents.length = newSize; else while (node.contents.length < newSize) node.contents.push(0);
  node.usedBytes = newSize;
 }),
 node_ops: {
  getattr: (function(node) {
   var attr = {};
   attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
   attr.ino = node.id;
   attr.mode = node.mode;
   attr.nlink = 1;
   attr.uid = 0;
   attr.gid = 0;
   attr.rdev = node.rdev;
   if (FS.isDir(node.mode)) {
    attr.size = 4096;
   } else if (FS.isFile(node.mode)) {
    attr.size = node.usedBytes;
   } else if (FS.isLink(node.mode)) {
    attr.size = node.link.length;
   } else {
    attr.size = 0;
   }
   attr.atime = new Date(node.timestamp);
   attr.mtime = new Date(node.timestamp);
   attr.ctime = new Date(node.timestamp);
   attr.blksize = 4096;
   attr.blocks = Math.ceil(attr.size / attr.blksize);
   return attr;
  }),
  setattr: (function(node, attr) {
   if (attr.mode !== undefined) {
    node.mode = attr.mode;
   }
   if (attr.timestamp !== undefined) {
    node.timestamp = attr.timestamp;
   }
   if (attr.size !== undefined) {
    MEMFS.resizeFileStorage(node, attr.size);
   }
  }),
  lookup: (function(parent, name) {
   throw FS.genericErrors[ERRNO_CODES.ENOENT];
  }),
  mknod: (function(parent, name, mode, dev) {
   return MEMFS.createNode(parent, name, mode, dev);
  }),
  rename: (function(old_node, new_dir, new_name) {
   if (FS.isDir(old_node.mode)) {
    var new_node;
    try {
     new_node = FS.lookupNode(new_dir, new_name);
    } catch (e) {}
    if (new_node) {
     for (var i in new_node.contents) {
      throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
     }
    }
   }
   delete old_node.parent.contents[old_node.name];
   old_node.name = new_name;
   new_dir.contents[new_name] = old_node;
   old_node.parent = new_dir;
  }),
  unlink: (function(parent, name) {
   delete parent.contents[name];
  }),
  rmdir: (function(parent, name) {
   var node = FS.lookupNode(parent, name);
   for (var i in node.contents) {
    throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
   }
   delete parent.contents[name];
  }),
  readdir: (function(node) {
   var entries = [ ".", ".." ];
   for (var key in node.contents) {
    if (!node.contents.hasOwnProperty(key)) {
     continue;
    }
    entries.push(key);
   }
   return entries;
  }),
  symlink: (function(parent, newname, oldpath) {
   var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
   node.link = oldpath;
   return node;
  }),
  readlink: (function(node) {
   if (!FS.isLink(node.mode)) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   return node.link;
  })
 },
 stream_ops: {
  read: (function(stream, buffer, offset, length, position) {
   var contents = stream.node.contents;
   if (position >= stream.node.usedBytes) return 0;
   var size = Math.min(stream.node.usedBytes - position, length);
   assert(size >= 0);
   if (size > 8 && contents.subarray) {
    buffer.set(contents.subarray(position, position + size), offset);
   } else {
    for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
   }
   return size;
  }),
  write: (function(stream, buffer, offset, length, position, canOwn) {
   if (!length) return 0;
   var node = stream.node;
   node.timestamp = Date.now();
   if (buffer.subarray && (!node.contents || node.contents.subarray)) {
    if (canOwn) {
     node.contents = buffer.subarray(offset, offset + length);
     node.usedBytes = length;
     return length;
    } else if (node.usedBytes === 0 && position === 0) {
     node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
     node.usedBytes = length;
     return length;
    } else if (position + length <= node.usedBytes) {
     node.contents.set(buffer.subarray(offset, offset + length), position);
     return length;
    }
   }
   MEMFS.expandFileStorage(node, position + length);
   if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); else for (var i = 0; i < length; i++) {
    node.contents[position + i] = buffer[offset + i];
   }
   node.usedBytes = Math.max(node.usedBytes, position + length);
   return length;
  }),
  llseek: (function(stream, offset, whence) {
   var position = offset;
   if (whence === 1) {
    position += stream.position;
   } else if (whence === 2) {
    if (FS.isFile(stream.node.mode)) {
     position += stream.node.usedBytes;
    }
   }
   if (position < 0) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   stream.ungotten = [];
   stream.position = position;
   return position;
  }),
  allocate: (function(stream, offset, length) {
   MEMFS.expandFileStorage(stream.node, offset + length);
   stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
  }),
  mmap: (function(stream, buffer, offset, length, position, prot, flags) {
   if (!FS.isFile(stream.node.mode)) {
    throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
   }
   var ptr;
   var allocated;
   var contents = stream.node.contents;
   if (!(flags & 2) && (contents.buffer === buffer || contents.buffer === buffer.buffer)) {
    allocated = false;
    ptr = contents.byteOffset;
   } else {
    if (position > 0 || position + length < stream.node.usedBytes) {
     if (contents.subarray) {
      contents = contents.subarray(position, position + length);
     } else {
      contents = Array.prototype.slice.call(contents, position, position + length);
     }
    }
    allocated = true;
    ptr = _malloc(length);
    if (!ptr) {
     throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
    }
    buffer.set(contents, ptr);
   }
   return {
    ptr: ptr,
    allocated: allocated
   };
  })
 }
};
var IDBFS = {
 dbs: {},
 indexedDB: (function() {
  return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
 }),
 DB_VERSION: 21,
 DB_STORE_NAME: "FILE_DATA",
 mount: (function(mount) {
  return MEMFS.mount.apply(null, arguments);
 }),
 syncfs: (function(mount, populate, callback) {
  IDBFS.getLocalSet(mount, (function(err, local) {
   if (err) return callback(err);
   IDBFS.getRemoteSet(mount, (function(err, remote) {
    if (err) return callback(err);
    var src = populate ? remote : local;
    var dst = populate ? local : remote;
    IDBFS.reconcile(src, dst, callback);
   }));
  }));
 }),
 getDB: (function(name, callback) {
  var db = IDBFS.dbs[name];
  if (db) {
   return callback(null, db);
  }
  var req;
  try {
   req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
  } catch (e) {
   return callback(e);
  }
  req.onupgradeneeded = (function(e) {
   var db = e.target.result;
   var transaction = e.target.transaction;
   var fileStore;
   if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
    fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
   } else {
    fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
   }
   fileStore.createIndex("timestamp", "timestamp", {
    unique: false
   });
  });
  req.onsuccess = (function() {
   db = req.result;
   IDBFS.dbs[name] = db;
   callback(null, db);
  });
  req.onerror = (function() {
   callback(this.error);
  });
 }),
 getLocalSet: (function(mount, callback) {
  var entries = {};
  function isRealDir(p) {
   return p !== "." && p !== "..";
  }
  function toAbsolute(root) {
   return (function(p) {
    return PATH.join2(root, p);
   });
  }
  var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  while (check.length) {
   var path = check.pop();
   var stat;
   try {
    stat = FS.stat(path);
   } catch (e) {
    return callback(e);
   }
   if (FS.isDir(stat.mode)) {
    check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
   }
   entries[path] = {
    timestamp: stat.mtime
   };
  }
  return callback(null, {
   type: "local",
   entries: entries
  });
 }),
 getRemoteSet: (function(mount, callback) {
  var entries = {};
  IDBFS.getDB(mount.mountpoint, (function(err, db) {
   if (err) return callback(err);
   var transaction = db.transaction([ IDBFS.DB_STORE_NAME ], "readonly");
   transaction.onerror = (function() {
    callback(this.error);
   });
   var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
   var index = store.index("timestamp");
   index.openKeyCursor().onsuccess = (function(event) {
    var cursor = event.target.result;
    if (!cursor) {
     return callback(null, {
      type: "remote",
      db: db,
      entries: entries
     });
    }
    entries[cursor.primaryKey] = {
     timestamp: cursor.key
    };
    cursor.continue();
   });
  }));
 }),
 loadLocalEntry: (function(path, callback) {
  var stat, node;
  try {
   var lookup = FS.lookupPath(path);
   node = lookup.node;
   stat = FS.stat(path);
  } catch (e) {
   return callback(e);
  }
  if (FS.isDir(stat.mode)) {
   return callback(null, {
    timestamp: stat.mtime,
    mode: stat.mode
   });
  } else if (FS.isFile(stat.mode)) {
   node.contents = MEMFS.getFileDataAsTypedArray(node);
   return callback(null, {
    timestamp: stat.mtime,
    mode: stat.mode,
    contents: node.contents
   });
  } else {
   return callback(new Error("node type not supported"));
  }
 }),
 storeLocalEntry: (function(path, entry, callback) {
  try {
   if (FS.isDir(entry.mode)) {
    FS.mkdir(path, entry.mode);
   } else if (FS.isFile(entry.mode)) {
    FS.writeFile(path, entry.contents, {
     encoding: "binary",
     canOwn: true
    });
   } else {
    return callback(new Error("node type not supported"));
   }
   FS.utime(path, entry.timestamp, entry.timestamp);
  } catch (e) {
   return callback(e);
  }
  callback(null);
 }),
 removeLocalEntry: (function(path, callback) {
  try {
   var lookup = FS.lookupPath(path);
   var stat = FS.stat(path);
   if (FS.isDir(stat.mode)) {
    FS.rmdir(path);
   } else if (FS.isFile(stat.mode)) {
    FS.unlink(path);
   }
  } catch (e) {
   return callback(e);
  }
  callback(null);
 }),
 loadRemoteEntry: (function(store, path, callback) {
  var req = store.get(path);
  req.onsuccess = (function(event) {
   callback(null, event.target.result);
  });
  req.onerror = (function() {
   callback(this.error);
  });
 }),
 storeRemoteEntry: (function(store, path, entry, callback) {
  var req = store.put(entry, path);
  req.onsuccess = (function() {
   callback(null);
  });
  req.onerror = (function() {
   callback(this.error);
  });
 }),
 removeRemoteEntry: (function(store, path, callback) {
  var req = store.delete(path);
  req.onsuccess = (function() {
   callback(null);
  });
  req.onerror = (function() {
   callback(this.error);
  });
 }),
 reconcile: (function(src, dst, callback) {
  var total = 0;
  var create = [];
  Object.keys(src.entries).forEach((function(key) {
   var e = src.entries[key];
   var e2 = dst.entries[key];
   if (!e2 || e.timestamp > e2.timestamp) {
    create.push(key);
    total++;
   }
  }));
  var remove = [];
  Object.keys(dst.entries).forEach((function(key) {
   var e = dst.entries[key];
   var e2 = src.entries[key];
   if (!e2) {
    remove.push(key);
    total++;
   }
  }));
  if (!total) {
   return callback(null);
  }
  var errored = false;
  var completed = 0;
  var db = src.type === "remote" ? src.db : dst.db;
  var transaction = db.transaction([ IDBFS.DB_STORE_NAME ], "readwrite");
  var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  function done(err) {
   if (err) {
    if (!done.errored) {
     done.errored = true;
     return callback(err);
    }
    return;
   }
   if (++completed >= total) {
    return callback(null);
   }
  }
  transaction.onerror = (function() {
   done(this.error);
  });
  create.sort().forEach((function(path) {
   if (dst.type === "local") {
    IDBFS.loadRemoteEntry(store, path, (function(err, entry) {
     if (err) return done(err);
     IDBFS.storeLocalEntry(path, entry, done);
    }));
   } else {
    IDBFS.loadLocalEntry(path, (function(err, entry) {
     if (err) return done(err);
     IDBFS.storeRemoteEntry(store, path, entry, done);
    }));
   }
  }));
  remove.sort().reverse().forEach((function(path) {
   if (dst.type === "local") {
    IDBFS.removeLocalEntry(path, done);
   } else {
    IDBFS.removeRemoteEntry(store, path, done);
   }
  }));
 })
};
var NODEFS = {
 isWindows: false,
 staticInit: (function() {
  NODEFS.isWindows = !!process.platform.match(/^win/);
 }),
 mount: (function(mount) {
  assert(ENVIRONMENT_IS_NODE);
  return NODEFS.createNode(null, "/", NODEFS.getMode(mount.opts.root), 0);
 }),
 createNode: (function(parent, name, mode, dev) {
  if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var node = FS.createNode(parent, name, mode);
  node.node_ops = NODEFS.node_ops;
  node.stream_ops = NODEFS.stream_ops;
  return node;
 }),
 getMode: (function(path) {
  var stat;
  try {
   stat = fs.lstatSync(path);
   if (NODEFS.isWindows) {
    stat.mode = stat.mode | (stat.mode & 146) >> 1;
   }
  } catch (e) {
   if (!e.code) throw e;
   throw new FS.ErrnoError(ERRNO_CODES[e.code]);
  }
  return stat.mode;
 }),
 realPath: (function(node) {
  var parts = [];
  while (node.parent !== node) {
   parts.push(node.name);
   node = node.parent;
  }
  parts.push(node.mount.opts.root);
  parts.reverse();
  return PATH.join.apply(null, parts);
 }),
 flagsToPermissionStringMap: {
  0: "r",
  1: "r+",
  2: "r+",
  64: "r",
  65: "r+",
  66: "r+",
  129: "rx+",
  193: "rx+",
  514: "w+",
  577: "w",
  578: "w+",
  705: "wx",
  706: "wx+",
  1024: "a",
  1025: "a",
  1026: "a+",
  1089: "a",
  1090: "a+",
  1153: "ax",
  1154: "ax+",
  1217: "ax",
  1218: "ax+",
  4096: "rs",
  4098: "rs+"
 },
 flagsToPermissionString: (function(flags) {
  if (flags in NODEFS.flagsToPermissionStringMap) {
   return NODEFS.flagsToPermissionStringMap[flags];
  } else {
   return flags;
  }
 }),
 node_ops: {
  getattr: (function(node) {
   var path = NODEFS.realPath(node);
   var stat;
   try {
    stat = fs.lstatSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
   if (NODEFS.isWindows && !stat.blksize) {
    stat.blksize = 4096;
   }
   if (NODEFS.isWindows && !stat.blocks) {
    stat.blocks = (stat.size + stat.blksize - 1) / stat.blksize | 0;
   }
   return {
    dev: stat.dev,
    ino: stat.ino,
    mode: stat.mode,
    nlink: stat.nlink,
    uid: stat.uid,
    gid: stat.gid,
    rdev: stat.rdev,
    size: stat.size,
    atime: stat.atime,
    mtime: stat.mtime,
    ctime: stat.ctime,
    blksize: stat.blksize,
    blocks: stat.blocks
   };
  }),
  setattr: (function(node, attr) {
   var path = NODEFS.realPath(node);
   try {
    if (attr.mode !== undefined) {
     fs.chmodSync(path, attr.mode);
     node.mode = attr.mode;
    }
    if (attr.timestamp !== undefined) {
     var date = new Date(attr.timestamp);
     fs.utimesSync(path, date, date);
    }
    if (attr.size !== undefined) {
     fs.truncateSync(path, attr.size);
    }
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  lookup: (function(parent, name) {
   var path = PATH.join2(NODEFS.realPath(parent), name);
   var mode = NODEFS.getMode(path);
   return NODEFS.createNode(parent, name, mode);
  }),
  mknod: (function(parent, name, mode, dev) {
   var node = NODEFS.createNode(parent, name, mode, dev);
   var path = NODEFS.realPath(node);
   try {
    if (FS.isDir(node.mode)) {
     fs.mkdirSync(path, node.mode);
    } else {
     fs.writeFileSync(path, "", {
      mode: node.mode
     });
    }
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
   return node;
  }),
  rename: (function(oldNode, newDir, newName) {
   var oldPath = NODEFS.realPath(oldNode);
   var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
   try {
    fs.renameSync(oldPath, newPath);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  unlink: (function(parent, name) {
   var path = PATH.join2(NODEFS.realPath(parent), name);
   try {
    fs.unlinkSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  rmdir: (function(parent, name) {
   var path = PATH.join2(NODEFS.realPath(parent), name);
   try {
    fs.rmdirSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  readdir: (function(node) {
   var path = NODEFS.realPath(node);
   try {
    return fs.readdirSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  symlink: (function(parent, newName, oldPath) {
   var newPath = PATH.join2(NODEFS.realPath(parent), newName);
   try {
    fs.symlinkSync(oldPath, newPath);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  readlink: (function(node) {
   var path = NODEFS.realPath(node);
   try {
    return fs.readlinkSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  })
 },
 stream_ops: {
  open: (function(stream) {
   var path = NODEFS.realPath(stream.node);
   try {
    if (FS.isFile(stream.node.mode)) {
     stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
    }
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  close: (function(stream) {
   try {
    if (FS.isFile(stream.node.mode) && stream.nfd) {
     fs.closeSync(stream.nfd);
    }
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  read: (function(stream, buffer, offset, length, position) {
   var nbuffer = new Buffer(length);
   var res;
   try {
    res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
   } catch (e) {
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
   if (res > 0) {
    for (var i = 0; i < res; i++) {
     buffer[offset + i] = nbuffer[i];
    }
   }
   return res;
  }),
  write: (function(stream, buffer, offset, length, position) {
   var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
   var res;
   try {
    res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
   } catch (e) {
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
   return res;
  }),
  llseek: (function(stream, offset, whence) {
   var position = offset;
   if (whence === 1) {
    position += stream.position;
   } else if (whence === 2) {
    if (FS.isFile(stream.node.mode)) {
     try {
      var stat = fs.fstatSync(stream.nfd);
      position += stat.size;
     } catch (e) {
      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
     }
    }
   }
   if (position < 0) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   stream.position = position;
   return position;
  })
 }
};
var _stdin = allocate(1, "i32*", ALLOC_STATIC);
var _stdout = allocate(1, "i32*", ALLOC_STATIC);
var _stderr = allocate(1, "i32*", ALLOC_STATIC);
function _fflush(stream) {}
var FS = {
 root: null,
 mounts: [],
 devices: [ null ],
 streams: [],
 nextInode: 1,
 nameTable: null,
 currentPath: "/",
 initialized: false,
 ignorePermissions: true,
 trackingDelegate: {},
 tracking: {
  openFlags: {
   READ: 1,
   WRITE: 2
  }
 },
 ErrnoError: null,
 genericErrors: {},
 handleFSError: (function(e) {
  if (!(e instanceof FS.ErrnoError)) throw e + " : " + stackTrace();
  return ___setErrNo(e.errno);
 }),
 lookupPath: (function(path, opts) {
  path = PATH.resolve(FS.cwd(), path);
  opts = opts || {};
  var defaults = {
   follow_mount: true,
   recurse_count: 0
  };
  for (var key in defaults) {
   if (opts[key] === undefined) {
    opts[key] = defaults[key];
   }
  }
  if (opts.recurse_count > 8) {
   throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
  }
  var parts = PATH.normalizeArray(path.split("/").filter((function(p) {
   return !!p;
  })), false);
  var current = FS.root;
  var current_path = "/";
  for (var i = 0; i < parts.length; i++) {
   var islast = i === parts.length - 1;
   if (islast && opts.parent) {
    break;
   }
   current = FS.lookupNode(current, parts[i]);
   current_path = PATH.join2(current_path, parts[i]);
   if (FS.isMountpoint(current)) {
    if (!islast || islast && opts.follow_mount) {
     current = current.mounted.root;
    }
   }
   if (!islast || opts.follow) {
    var count = 0;
    while (FS.isLink(current.mode)) {
     var link = FS.readlink(current_path);
     current_path = PATH.resolve(PATH.dirname(current_path), link);
     var lookup = FS.lookupPath(current_path, {
      recurse_count: opts.recurse_count
     });
     current = lookup.node;
     if (count++ > 40) {
      throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
     }
    }
   }
  }
  return {
   path: current_path,
   node: current
  };
 }),
 getPath: (function(node) {
  var path;
  while (true) {
   if (FS.isRoot(node)) {
    var mount = node.mount.mountpoint;
    if (!path) return mount;
    return mount[mount.length - 1] !== "/" ? mount + "/" + path : mount + path;
   }
   path = path ? node.name + "/" + path : node.name;
   node = node.parent;
  }
 }),
 hashName: (function(parentid, name) {
  var hash = 0;
  for (var i = 0; i < name.length; i++) {
   hash = (hash << 5) - hash + name.charCodeAt(i) | 0;
  }
  return (parentid + hash >>> 0) % FS.nameTable.length;
 }),
 hashAddNode: (function(node) {
  var hash = FS.hashName(node.parent.id, node.name);
  node.name_next = FS.nameTable[hash];
  FS.nameTable[hash] = node;
 }),
 hashRemoveNode: (function(node) {
  var hash = FS.hashName(node.parent.id, node.name);
  if (FS.nameTable[hash] === node) {
   FS.nameTable[hash] = node.name_next;
  } else {
   var current = FS.nameTable[hash];
   while (current) {
    if (current.name_next === node) {
     current.name_next = node.name_next;
     break;
    }
    current = current.name_next;
   }
  }
 }),
 lookupNode: (function(parent, name) {
  var err = FS.mayLookup(parent);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  var hash = FS.hashName(parent.id, name);
  for (var node = FS.nameTable[hash]; node; node = node.name_next) {
   var nodeName = node.name;
   if (node.parent.id === parent.id && nodeName === name) {
    return node;
   }
  }
  return FS.lookup(parent, name);
 }),
 createNode: (function(parent, name, mode, rdev) {
  if (!FS.FSNode) {
   FS.FSNode = (function(parent, name, mode, rdev) {
    if (!parent) {
     parent = this;
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
   });
   FS.FSNode.prototype = {};
   var readMode = 292 | 73;
   var writeMode = 146;
   Object.defineProperties(FS.FSNode.prototype, {
    read: {
     get: (function() {
      return (this.mode & readMode) === readMode;
     }),
     set: (function(val) {
      val ? this.mode |= readMode : this.mode &= ~readMode;
     })
    },
    write: {
     get: (function() {
      return (this.mode & writeMode) === writeMode;
     }),
     set: (function(val) {
      val ? this.mode |= writeMode : this.mode &= ~writeMode;
     })
    },
    isFolder: {
     get: (function() {
      return FS.isDir(this.mode);
     })
    },
    isDevice: {
     get: (function() {
      return FS.isChrdev(this.mode);
     })
    }
   });
  }
  var node = new FS.FSNode(parent, name, mode, rdev);
  FS.hashAddNode(node);
  return node;
 }),
 destroyNode: (function(node) {
  FS.hashRemoveNode(node);
 }),
 isRoot: (function(node) {
  return node === node.parent;
 }),
 isMountpoint: (function(node) {
  return !!node.mounted;
 }),
 isFile: (function(mode) {
  return (mode & 61440) === 32768;
 }),
 isDir: (function(mode) {
  return (mode & 61440) === 16384;
 }),
 isLink: (function(mode) {
  return (mode & 61440) === 40960;
 }),
 isChrdev: (function(mode) {
  return (mode & 61440) === 8192;
 }),
 isBlkdev: (function(mode) {
  return (mode & 61440) === 24576;
 }),
 isFIFO: (function(mode) {
  return (mode & 61440) === 4096;
 }),
 isSocket: (function(mode) {
  return (mode & 49152) === 49152;
 }),
 flagModes: {
  "r": 0,
  "rs": 1052672,
  "r+": 2,
  "w": 577,
  "wx": 705,
  "xw": 705,
  "w+": 578,
  "wx+": 706,
  "xw+": 706,
  "a": 1089,
  "ax": 1217,
  "xa": 1217,
  "a+": 1090,
  "ax+": 1218,
  "xa+": 1218
 },
 modeStringToFlags: (function(str) {
  var flags = FS.flagModes[str];
  if (typeof flags === "undefined") {
   throw new Error("Unknown file open mode: " + str);
  }
  return flags;
 }),
 flagsToPermissionString: (function(flag) {
  var accmode = flag & 2097155;
  var perms = [ "r", "w", "rw" ][accmode];
  if (flag & 512) {
   perms += "w";
  }
  return perms;
 }),
 nodePermissions: (function(node, perms) {
  if (FS.ignorePermissions) {
   return 0;
  }
  if (perms.indexOf("r") !== -1 && !(node.mode & 292)) {
   return ERRNO_CODES.EACCES;
  } else if (perms.indexOf("w") !== -1 && !(node.mode & 146)) {
   return ERRNO_CODES.EACCES;
  } else if (perms.indexOf("x") !== -1 && !(node.mode & 73)) {
   return ERRNO_CODES.EACCES;
  }
  return 0;
 }),
 mayLookup: (function(dir) {
  return FS.nodePermissions(dir, "x");
 }),
 mayCreate: (function(dir, name) {
  try {
   var node = FS.lookupNode(dir, name);
   return ERRNO_CODES.EEXIST;
  } catch (e) {}
  return FS.nodePermissions(dir, "wx");
 }),
 mayDelete: (function(dir, name, isdir) {
  var node;
  try {
   node = FS.lookupNode(dir, name);
  } catch (e) {
   return e.errno;
  }
  var err = FS.nodePermissions(dir, "wx");
  if (err) {
   return err;
  }
  if (isdir) {
   if (!FS.isDir(node.mode)) {
    return ERRNO_CODES.ENOTDIR;
   }
   if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
    return ERRNO_CODES.EBUSY;
   }
  } else {
   if (FS.isDir(node.mode)) {
    return ERRNO_CODES.EISDIR;
   }
  }
  return 0;
 }),
 mayOpen: (function(node, flags) {
  if (!node) {
   return ERRNO_CODES.ENOENT;
  }
  if (FS.isLink(node.mode)) {
   return ERRNO_CODES.ELOOP;
  } else if (FS.isDir(node.mode)) {
   if ((flags & 2097155) !== 0 || flags & 512) {
    return ERRNO_CODES.EISDIR;
   }
  }
  return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
 }),
 MAX_OPEN_FDS: 4096,
 nextfd: (function(fd_start, fd_end) {
  fd_start = fd_start || 0;
  fd_end = fd_end || FS.MAX_OPEN_FDS;
  for (var fd = fd_start; fd <= fd_end; fd++) {
   if (!FS.streams[fd]) {
    return fd;
   }
  }
  throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
 }),
 getStream: (function(fd) {
  return FS.streams[fd];
 }),
 createStream: (function(stream, fd_start, fd_end) {
  if (!FS.FSStream) {
   FS.FSStream = (function() {});
   FS.FSStream.prototype = {};
   Object.defineProperties(FS.FSStream.prototype, {
    object: {
     get: (function() {
      return this.node;
     }),
     set: (function(val) {
      this.node = val;
     })
    },
    isRead: {
     get: (function() {
      return (this.flags & 2097155) !== 1;
     })
    },
    isWrite: {
     get: (function() {
      return (this.flags & 2097155) !== 0;
     })
    },
    isAppend: {
     get: (function() {
      return this.flags & 1024;
     })
    }
   });
  }
  var newStream = new FS.FSStream;
  for (var p in stream) {
   newStream[p] = stream[p];
  }
  stream = newStream;
  var fd = FS.nextfd(fd_start, fd_end);
  stream.fd = fd;
  FS.streams[fd] = stream;
  return stream;
 }),
 closeStream: (function(fd) {
  FS.streams[fd] = null;
 }),
 getStreamFromPtr: (function(ptr) {
  return FS.streams[ptr - 1];
 }),
 getPtrForStream: (function(stream) {
  return stream ? stream.fd + 1 : 0;
 }),
 chrdev_stream_ops: {
  open: (function(stream) {
   var device = FS.getDevice(stream.node.rdev);
   stream.stream_ops = device.stream_ops;
   if (stream.stream_ops.open) {
    stream.stream_ops.open(stream);
   }
  }),
  llseek: (function() {
   throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
  })
 },
 major: (function(dev) {
  return dev >> 8;
 }),
 minor: (function(dev) {
  return dev & 255;
 }),
 makedev: (function(ma, mi) {
  return ma << 8 | mi;
 }),
 registerDevice: (function(dev, ops) {
  FS.devices[dev] = {
   stream_ops: ops
  };
 }),
 getDevice: (function(dev) {
  return FS.devices[dev];
 }),
 getMounts: (function(mount) {
  var mounts = [];
  var check = [ mount ];
  while (check.length) {
   var m = check.pop();
   mounts.push(m);
   check.push.apply(check, m.mounts);
  }
  return mounts;
 }),
 syncfs: (function(populate, callback) {
  if (typeof populate === "function") {
   callback = populate;
   populate = false;
  }
  var mounts = FS.getMounts(FS.root.mount);
  var completed = 0;
  function done(err) {
   if (err) {
    if (!done.errored) {
     done.errored = true;
     return callback(err);
    }
    return;
   }
   if (++completed >= mounts.length) {
    callback(null);
   }
  }
  mounts.forEach((function(mount) {
   if (!mount.type.syncfs) {
    return done(null);
   }
   mount.type.syncfs(mount, populate, done);
  }));
 }),
 mount: (function(type, opts, mountpoint) {
  var root = mountpoint === "/";
  var pseudo = !mountpoint;
  var node;
  if (root && FS.root) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  } else if (!root && !pseudo) {
   var lookup = FS.lookupPath(mountpoint, {
    follow_mount: false
   });
   mountpoint = lookup.path;
   node = lookup.node;
   if (FS.isMountpoint(node)) {
    throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
   }
   if (!FS.isDir(node.mode)) {
    throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
   }
  }
  var mount = {
   type: type,
   opts: opts,
   mountpoint: mountpoint,
   mounts: []
  };
  var mountRoot = type.mount(mount);
  mountRoot.mount = mount;
  mount.root = mountRoot;
  if (root) {
   FS.root = mountRoot;
  } else if (node) {
   node.mounted = mount;
   if (node.mount) {
    node.mount.mounts.push(mount);
   }
  }
  return mountRoot;
 }),
 unmount: (function(mountpoint) {
  var lookup = FS.lookupPath(mountpoint, {
   follow_mount: false
  });
  if (!FS.isMountpoint(lookup.node)) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var node = lookup.node;
  var mount = node.mounted;
  var mounts = FS.getMounts(mount);
  Object.keys(FS.nameTable).forEach((function(hash) {
   var current = FS.nameTable[hash];
   while (current) {
    var next = current.name_next;
    if (mounts.indexOf(current.mount) !== -1) {
     FS.destroyNode(current);
    }
    current = next;
   }
  }));
  node.mounted = null;
  var idx = node.mount.mounts.indexOf(mount);
  assert(idx !== -1);
  node.mount.mounts.splice(idx, 1);
 }),
 lookup: (function(parent, name) {
  return parent.node_ops.lookup(parent, name);
 }),
 mknod: (function(path, mode, dev) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  var err = FS.mayCreate(parent, name);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.mknod) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  return parent.node_ops.mknod(parent, name, mode, dev);
 }),
 create: (function(path, mode) {
  mode = mode !== undefined ? mode : 438;
  mode &= 4095;
  mode |= 32768;
  return FS.mknod(path, mode, 0);
 }),
 mkdir: (function(path, mode) {
  mode = mode !== undefined ? mode : 511;
  mode &= 511 | 512;
  mode |= 16384;
  return FS.mknod(path, mode, 0);
 }),
 mkdev: (function(path, mode, dev) {
  if (typeof dev === "undefined") {
   dev = mode;
   mode = 438;
  }
  mode |= 8192;
  return FS.mknod(path, mode, dev);
 }),
 symlink: (function(oldpath, newpath) {
  var lookup = FS.lookupPath(newpath, {
   parent: true
  });
  var parent = lookup.node;
  var newname = PATH.basename(newpath);
  var err = FS.mayCreate(parent, newname);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.symlink) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  return parent.node_ops.symlink(parent, newname, oldpath);
 }),
 rename: (function(old_path, new_path) {
  var old_dirname = PATH.dirname(old_path);
  var new_dirname = PATH.dirname(new_path);
  var old_name = PATH.basename(old_path);
  var new_name = PATH.basename(new_path);
  var lookup, old_dir, new_dir;
  try {
   lookup = FS.lookupPath(old_path, {
    parent: true
   });
   old_dir = lookup.node;
   lookup = FS.lookupPath(new_path, {
    parent: true
   });
   new_dir = lookup.node;
  } catch (e) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  }
  if (old_dir.mount !== new_dir.mount) {
   throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
  }
  var old_node = FS.lookupNode(old_dir, old_name);
  var relative = PATH.relative(old_path, new_dirname);
  if (relative.charAt(0) !== ".") {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  relative = PATH.relative(new_path, old_dirname);
  if (relative.charAt(0) !== ".") {
   throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
  }
  var new_node;
  try {
   new_node = FS.lookupNode(new_dir, new_name);
  } catch (e) {}
  if (old_node === new_node) {
   return;
  }
  var isdir = FS.isDir(old_node.mode);
  var err = FS.mayDelete(old_dir, old_name, isdir);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  err = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!old_dir.node_ops.rename) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  }
  if (new_dir !== old_dir) {
   err = FS.nodePermissions(old_dir, "w");
   if (err) {
    throw new FS.ErrnoError(err);
   }
  }
  try {
   if (FS.trackingDelegate["willMovePath"]) {
    FS.trackingDelegate["willMovePath"](old_path, new_path);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['willMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
  }
  FS.hashRemoveNode(old_node);
  try {
   old_dir.node_ops.rename(old_node, new_dir, new_name);
  } catch (e) {
   throw e;
  } finally {
   FS.hashAddNode(old_node);
  }
  try {
   if (FS.trackingDelegate["onMovePath"]) FS.trackingDelegate["onMovePath"](old_path, new_path);
  } catch (e) {
   console.log("FS.trackingDelegate['onMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
  }
 }),
 rmdir: (function(path) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  var node = FS.lookupNode(parent, name);
  var err = FS.mayDelete(parent, name, true);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.rmdir) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (FS.isMountpoint(node)) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  }
  try {
   if (FS.trackingDelegate["willDeletePath"]) {
    FS.trackingDelegate["willDeletePath"](path);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
  }
  parent.node_ops.rmdir(parent, name);
  FS.destroyNode(node);
  try {
   if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path);
  } catch (e) {
   console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
  }
 }),
 readdir: (function(path) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  var node = lookup.node;
  if (!node.node_ops.readdir) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
  }
  return node.node_ops.readdir(node);
 }),
 unlink: (function(path) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  var node = FS.lookupNode(parent, name);
  var err = FS.mayDelete(parent, name, false);
  if (err) {
   if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.unlink) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (FS.isMountpoint(node)) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  }
  try {
   if (FS.trackingDelegate["willDeletePath"]) {
    FS.trackingDelegate["willDeletePath"](path);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
  }
  parent.node_ops.unlink(parent, name);
  FS.destroyNode(node);
  try {
   if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path);
  } catch (e) {
   console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
  }
 }),
 readlink: (function(path) {
  var lookup = FS.lookupPath(path);
  var link = lookup.node;
  if (!link.node_ops.readlink) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  return link.node_ops.readlink(link);
 }),
 stat: (function(path, dontFollow) {
  var lookup = FS.lookupPath(path, {
   follow: !dontFollow
  });
  var node = lookup.node;
  if (!node.node_ops.getattr) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  return node.node_ops.getattr(node);
 }),
 lstat: (function(path) {
  return FS.stat(path, true);
 }),
 chmod: (function(path, mode, dontFollow) {
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: !dontFollow
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  node.node_ops.setattr(node, {
   mode: mode & 4095 | node.mode & ~4095,
   timestamp: Date.now()
  });
 }),
 lchmod: (function(path, mode) {
  FS.chmod(path, mode, true);
 }),
 fchmod: (function(fd, mode) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  FS.chmod(stream.node, mode);
 }),
 chown: (function(path, uid, gid, dontFollow) {
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: !dontFollow
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  node.node_ops.setattr(node, {
   timestamp: Date.now()
  });
 }),
 lchown: (function(path, uid, gid) {
  FS.chown(path, uid, gid, true);
 }),
 fchown: (function(fd, uid, gid) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  FS.chown(stream.node, uid, gid);
 }),
 truncate: (function(path, len) {
  if (len < 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: true
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (FS.isDir(node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
  }
  if (!FS.isFile(node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var err = FS.nodePermissions(node, "w");
  if (err) {
   throw new FS.ErrnoError(err);
  }
  node.node_ops.setattr(node, {
   size: len,
   timestamp: Date.now()
  });
 }),
 ftruncate: (function(fd, len) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  FS.truncate(stream.node, len);
 }),
 utime: (function(path, atime, mtime) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  var node = lookup.node;
  node.node_ops.setattr(node, {
   timestamp: Math.max(atime, mtime)
  });
 }),
 open: (function(path, flags, mode, fd_start, fd_end) {
  if (path === "") {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  flags = typeof flags === "string" ? FS.modeStringToFlags(flags) : flags;
  mode = typeof mode === "undefined" ? 438 : mode;
  if (flags & 64) {
   mode = mode & 4095 | 32768;
  } else {
   mode = 0;
  }
  var node;
  if (typeof path === "object") {
   node = path;
  } else {
   path = PATH.normalize(path);
   try {
    var lookup = FS.lookupPath(path, {
     follow: !(flags & 131072)
    });
    node = lookup.node;
   } catch (e) {}
  }
  if (flags & 64) {
   if (node) {
    if (flags & 128) {
     throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
    }
   } else {
    node = FS.mknod(path, mode, 0);
   }
  }
  if (!node) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  if (FS.isChrdev(node.mode)) {
   flags &= ~512;
  }
  var err = FS.mayOpen(node, flags);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (flags & 512) {
   FS.truncate(node, 0);
  }
  flags &= ~(128 | 512);
  var stream = FS.createStream({
   node: node,
   path: FS.getPath(node),
   flags: flags,
   seekable: true,
   position: 0,
   stream_ops: node.stream_ops,
   ungotten: [],
   error: false
  }, fd_start, fd_end);
  if (stream.stream_ops.open) {
   stream.stream_ops.open(stream);
  }
  if (Module["logReadFiles"] && !(flags & 1)) {
   if (!FS.readFiles) FS.readFiles = {};
   if (!(path in FS.readFiles)) {
    FS.readFiles[path] = 1;
    Module["printErr"]("read file: " + path);
   }
  }
  try {
   if (FS.trackingDelegate["onOpenFile"]) {
    var trackingFlags = 0;
    if ((flags & 2097155) !== 1) {
     trackingFlags |= FS.tracking.openFlags.READ;
    }
    if ((flags & 2097155) !== 0) {
     trackingFlags |= FS.tracking.openFlags.WRITE;
    }
    FS.trackingDelegate["onOpenFile"](path, trackingFlags);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['onOpenFile']('" + path + "', flags) threw an exception: " + e.message);
  }
  return stream;
 }),
 close: (function(stream) {
  try {
   if (stream.stream_ops.close) {
    stream.stream_ops.close(stream);
   }
  } catch (e) {
   throw e;
  } finally {
   FS.closeStream(stream.fd);
  }
 }),
 llseek: (function(stream, offset, whence) {
  if (!stream.seekable || !stream.stream_ops.llseek) {
   throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
  }
  return stream.stream_ops.llseek(stream, offset, whence);
 }),
 read: (function(stream, buffer, offset, length, position) {
  if (length < 0 || position < 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  if ((stream.flags & 2097155) === 1) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  if (FS.isDir(stream.node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
  }
  if (!stream.stream_ops.read) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var seeking = true;
  if (typeof position === "undefined") {
   position = stream.position;
   seeking = false;
  } else if (!stream.seekable) {
   throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
  }
  var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
  if (!seeking) stream.position += bytesRead;
  return bytesRead;
 }),
 write: (function(stream, buffer, offset, length, position, canOwn) {
  if (length < 0 || position < 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  if (FS.isDir(stream.node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
  }
  if (!stream.stream_ops.write) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  if (stream.flags & 1024) {
   FS.llseek(stream, 0, 2);
  }
  var seeking = true;
  if (typeof position === "undefined") {
   position = stream.position;
   seeking = false;
  } else if (!stream.seekable) {
   throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
  }
  var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
  if (!seeking) stream.position += bytesWritten;
  try {
   if (stream.path && FS.trackingDelegate["onWriteToFile"]) FS.trackingDelegate["onWriteToFile"](stream.path);
  } catch (e) {
   console.log("FS.trackingDelegate['onWriteToFile']('" + path + "') threw an exception: " + e.message);
  }
  return bytesWritten;
 }),
 allocate: (function(stream, offset, length) {
  if (offset < 0 || length <= 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
  }
  if (!stream.stream_ops.allocate) {
   throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
  }
  stream.stream_ops.allocate(stream, offset, length);
 }),
 mmap: (function(stream, buffer, offset, length, position, prot, flags) {
  if ((stream.flags & 2097155) === 1) {
   throw new FS.ErrnoError(ERRNO_CODES.EACCES);
  }
  if (!stream.stream_ops.mmap) {
   throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
  }
  return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
 }),
 ioctl: (function(stream, cmd, arg) {
  if (!stream.stream_ops.ioctl) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
  }
  return stream.stream_ops.ioctl(stream, cmd, arg);
 }),
 readFile: (function(path, opts) {
  opts = opts || {};
  opts.flags = opts.flags || "r";
  opts.encoding = opts.encoding || "binary";
  if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
   throw new Error('Invalid encoding type "' + opts.encoding + '"');
  }
  var ret;
  var stream = FS.open(path, opts.flags);
  var stat = FS.stat(path);
  var length = stat.size;
  var buf = new Uint8Array(length);
  FS.read(stream, buf, 0, length, 0);
  if (opts.encoding === "utf8") {
   ret = "";
   var utf8 = new Runtime.UTF8Processor;
   for (var i = 0; i < length; i++) {
    ret += utf8.processCChar(buf[i]);
   }
  } else if (opts.encoding === "binary") {
   ret = buf;
  }
  FS.close(stream);
  return ret;
 }),
 writeFile: (function(path, data, opts) {
  opts = opts || {};
  opts.flags = opts.flags || "w";
  opts.encoding = opts.encoding || "utf8";
  if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
   throw new Error('Invalid encoding type "' + opts.encoding + '"');
  }
  var stream = FS.open(path, opts.flags, opts.mode);
  if (opts.encoding === "utf8") {
   var utf8 = new Runtime.UTF8Processor;
   var buf = new Uint8Array(utf8.processJSString(data));
   FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
  } else if (opts.encoding === "binary") {
   FS.write(stream, data, 0, data.length, 0, opts.canOwn);
  }
  FS.close(stream);
 }),
 cwd: (function() {
  return FS.currentPath;
 }),
 chdir: (function(path) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  if (!FS.isDir(lookup.node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
  }
  var err = FS.nodePermissions(lookup.node, "x");
  if (err) {
   throw new FS.ErrnoError(err);
  }
  FS.currentPath = lookup.path;
 }),
 createDefaultDirectories: (function() {
  FS.mkdir("/tmp");
 }),
 createDefaultDevices: (function() {
  FS.mkdir("/dev");
  FS.registerDevice(FS.makedev(1, 3), {
   read: (function() {
    return 0;
   }),
   write: (function() {
    return 0;
   })
  });
  FS.mkdev("/dev/null", FS.makedev(1, 3));
  TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
  TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
  FS.mkdev("/dev/tty", FS.makedev(5, 0));
  FS.mkdev("/dev/tty1", FS.makedev(6, 0));
  var random_device;
  if (typeof crypto !== "undefined") {
   var randomBuffer = new Uint8Array(1);
   random_device = (function() {
    crypto.getRandomValues(randomBuffer);
    return randomBuffer[0];
   });
  } else if (ENVIRONMENT_IS_NODE) {
   random_device = (function() {
    return require("crypto").randomBytes(1)[0];
   });
  } else {
   random_device = (function() {
    return Math.floor(Math.random() * 256);
   });
  }
  FS.createDevice("/dev", "random", random_device);
  FS.createDevice("/dev", "urandom", random_device);
  FS.mkdir("/dev/shm");
  FS.mkdir("/dev/shm/tmp");
 }),
 createStandardStreams: (function() {
  if (Module["stdin"]) {
   FS.createDevice("/dev", "stdin", Module["stdin"]);
  } else {
   FS.symlink("/dev/tty", "/dev/stdin");
  }
  if (Module["stdout"]) {
   FS.createDevice("/dev", "stdout", null, Module["stdout"]);
  } else {
   FS.symlink("/dev/tty", "/dev/stdout");
  }
  if (Module["stderr"]) {
   FS.createDevice("/dev", "stderr", null, Module["stderr"]);
  } else {
   FS.symlink("/dev/tty1", "/dev/stderr");
  }
  var stdin = FS.open("/dev/stdin", "r");
  HEAP32[_stdin >> 2] = FS.getPtrForStream(stdin);
  assert(stdin.fd === 0, "invalid handle for stdin (" + stdin.fd + ")");
  var stdout = FS.open("/dev/stdout", "w");
  HEAP32[_stdout >> 2] = FS.getPtrForStream(stdout);
  assert(stdout.fd === 1, "invalid handle for stdout (" + stdout.fd + ")");
  var stderr = FS.open("/dev/stderr", "w");
  HEAP32[_stderr >> 2] = FS.getPtrForStream(stderr);
  assert(stderr.fd === 2, "invalid handle for stderr (" + stderr.fd + ")");
 }),
 ensureErrnoError: (function() {
  if (FS.ErrnoError) return;
  FS.ErrnoError = function ErrnoError(errno) {
   this.errno = errno;
   for (var key in ERRNO_CODES) {
    if (ERRNO_CODES[key] === errno) {
     this.code = key;
     break;
    }
   }
   this.message = ERRNO_MESSAGES[errno];
  };
  FS.ErrnoError.prototype = new Error;
  FS.ErrnoError.prototype.constructor = FS.ErrnoError;
  [ ERRNO_CODES.ENOENT ].forEach((function(code) {
   FS.genericErrors[code] = new FS.ErrnoError(code);
   FS.genericErrors[code].stack = "<generic error, no stack>";
  }));
 }),
 staticInit: (function() {
  FS.ensureErrnoError();
  FS.nameTable = new Array(4096);
  FS.mount(MEMFS, {}, "/");
  FS.createDefaultDirectories();
  FS.createDefaultDevices();
 }),
 init: (function(input, output, error) {
  assert(!FS.init.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
  FS.init.initialized = true;
  FS.ensureErrnoError();
  Module["stdin"] = input || Module["stdin"];
  Module["stdout"] = output || Module["stdout"];
  Module["stderr"] = error || Module["stderr"];
  FS.createStandardStreams();
 }),
 quit: (function() {
  FS.init.initialized = false;
  for (var i = 0; i < FS.streams.length; i++) {
   var stream = FS.streams[i];
   if (!stream) {
    continue;
   }
   FS.close(stream);
  }
 }),
 getMode: (function(canRead, canWrite) {
  var mode = 0;
  if (canRead) mode |= 292 | 73;
  if (canWrite) mode |= 146;
  return mode;
 }),
 joinPath: (function(parts, forceRelative) {
  var path = PATH.join.apply(null, parts);
  if (forceRelative && path[0] == "/") path = path.substr(1);
  return path;
 }),
 absolutePath: (function(relative, base) {
  return PATH.resolve(base, relative);
 }),
 standardizePath: (function(path) {
  return PATH.normalize(path);
 }),
 findObject: (function(path, dontResolveLastLink) {
  var ret = FS.analyzePath(path, dontResolveLastLink);
  if (ret.exists) {
   return ret.object;
  } else {
   ___setErrNo(ret.error);
   return null;
  }
 }),
 analyzePath: (function(path, dontResolveLastLink) {
  try {
   var lookup = FS.lookupPath(path, {
    follow: !dontResolveLastLink
   });
   path = lookup.path;
  } catch (e) {}
  var ret = {
   isRoot: false,
   exists: false,
   error: 0,
   name: null,
   path: null,
   object: null,
   parentExists: false,
   parentPath: null,
   parentObject: null
  };
  try {
   var lookup = FS.lookupPath(path, {
    parent: true
   });
   ret.parentExists = true;
   ret.parentPath = lookup.path;
   ret.parentObject = lookup.node;
   ret.name = PATH.basename(path);
   lookup = FS.lookupPath(path, {
    follow: !dontResolveLastLink
   });
   ret.exists = true;
   ret.path = lookup.path;
   ret.object = lookup.node;
   ret.name = lookup.node.name;
   ret.isRoot = lookup.path === "/";
  } catch (e) {
   ret.error = e.errno;
  }
  return ret;
 }),
 createFolder: (function(parent, name, canRead, canWrite) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(canRead, canWrite);
  return FS.mkdir(path, mode);
 }),
 createPath: (function(parent, path, canRead, canWrite) {
  parent = typeof parent === "string" ? parent : FS.getPath(parent);
  var parts = path.split("/").reverse();
  while (parts.length) {
   var part = parts.pop();
   if (!part) continue;
   var current = PATH.join2(parent, part);
   try {
    FS.mkdir(current);
   } catch (e) {}
   parent = current;
  }
  return current;
 }),
 createFile: (function(parent, name, properties, canRead, canWrite) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(canRead, canWrite);
  return FS.create(path, mode);
 }),
 createDataFile: (function(parent, name, data, canRead, canWrite, canOwn) {
  var path = name ? PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name) : parent;
  var mode = FS.getMode(canRead, canWrite);
  var node = FS.create(path, mode);
  if (data) {
   if (typeof data === "string") {
    var arr = new Array(data.length);
    for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
    data = arr;
   }
   FS.chmod(node, mode | 146);
   var stream = FS.open(node, "w");
   FS.write(stream, data, 0, data.length, 0, canOwn);
   FS.close(stream);
   FS.chmod(node, mode);
  }
  return node;
 }),
 createDevice: (function(parent, name, input, output) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(!!input, !!output);
  if (!FS.createDevice.major) FS.createDevice.major = 64;
  var dev = FS.makedev(FS.createDevice.major++, 0);
  FS.registerDevice(dev, {
   open: (function(stream) {
    stream.seekable = false;
   }),
   close: (function(stream) {
    if (output && output.buffer && output.buffer.length) {
     output(10);
    }
   }),
   read: (function(stream, buffer, offset, length, pos) {
    var bytesRead = 0;
    for (var i = 0; i < length; i++) {
     var result;
     try {
      result = input();
     } catch (e) {
      throw new FS.ErrnoError(ERRNO_CODES.EIO);
     }
     if (result === undefined && bytesRead === 0) {
      throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
     }
     if (result === null || result === undefined) break;
     bytesRead++;
     buffer[offset + i] = result;
    }
    if (bytesRead) {
     stream.node.timestamp = Date.now();
    }
    return bytesRead;
   }),
   write: (function(stream, buffer, offset, length, pos) {
    for (var i = 0; i < length; i++) {
     try {
      output(buffer[offset + i]);
     } catch (e) {
      throw new FS.ErrnoError(ERRNO_CODES.EIO);
     }
    }
    if (length) {
     stream.node.timestamp = Date.now();
    }
    return i;
   })
  });
  return FS.mkdev(path, mode, dev);
 }),
 createLink: (function(parent, name, target, canRead, canWrite) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  return FS.symlink(target, path);
 }),
 forceLoadFile: (function(obj) {
  if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
  var success = true;
  if (typeof XMLHttpRequest !== "undefined") {
   throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
  } else if (Module["read"]) {
   try {
    obj.contents = intArrayFromString(Module["read"](obj.url), true);
    obj.usedBytes = obj.contents.length;
   } catch (e) {
    success = false;
   }
  } else {
   throw new Error("Cannot load without read() or XMLHttpRequest.");
  }
  if (!success) ___setErrNo(ERRNO_CODES.EIO);
  return success;
 }),
 createLazyFile: (function(parent, name, url, canRead, canWrite) {
  function LazyUint8Array() {
   this.lengthKnown = false;
   this.chunks = [];
  }
  LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
   if (idx > this.length - 1 || idx < 0) {
    return undefined;
   }
   var chunkOffset = idx % this.chunkSize;
   var chunkNum = Math.floor(idx / this.chunkSize);
   return this.getter(chunkNum)[chunkOffset];
  };
  LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
   this.getter = getter;
  };
  LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
   var xhr = new XMLHttpRequest;
   xhr.open("HEAD", url, false);
   xhr.send(null);
   if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
   var datalength = Number(xhr.getResponseHeader("Content-length"));
   var header;
   var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
   var chunkSize = 1024 * 1024;
   if (!hasByteServing) chunkSize = datalength;
   var doXHR = (function(from, to) {
    if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
    if (to > datalength - 1) throw new Error("only " + datalength + " bytes available! programmer error!");
    var xhr = new XMLHttpRequest;
    xhr.open("GET", url, false);
    if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    if (typeof Uint8Array != "undefined") xhr.responseType = "arraybuffer";
    if (xhr.overrideMimeType) {
     xhr.overrideMimeType("text/plain; charset=x-user-defined");
    }
    xhr.send(null);
    if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
    if (xhr.response !== undefined) {
     return new Uint8Array(xhr.response || []);
    } else {
     return intArrayFromString(xhr.responseText || "", true);
    }
   });
   var lazyArray = this;
   lazyArray.setDataGetter((function(chunkNum) {
    var start = chunkNum * chunkSize;
    var end = (chunkNum + 1) * chunkSize - 1;
    end = Math.min(end, datalength - 1);
    if (typeof lazyArray.chunks[chunkNum] === "undefined") {
     lazyArray.chunks[chunkNum] = doXHR(start, end);
    }
    if (typeof lazyArray.chunks[chunkNum] === "undefined") throw new Error("doXHR failed!");
    return lazyArray.chunks[chunkNum];
   }));
   this._length = datalength;
   this._chunkSize = chunkSize;
   this.lengthKnown = true;
  };
  if (typeof XMLHttpRequest !== "undefined") {
   if (!ENVIRONMENT_IS_WORKER) throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
   var lazyArray = new LazyUint8Array;
   Object.defineProperty(lazyArray, "length", {
    get: (function() {
     if (!this.lengthKnown) {
      this.cacheLength();
     }
     return this._length;
    })
   });
   Object.defineProperty(lazyArray, "chunkSize", {
    get: (function() {
     if (!this.lengthKnown) {
      this.cacheLength();
     }
     return this._chunkSize;
    })
   });
   var properties = {
    isDevice: false,
    contents: lazyArray
   };
  } else {
   var properties = {
    isDevice: false,
    url: url
   };
  }
  var node = FS.createFile(parent, name, properties, canRead, canWrite);
  if (properties.contents) {
   node.contents = properties.contents;
  } else if (properties.url) {
   node.contents = null;
   node.url = properties.url;
  }
  Object.defineProperty(node, "usedBytes", {
   get: (function() {
    return this.contents.length;
   })
  });
  var stream_ops = {};
  var keys = Object.keys(node.stream_ops);
  keys.forEach((function(key) {
   var fn = node.stream_ops[key];
   stream_ops[key] = function forceLoadLazyFile() {
    if (!FS.forceLoadFile(node)) {
     throw new FS.ErrnoError(ERRNO_CODES.EIO);
    }
    return fn.apply(null, arguments);
   };
  }));
  stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
   if (!FS.forceLoadFile(node)) {
    throw new FS.ErrnoError(ERRNO_CODES.EIO);
   }
   var contents = stream.node.contents;
   if (position >= contents.length) return 0;
   var size = Math.min(contents.length - position, length);
   assert(size >= 0);
   if (contents.slice) {
    for (var i = 0; i < size; i++) {
     buffer[offset + i] = contents[position + i];
    }
   } else {
    for (var i = 0; i < size; i++) {
     buffer[offset + i] = contents.get(position + i);
    }
   }
   return size;
  };
  node.stream_ops = stream_ops;
  return node;
 }),
 createPreloadedFile: (function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
  Browser.init();
  var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
  function processData(byteArray) {
   function finish(byteArray) {
    if (!dontCreateFile) {
     FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
    }
    if (onload) onload();
    removeRunDependency("cp " + fullname);
   }
   var handled = false;
   Module["preloadPlugins"].forEach((function(plugin) {
    if (handled) return;
    if (plugin["canHandle"](fullname)) {
     plugin["handle"](byteArray, fullname, finish, (function() {
      if (onerror) onerror();
      removeRunDependency("cp " + fullname);
     }));
     handled = true;
    }
   }));
   if (!handled) finish(byteArray);
  }
  addRunDependency("cp " + fullname);
  if (typeof url == "string") {
   Browser.asyncLoad(url, (function(byteArray) {
    processData(byteArray);
   }), onerror);
  } else {
   processData(url);
  }
 }),
 indexedDB: (function() {
  return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
 }),
 DB_NAME: (function() {
  return "EM_FS_" + window.location.pathname;
 }),
 DB_VERSION: 20,
 DB_STORE_NAME: "FILE_DATA",
 saveFilesToDB: (function(paths, onload, onerror) {
  onload = onload || (function() {});
  onerror = onerror || (function() {});
  var indexedDB = FS.indexedDB();
  try {
   var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
  } catch (e) {
   return onerror(e);
  }
  openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
   console.log("creating db");
   var db = openRequest.result;
   db.createObjectStore(FS.DB_STORE_NAME);
  };
  openRequest.onsuccess = function openRequest_onsuccess() {
   var db = openRequest.result;
   var transaction = db.transaction([ FS.DB_STORE_NAME ], "readwrite");
   var files = transaction.objectStore(FS.DB_STORE_NAME);
   var ok = 0, fail = 0, total = paths.length;
   function finish() {
    if (fail == 0) onload(); else onerror();
   }
   paths.forEach((function(path) {
    var putRequest = files.put(FS.analyzePath(path).object.contents, path);
    putRequest.onsuccess = function putRequest_onsuccess() {
     ok++;
     if (ok + fail == total) finish();
    };
    putRequest.onerror = function putRequest_onerror() {
     fail++;
     if (ok + fail == total) finish();
    };
   }));
   transaction.onerror = onerror;
  };
  openRequest.onerror = onerror;
 }),
 loadFilesFromDB: (function(paths, onload, onerror) {
  onload = onload || (function() {});
  onerror = onerror || (function() {});
  var indexedDB = FS.indexedDB();
  try {
   var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
  } catch (e) {
   return onerror(e);
  }
  openRequest.onupgradeneeded = onerror;
  openRequest.onsuccess = function openRequest_onsuccess() {
   var db = openRequest.result;
   try {
    var transaction = db.transaction([ FS.DB_STORE_NAME ], "readonly");
   } catch (e) {
    onerror(e);
    return;
   }
   var files = transaction.objectStore(FS.DB_STORE_NAME);
   var ok = 0, fail = 0, total = paths.length;
   function finish() {
    if (fail == 0) onload(); else onerror();
   }
   paths.forEach((function(path) {
    var getRequest = files.get(path);
    getRequest.onsuccess = function getRequest_onsuccess() {
     if (FS.analyzePath(path).exists) {
      FS.unlink(path);
     }
     FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
     ok++;
     if (ok + fail == total) finish();
    };
    getRequest.onerror = function getRequest_onerror() {
     fail++;
     if (ok + fail == total) finish();
    };
   }));
   transaction.onerror = onerror;
  };
  openRequest.onerror = onerror;
 })
};
function _mkport() {
 throw "TODO";
}
var SOCKFS = {
 mount: (function(mount) {
  return FS.createNode(null, "/", 16384 | 511, 0);
 }),
 createSocket: (function(family, type, protocol) {
  var streaming = type == 1;
  if (protocol) {
   assert(streaming == (protocol == 6));
  }
  var sock = {
   family: family,
   type: type,
   protocol: protocol,
   server: null,
   peers: {},
   pending: [],
   recv_queue: [],
   sock_ops: SOCKFS.websocket_sock_ops
  };
  var name = SOCKFS.nextname();
  var node = FS.createNode(SOCKFS.root, name, 49152, 0);
  node.sock = sock;
  var stream = FS.createStream({
   path: name,
   node: node,
   flags: FS.modeStringToFlags("r+"),
   seekable: false,
   stream_ops: SOCKFS.stream_ops
  });
  sock.stream = stream;
  return sock;
 }),
 getSocket: (function(fd) {
  var stream = FS.getStream(fd);
  if (!stream || !FS.isSocket(stream.node.mode)) {
   return null;
  }
  return stream.node.sock;
 }),
 stream_ops: {
  poll: (function(stream) {
   var sock = stream.node.sock;
   return sock.sock_ops.poll(sock);
  }),
  ioctl: (function(stream, request, varargs) {
   var sock = stream.node.sock;
   return sock.sock_ops.ioctl(sock, request, varargs);
  }),
  read: (function(stream, buffer, offset, length, position) {
   var sock = stream.node.sock;
   var msg = sock.sock_ops.recvmsg(sock, length);
   if (!msg) {
    return 0;
   }
   buffer.set(msg.buffer, offset);
   return msg.buffer.length;
  }),
  write: (function(stream, buffer, offset, length, position) {
   var sock = stream.node.sock;
   return sock.sock_ops.sendmsg(sock, buffer, offset, length);
  }),
  close: (function(stream) {
   var sock = stream.node.sock;
   sock.sock_ops.close(sock);
  })
 },
 nextname: (function() {
  if (!SOCKFS.nextname.current) {
   SOCKFS.nextname.current = 0;
  }
  return "socket[" + SOCKFS.nextname.current++ + "]";
 }),
 websocket_sock_ops: {
  createPeer: (function(sock, addr, port) {
   var ws;
   if (typeof addr === "object") {
    ws = addr;
    addr = null;
    port = null;
   }
   if (ws) {
    if (ws._socket) {
     addr = ws._socket.remoteAddress;
     port = ws._socket.remotePort;
    } else {
     var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
     if (!result) {
      throw new Error("WebSocket URL must be in the format ws(s)://address:port");
     }
     addr = result[1];
     port = parseInt(result[2], 10);
    }
   } else {
    try {
     var runtimeConfig = Module["websocket"] && "object" === typeof Module["websocket"];
     var url = "ws:#".replace("#", "//");
     if (runtimeConfig) {
      if ("string" === typeof Module["websocket"]["url"]) {
       url = Module["websocket"]["url"];
      }
     }
     if (url === "ws://" || url === "wss://") {
      url = url + addr + ":" + port;
     }
     var subProtocols = "binary";
     if (runtimeConfig) {
      if ("string" === typeof Module["websocket"]["subprotocol"]) {
       subProtocols = Module["websocket"]["subprotocol"];
      }
     }
     subProtocols = subProtocols.replace(/^ +| +$/g, "").split(/ *, */);
     var opts = ENVIRONMENT_IS_NODE ? {
      "protocol": subProtocols.toString()
     } : subProtocols;
     var WebSocket = ENVIRONMENT_IS_NODE ? require("ws") : window["WebSocket"];
     ws = new WebSocket(url, opts);
     ws.binaryType = "arraybuffer";
    } catch (e) {
     throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
    }
   }
   var peer = {
    addr: addr,
    port: port,
    socket: ws,
    dgram_send_queue: []
   };
   SOCKFS.websocket_sock_ops.addPeer(sock, peer);
   SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
   if (sock.type === 2 && typeof sock.sport !== "undefined") {
    peer.dgram_send_queue.push(new Uint8Array([ 255, 255, 255, 255, "p".charCodeAt(0), "o".charCodeAt(0), "r".charCodeAt(0), "t".charCodeAt(0), (sock.sport & 65280) >> 8, sock.sport & 255 ]));
   }
   return peer;
  }),
  getPeer: (function(sock, addr, port) {
   return sock.peers[addr + ":" + port];
  }),
  addPeer: (function(sock, peer) {
   sock.peers[peer.addr + ":" + peer.port] = peer;
  }),
  removePeer: (function(sock, peer) {
   delete sock.peers[peer.addr + ":" + peer.port];
  }),
  handlePeerEvents: (function(sock, peer) {
   var first = true;
   var handleOpen = (function() {
    try {
     var queued = peer.dgram_send_queue.shift();
     while (queued) {
      peer.socket.send(queued);
      queued = peer.dgram_send_queue.shift();
     }
    } catch (e) {
     peer.socket.close();
    }
   });
   function handleMessage(data) {
    assert(typeof data !== "string" && data.byteLength !== undefined);
    data = new Uint8Array(data);
    var wasfirst = first;
    first = false;
    if (wasfirst && data.length === 10 && data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 && data[4] === "p".charCodeAt(0) && data[5] === "o".charCodeAt(0) && data[6] === "r".charCodeAt(0) && data[7] === "t".charCodeAt(0)) {
     var newport = data[8] << 8 | data[9];
     SOCKFS.websocket_sock_ops.removePeer(sock, peer);
     peer.port = newport;
     SOCKFS.websocket_sock_ops.addPeer(sock, peer);
     return;
    }
    sock.recv_queue.push({
     addr: peer.addr,
     port: peer.port,
     data: data
    });
   }
   if (ENVIRONMENT_IS_NODE) {
    peer.socket.on("open", handleOpen);
    peer.socket.on("message", (function(data, flags) {
     if (!flags.binary) {
      return;
     }
     handleMessage((new Uint8Array(data)).buffer);
    }));
    peer.socket.on("error", (function() {}));
   } else {
    peer.socket.onopen = handleOpen;
    peer.socket.onmessage = function peer_socket_onmessage(event) {
     handleMessage(event.data);
    };
   }
  }),
  poll: (function(sock) {
   if (sock.type === 1 && sock.server) {
    return sock.pending.length ? 64 | 1 : 0;
   }
   var mask = 0;
   var dest = sock.type === 1 ? SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) : null;
   if (sock.recv_queue.length || !dest || dest && dest.socket.readyState === dest.socket.CLOSING || dest && dest.socket.readyState === dest.socket.CLOSED) {
    mask |= 64 | 1;
   }
   if (!dest || dest && dest.socket.readyState === dest.socket.OPEN) {
    mask |= 4;
   }
   if (dest && dest.socket.readyState === dest.socket.CLOSING || dest && dest.socket.readyState === dest.socket.CLOSED) {
    mask |= 16;
   }
   return mask;
  }),
  ioctl: (function(sock, request, arg) {
   switch (request) {
   case 21531:
    var bytes = 0;
    if (sock.recv_queue.length) {
     bytes = sock.recv_queue[0].data.length;
    }
    HEAP32[arg >> 2] = bytes;
    return 0;
   default:
    return ERRNO_CODES.EINVAL;
   }
  }),
  close: (function(sock) {
   if (sock.server) {
    try {
     sock.server.close();
    } catch (e) {}
    sock.server = null;
   }
   var peers = Object.keys(sock.peers);
   for (var i = 0; i < peers.length; i++) {
    var peer = sock.peers[peers[i]];
    try {
     peer.socket.close();
    } catch (e) {}
    SOCKFS.websocket_sock_ops.removePeer(sock, peer);
   }
   return 0;
  }),
  bind: (function(sock, addr, port) {
   if (typeof sock.saddr !== "undefined" || typeof sock.sport !== "undefined") {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   sock.saddr = addr;
   sock.sport = port || _mkport();
   if (sock.type === 2) {
    if (sock.server) {
     sock.server.close();
     sock.server = null;
    }
    try {
     sock.sock_ops.listen(sock, 0);
    } catch (e) {
     if (!(e instanceof FS.ErrnoError)) throw e;
     if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
    }
   }
  }),
  connect: (function(sock, addr, port) {
   if (sock.server) {
    throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
   }
   if (typeof sock.daddr !== "undefined" && typeof sock.dport !== "undefined") {
    var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
    if (dest) {
     if (dest.socket.readyState === dest.socket.CONNECTING) {
      throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
     } else {
      throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
     }
    }
   }
   var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
   sock.daddr = peer.addr;
   sock.dport = peer.port;
   throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
  }),
  listen: (function(sock, backlog) {
   if (!ENVIRONMENT_IS_NODE) {
    throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
   }
   if (sock.server) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   var WebSocketServer = require("ws").Server;
   var host = sock.saddr;
   sock.server = new WebSocketServer({
    host: host,
    port: sock.sport
   });
   sock.server.on("connection", (function(ws) {
    if (sock.type === 1) {
     var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
     var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
     newsock.daddr = peer.addr;
     newsock.dport = peer.port;
     sock.pending.push(newsock);
    } else {
     SOCKFS.websocket_sock_ops.createPeer(sock, ws);
    }
   }));
   sock.server.on("closed", (function() {
    sock.server = null;
   }));
   sock.server.on("error", (function() {}));
  }),
  accept: (function(listensock) {
   if (!listensock.server) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   var newsock = listensock.pending.shift();
   newsock.stream.flags = listensock.stream.flags;
   return newsock;
  }),
  getname: (function(sock, peer) {
   var addr, port;
   if (peer) {
    if (sock.daddr === undefined || sock.dport === undefined) {
     throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
    }
    addr = sock.daddr;
    port = sock.dport;
   } else {
    addr = sock.saddr || 0;
    port = sock.sport || 0;
   }
   return {
    addr: addr,
    port: port
   };
  }),
  sendmsg: (function(sock, buffer, offset, length, addr, port) {
   if (sock.type === 2) {
    if (addr === undefined || port === undefined) {
     addr = sock.daddr;
     port = sock.dport;
    }
    if (addr === undefined || port === undefined) {
     throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
    }
   } else {
    addr = sock.daddr;
    port = sock.dport;
   }
   var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
   if (sock.type === 1) {
    if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
     throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
    } else if (dest.socket.readyState === dest.socket.CONNECTING) {
     throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
    }
   }
   var data;
   if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
    data = buffer.slice(offset, offset + length);
   } else {
    data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
   }
   if (sock.type === 2) {
    if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
     if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
      dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
     }
     dest.dgram_send_queue.push(data);
     return length;
    }
   }
   try {
    dest.socket.send(data);
    return length;
   } catch (e) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
  }),
  recvmsg: (function(sock, length) {
   if (sock.type === 1 && sock.server) {
    throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
   }
   var queued = sock.recv_queue.shift();
   if (!queued) {
    if (sock.type === 1) {
     var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
     if (!dest) {
      throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
     } else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
      return null;
     } else {
      throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
     }
    } else {
     throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
    }
   }
   var queuedLength = queued.data.byteLength || queued.data.length;
   var queuedOffset = queued.data.byteOffset || 0;
   var queuedBuffer = queued.data.buffer || queued.data;
   var bytesRead = Math.min(length, queuedLength);
   var res = {
    buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
    addr: queued.addr,
    port: queued.port
   };
   if (sock.type === 1 && bytesRead < queuedLength) {
    var bytesRemaining = queuedLength - bytesRead;
    queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
    sock.recv_queue.unshift(queued);
   }
   return res;
  })
 }
};
function _send(fd, buf, len, flags) {
 var sock = SOCKFS.getSocket(fd);
 if (!sock) {
  ___setErrNo(ERRNO_CODES.EBADF);
  return -1;
 }
 return _write(fd, buf, len);
}
function _pwrite(fildes, buf, nbyte, offset) {
 var stream = FS.getStream(fildes);
 if (!stream) {
  ___setErrNo(ERRNO_CODES.EBADF);
  return -1;
 }
 try {
  var slab = HEAP8;
  return FS.write(stream, slab, buf, nbyte, offset);
 } catch (e) {
  FS.handleFSError(e);
  return -1;
 }
}
function _write(fildes, buf, nbyte) {
 var stream = FS.getStream(fildes);
 if (!stream) {
  ___setErrNo(ERRNO_CODES.EBADF);
  return -1;
 }
 try {
  var slab = HEAP8;
  return FS.write(stream, slab, buf, nbyte);
 } catch (e) {
  FS.handleFSError(e);
  return -1;
 }
}
function _fileno(stream) {
 stream = FS.getStreamFromPtr(stream);
 if (!stream) return -1;
 return stream.fd;
}
function _fwrite(ptr, size, nitems, stream) {
 var bytesToWrite = nitems * size;
 if (bytesToWrite == 0) return 0;
 var fd = _fileno(stream);
 var bytesWritten = _write(fd, ptr, bytesToWrite);
 if (bytesWritten == -1) {
  var streamObj = FS.getStreamFromPtr(stream);
  if (streamObj) streamObj.error = true;
  return 0;
 } else {
  return Math.floor(bytesWritten / size);
 }
}
Module["_strlen"] = _strlen;
function __reallyNegative(x) {
 return x < 0 || x === 0 && 1 / x === -Infinity;
}
function __formatString(format, varargs) {
 var textIndex = format;
 var argIndex = 0;
 function getNextArg(type) {
  var ret;
  if (type === "double") {
   ret = (HEAP32[tempDoublePtr >> 2] = HEAP32[varargs + argIndex >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[varargs + (argIndex + 4) >> 2], +HEAPF64[tempDoublePtr >> 3]);
  } else if (type == "i64") {
   ret = [ HEAP32[varargs + argIndex >> 2], HEAP32[varargs + (argIndex + 4) >> 2] ];
  } else {
   type = "i32";
   ret = HEAP32[varargs + argIndex >> 2];
  }
  argIndex += Runtime.getNativeFieldSize(type);
  return ret;
 }
 var ret = [];
 var curr, next, currArg;
 while (1) {
  var startTextIndex = textIndex;
  curr = HEAP8[textIndex >> 0];
  if (curr === 0) break;
  next = HEAP8[textIndex + 1 >> 0];
  if (curr == 37) {
   var flagAlwaysSigned = false;
   var flagLeftAlign = false;
   var flagAlternative = false;
   var flagZeroPad = false;
   var flagPadSign = false;
   flagsLoop : while (1) {
    switch (next) {
    case 43:
     flagAlwaysSigned = true;
     break;
    case 45:
     flagLeftAlign = true;
     break;
    case 35:
     flagAlternative = true;
     break;
    case 48:
     if (flagZeroPad) {
      break flagsLoop;
     } else {
      flagZeroPad = true;
      break;
     }
    case 32:
     flagPadSign = true;
     break;
    default:
     break flagsLoop;
    }
    textIndex++;
    next = HEAP8[textIndex + 1 >> 0];
   }
   var width = 0;
   if (next == 42) {
    width = getNextArg("i32");
    textIndex++;
    next = HEAP8[textIndex + 1 >> 0];
   } else {
    while (next >= 48 && next <= 57) {
     width = width * 10 + (next - 48);
     textIndex++;
     next = HEAP8[textIndex + 1 >> 0];
    }
   }
   var precisionSet = false, precision = -1;
   if (next == 46) {
    precision = 0;
    precisionSet = true;
    textIndex++;
    next = HEAP8[textIndex + 1 >> 0];
    if (next == 42) {
     precision = getNextArg("i32");
     textIndex++;
    } else {
     while (1) {
      var precisionChr = HEAP8[textIndex + 1 >> 0];
      if (precisionChr < 48 || precisionChr > 57) break;
      precision = precision * 10 + (precisionChr - 48);
      textIndex++;
     }
    }
    next = HEAP8[textIndex + 1 >> 0];
   }
   if (precision < 0) {
    precision = 6;
    precisionSet = false;
   }
   var argSize;
   switch (String.fromCharCode(next)) {
   case "h":
    var nextNext = HEAP8[textIndex + 2 >> 0];
    if (nextNext == 104) {
     textIndex++;
     argSize = 1;
    } else {
     argSize = 2;
    }
    break;
   case "l":
    var nextNext = HEAP8[textIndex + 2 >> 0];
    if (nextNext == 108) {
     textIndex++;
     argSize = 8;
    } else {
     argSize = 4;
    }
    break;
   case "L":
   case "q":
   case "j":
    argSize = 8;
    break;
   case "z":
   case "t":
   case "I":
    argSize = 4;
    break;
   default:
    argSize = null;
   }
   if (argSize) textIndex++;
   next = HEAP8[textIndex + 1 >> 0];
   switch (String.fromCharCode(next)) {
   case "d":
   case "i":
   case "u":
   case "o":
   case "x":
   case "X":
   case "p":
    {
     var signed = next == 100 || next == 105;
     argSize = argSize || 4;
     var currArg = getNextArg("i" + argSize * 8);
     var origArg = currArg;
     var argText;
     if (argSize == 8) {
      currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
     }
     if (argSize <= 4) {
      var limit = Math.pow(256, argSize) - 1;
      currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
     }
     var currAbsArg = Math.abs(currArg);
     var prefix = "";
     if (next == 100 || next == 105) {
      if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else argText = reSign(currArg, 8 * argSize, 1).toString(10);
     } else if (next == 117) {
      if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else argText = unSign(currArg, 8 * argSize, 1).toString(10);
      currArg = Math.abs(currArg);
     } else if (next == 111) {
      argText = (flagAlternative ? "0" : "") + currAbsArg.toString(8);
     } else if (next == 120 || next == 88) {
      prefix = flagAlternative && currArg != 0 ? "0x" : "";
      if (argSize == 8 && i64Math) {
       if (origArg[1]) {
        argText = (origArg[1] >>> 0).toString(16);
        var lower = (origArg[0] >>> 0).toString(16);
        while (lower.length < 8) lower = "0" + lower;
        argText += lower;
       } else {
        argText = (origArg[0] >>> 0).toString(16);
       }
      } else if (currArg < 0) {
       currArg = -currArg;
       argText = (currAbsArg - 1).toString(16);
       var buffer = [];
       for (var i = 0; i < argText.length; i++) {
        buffer.push((15 - parseInt(argText[i], 16)).toString(16));
       }
       argText = buffer.join("");
       while (argText.length < argSize * 2) argText = "f" + argText;
      } else {
       argText = currAbsArg.toString(16);
      }
      if (next == 88) {
       prefix = prefix.toUpperCase();
       argText = argText.toUpperCase();
      }
     } else if (next == 112) {
      if (currAbsArg === 0) {
       argText = "(nil)";
      } else {
       prefix = "0x";
       argText = currAbsArg.toString(16);
      }
     }
     if (precisionSet) {
      while (argText.length < precision) {
       argText = "0" + argText;
      }
     }
     if (currArg >= 0) {
      if (flagAlwaysSigned) {
       prefix = "+" + prefix;
      } else if (flagPadSign) {
       prefix = " " + prefix;
      }
     }
     if (argText.charAt(0) == "-") {
      prefix = "-" + prefix;
      argText = argText.substr(1);
     }
     while (prefix.length + argText.length < width) {
      if (flagLeftAlign) {
       argText += " ";
      } else {
       if (flagZeroPad) {
        argText = "0" + argText;
       } else {
        prefix = " " + prefix;
       }
      }
     }
     argText = prefix + argText;
     argText.split("").forEach((function(chr) {
      ret.push(chr.charCodeAt(0));
     }));
     break;
    }
   case "f":
   case "F":
   case "e":
   case "E":
   case "g":
   case "G":
    {
     var currArg = getNextArg("double");
     var argText;
     if (isNaN(currArg)) {
      argText = "nan";
      flagZeroPad = false;
     } else if (!isFinite(currArg)) {
      argText = (currArg < 0 ? "-" : "") + "inf";
      flagZeroPad = false;
     } else {
      var isGeneral = false;
      var effectivePrecision = Math.min(precision, 20);
      if (next == 103 || next == 71) {
       isGeneral = true;
       precision = precision || 1;
       var exponent = parseInt(currArg.toExponential(effectivePrecision).split("e")[1], 10);
       if (precision > exponent && exponent >= -4) {
        next = (next == 103 ? "f" : "F").charCodeAt(0);
        precision -= exponent + 1;
       } else {
        next = (next == 103 ? "e" : "E").charCodeAt(0);
        precision--;
       }
       effectivePrecision = Math.min(precision, 20);
      }
      if (next == 101 || next == 69) {
       argText = currArg.toExponential(effectivePrecision);
       if (/[eE][-+]\d$/.test(argText)) {
        argText = argText.slice(0, -1) + "0" + argText.slice(-1);
       }
      } else if (next == 102 || next == 70) {
       argText = currArg.toFixed(effectivePrecision);
       if (currArg === 0 && __reallyNegative(currArg)) {
        argText = "-" + argText;
       }
      }
      var parts = argText.split("e");
      if (isGeneral && !flagAlternative) {
       while (parts[0].length > 1 && parts[0].indexOf(".") != -1 && (parts[0].slice(-1) == "0" || parts[0].slice(-1) == ".")) {
        parts[0] = parts[0].slice(0, -1);
       }
      } else {
       if (flagAlternative && argText.indexOf(".") == -1) parts[0] += ".";
       while (precision > effectivePrecision++) parts[0] += "0";
      }
      argText = parts[0] + (parts.length > 1 ? "e" + parts[1] : "");
      if (next == 69) argText = argText.toUpperCase();
      if (currArg >= 0) {
       if (flagAlwaysSigned) {
        argText = "+" + argText;
       } else if (flagPadSign) {
        argText = " " + argText;
       }
      }
     }
     while (argText.length < width) {
      if (flagLeftAlign) {
       argText += " ";
      } else {
       if (flagZeroPad && (argText[0] == "-" || argText[0] == "+")) {
        argText = argText[0] + "0" + argText.slice(1);
       } else {
        argText = (flagZeroPad ? "0" : " ") + argText;
       }
      }
     }
     if (next < 97) argText = argText.toUpperCase();
     argText.split("").forEach((function(chr) {
      ret.push(chr.charCodeAt(0));
     }));
     break;
    }
   case "s":
    {
     var arg = getNextArg("i8*");
     var argLength = arg ? _strlen(arg) : "(null)".length;
     if (precisionSet) argLength = Math.min(argLength, precision);
     if (!flagLeftAlign) {
      while (argLength < width--) {
       ret.push(32);
      }
     }
     if (arg) {
      for (var i = 0; i < argLength; i++) {
       ret.push(HEAPU8[arg++ >> 0]);
      }
     } else {
      ret = ret.concat(intArrayFromString("(null)".substr(0, argLength), true));
     }
     if (flagLeftAlign) {
      while (argLength < width--) {
       ret.push(32);
      }
     }
     break;
    }
   case "c":
    {
     if (flagLeftAlign) ret.push(getNextArg("i8"));
     while (--width > 0) {
      ret.push(32);
     }
     if (!flagLeftAlign) ret.push(getNextArg("i8"));
     break;
    }
   case "n":
    {
     var ptr = getNextArg("i32*");
     HEAP32[ptr >> 2] = ret.length;
     break;
    }
   case "%":
    {
     ret.push(curr);
     break;
    }
   default:
    {
     for (var i = startTextIndex; i < textIndex + 2; i++) {
      ret.push(HEAP8[i >> 0]);
     }
    }
   }
   textIndex += 2;
  } else {
   ret.push(curr);
   textIndex += 1;
  }
 }
 return ret;
}
function _fprintf(stream, format, varargs) {
 var result = __formatString(format, varargs);
 var stack = Runtime.stackSave();
 var ret = _fwrite(allocate(result, "i8", ALLOC_STACK), 1, result.length, stream);
 Runtime.stackRestore(stack);
 return ret;
}
function _printf(format, varargs) {
 var stdout = HEAP32[_stdout >> 2];
 return _fprintf(stdout, format, varargs);
}
function _close(fildes) {
 var stream = FS.getStream(fildes);
 if (!stream) {
  ___setErrNo(ERRNO_CODES.EBADF);
  return -1;
 }
 try {
  FS.close(stream);
  return 0;
 } catch (e) {
  FS.handleFSError(e);
  return -1;
 }
}
function _aaweb_print(p) {
 p = Pointer_stringify(p);
 var x = aaweb.x * aaweb.char_width;
 var y = aaweb.y * aaweb.char_height;
 var w = p.length * aaweb.char_width;
 var ctx = aaweb.ctx;
 var attr = aaweb.attr;
 ctx.fillStyle = attr & aaweb.MASK_REVERSE ? aaweb.fg_color : aaweb.bg_color;
 ctx.fillRect(x, y, w, aaweb.char_height);
 ctx.fillStyle = attr & aaweb.MASK_DIM ? aaweb.dim_color : attr & aaweb.MASK_REVERSE ? aaweb.bg_color : aaweb.fg_color;
 ctx.font = aaweb.attr & (aaweb.MASK_BOLD | aaweb.MASK_BOLDFONT) ? aaweb.bold_font_str : aaweb.font_str;
 ctx.fillText(p, x, y + aaweb.char_height, w);
 aaweb.x += p.length;
}
var ___DEFAULT_POLLMASK = 5;
function _select(nfds, readfds, writefds, exceptfds, timeout) {
 assert(nfds <= 64, "nfds must be less than or equal to 64");
 assert(!exceptfds, "exceptfds not supported");
 var total = 0;
 var srcReadLow = readfds ? HEAP32[readfds >> 2] : 0, srcReadHigh = readfds ? HEAP32[readfds + 4 >> 2] : 0;
 var srcWriteLow = writefds ? HEAP32[writefds >> 2] : 0, srcWriteHigh = writefds ? HEAP32[writefds + 4 >> 2] : 0;
 var srcExceptLow = exceptfds ? HEAP32[exceptfds >> 2] : 0, srcExceptHigh = exceptfds ? HEAP32[exceptfds + 4 >> 2] : 0;
 var dstReadLow = 0, dstReadHigh = 0;
 var dstWriteLow = 0, dstWriteHigh = 0;
 var dstExceptLow = 0, dstExceptHigh = 0;
 var allLow = (readfds ? HEAP32[readfds >> 2] : 0) | (writefds ? HEAP32[writefds >> 2] : 0) | (exceptfds ? HEAP32[exceptfds >> 2] : 0);
 var allHigh = (readfds ? HEAP32[readfds + 4 >> 2] : 0) | (writefds ? HEAP32[writefds + 4 >> 2] : 0) | (exceptfds ? HEAP32[exceptfds + 4 >> 2] : 0);
 function get(fd, low, high, val) {
  return fd < 32 ? low & val : high & val;
 }
 for (var fd = 0; fd < nfds; fd++) {
  var mask = 1 << fd % 32;
  if (!get(fd, allLow, allHigh, mask)) {
   continue;
  }
  var stream = FS.getStream(fd);
  if (!stream) {
   ___setErrNo(ERRNO_CODES.EBADF);
   return -1;
  }
  var flags = ___DEFAULT_POLLMASK;
  if (stream.stream_ops.poll) {
   flags = stream.stream_ops.poll(stream);
  }
  if (flags & 1 && get(fd, srcReadLow, srcReadHigh, mask)) {
   fd < 32 ? dstReadLow = dstReadLow | mask : dstReadHigh = dstReadHigh | mask;
   total++;
  }
  if (flags & 4 && get(fd, srcWriteLow, srcWriteHigh, mask)) {
   fd < 32 ? dstWriteLow = dstWriteLow | mask : dstWriteHigh = dstWriteHigh | mask;
   total++;
  }
  if (flags & 2 && get(fd, srcExceptLow, srcExceptHigh, mask)) {
   fd < 32 ? dstExceptLow = dstExceptLow | mask : dstExceptHigh = dstExceptHigh | mask;
   total++;
  }
 }
 if (readfds) {
  HEAP32[readfds >> 2] = dstReadLow;
  HEAP32[readfds + 4 >> 2] = dstReadHigh;
 }
 if (writefds) {
  HEAP32[writefds >> 2] = dstWriteLow;
  HEAP32[writefds + 4 >> 2] = dstWriteHigh;
 }
 if (exceptfds) {
  HEAP32[exceptfds >> 2] = dstExceptLow;
  HEAP32[exceptfds + 4 >> 2] = dstExceptHigh;
 }
 return total;
}
Module["_emscripten_async_stack_alloc"] = _emscripten_async_stack_alloc;
Module["_emscripten_alloc_async_context"] = _emscripten_alloc_async_context;
function _aaweb_get_width() {
 return aaweb.cols;
}
Module["_i64Add"] = _i64Add;
function _fputs(s, stream) {
 var fd = _fileno(stream);
 return _write(fd, s, _strlen(s));
}
function _fputc(c, stream) {
 var chr = unSign(c & 255);
 HEAP8[_fputc.ret >> 0] = chr;
 var fd = _fileno(stream);
 var ret = _write(fd, _fputc.ret, 1);
 if (ret == -1) {
  var streamObj = FS.getStreamFromPtr(stream);
  if (streamObj) streamObj.error = true;
  return -1;
 } else {
  return chr;
 }
}
function _puts(s) {
 var stdout = HEAP32[_stdout >> 2];
 var ret = _fputs(s, stdout);
 if (ret < 0) {
  return ret;
 } else {
  var newlineRet = _fputc(10, stdout);
  return newlineRet < 0 ? -1 : ret + 1;
 }
}
var _emscripten_do_not_unwind = true;
var _emscripten_save_async_stack_pointer = true;
var _sqrt = Math_sqrt;
var _emscripten_do_not_unwind_async = true;
function __exit(status) {
 Module["exit"](status);
}
function _exit(status) {
 __exit(status);
}
Module["_strncpy"] = _strncpy;
function _time(ptr) {
 var ret = Math.floor(Date.now() / 1e3);
 if (ptr) {
  HEAP32[ptr >> 2] = ret;
 }
 return ret;
}
var Browser = {
 mainLoop: {
  scheduler: null,
  method: "",
  shouldPause: false,
  paused: false,
  queue: [],
  pause: (function() {
   Browser.mainLoop.shouldPause = true;
  }),
  resume: (function() {
   if (Browser.mainLoop.paused) {
    Browser.mainLoop.paused = false;
    Browser.mainLoop.scheduler();
   }
   Browser.mainLoop.shouldPause = false;
  }),
  updateStatus: (function() {
   if (Module["setStatus"]) {
    var message = Module["statusMessage"] || "Please wait...";
    var remaining = Browser.mainLoop.remainingBlockers;
    var expected = Browser.mainLoop.expectedBlockers;
    if (remaining) {
     if (remaining < expected) {
      Module["setStatus"](message + " (" + (expected - remaining) + "/" + expected + ")");
     } else {
      Module["setStatus"](message);
     }
    } else {
     Module["setStatus"]("");
    }
   }
  }),
  runIter: (function(func) {
   if (ABORT) return;
   if (Module["preMainLoop"]) {
    var preRet = Module["preMainLoop"]();
    if (preRet === false) {
     return;
    }
   }
   try {
    func();
   } catch (e) {
    if (e instanceof ExitStatus) {
     return;
    } else {
     if (e && typeof e === "object" && e.stack) Module.printErr("exception thrown: " + [ e, e.stack ]);
     throw e;
    }
   }
   if (Module["postMainLoop"]) Module["postMainLoop"]();
  })
 },
 isFullScreen: false,
 pointerLock: false,
 moduleContextCreatedCallbacks: [],
 workers: [],
 init: (function() {
  if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  if (Browser.initted) return;
  Browser.initted = true;
  try {
   new Blob;
   Browser.hasBlobConstructor = true;
  } catch (e) {
   Browser.hasBlobConstructor = false;
   console.log("warning: no blob constructor, cannot create blobs with mimetypes");
  }
  Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : !Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null;
  Browser.URLObject = typeof window != "undefined" ? window.URL ? window.URL : window.webkitURL : undefined;
  if (!Module.noImageDecoding && typeof Browser.URLObject === "undefined") {
   console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
   Module.noImageDecoding = true;
  }
  var imagePlugin = {};
  imagePlugin["canHandle"] = function imagePlugin_canHandle(name) {
   return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
  };
  imagePlugin["handle"] = function imagePlugin_handle(byteArray, name, onload, onerror) {
   var b = null;
   if (Browser.hasBlobConstructor) {
    try {
     b = new Blob([ byteArray ], {
      type: Browser.getMimetype(name)
     });
     if (b.size !== byteArray.length) {
      b = new Blob([ (new Uint8Array(byteArray)).buffer ], {
       type: Browser.getMimetype(name)
      });
     }
    } catch (e) {
     Runtime.warnOnce("Blob constructor present but fails: " + e + "; falling back to blob builder");
    }
   }
   if (!b) {
    var bb = new Browser.BlobBuilder;
    bb.append((new Uint8Array(byteArray)).buffer);
    b = bb.getBlob();
   }
   var url = Browser.URLObject.createObjectURL(b);
   var img = new Image;
   img.onload = function img_onload() {
    assert(img.complete, "Image " + name + " could not be decoded");
    var canvas = document.createElement("canvas");
    canvas.width = img.width;
    canvas.height = img.height;
    var ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0);
    Module["preloadedImages"][name] = canvas;
    Browser.URLObject.revokeObjectURL(url);
    if (onload) onload(byteArray);
   };
   img.onerror = function img_onerror(event) {
    console.log("Image " + url + " could not be decoded");
    if (onerror) onerror();
   };
   img.src = url;
  };
  Module["preloadPlugins"].push(imagePlugin);
  var audioPlugin = {};
  audioPlugin["canHandle"] = function audioPlugin_canHandle(name) {
   return !Module.noAudioDecoding && name.substr(-4) in {
    ".ogg": 1,
    ".wav": 1,
    ".mp3": 1
   };
  };
  audioPlugin["handle"] = function audioPlugin_handle(byteArray, name, onload, onerror) {
   var done = false;
   function finish(audio) {
    if (done) return;
    done = true;
    Module["preloadedAudios"][name] = audio;
    if (onload) onload(byteArray);
   }
   function fail() {
    if (done) return;
    done = true;
    Module["preloadedAudios"][name] = new Audio;
    if (onerror) onerror();
   }
   if (Browser.hasBlobConstructor) {
    try {
     var b = new Blob([ byteArray ], {
      type: Browser.getMimetype(name)
     });
    } catch (e) {
     return fail();
    }
    var url = Browser.URLObject.createObjectURL(b);
    var audio = new Audio;
    audio.addEventListener("canplaythrough", (function() {
     finish(audio);
    }), false);
    audio.onerror = function audio_onerror(event) {
     if (done) return;
     console.log("warning: browser could not fully decode audio " + name + ", trying slower base64 approach");
     function encode64(data) {
      var BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      var PAD = "=";
      var ret = "";
      var leftchar = 0;
      var leftbits = 0;
      for (var i = 0; i < data.length; i++) {
       leftchar = leftchar << 8 | data[i];
       leftbits += 8;
       while (leftbits >= 6) {
        var curr = leftchar >> leftbits - 6 & 63;
        leftbits -= 6;
        ret += BASE[curr];
       }
      }
      if (leftbits == 2) {
       ret += BASE[(leftchar & 3) << 4];
       ret += PAD + PAD;
      } else if (leftbits == 4) {
       ret += BASE[(leftchar & 15) << 2];
       ret += PAD;
      }
      return ret;
     }
     audio.src = "data:audio/x-" + name.substr(-3) + ";base64," + encode64(byteArray);
     finish(audio);
    };
    audio.src = url;
    Browser.safeSetTimeout((function() {
     finish(audio);
    }), 1e4);
   } else {
    return fail();
   }
  };
  Module["preloadPlugins"].push(audioPlugin);
  var canvas = Module["canvas"];
  function pointerLockChange() {
   Browser.pointerLock = document["pointerLockElement"] === canvas || document["mozPointerLockElement"] === canvas || document["webkitPointerLockElement"] === canvas || document["msPointerLockElement"] === canvas;
  }
  if (canvas) {
   canvas.requestPointerLock = canvas["requestPointerLock"] || canvas["mozRequestPointerLock"] || canvas["webkitRequestPointerLock"] || canvas["msRequestPointerLock"] || (function() {});
   canvas.exitPointerLock = document["exitPointerLock"] || document["mozExitPointerLock"] || document["webkitExitPointerLock"] || document["msExitPointerLock"] || (function() {});
   canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
   document.addEventListener("pointerlockchange", pointerLockChange, false);
   document.addEventListener("mozpointerlockchange", pointerLockChange, false);
   document.addEventListener("webkitpointerlockchange", pointerLockChange, false);
   document.addEventListener("mspointerlockchange", pointerLockChange, false);
   if (Module["elementPointerLock"]) {
    canvas.addEventListener("click", (function(ev) {
     if (!Browser.pointerLock && canvas.requestPointerLock) {
      canvas.requestPointerLock();
      ev.preventDefault();
     }
    }), false);
   }
  }
 }),
 createContext: (function(canvas, useWebGL, setInModule, webGLContextAttributes) {
  if (useWebGL && Module.ctx) return Module.ctx;
  var ctx;
  var errorInfo = "?";
  function onContextCreationError(event) {
   errorInfo = event.statusMessage || errorInfo;
  }
  try {
   if (useWebGL) {
    var contextAttributes = {
     antialias: false,
     alpha: false
    };
    if (webGLContextAttributes) {
     for (var attribute in webGLContextAttributes) {
      contextAttributes[attribute] = webGLContextAttributes[attribute];
     }
    }
    canvas.addEventListener("webglcontextcreationerror", onContextCreationError, false);
    try {
     [ "experimental-webgl", "webgl" ].some((function(webglId) {
      return ctx = canvas.getContext(webglId, contextAttributes);
     }));
    } finally {
     canvas.removeEventListener("webglcontextcreationerror", onContextCreationError, false);
    }
   } else {
    ctx = canvas.getContext("2d");
   }
   if (!ctx) throw ":(";
  } catch (e) {
   Module.print("Could not create canvas: " + [ errorInfo, e ]);
   return null;
  }
  if (useWebGL) {
   canvas.style.backgroundColor = "black";
  }
  if (setInModule) {
   if (!useWebGL) assert(typeof GLctx === "undefined", "cannot set in module if GLctx is used, but we are a non-GL context that would replace it");
   Module.ctx = ctx;
   if (useWebGL) GLctx = ctx;
   Module.useWebGL = useWebGL;
   Browser.moduleContextCreatedCallbacks.forEach((function(callback) {
    callback();
   }));
   Browser.init();
  }
  return ctx;
 }),
 destroyContext: (function(canvas, useWebGL, setInModule) {}),
 fullScreenHandlersInstalled: false,
 lockPointer: undefined,
 resizeCanvas: undefined,
 requestFullScreen: (function(lockPointer, resizeCanvas) {
  Browser.lockPointer = lockPointer;
  Browser.resizeCanvas = resizeCanvas;
  if (typeof Browser.lockPointer === "undefined") Browser.lockPointer = true;
  if (typeof Browser.resizeCanvas === "undefined") Browser.resizeCanvas = false;
  var canvas = Module["canvas"];
  function fullScreenChange() {
   Browser.isFullScreen = false;
   var canvasContainer = canvas.parentNode;
   if ((document["webkitFullScreenElement"] || document["webkitFullscreenElement"] || document["mozFullScreenElement"] || document["mozFullscreenElement"] || document["fullScreenElement"] || document["fullscreenElement"] || document["msFullScreenElement"] || document["msFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvasContainer) {
    canvas.cancelFullScreen = document["cancelFullScreen"] || document["mozCancelFullScreen"] || document["webkitCancelFullScreen"] || document["msExitFullscreen"] || document["exitFullscreen"] || (function() {});
    canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
    if (Browser.lockPointer) canvas.requestPointerLock();
    Browser.isFullScreen = true;
    if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
   } else {
    canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
    canvasContainer.parentNode.removeChild(canvasContainer);
    if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
   }
   if (Module["onFullScreen"]) Module["onFullScreen"](Browser.isFullScreen);
   Browser.updateCanvasDimensions(canvas);
  }
  if (!Browser.fullScreenHandlersInstalled) {
   Browser.fullScreenHandlersInstalled = true;
   document.addEventListener("fullscreenchange", fullScreenChange, false);
   document.addEventListener("mozfullscreenchange", fullScreenChange, false);
   document.addEventListener("webkitfullscreenchange", fullScreenChange, false);
   document.addEventListener("MSFullscreenChange", fullScreenChange, false);
  }
  var canvasContainer = document.createElement("div");
  canvas.parentNode.insertBefore(canvasContainer, canvas);
  canvasContainer.appendChild(canvas);
  canvasContainer.requestFullScreen = canvasContainer["requestFullScreen"] || canvasContainer["mozRequestFullScreen"] || canvasContainer["msRequestFullscreen"] || (canvasContainer["webkitRequestFullScreen"] ? (function() {
   canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]);
  }) : null);
  canvasContainer.requestFullScreen();
 }),
 nextRAF: 0,
 fakeRequestAnimationFrame: (function(func) {
  var now = Date.now();
  if (Browser.nextRAF === 0) {
   Browser.nextRAF = now + 1e3 / 60;
  } else {
   while (now + 2 >= Browser.nextRAF) {
    Browser.nextRAF += 1e3 / 60;
   }
  }
  var delay = Math.max(Browser.nextRAF - now, 0);
  setTimeout(func, delay);
 }),
 requestAnimationFrame: function requestAnimationFrame(func) {
  if (typeof window === "undefined") {
   Browser.fakeRequestAnimationFrame(func);
  } else {
   if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = window["requestAnimationFrame"] || window["mozRequestAnimationFrame"] || window["webkitRequestAnimationFrame"] || window["msRequestAnimationFrame"] || window["oRequestAnimationFrame"] || Browser.fakeRequestAnimationFrame;
   }
   window.requestAnimationFrame(func);
  }
 },
 safeCallback: (function(func) {
  return (function() {
   if (!ABORT) return func.apply(null, arguments);
  });
 }),
 safeRequestAnimationFrame: (function(func) {
  return Browser.requestAnimationFrame((function() {
   if (!ABORT) func();
  }));
 }),
 safeSetTimeout: (function(func, timeout) {
  Module["noExitRuntime"] = true;
  return setTimeout((function() {
   if (!ABORT) func();
  }), timeout);
 }),
 safeSetInterval: (function(func, timeout) {
  Module["noExitRuntime"] = true;
  return setInterval((function() {
   if (!ABORT) func();
  }), timeout);
 }),
 getMimetype: (function(name) {
  return {
   "jpg": "image/jpeg",
   "jpeg": "image/jpeg",
   "png": "image/png",
   "bmp": "image/bmp",
   "ogg": "audio/ogg",
   "wav": "audio/wav",
   "mp3": "audio/mpeg"
  }[name.substr(name.lastIndexOf(".") + 1)];
 }),
 getUserMedia: (function(func) {
  if (!window.getUserMedia) {
   window.getUserMedia = navigator["getUserMedia"] || navigator["mozGetUserMedia"];
  }
  window.getUserMedia(func);
 }),
 getMovementX: (function(event) {
  return event["movementX"] || event["mozMovementX"] || event["webkitMovementX"] || 0;
 }),
 getMovementY: (function(event) {
  return event["movementY"] || event["mozMovementY"] || event["webkitMovementY"] || 0;
 }),
 getMouseWheelDelta: (function(event) {
  var delta = 0;
  switch (event.type) {
  case "DOMMouseScroll":
   delta = event.detail;
   break;
  case "mousewheel":
   delta = -event.wheelDelta;
   break;
  case "wheel":
   delta = event.deltaY;
   break;
  default:
   throw "unrecognized mouse wheel event: " + event.type;
  }
  return Math.max(-1, Math.min(1, delta));
 }),
 mouseX: 0,
 mouseY: 0,
 mouseMovementX: 0,
 mouseMovementY: 0,
 touches: {},
 lastTouches: {},
 calculateMouseEvent: (function(event) {
  if (Browser.pointerLock) {
   if (event.type != "mousemove" && "mozMovementX" in event) {
    Browser.mouseMovementX = Browser.mouseMovementY = 0;
   } else {
    Browser.mouseMovementX = Browser.getMovementX(event);
    Browser.mouseMovementY = Browser.getMovementY(event);
   }
   if (typeof SDL != "undefined") {
    Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
    Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
   } else {
    Browser.mouseX += Browser.mouseMovementX;
    Browser.mouseY += Browser.mouseMovementY;
   }
  } else {
   var rect = Module["canvas"].getBoundingClientRect();
   var cw = Module["canvas"].width;
   var ch = Module["canvas"].height;
   var scrollX = typeof window.scrollX !== "undefined" ? window.scrollX : window.pageXOffset;
   var scrollY = typeof window.scrollY !== "undefined" ? window.scrollY : window.pageYOffset;
   if (event.type === "touchstart" || event.type === "touchend" || event.type === "touchmove") {
    var touch = event.touch;
    if (touch === undefined) {
     return;
    }
    var adjustedX = touch.pageX - (scrollX + rect.left);
    var adjustedY = touch.pageY - (scrollY + rect.top);
    adjustedX = adjustedX * (cw / rect.width);
    adjustedY = adjustedY * (ch / rect.height);
    var coords = {
     x: adjustedX,
     y: adjustedY
    };
    if (event.type === "touchstart") {
     Browser.lastTouches[touch.identifier] = coords;
     Browser.touches[touch.identifier] = coords;
    } else if (event.type === "touchend" || event.type === "touchmove") {
     Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
     Browser.touches[touch.identifier] = {
      x: adjustedX,
      y: adjustedY
     };
    }
    return;
   }
   var x = event.pageX - (scrollX + rect.left);
   var y = event.pageY - (scrollY + rect.top);
   x = x * (cw / rect.width);
   y = y * (ch / rect.height);
   Browser.mouseMovementX = x - Browser.mouseX;
   Browser.mouseMovementY = y - Browser.mouseY;
   Browser.mouseX = x;
   Browser.mouseY = y;
  }
 }),
 xhrLoad: (function(url, onload, onerror) {
  var xhr = new XMLHttpRequest;
  xhr.open("GET", url, true);
  xhr.responseType = "arraybuffer";
  xhr.onload = function xhr_onload() {
   if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
    onload(xhr.response);
   } else {
    onerror();
   }
  };
  xhr.onerror = onerror;
  xhr.send(null);
 }),
 asyncLoad: (function(url, onload, onerror, noRunDep) {
  Browser.xhrLoad(url, (function(arrayBuffer) {
   assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
   onload(new Uint8Array(arrayBuffer));
   if (!noRunDep) removeRunDependency("al " + url);
  }), (function(event) {
   if (onerror) {
    onerror();
   } else {
    throw 'Loading data file "' + url + '" failed.';
   }
  }));
  if (!noRunDep) addRunDependency("al " + url);
 }),
 resizeListeners: [],
 updateResizeListeners: (function() {
  var canvas = Module["canvas"];
  Browser.resizeListeners.forEach((function(listener) {
   listener(canvas.width, canvas.height);
  }));
 }),
 setCanvasSize: (function(width, height, noUpdates) {
  var canvas = Module["canvas"];
  Browser.updateCanvasDimensions(canvas, width, height);
  if (!noUpdates) Browser.updateResizeListeners();
 }),
 windowedWidth: 0,
 windowedHeight: 0,
 setFullScreenCanvasSize: (function() {
  if (typeof SDL != "undefined") {
   var flags = HEAPU32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2];
   flags = flags | 8388608;
   HEAP32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2] = flags;
  }
  Browser.updateResizeListeners();
 }),
 setWindowedCanvasSize: (function() {
  if (typeof SDL != "undefined") {
   var flags = HEAPU32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2];
   flags = flags & ~8388608;
   HEAP32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2] = flags;
  }
  Browser.updateResizeListeners();
 }),
 updateCanvasDimensions: (function(canvas, wNative, hNative) {
  if (wNative && hNative) {
   canvas.widthNative = wNative;
   canvas.heightNative = hNative;
  } else {
   wNative = canvas.widthNative;
   hNative = canvas.heightNative;
  }
  var w = wNative;
  var h = hNative;
  if (Module["forcedAspectRatio"] && Module["forcedAspectRatio"] > 0) {
   if (w / h < Module["forcedAspectRatio"]) {
    w = Math.round(h * Module["forcedAspectRatio"]);
   } else {
    h = Math.round(w / Module["forcedAspectRatio"]);
   }
  }
  if ((document["webkitFullScreenElement"] || document["webkitFullscreenElement"] || document["mozFullScreenElement"] || document["mozFullscreenElement"] || document["fullScreenElement"] || document["fullscreenElement"] || document["msFullScreenElement"] || document["msFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvas.parentNode && typeof screen != "undefined") {
   var factor = Math.min(screen.width / w, screen.height / h);
   w = Math.round(w * factor);
   h = Math.round(h * factor);
  }
  if (Browser.resizeCanvas) {
   if (canvas.width != w) canvas.width = w;
   if (canvas.height != h) canvas.height = h;
   if (typeof canvas.style != "undefined") {
    canvas.style.removeProperty("width");
    canvas.style.removeProperty("height");
   }
  } else {
   if (canvas.width != wNative) canvas.width = wNative;
   if (canvas.height != hNative) canvas.height = hNative;
   if (typeof canvas.style != "undefined") {
    if (w != wNative || h != hNative) {
     canvas.style.setProperty("width", w + "px", "important");
     canvas.style.setProperty("height", h + "px", "important");
    } else {
     canvas.style.removeProperty("width");
     canvas.style.removeProperty("height");
    }
   }
  }
 })
};
var _emscripten_check_async = true;
var _sin = Math_sin;
function _fmod(x, y) {
 return x % y;
}
function _fmodl() {
 return _fmod.apply(null, arguments);
}
Module["_bitshift64Lshr"] = _bitshift64Lshr;
Module["_memset"] = _memset;
function _recv(fd, buf, len, flags) {
 var sock = SOCKFS.getSocket(fd);
 if (!sock) {
  ___setErrNo(ERRNO_CODES.EBADF);
  return -1;
 }
 return _read(fd, buf, len);
}
function _pread(fildes, buf, nbyte, offset) {
 var stream = FS.getStream(fildes);
 if (!stream) {
  ___setErrNo(ERRNO_CODES.EBADF);
  return -1;
 }
 try {
  var slab = HEAP8;
  return FS.read(stream, slab, buf, nbyte, offset);
 } catch (e) {
  FS.handleFSError(e);
  return -1;
 }
}
function _read(fildes, buf, nbyte) {
 var stream = FS.getStream(fildes);
 if (!stream) {
  ___setErrNo(ERRNO_CODES.EBADF);
  return -1;
 }
 try {
  var slab = HEAP8;
  return FS.read(stream, slab, buf, nbyte);
 } catch (e) {
  FS.handleFSError(e);
  return -1;
 }
}
var _BDtoIHigh = true;
var _environ = allocate(1, "i32*", ALLOC_STATIC);
var ___environ = _environ;
function ___buildEnvironment(env) {
 var MAX_ENV_VALUES = 64;
 var TOTAL_ENV_SIZE = 1024;
 var poolPtr;
 var envPtr;
 if (!___buildEnvironment.called) {
  ___buildEnvironment.called = true;
  ENV["USER"] = "root";
  ENV["PATH"] = "/";
  ENV["PWD"] = "/";
  ENV["HOME"] = "/home/emscripten";
  ENV["LANG"] = "en_US.UTF-8";
  ENV["_"] = "./this.program";
  poolPtr = allocate(TOTAL_ENV_SIZE, "i8", ALLOC_STATIC);
  envPtr = allocate(MAX_ENV_VALUES * 4, "i8*", ALLOC_STATIC);
  HEAP32[envPtr >> 2] = poolPtr;
  HEAP32[_environ >> 2] = envPtr;
 } else {
  envPtr = HEAP32[_environ >> 2];
  poolPtr = HEAP32[envPtr >> 2];
 }
 var strings = [];
 var totalSize = 0;
 for (var key in env) {
  if (typeof env[key] === "string") {
   var line = key + "=" + env[key];
   strings.push(line);
   totalSize += line.length;
  }
 }
 if (totalSize > TOTAL_ENV_SIZE) {
  throw new Error("Environment size exceeded TOTAL_ENV_SIZE!");
 }
 var ptrSize = 4;
 for (var i = 0; i < strings.length; i++) {
  var line = strings[i];
  writeAsciiToMemory(line, poolPtr);
  HEAP32[envPtr + i * ptrSize >> 2] = poolPtr;
  poolPtr += line.length + 1;
 }
 HEAP32[envPtr + strings.length * ptrSize >> 2] = 0;
}
var ENV = {};
function _getenv(name) {
 if (name === 0) return 0;
 name = Pointer_stringify(name);
 if (!ENV.hasOwnProperty(name)) return 0;
 if (_getenv.ret) _free(_getenv.ret);
 _getenv.ret = allocate(intArrayFromString(ENV[name]), "i8", ALLOC_NORMAL);
 return _getenv.ret;
}
Module["_emscripten_realloc_async_context"] = _emscripten_realloc_async_context;
function _gettimeofday(ptr) {
 var now = Date.now();
 HEAP32[ptr >> 2] = Math.floor(now / 1e3);
 HEAP32[ptr + 4 >> 2] = Math.floor((now - 1e3 * Math.floor(now / 1e3)) * 1e3);
 return 0;
}
var ___async_retval = allocate(2, "i32", ALLOC_STATIC);
var _emscripten_get_async_return_value_addr = true;
function _emscripten_memcpy_big(dest, src, num) {
 HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
 return dest;
}
Module["_memcpy"] = _memcpy;
function _aaweb_setattr(attr) {
 aaweb.attr = attr;
}
var _cos = Math_cos;
var _llvm_pow_f64 = Math_pow;
function _sbrk(bytes) {
 var self = _sbrk;
 if (!self.called) {
  DYNAMICTOP = alignMemoryPage(DYNAMICTOP);
  self.called = true;
  assert(Runtime.dynamicAlloc);
  self.alloc = Runtime.dynamicAlloc;
  Runtime.dynamicAlloc = (function() {
   abort("cannot dynamically allocate, sbrk now has control");
  });
 }
 var ret = DYNAMICTOP;
 if (bytes != 0) self.alloc(bytes);
 return ret;
}
var _fabs = Math_abs;
function _signal(sig, func) {
 return 0;
}
function ___errno_location() {
 return ___errno_state;
}
var _BItoD = true;
function _copysign(a, b) {
 return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
}
function _copysignl() {
 return _copysign.apply(null, arguments);
}
function _aaweb_get_height() {
 return aaweb.rows;
}
Module["_emscripten_free_async_context"] = _emscripten_free_async_context;
___errno_state = Runtime.staticAlloc(4);
HEAP32[___errno_state >> 2] = 0;
FS.staticInit();
__ATINIT__.unshift({
 func: (function() {
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
 })
});
__ATMAIN__.push({
 func: (function() {
  FS.ignorePermissions = false;
 })
});
__ATEXIT__.push({
 func: (function() {
  FS.quit();
 })
});
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({
 func: (function() {
  TTY.init();
 })
});
__ATEXIT__.push({
 func: (function() {
  TTY.shutdown();
 })
});
TTY.utf8 = new Runtime.UTF8Processor;
if (ENVIRONMENT_IS_NODE) {
 var fs = require("fs");
 NODEFS.staticInit();
}
__ATINIT__.push({
 func: (function() {
  SOCKFS.root = FS.mount(SOCKFS, {}, null);
 })
});
_fputc.ret = allocate([ 0 ], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) {
 Browser.requestFullScreen(lockPointer, resizeCanvas);
};
Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) {
 Browser.requestAnimationFrame(func);
};
Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) {
 Browser.setCanvasSize(width, height, noUpdates);
};
Module["pauseMainLoop"] = function Module_pauseMainLoop() {
 Browser.mainLoop.pause();
};
Module["resumeMainLoop"] = function Module_resumeMainLoop() {
 Browser.mainLoop.resume();
};
Module["getUserMedia"] = function Module_getUserMedia() {
 Browser.getUserMedia();
};
___buildEnvironment(ENV);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true;
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");
var ctlz_i8 = allocate([ 8, 7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], "i8", ALLOC_DYNAMIC);
var cttz_i8 = allocate([ 8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0 ], "i8", ALLOC_DYNAMIC);
var Math_min = Math.min;
function invoke_iiiii(index, a1, a2, a3, a4) {
 try {
  return Module["dynCall_iiiii"](index, a1, a2, a3, a4);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vi(index, a1) {
 try {
  Module["dynCall_vi"](index, a1);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vii(index, a1, a2) {
 try {
  Module["dynCall_vii"](index, a1, a2);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_idddd(index, a1, a2, a3, a4) {
 try {
  return Module["dynCall_idddd"](index, a1, a2, a3, a4);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiii(index, a1, a2, a3) {
 try {
  return Module["dynCall_iiii"](index, a1, a2, a3);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viii(index, a1, a2, a3) {
 try {
  Module["dynCall_viii"](index, a1, a2, a3);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_v(index) {
 try {
  Module["dynCall_v"](index);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iii(index, a1, a2) {
 try {
  return Module["dynCall_iii"](index, a1, a2);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiii(index, a1, a2, a3, a4) {
 try {
  Module["dynCall_viiii"](index, a1, a2, a3, a4);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function asmPrintInt(x, y) {
 Module.print("int " + x + "," + y);
}
function asmPrintFloat(x, y) {
 Module.print("float " + x + "," + y);
}

var asm = (function(global,env,buffer) {
// EMSCRIPTEN_START_ASM

    'use asm';
    var HEAP8 = new global.Int8Array(buffer);
    var HEAP16 = new global.Int16Array(buffer);
    var HEAP32 = new global.Int32Array(buffer);
    var HEAPU8 = new global.Uint8Array(buffer);
    var HEAPU16 = new global.Uint16Array(buffer);
    var HEAPU32 = new global.Uint32Array(buffer);
    var HEAPF32 = new global.Float32Array(buffer);
    var HEAPF64 = new global.Float64Array(buffer);
  
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var ___rand_seed=env.___rand_seed|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_stacktop=env.___async_stacktop|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;
  var _stderr=env._stderr|0;

    var __THREW__ = 0;
    var threwValue = 0;
    var setjmpId = 0;
    var undef = 0;
    var nan = +env.NaN, inf = +env.Infinity;
    var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  
    var tempRet0 = 0;
    var tempRet1 = 0;
    var tempRet2 = 0;
    var tempRet3 = 0;
    var tempRet4 = 0;
    var tempRet5 = 0;
    var tempRet6 = 0;
    var tempRet7 = 0;
    var tempRet8 = 0;
    var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_idddd=env.invoke_idddd;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _sin=env._sin;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _send=env._send;
  var _aaweb_get_height=env._aaweb_get_height;
  var _aaweb_setattr=env._aaweb_setattr;
  var _fmod=env._fmod;
  var _fmodl=env._fmodl;
  var ___buildEnvironment=env.___buildEnvironment;
  var _fflush=env._fflush;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _signal=env._signal;
  var ___setErrNo=env.___setErrNo;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _sysconf=env._sysconf;
  var _srand=env._srand;
  var _close=env._close;
  var _aaweb_get_width=env._aaweb_get_width;
  var _cos=env._cos;
  var _fputs=env._fputs;
  var _pread=env._pread;
  var _puts=env._puts;
  var _printf=env._printf;
  var __reallyNegative=env.__reallyNegative;
  var _write=env._write;
  var _aaweb_init=env._aaweb_init;
  var ___errno_location=env.___errno_location;
  var _select=env._select;
  var _recv=env._recv;
  var _emscripten_sleep=env._emscripten_sleep;
  var _aaweb_gotoxy=env._aaweb_gotoxy;
  var _copysign=env._copysign;
  var _getenv=env._getenv;
  var _mkport=env._mkport;
  var __exit=env.__exit;
  var _aaweb_print=env._aaweb_print;
  var _copysignl=env._copysignl;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var _gettimeofday=env._gettimeofday;
  var __formatString=env.__formatString;
  var _fputc=env._fputc;
  var _sqrt=env._sqrt;
  var _exit=env._exit;
  var _read=env._read;
  var tempFloat = 0.0;

  // EMSCRIPTEN_START_FUNCS
function _printf_core(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, d82 = 0.0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, d107 = 0.0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, d119 = 0.0, d120 = 0.0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, d126 = 0.0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, d139 = 0.0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0, i151 = 0, i152 = 0, i153 = 0, i154 = 0, i155 = 0, i156 = 0, i157 = 0, i158 = 0, i159 = 0, i160 = 0, i161 = 0, i162 = 0, i163 = 0, i164 = 0, i165 = 0, i166 = 0, i167 = 0, i168 = 0, d169 = 0.0, d170 = 0.0, d171 = 0.0, i172 = 0, i173 = 0, i174 = 0, i175 = 0, i176 = 0, i177 = 0, i178 = 0, i179 = 0, i180 = 0, i181 = 0, i182 = 0, i183 = 0, i184 = 0, i185 = 0, i186 = 0, i187 = 0, i188 = 0, i189 = 0, i190 = 0, i191 = 0, i192 = 0, i193 = 0, i194 = 0, i195 = 0, i196 = 0, i197 = 0, i198 = 0, i199 = 0, i200 = 0, i201 = 0, i202 = 0, i203 = 0, i204 = 0, i205 = 0, i206 = 0, i207 = 0, i208 = 0, i209 = 0, i210 = 0, i211 = 0, i212 = 0, i213 = 0, i214 = 0, i215 = 0, i216 = 0, i217 = 0, i218 = 0, i219 = 0, i220 = 0, i221 = 0, i222 = 0, i223 = 0, i224 = 0, i225 = 0, i226 = 0, i227 = 0, i228 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 864 | 0;
 i7 = i6 + 16 | 0;
 i8 = i6 + 8 | 0;
 i9 = i6 + 836 | 0;
 i10 = i9;
 i11 = i6 + 824 | 0;
 i12 = i6 + 568 | 0;
 i13 = i6 + 528 | 0;
 i14 = i6;
 i15 = i6 + 520 | 0;
 i16 = (i1 | 0) != 0;
 i17 = i13 + 40 | 0;
 i18 = i17;
 i19 = i13 + 39 | 0;
 i13 = i14 + 4 | 0;
 i20 = i11 + 12 | 0;
 i21 = i11 + 11 | 0;
 i11 = i20;
 i22 = i11 - i10 | 0;
 i23 = -2 - i10 | 0;
 i24 = i11 + 2 | 0;
 i25 = i7 + 288 | 0;
 i26 = i9 + 9 | 0;
 i27 = i26;
 i28 = i9 + 8 | 0;
 i29 = 0;
 i30 = 0;
 i31 = i2;
 i2 = 0;
 i32 = 0;
 i33 = 0;
 L1 : while (1) {
  do {
   if ((i2 | 0) > -1) {
    if ((i32 | 0) > (2147483647 - i2 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75;
     i34 = -1;
     break;
    } else {
     i34 = i32 + i2 | 0;
     break;
    }
   } else {
    i34 = i2;
   }
  } while (0);
  i35 = HEAP8[i31 >> 0] | 0;
  if (i35 << 24 >> 24 == 0) {
   i36 = 344;
   break;
  } else {
   i37 = i35;
   i38 = i31;
  }
  while (1) {
   if (i37 << 24 >> 24 == 0) {
    i39 = i38;
    i40 = i38;
    break;
   } else if (i37 << 24 >> 24 == 37) {
    i41 = i38;
    i42 = i38;
    i36 = 9;
    break;
   }
   i35 = i38 + 1 | 0;
   i37 = HEAP8[i35 >> 0] | 0;
   i38 = i35;
  }
  L12 : do {
   if ((i36 | 0) == 9) {
    while (1) {
     i36 = 0;
     if ((HEAP8[i41 + 1 >> 0] | 0) != 37) {
      i39 = i41;
      i40 = i42;
      break L12;
     }
     i35 = i42 + 1 | 0;
     i43 = i41 + 2 | 0;
     if ((HEAP8[i43 >> 0] | 0) == 37) {
      i41 = i43;
      i42 = i35;
      i36 = 9;
     } else {
      i39 = i43;
      i40 = i35;
      break;
     }
    }
   }
  } while (0);
  i35 = i40 - i31 | 0;
  if (i16) {
   ___fwritex(i31, i35, i1) | 0;
  }
  if ((i40 | 0) != (i31 | 0)) {
   i31 = i39;
   i2 = i34;
   i32 = i35;
   continue;
  }
  i43 = i39 + 1 | 0;
  i44 = HEAP8[i43 >> 0] | 0;
  i45 = (i44 << 24 >> 24) + -48 | 0;
  if (i45 >>> 0 < 10 ? (HEAP8[i39 + 2 >> 0] | 0) == 36 : 0) {
   i46 = i39 + 3 | 0;
   i47 = HEAP8[i46 >> 0] | 0;
   i48 = i45;
   i49 = 1;
   i50 = i46;
  } else {
   i47 = i44;
   i48 = -1;
   i49 = i33;
   i50 = i43;
  }
  i43 = i47 << 24 >> 24;
  L25 : do {
   if ((i43 + -32 | 0) >>> 0 < 32) {
    i44 = i43;
    i46 = i47;
    i45 = 0;
    i51 = i50;
    while (1) {
     if ((1 << i44 + -32 & 75913 | 0) == 0) {
      i52 = i46;
      i53 = i45;
      i54 = i51;
      break L25;
     }
     i55 = 1 << (i46 << 24 >> 24) + -32 | i45;
     i56 = i51 + 1 | 0;
     i57 = HEAP8[i56 >> 0] | 0;
     i44 = i57 << 24 >> 24;
     if (!((i44 + -32 | 0) >>> 0 < 32)) {
      i52 = i57;
      i53 = i55;
      i54 = i56;
      break;
     } else {
      i46 = i57;
      i45 = i55;
      i51 = i56;
     }
    }
   } else {
    i52 = i47;
    i53 = 0;
    i54 = i50;
   }
  } while (0);
  do {
   if (i52 << 24 >> 24 == 42) {
    i43 = i54 + 1 | 0;
    i51 = (HEAP8[i43 >> 0] | 0) + -48 | 0;
    if (i51 >>> 0 < 10 ? (HEAP8[i54 + 2 >> 0] | 0) == 36 : 0) {
     HEAP32[i5 + (i51 << 2) >> 2] = 10;
     i58 = 1;
     i59 = i54 + 3 | 0;
     i60 = HEAP32[i4 + ((HEAP8[i43 >> 0] | 0) + -48 << 3) >> 2] | 0;
    } else {
     if ((i49 | 0) != 0) {
      i61 = -1;
      i36 = 362;
      break L1;
     }
     if (!i16) {
      i62 = i43;
      i63 = i53;
      i64 = 0;
      i65 = 0;
      break;
     }
     i51 = HEAP32[i3 >> 2] | 0;
     i45 = HEAP32[i51 >> 2] | 0;
     HEAP32[i3 >> 2] = i51 + 4;
     i58 = 0;
     i59 = i43;
     i60 = i45;
    }
    if ((i60 | 0) < 0) {
     i62 = i59;
     i63 = i53 | 8192;
     i64 = i58;
     i65 = 0 - i60 | 0;
    } else {
     i62 = i59;
     i63 = i53;
     i64 = i58;
     i65 = i60;
    }
   } else {
    i45 = i52 << 24 >> 24;
    if ((i45 + -48 | 0) >>> 0 < 10) {
     i43 = i45;
     i45 = i54;
     i51 = 0;
     do {
      i51 = i43 + -48 + (i51 * 10 | 0) | 0;
      i45 = i45 + 1 | 0;
      i43 = HEAP8[i45 >> 0] | 0;
     } while ((i43 + -48 | 0) >>> 0 < 10);
     if ((i51 | 0) < 0) {
      i61 = -1;
      i36 = 362;
      break L1;
     } else {
      i62 = i45;
      i63 = i53;
      i64 = i49;
      i65 = i51;
     }
    } else {
     i62 = i54;
     i63 = i53;
     i64 = i49;
     i65 = 0;
    }
   }
  } while (0);
  L46 : do {
   if ((HEAP8[i62 >> 0] | 0) == 46) {
    i43 = i62 + 1 | 0;
    i46 = HEAP8[i43 >> 0] | 0;
    if (!(i46 << 24 >> 24 == 42)) {
     i44 = i46 << 24 >> 24;
     if ((i44 + -48 | 0) >>> 0 < 10) {
      i66 = i44;
      i67 = i43;
      i68 = 0;
     } else {
      i69 = i43;
      i70 = 0;
      break;
     }
     while (1) {
      i43 = i66 + -48 + (i68 * 10 | 0) | 0;
      i44 = i67 + 1 | 0;
      i66 = HEAP8[i44 >> 0] | 0;
      if (!((i66 + -48 | 0) >>> 0 < 10)) {
       i69 = i44;
       i70 = i43;
       break L46;
      } else {
       i67 = i44;
       i68 = i43;
      }
     }
    }
    i51 = i62 + 2 | 0;
    i45 = (HEAP8[i51 >> 0] | 0) + -48 | 0;
    if (i45 >>> 0 < 10 ? (HEAP8[i62 + 3 >> 0] | 0) == 36 : 0) {
     HEAP32[i5 + (i45 << 2) >> 2] = 10;
     i69 = i62 + 4 | 0;
     i70 = HEAP32[i4 + ((HEAP8[i51 >> 0] | 0) + -48 << 3) >> 2] | 0;
     break;
    }
    if ((i64 | 0) != 0) {
     i61 = -1;
     i36 = 362;
     break L1;
    }
    if (i16) {
     i45 = HEAP32[i3 >> 2] | 0;
     i43 = HEAP32[i45 >> 2] | 0;
     HEAP32[i3 >> 2] = i45 + 4;
     i69 = i51;
     i70 = i43;
    } else {
     i69 = i51;
     i70 = 0;
    }
   } else {
    i69 = i62;
    i70 = -1;
   }
  } while (0);
  i51 = i69;
  i43 = 0;
  while (1) {
   i71 = HEAP8[i51 >> 0] | 0;
   i45 = (i71 << 24 >> 24) + -65 | 0;
   if (i45 >>> 0 > 57) {
    i61 = -1;
    i36 = 362;
    break L1;
   }
   i72 = i51 + 1 | 0;
   i73 = HEAP8[558280 + (i43 * 58 | 0) + i45 >> 0] | 0;
   i74 = i73 & 255;
   if ((i74 + -1 | 0) >>> 0 < 8) {
    i51 = i72;
    i43 = i74;
   } else {
    break;
   }
  }
  if (i73 << 24 >> 24 == 0) {
   i61 = -1;
   i36 = 362;
   break;
  }
  i45 = (i48 | 0) > -1;
  L65 : do {
   if (i73 << 24 >> 24 == 19) {
    if (i45) {
     i61 = -1;
     i36 = 362;
     break L1;
    } else {
     i75 = i29;
     i76 = i30;
     i36 = 63;
    }
   } else {
    if (i45) {
     HEAP32[i5 + (i48 << 2) >> 2] = i74;
     i44 = i4 + (i48 << 3) | 0;
     i75 = HEAP32[i44 + 4 >> 2] | 0;
     i76 = HEAP32[i44 >> 2] | 0;
     i36 = 63;
     break;
    }
    if (!i16) {
     i61 = 0;
     i36 = 362;
     break L1;
    }
    if ((i73 & 255) > 20) {
     i77 = i71;
     i78 = i30;
     i79 = i29;
    } else {
     do {
      switch (i74 | 0) {
      case 12:
       {
        i44 = HEAP32[i3 >> 2] | 0;
        i46 = i44;
        i56 = HEAP32[i46 >> 2] | 0;
        i55 = HEAP32[i46 + 4 >> 2] | 0;
        HEAP32[i3 >> 2] = i44 + 8;
        i80 = i56;
        i81 = i55;
        i36 = 64;
        break L65;
        break;
       }
      case 11:
       {
        i55 = HEAP32[i3 >> 2] | 0;
        i56 = HEAP32[i55 >> 2] | 0;
        HEAP32[i3 >> 2] = i55 + 4;
        i80 = i56;
        i81 = 0;
        i36 = 64;
        break L65;
        break;
       }
      case 10:
       {
        i56 = HEAP32[i3 >> 2] | 0;
        i55 = HEAP32[i56 >> 2] | 0;
        HEAP32[i3 >> 2] = i56 + 4;
        i80 = i55;
        i81 = ((i55 | 0) < 0) << 31 >> 31;
        i36 = 64;
        break L65;
        break;
       }
      case 14:
       {
        i55 = HEAP32[i3 >> 2] | 0;
        i56 = HEAP32[i55 >> 2] | 0;
        HEAP32[i3 >> 2] = i55 + 4;
        i80 = i56 & 65535;
        i81 = 0;
        i36 = 64;
        break L65;
        break;
       }
      case 17:
       {
        i56 = HEAP32[i3 >> 2] | 0;
        HEAP32[tempDoublePtr >> 2] = HEAP32[i56 >> 2];
        HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[i56 + 4 >> 2];
        d82 = +HEAPF64[tempDoublePtr >> 3];
        HEAP32[i3 >> 2] = i56 + 8;
        HEAPF64[tempDoublePtr >> 3] = d82;
        i80 = HEAP32[tempDoublePtr >> 2] | 0;
        i81 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        i36 = 64;
        break L65;
        break;
       }
      case 16:
       {
        i56 = HEAP32[i3 >> 2] | 0;
        i55 = HEAP32[i56 >> 2] | 0;
        HEAP32[i3 >> 2] = i56 + 4;
        i80 = i55 & 255;
        i81 = 0;
        i36 = 64;
        break L65;
        break;
       }
      case 13:
       {
        i55 = HEAP32[i3 >> 2] | 0;
        i56 = HEAP32[i55 >> 2] | 0;
        HEAP32[i3 >> 2] = i55 + 4;
        i80 = i56 << 16 >> 16;
        i81 = (((i56 & 65535) << 16 >> 16 | 0) < 0) << 31 >> 31;
        i36 = 64;
        break L65;
        break;
       }
      case 15:
       {
        i56 = HEAP32[i3 >> 2] | 0;
        i55 = HEAP32[i56 >> 2] | 0;
        HEAP32[i3 >> 2] = i56 + 4;
        i80 = i55 << 24 >> 24;
        i81 = (((i55 & 255) << 24 >> 24 | 0) < 0) << 31 >> 31;
        i36 = 64;
        break L65;
        break;
       }
      case 18:
       {
        i55 = HEAP32[i3 >> 2] | 0;
        HEAP32[tempDoublePtr >> 2] = HEAP32[i55 >> 2];
        HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[i55 + 4 >> 2];
        d82 = +HEAPF64[tempDoublePtr >> 3];
        HEAP32[i3 >> 2] = i55 + 8;
        HEAPF64[tempDoublePtr >> 3] = d82;
        i75 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        i76 = HEAP32[tempDoublePtr >> 2] | 0;
        i36 = 63;
        break L65;
        break;
       }
      case 9:
       {
        i55 = HEAP32[i3 >> 2] | 0;
        i56 = HEAP32[i55 >> 2] | 0;
        HEAP32[i3 >> 2] = i55 + 4;
        i80 = i56;
        i81 = i29;
        i36 = 64;
        break L65;
        break;
       }
      default:
       {
        i80 = i30;
        i81 = i29;
        i36 = 64;
        break L65;
       }
      }
     } while (0);
    }
   }
  } while (0);
  if ((i36 | 0) == 63) {
   i36 = 0;
   if (i16) {
    i80 = i76;
    i81 = i75;
    i36 = 64;
   } else {
    i29 = i75;
    i30 = i76;
    i31 = i72;
    i2 = i34;
    i32 = i35;
    i33 = i64;
    continue;
   }
  }
  if ((i36 | 0) == 64) {
   i36 = 0;
   i77 = HEAP8[i51 >> 0] | 0;
   i78 = i80;
   i79 = i81;
  }
  i45 = i77 << 24 >> 24;
  if ((i43 | 0) == 0) {
   i83 = i45;
  } else {
   i83 = (i45 & 15 | 0) == 3 ? i45 & -33 : i45;
  }
  i45 = i63 & -65537;
  i56 = (i63 & 8192 | 0) == 0 ? i63 : i45;
  L92 : do {
   switch (i83 | 0) {
   case 115:
    {
     i84 = (i78 | 0) == 0 ? 558760 : i78;
     i36 = 99;
     break;
    }
   case 117:
    {
     i85 = i78;
     i86 = i79;
     i87 = 0;
     i88 = 558744;
     i36 = 89;
     break;
    }
   case 109:
    {
     i84 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
     i36 = 99;
     break;
    }
   case 67:
    {
     HEAP32[i14 >> 2] = i78;
     HEAP32[i13 >> 2] = 0;
     i89 = i14;
     i90 = i14;
     i91 = -1;
     i36 = 104;
     break;
    }
   case 105:
   case 100:
    {
     if ((i79 | 0) < 0) {
      i55 = _i64Subtract(0, 0, i78 | 0, i79 | 0) | 0;
      i85 = i55;
      i86 = tempRet0;
      i87 = 1;
      i88 = 558744;
      i36 = 89;
      break L92;
     }
     if ((i56 & 2048 | 0) == 0) {
      i55 = i56 & 1;
      i85 = i78;
      i86 = i79;
      i87 = i55;
      i88 = (i55 | 0) == 0 ? 558744 : 558746 | 0;
      i36 = 89;
     } else {
      i85 = i78;
      i86 = i79;
      i87 = 1;
      i88 = 558745 | 0;
      i36 = 89;
     }
     break;
    }
   case 88:
   case 120:
    {
     i92 = i56;
     i93 = i70;
     i94 = i83;
     i36 = 77;
     break;
    }
   case 112:
    {
     i92 = i56 | 8;
     i93 = i70 >>> 0 > 8 ? i70 : 8;
     i94 = 120;
     i36 = 77;
     break;
    }
   case 83:
    {
     if ((i70 | 0) == 0) {
      i95 = i78;
      i96 = i78;
      i97 = 0;
      i36 = 110;
     } else {
      i89 = i78;
      i90 = i78;
      i91 = i70;
      i36 = 104;
     }
     break;
    }
   case 111:
    {
     i55 = i78;
     i44 = (i55 | 0) == 0 & (i79 | 0) == 0;
     if (i44) {
      i98 = i17;
     } else {
      i46 = i17;
      i57 = i55;
      i55 = i79;
      while (1) {
       i99 = i46 + -1 | 0;
       HEAP8[i99 >> 0] = i57 & 7 | 48;
       i57 = _bitshift64Lshr(i57 | 0, i55 | 0, 3) | 0;
       i55 = tempRet0;
       if ((i57 | 0) == 0 & (i55 | 0) == 0) {
        i98 = i99;
        break;
       } else {
        i46 = i99;
       }
      }
     }
     if ((i56 & 8 | 0) == 0) {
      i100 = i78;
      i101 = i79;
      i102 = i98;
      i103 = i56;
      i104 = i70;
      i105 = 0;
      i106 = 558744;
      i36 = 94;
     } else {
      i100 = i78;
      i101 = i79;
      i102 = i98;
      i103 = i56;
      i104 = i70;
      i105 = i44 & 1 ^ 1;
      i106 = i44 ? 558744 : 558749 | 0;
      i36 = 94;
     }
     break;
    }
   case 110:
    {
     switch (i43 | 0) {
     case 6:
      {
       HEAP32[i78 >> 2] = i34;
       i29 = i79;
       i30 = i78;
       i31 = i72;
       i2 = i34;
       i32 = i35;
       i33 = i64;
       continue L1;
       break;
      }
     case 2:
      {
       i46 = i78;
       HEAP32[i46 >> 2] = i34;
       HEAP32[i46 + 4 >> 2] = ((i34 | 0) < 0) << 31 >> 31;
       i29 = i79;
       i30 = i78;
       i31 = i72;
       i2 = i34;
       i32 = i35;
       i33 = i64;
       continue L1;
       break;
      }
     case 7:
      {
       i46 = i78;
       HEAP32[i46 >> 2] = i34;
       HEAP32[i46 + 4 >> 2] = ((i34 | 0) < 0) << 31 >> 31;
       i29 = i79;
       i30 = i78;
       i31 = i72;
       i2 = i34;
       i32 = i35;
       i33 = i64;
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[i78 >> 1] = i34;
       i29 = i79;
       i30 = i78;
       i31 = i72;
       i2 = i34;
       i32 = i35;
       i33 = i64;
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[i78 >> 0] = i34;
       i29 = i79;
       i30 = i78;
       i31 = i72;
       i2 = i34;
       i32 = i35;
       i33 = i64;
       continue L1;
       break;
      }
     case 0:
      {
       HEAP32[i78 >> 2] = i34;
       i29 = i79;
       i30 = i78;
       i31 = i72;
       i2 = i34;
       i32 = i35;
       i33 = i64;
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[i78 >> 2] = i34;
       i29 = i79;
       i30 = i78;
       i31 = i72;
       i2 = i34;
       i32 = i35;
       i33 = i64;
       continue L1;
       break;
      }
     default:
      {
       i29 = i79;
       i30 = i78;
       i31 = i72;
       i2 = i34;
       i32 = i35;
       i33 = i64;
       continue L1;
      }
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     HEAP32[tempDoublePtr >> 2] = i78;
     HEAP32[tempDoublePtr + 4 >> 2] = i79;
     d82 = +HEAPF64[tempDoublePtr >> 3];
     HEAP32[i8 >> 2] = 0;
     if ((i79 | 0) >= 0) {
      if ((i56 & 2048 | 0) == 0) {
       i46 = i56 & 1;
       d107 = d82;
       i108 = i46;
       i109 = (i46 | 0) == 0 ? 558769 | 0 : 558774 | 0;
      } else {
       d107 = d82;
       i108 = 1;
       i109 = 558771 | 0;
      }
     } else {
      d107 = -d82;
      i108 = 1;
      i109 = 558768;
     }
     HEAPF64[tempDoublePtr >> 3] = d107;
     i46 = HEAP32[tempDoublePtr + 4 >> 2] & 2146435072;
     if (!(i46 >>> 0 < 2146435072 | (i46 | 0) == 2146435072 & 0 < 0)) {
      i46 = (i83 & 32 | 0) != 0;
      if (d107 != d107 | 0.0 != 0.0) {
       i110 = 0;
       i111 = i46 ? 558808 : 558816;
      } else {
       i110 = i108;
       i111 = i46 ? 558792 : 558800;
      }
      i46 = i110 + 3 | 0;
      i55 = (i46 | 0) < (i65 | 0);
      if ((i56 & 8192 | 0) == 0 & i55) {
       i57 = i65 - i46 | 0;
       _memset(i12 | 0, 32, (i57 >>> 0 > 256 ? 256 : i57) | 0) | 0;
       if (i57 >>> 0 > 255) {
        i99 = i57;
        while (1) {
         ___fwritex(i12, 256, i1) | 0;
         i112 = i99 + -256 | 0;
         if (i112 >>> 0 > 255) {
          i99 = i112;
         } else {
          i113 = i112;
          break;
         }
        }
       } else {
        i113 = i57;
       }
       ___fwritex(i12, i113, i1) | 0;
      }
      ___fwritex(i109, i110, i1) | 0;
      ___fwritex(i111, 3, i1) | 0;
      if ((i56 & 73728 | 0) == 8192 & i55) {
       i99 = i65 - i46 | 0;
       _memset(i12 | 0, 32, (i99 >>> 0 > 256 ? 256 : i99) | 0) | 0;
       if (i99 >>> 0 > 255) {
        i44 = i99;
        while (1) {
         ___fwritex(i12, 256, i1) | 0;
         i112 = i44 + -256 | 0;
         if (i112 >>> 0 > 255) {
          i44 = i112;
         } else {
          i114 = i112;
          break;
         }
        }
       } else {
        i114 = i99;
       }
       ___fwritex(i12, i114, i1) | 0;
      }
      i29 = i79;
      i30 = i78;
      i31 = i72;
      i2 = i34;
      i32 = i55 ? i65 : i46;
      i33 = i64;
      continue L1;
     }
     d82 = +_frexpl(d107, i8) * 2.0;
     i44 = d82 != 0.0;
     if (i44) {
      HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
     }
     i57 = i83 | 32;
     if ((i57 | 0) == 97) {
      i112 = i83 & 32;
      i115 = (i112 | 0) == 0 ? i109 : i109 + 9 | 0;
      i116 = i108 | 2;
      i117 = i70 >>> 0 > 11 ? 0 : 12 - i70 | 0;
      do {
       if ((i117 | 0) != 0) {
        i118 = i117;
        d119 = 8.0;
        do {
         i118 = i118 + -1 | 0;
         d119 = d119 * 16.0;
        } while ((i118 | 0) != 0);
        if ((HEAP8[i115 >> 0] | 0) == 45) {
         d120 = -(d119 + (-d82 - d119));
         break;
        } else {
         d120 = d82 + d119 - d119;
         break;
        }
       } else {
        d120 = d82;
       }
      } while (0);
      i117 = HEAP32[i8 >> 2] | 0;
      i46 = (i117 | 0) < 0 ? 0 - i117 | 0 : i117;
      if ((i46 | 0) < 0) {
       i117 = i20;
       i55 = i46;
       i99 = ((i46 | 0) < 0) << 31 >> 31;
       while (1) {
        i118 = ___uremdi3(i55 | 0, i99 | 0, 10, 0) | 0;
        i117 = i117 + -1 | 0;
        HEAP8[i117 >> 0] = i118 | 48;
        i118 = i55;
        i55 = ___udivdi3(i55 | 0, i99 | 0, 10, 0) | 0;
        if (!(i99 >>> 0 > 9 | (i99 | 0) == 9 & i118 >>> 0 > 4294967295)) {
         break;
        } else {
         i99 = tempRet0;
        }
       }
       i121 = i117;
       i122 = i55;
      } else {
       i121 = i20;
       i122 = i46;
      }
      if ((i122 | 0) == 0) {
       i123 = i121;
      } else {
       i99 = i121;
       i118 = i122;
       while (1) {
        i124 = i99 + -1 | 0;
        HEAP8[i124 >> 0] = (i118 >>> 0) % 10 | 0 | 48;
        if (i118 >>> 0 < 10) {
         i123 = i124;
         break;
        } else {
         i99 = i124;
         i118 = (i118 >>> 0) / 10 | 0;
        }
       }
      }
      if ((i123 | 0) == (i20 | 0)) {
       HEAP8[i21 >> 0] = 48;
       i125 = i21;
      } else {
       i125 = i123;
      }
      HEAP8[i125 + -1 >> 0] = (HEAP32[i8 >> 2] >> 31 & 2) + 43;
      i118 = i125 + -2 | 0;
      HEAP8[i118 >> 0] = i83 + 15;
      i99 = (i56 & 8 | 0) == 0;
      if ((i70 | 0) > 0) {
       if (i99) {
        d126 = d120;
        i46 = i9;
        while (1) {
         i55 = ~~d126;
         i117 = i46 + 1 | 0;
         HEAP8[i46 >> 0] = HEAPU8[558824 + i55 >> 0] | i112;
         d126 = (d126 - +(i55 | 0)) * 16.0;
         if ((i117 - i10 | 0) == 1) {
          HEAP8[i117 >> 0] = 46;
          i127 = i46 + 2 | 0;
         } else {
          i127 = i117;
         }
         if (!(d126 != 0.0)) {
          i128 = i127;
          break;
         } else {
          i46 = i127;
         }
        }
       } else {
        d126 = d120;
        i46 = i9;
        while (1) {
         i117 = ~~d126;
         i55 = i46 + 1 | 0;
         HEAP8[i46 >> 0] = HEAPU8[558824 + i117 >> 0] | i112;
         d126 = (d126 - +(i117 | 0)) * 16.0;
         if ((i55 - i10 | 0) == 1) {
          HEAP8[i55 >> 0] = 46;
          i129 = i46 + 2 | 0;
         } else {
          i129 = i55;
         }
         if (!(d126 != 0.0)) {
          i128 = i129;
          break;
         } else {
          i46 = i129;
         }
        }
       }
      } else {
       if (i99) {
        d126 = d120;
        i46 = i9;
        while (1) {
         i55 = ~~d126;
         i117 = i46 + 1 | 0;
         HEAP8[i46 >> 0] = HEAPU8[558824 + i55 >> 0] | i112;
         d126 = (d126 - +(i55 | 0)) * 16.0;
         i55 = d126 != 0.0;
         if ((i117 - i10 | 0) == 1 & i55) {
          HEAP8[i117 >> 0] = 46;
          i130 = i46 + 2 | 0;
         } else {
          i130 = i117;
         }
         if (!i55) {
          i128 = i130;
          break;
         } else {
          i46 = i130;
         }
        }
       } else {
        d126 = d120;
        i46 = i9;
        while (1) {
         i99 = ~~d126;
         i55 = i46 + 1 | 0;
         HEAP8[i46 >> 0] = HEAPU8[558824 + i99 >> 0] | i112;
         d126 = (d126 - +(i99 | 0)) * 16.0;
         if ((i55 - i10 | 0) == 1) {
          HEAP8[i55 >> 0] = 46;
          i131 = i46 + 2 | 0;
         } else {
          i131 = i55;
         }
         if (!(d126 != 0.0)) {
          i128 = i131;
          break;
         } else {
          i46 = i131;
         }
        }
       }
      }
      i46 = i128;
      do {
       if ((i70 | 0) == 0) {
        i36 = 173;
       } else {
        if ((i23 + i46 | 0) >= (i70 | 0)) {
         i36 = 173;
         break;
        }
        i132 = i24 + i70 - i118 | 0;
       }
      } while (0);
      if ((i36 | 0) == 173) {
       i36 = 0;
       i132 = i22 - i118 + i46 | 0;
      }
      i112 = i132 + i116 | 0;
      i55 = i56 & 73728;
      i99 = (i112 | 0) < (i65 | 0);
      if ((i55 | 0) == 0 & i99) {
       i117 = i65 - i112 | 0;
       _memset(i12 | 0, 32, (i117 >>> 0 > 256 ? 256 : i117) | 0) | 0;
       if (i117 >>> 0 > 255) {
        i124 = i117;
        while (1) {
         ___fwritex(i12, 256, i1) | 0;
         i133 = i124 + -256 | 0;
         if (i133 >>> 0 > 255) {
          i124 = i133;
         } else {
          i134 = i133;
          break;
         }
        }
       } else {
        i134 = i117;
       }
       ___fwritex(i12, i134, i1) | 0;
      }
      ___fwritex(i115, i116, i1) | 0;
      if ((i55 | 0) == 65536 & i99) {
       i124 = i65 - i112 | 0;
       _memset(i12 | 0, 48, (i124 >>> 0 > 256 ? 256 : i124) | 0) | 0;
       if (i124 >>> 0 > 255) {
        i133 = i124;
        while (1) {
         ___fwritex(i12, 256, i1) | 0;
         i135 = i133 + -256 | 0;
         if (i135 >>> 0 > 255) {
          i133 = i135;
         } else {
          i136 = i135;
          break;
         }
        }
       } else {
        i136 = i124;
       }
       ___fwritex(i12, i136, i1) | 0;
      }
      i133 = i46 - i10 | 0;
      ___fwritex(i9, i133, i1) | 0;
      i116 = i11 - i118 | 0;
      i115 = i132 - i116 - i133 | 0;
      if ((i115 | 0) > 0) {
       _memset(i12 | 0, 48, (i115 >>> 0 > 256 ? 256 : i115) | 0) | 0;
       if (i115 >>> 0 > 255) {
        i133 = i115;
        while (1) {
         ___fwritex(i12, 256, i1) | 0;
         i117 = i133 + -256 | 0;
         if (i117 >>> 0 > 255) {
          i133 = i117;
         } else {
          i137 = i117;
          break;
         }
        }
       } else {
        i137 = i115;
       }
       ___fwritex(i12, i137, i1) | 0;
      }
      ___fwritex(i118, i116, i1) | 0;
      if ((i55 | 0) == 8192 & i99) {
       i133 = i65 - i112 | 0;
       _memset(i12 | 0, 32, (i133 >>> 0 > 256 ? 256 : i133) | 0) | 0;
       if (i133 >>> 0 > 255) {
        i46 = i133;
        while (1) {
         ___fwritex(i12, 256, i1) | 0;
         i124 = i46 + -256 | 0;
         if (i124 >>> 0 > 255) {
          i46 = i124;
         } else {
          i138 = i124;
          break;
         }
        }
       } else {
        i138 = i133;
       }
       ___fwritex(i12, i138, i1) | 0;
      }
      i29 = i79;
      i30 = i78;
      i31 = i72;
      i2 = i34;
      i32 = i99 ? i65 : i112;
      i33 = i64;
      continue L1;
     }
     i46 = (i70 | 0) < 0 ? 6 : i70;
     if (i44) {
      i55 = (HEAP32[i8 >> 2] | 0) + -28 | 0;
      HEAP32[i8 >> 2] = i55;
      d139 = d82 * 268435456.0;
      i140 = i55;
     } else {
      d139 = d82;
      i140 = HEAP32[i8 >> 2] | 0;
     }
     i55 = (i140 | 0) < 0 ? i7 : i25;
     d126 = d139;
     i116 = i55;
     do {
      i118 = ~~d126 >>> 0;
      HEAP32[i116 >> 2] = i118;
      i116 = i116 + 4 | 0;
      d126 = (d126 - +(i118 >>> 0)) * 1.0e9;
     } while (d126 != 0.0);
     i44 = HEAP32[i8 >> 2] | 0;
     if ((i44 | 0) > 0) {
      i112 = i44;
      i99 = i55;
      i133 = i116;
      while (1) {
       i118 = (i112 | 0) > 29 ? 29 : i112;
       i115 = i133 + -4 | 0;
       do {
        if (i115 >>> 0 < i99 >>> 0) {
         i141 = i99;
        } else {
         i124 = 0;
         i117 = i115;
         do {
          i135 = _bitshift64Shl(HEAP32[i117 >> 2] | 0, 0, i118 | 0) | 0;
          i142 = _i64Add(i135 | 0, tempRet0 | 0, i124 | 0, 0) | 0;
          i135 = tempRet0;
          i143 = ___uremdi3(i142 | 0, i135 | 0, 1e9, 0) | 0;
          HEAP32[i117 >> 2] = i143;
          i124 = ___udivdi3(i142 | 0, i135 | 0, 1e9, 0) | 0;
          i117 = i117 + -4 | 0;
         } while (!(i117 >>> 0 < i99 >>> 0));
         if ((i124 | 0) == 0) {
          i141 = i99;
          break;
         }
         i117 = i99 + -4 | 0;
         HEAP32[i117 >> 2] = i124;
         i141 = i117;
        }
       } while (0);
       i115 = i133;
       while (1) {
        if (!(i115 >>> 0 > i141 >>> 0)) {
         break;
        }
        i117 = i115 + -4 | 0;
        if ((HEAP32[i117 >> 2] | 0) == 0) {
         i115 = i117;
        } else {
         break;
        }
       }
       i117 = (HEAP32[i8 >> 2] | 0) - i118 | 0;
       HEAP32[i8 >> 2] = i117;
       if ((i117 | 0) > 0) {
        i112 = i117;
        i99 = i141;
        i133 = i115;
       } else {
        i144 = i117;
        i145 = i141;
        i146 = i115;
        break;
       }
      }
     } else {
      i144 = i44;
      i145 = i55;
      i146 = i116;
     }
     L253 : do {
      if ((i144 | 0) < 0) {
       i133 = ((i46 + 25 | 0) / 9 | 0) + 1 | 0;
       if ((i57 | 0) == 102) {
        i99 = i55;
        i112 = i55 + (i133 << 2) | 0;
        i117 = i144;
        i135 = i145;
        i142 = i146;
        while (1) {
         i143 = 0 - i117 | 0;
         i147 = (i143 | 0) > 9 ? 9 : i143;
         do {
          if (i135 >>> 0 < i142 >>> 0) {
           i143 = (1 << i147) + -1 | 0;
           i148 = 1e9 >>> i147;
           i149 = 0;
           i150 = i135;
           do {
            i151 = HEAP32[i150 >> 2] | 0;
            HEAP32[i150 >> 2] = (i151 >>> i147) + i149;
            i149 = Math_imul(i151 & i143, i148) | 0;
            i150 = i150 + 4 | 0;
           } while (i150 >>> 0 < i142 >>> 0);
           i150 = (HEAP32[i135 >> 2] | 0) == 0 ? i135 + 4 | 0 : i135;
           if ((i149 | 0) == 0) {
            i152 = i150;
            i153 = i142;
            break;
           }
           HEAP32[i142 >> 2] = i149;
           i152 = i150;
           i153 = i142 + 4 | 0;
          } else {
           i152 = (HEAP32[i135 >> 2] | 0) == 0 ? i135 + 4 | 0 : i135;
           i153 = i142;
          }
         } while (0);
         i124 = (i153 - i99 >> 2 | 0) > (i133 | 0) ? i112 : i153;
         i117 = (HEAP32[i8 >> 2] | 0) + i147 | 0;
         HEAP32[i8 >> 2] = i117;
         if ((i117 | 0) >= 0) {
          i154 = i152;
          i155 = i124;
          break L253;
         } else {
          i135 = i152;
          i142 = i124;
         }
        }
       } else {
        i156 = i144;
        i157 = i145;
        i158 = i146;
       }
       while (1) {
        i142 = 0 - i156 | 0;
        i135 = (i142 | 0) > 9 ? 9 : i142;
        do {
         if (i157 >>> 0 < i158 >>> 0) {
          i142 = (1 << i135) + -1 | 0;
          i117 = 1e9 >>> i135;
          i112 = 0;
          i99 = i157;
          do {
           i115 = HEAP32[i99 >> 2] | 0;
           HEAP32[i99 >> 2] = (i115 >>> i135) + i112;
           i112 = Math_imul(i115 & i142, i117) | 0;
           i99 = i99 + 4 | 0;
          } while (i99 >>> 0 < i158 >>> 0);
          i99 = (HEAP32[i157 >> 2] | 0) == 0 ? i157 + 4 | 0 : i157;
          if ((i112 | 0) == 0) {
           i159 = i99;
           i160 = i158;
           break;
          }
          HEAP32[i158 >> 2] = i112;
          i159 = i99;
          i160 = i158 + 4 | 0;
         } else {
          i159 = (HEAP32[i157 >> 2] | 0) == 0 ? i157 + 4 | 0 : i157;
          i160 = i158;
         }
        } while (0);
        if ((i160 - i159 >> 2 | 0) > (i133 | 0)) {
         i161 = i159 + (i133 << 2) | 0;
        } else {
         i161 = i160;
        }
        i156 = (HEAP32[i8 >> 2] | 0) + i135 | 0;
        HEAP32[i8 >> 2] = i156;
        if ((i156 | 0) >= 0) {
         i154 = i159;
         i155 = i161;
         break;
        } else {
         i157 = i159;
         i158 = i161;
        }
       }
      } else {
       i154 = i145;
       i155 = i146;
      }
     } while (0);
     i116 = i55;
     do {
      if (i154 >>> 0 < i155 >>> 0) {
       i44 = (i116 - i154 >> 2) * 9 | 0;
       i133 = HEAP32[i154 >> 2] | 0;
       if (i133 >>> 0 < 10) {
        i162 = i44;
        break;
       } else {
        i163 = i44;
        i164 = 10;
       }
       while (1) {
        i164 = i164 * 10 | 0;
        i44 = i163 + 1 | 0;
        if (i133 >>> 0 < i164 >>> 0) {
         i162 = i44;
         break;
        } else {
         i163 = i44;
        }
       }
      } else {
       i162 = 0;
      }
     } while (0);
     i133 = (i57 | 0) == 103;
     i44 = i46 - ((i57 | 0) != 102 ? i162 : 0) + ((i133 & (i46 | 0) != 0) << 31 >> 31) | 0;
     if ((i44 | 0) < (((i155 - i116 >> 2) * 9 | 0) + -9 | 0)) {
      i147 = i44 + 9216 | 0;
      i44 = (i147 | 0) / 9 | 0;
      i99 = i55 + (i44 + -1023 << 2) | 0;
      i117 = ((i147 | 0) % 9 | 0) + 1 | 0;
      if ((i117 | 0) < 9) {
       i147 = 10;
       i142 = i117;
       while (1) {
        i117 = i147 * 10 | 0;
        i142 = i142 + 1 | 0;
        if ((i142 | 0) == 9) {
         i165 = i117;
         break;
        } else {
         i147 = i117;
        }
       }
      } else {
       i165 = 10;
      }
      i147 = HEAP32[i99 >> 2] | 0;
      i142 = (i147 >>> 0) % (i165 >>> 0) | 0;
      if ((i142 | 0) == 0 ? (i55 + (i44 + -1022 << 2) | 0) == (i155 | 0) : 0) {
       i166 = i154;
       i167 = i99;
       i168 = i162;
      } else {
       i36 = 233;
      }
      do {
       if ((i36 | 0) == 233) {
        i36 = 0;
        d119 = (((i147 >>> 0) / (i165 >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
        i57 = (i165 | 0) / 2 | 0;
        do {
         if (i142 >>> 0 < i57 >>> 0) {
          d169 = .5;
         } else {
          if ((i142 | 0) == (i57 | 0) ? (i55 + (i44 + -1022 << 2) | 0) == (i155 | 0) : 0) {
           d169 = 1.0;
           break;
          }
          d169 = 1.5;
         }
        } while (0);
        do {
         if ((i108 | 0) == 0) {
          d170 = d119;
          d171 = d169;
         } else {
          if ((HEAP8[i109 >> 0] | 0) != 45) {
           d170 = d119;
           d171 = d169;
           break;
          }
          d170 = d119 * -1.0;
          d171 = d169 * -1.0;
         }
        } while (0);
        i57 = i147 - i142 | 0;
        HEAP32[i99 >> 2] = i57;
        if (!(d170 + d171 != d170)) {
         i166 = i154;
         i167 = i99;
         i168 = i162;
         break;
        }
        i117 = i57 + i165 | 0;
        HEAP32[i99 >> 2] = i117;
        if (i117 >>> 0 > 999999999) {
         i117 = i154;
         i57 = i99;
         while (1) {
          i149 = i57 + -4 | 0;
          HEAP32[i57 >> 2] = 0;
          if (i149 >>> 0 < i117 >>> 0) {
           i115 = i117 + -4 | 0;
           HEAP32[i115 >> 2] = 0;
           i172 = i115;
          } else {
           i172 = i117;
          }
          i115 = (HEAP32[i149 >> 2] | 0) + 1 | 0;
          HEAP32[i149 >> 2] = i115;
          if (i115 >>> 0 > 999999999) {
           i117 = i172;
           i57 = i149;
          } else {
           i173 = i172;
           i174 = i149;
           break;
          }
         }
        } else {
         i173 = i154;
         i174 = i99;
        }
        i57 = (i116 - i173 >> 2) * 9 | 0;
        i117 = HEAP32[i173 >> 2] | 0;
        if (i117 >>> 0 < 10) {
         i166 = i173;
         i167 = i174;
         i168 = i57;
         break;
        } else {
         i175 = i57;
         i176 = 10;
        }
        while (1) {
         i176 = i176 * 10 | 0;
         i57 = i175 + 1 | 0;
         if (i117 >>> 0 < i176 >>> 0) {
          i166 = i173;
          i167 = i174;
          i168 = i57;
          break;
         } else {
          i175 = i57;
         }
        }
       }
      } while (0);
      i99 = i167 + 4 | 0;
      i177 = i166;
      i178 = i168;
      i179 = i155 >>> 0 > i99 >>> 0 ? i99 : i155;
     } else {
      i177 = i154;
      i178 = i162;
      i179 = i155;
     }
     i99 = 0 - i178 | 0;
     i142 = i179;
     while (1) {
      if (!(i142 >>> 0 > i177 >>> 0)) {
       i180 = 0;
       break;
      }
      i147 = i142 + -4 | 0;
      if ((HEAP32[i147 >> 2] | 0) == 0) {
       i142 = i147;
      } else {
       i180 = 1;
       break;
      }
     }
     do {
      if (i133) {
       i147 = ((i46 | 0) == 0 & 1) + i46 | 0;
       if ((i147 | 0) > (i178 | 0) & (i178 | 0) > -5) {
        i181 = i83 + -1 | 0;
        i182 = i147 + -1 - i178 | 0;
       } else {
        i181 = i83 + -2 | 0;
        i182 = i147 + -1 | 0;
       }
       if ((i56 & 8 | 0) != 0) {
        i183 = i181;
        i184 = i182;
        break;
       }
       do {
        if (i180) {
         i147 = HEAP32[i142 + -4 >> 2] | 0;
         if ((i147 | 0) == 0) {
          i185 = 9;
          break;
         }
         if (((i147 >>> 0) % 10 | 0 | 0) == 0) {
          i186 = 10;
          i187 = 0;
         } else {
          i185 = 0;
          break;
         }
         while (1) {
          i186 = i186 * 10 | 0;
          i44 = i187 + 1 | 0;
          if (((i147 >>> 0) % (i186 >>> 0) | 0 | 0) != 0) {
           i185 = i44;
           break;
          } else {
           i187 = i44;
          }
         }
        } else {
         i185 = 9;
        }
       } while (0);
       i147 = ((i142 - i116 >> 2) * 9 | 0) + -9 | 0;
       if ((i181 | 32 | 0) == 102) {
        i135 = i147 - i185 | 0;
        i44 = (i135 | 0) < 0 ? 0 : i135;
        i183 = i181;
        i184 = (i182 | 0) < (i44 | 0) ? i182 : i44;
        break;
       } else {
        i44 = i147 + i178 - i185 | 0;
        i147 = (i44 | 0) < 0 ? 0 : i44;
        i183 = i181;
        i184 = (i182 | 0) < (i147 | 0) ? i182 : i147;
        break;
       }
      } else {
       i183 = i83;
       i184 = i46;
      }
     } while (0);
     i46 = (i184 | 0) != 0;
     if (i46) {
      i188 = 1;
     } else {
      i188 = (i56 & 8 | 0) != 0;
     }
     i116 = i188 & 1;
     i133 = (i183 | 32 | 0) == 102;
     if (i133) {
      i189 = (i178 | 0) > 0 ? i178 : 0;
      i190 = 0;
     } else {
      i147 = (i178 | 0) < 0 ? i99 : i178;
      if ((i147 | 0) < 0) {
       i44 = i20;
       i135 = i147;
       i117 = ((i147 | 0) < 0) << 31 >> 31;
       while (1) {
        i57 = ___uremdi3(i135 | 0, i117 | 0, 10, 0) | 0;
        i44 = i44 + -1 | 0;
        HEAP8[i44 >> 0] = i57 | 48;
        i57 = i135;
        i135 = ___udivdi3(i135 | 0, i117 | 0, 10, 0) | 0;
        if (!(i117 >>> 0 > 9 | (i117 | 0) == 9 & i57 >>> 0 > 4294967295)) {
         break;
        } else {
         i117 = tempRet0;
        }
       }
       i191 = i44;
       i192 = i135;
      } else {
       i191 = i20;
       i192 = i147;
      }
      if ((i192 | 0) == 0) {
       i193 = i191;
      } else {
       i117 = i191;
       i99 = i192;
       while (1) {
        i57 = i117 + -1 | 0;
        HEAP8[i57 >> 0] = (i99 >>> 0) % 10 | 0 | 48;
        if (i99 >>> 0 < 10) {
         i193 = i57;
         break;
        } else {
         i117 = i57;
         i99 = (i99 >>> 0) / 10 | 0;
        }
       }
      }
      if ((i11 - i193 | 0) < 2) {
       i99 = i193;
       while (1) {
        i117 = i99 + -1 | 0;
        HEAP8[i117 >> 0] = 48;
        if ((i11 - i117 | 0) < 2) {
         i99 = i117;
        } else {
         i194 = i117;
         break;
        }
       }
      } else {
       i194 = i193;
      }
      HEAP8[i194 + -1 >> 0] = (i178 >> 31 & 2) + 43;
      i99 = i194 + -2 | 0;
      HEAP8[i99 >> 0] = i183;
      i189 = i11 - i99 | 0;
      i190 = i99;
     }
     i99 = i108 + 1 + i184 + i116 + i189 | 0;
     i117 = i56 & 73728;
     i147 = (i99 | 0) < (i65 | 0);
     if ((i117 | 0) == 0 & i147) {
      i135 = i65 - i99 | 0;
      _memset(i12 | 0, 32, (i135 >>> 0 > 256 ? 256 : i135) | 0) | 0;
      if (i135 >>> 0 > 255) {
       i44 = i135;
       while (1) {
        ___fwritex(i12, 256, i1) | 0;
        i57 = i44 + -256 | 0;
        if (i57 >>> 0 > 255) {
         i44 = i57;
        } else {
         i195 = i57;
         break;
        }
       }
      } else {
       i195 = i135;
      }
      ___fwritex(i12, i195, i1) | 0;
     }
     ___fwritex(i109, i108, i1) | 0;
     if ((i117 | 0) == 65536 & i147) {
      i44 = i65 - i99 | 0;
      _memset(i12 | 0, 48, (i44 >>> 0 > 256 ? 256 : i44) | 0) | 0;
      if (i44 >>> 0 > 255) {
       i116 = i44;
       while (1) {
        ___fwritex(i12, 256, i1) | 0;
        i57 = i116 + -256 | 0;
        if (i57 >>> 0 > 255) {
         i116 = i57;
        } else {
         i196 = i57;
         break;
        }
       }
      } else {
       i196 = i44;
      }
      ___fwritex(i12, i196, i1) | 0;
     }
     do {
      if (i133) {
       i116 = i177 >>> 0 > i55 >>> 0 ? i55 : i177;
       i135 = i116;
       do {
        i57 = HEAP32[i135 >> 2] | 0;
        if ((i57 | 0) == 0) {
         i197 = i26;
        } else {
         i149 = i26;
         i115 = i57;
         while (1) {
          i57 = i149 + -1 | 0;
          HEAP8[i57 >> 0] = (i115 >>> 0) % 10 | 0 | 48;
          if (i115 >>> 0 < 10) {
           i197 = i57;
           break;
          } else {
           i149 = i57;
           i115 = (i115 >>> 0) / 10 | 0;
          }
         }
        }
        do {
         if ((i135 | 0) == (i116 | 0)) {
          if ((i197 | 0) != (i26 | 0)) {
           i198 = i197;
           break;
          }
          HEAP8[i28 >> 0] = 48;
          i198 = i28;
         } else {
          if (i197 >>> 0 > i9 >>> 0) {
           i199 = i197;
          } else {
           i198 = i197;
           break;
          }
          while (1) {
           i115 = i199 + -1 | 0;
           HEAP8[i115 >> 0] = 48;
           if (i115 >>> 0 > i9 >>> 0) {
            i199 = i115;
           } else {
            i198 = i115;
            break;
           }
          }
         }
        } while (0);
        ___fwritex(i198, i27 - i198 | 0, i1) | 0;
        i135 = i135 + 4 | 0;
       } while (!(i135 >>> 0 > i55 >>> 0));
       if (!i46 ? (i56 & 8 | 0) == 0 : 0) {
        break;
       }
       ___fwritex(558840, 1, i1) | 0;
       if (i135 >>> 0 < i142 >>> 0 & (i184 | 0) > 0) {
        i116 = i184;
        i112 = i135;
        while (1) {
         i115 = HEAP32[i112 >> 2] | 0;
         if ((i115 | 0) != 0) {
          i149 = i26;
          i57 = i115;
          while (1) {
           i149 = i149 + -1 | 0;
           HEAP8[i149 >> 0] = (i57 >>> 0) % 10 | 0 | 48;
           if (i57 >>> 0 < 10) {
            break;
           } else {
            i57 = (i57 >>> 0) / 10 | 0;
           }
          }
          if (i149 >>> 0 > i9 >>> 0) {
           i200 = i149;
           i36 = 300;
          } else {
           i201 = i149;
          }
         } else {
          i200 = i26;
          i36 = 300;
         }
         if ((i36 | 0) == 300) {
          while (1) {
           i36 = 0;
           i57 = i200 + -1 | 0;
           HEAP8[i57 >> 0] = 48;
           if (i57 >>> 0 > i9 >>> 0) {
            i200 = i57;
            i36 = 300;
           } else {
            i201 = i57;
            break;
           }
          }
         }
         ___fwritex(i201, (i116 | 0) > 9 ? 9 : i116, i1) | 0;
         i112 = i112 + 4 | 0;
         i149 = i116 + -9 | 0;
         if (!(i112 >>> 0 < i142 >>> 0 & (i149 | 0) > 0)) {
          i202 = i149;
          break;
         } else {
          i116 = i149;
         }
        }
       } else {
        i202 = i184;
       }
       if ((i202 | 0) <= 0) {
        break;
       }
       _memset(i12 | 0, 48, (i202 >>> 0 > 256 ? 256 : i202) | 0) | 0;
       if (i202 >>> 0 > 255) {
        i116 = i202;
        while (1) {
         ___fwritex(i12, 256, i1) | 0;
         i112 = i116 + -256 | 0;
         if (i112 >>> 0 > 255) {
          i116 = i112;
         } else {
          i203 = i112;
          break;
         }
        }
       } else {
        i203 = i202;
       }
       ___fwritex(i12, i203, i1) | 0;
      } else {
       i116 = i180 ? i142 : i177 + 4 | 0;
       do {
        if ((i184 | 0) > -1) {
         i112 = (i56 & 8 | 0) != 0;
         i135 = i184;
         i149 = i177;
         do {
          i57 = HEAP32[i149 >> 2] | 0;
          if ((i57 | 0) != 0) {
           i115 = i26;
           i118 = i57;
           while (1) {
            i115 = i115 + -1 | 0;
            HEAP8[i115 >> 0] = (i118 >>> 0) % 10 | 0 | 48;
            if (i118 >>> 0 < 10) {
             break;
            } else {
             i118 = (i118 >>> 0) / 10 | 0;
            }
           }
           if ((i115 | 0) != (i26 | 0)) {
            i204 = i115;
           } else {
            i36 = 311;
           }
          } else {
           i36 = 311;
          }
          if ((i36 | 0) == 311) {
           i36 = 0;
           HEAP8[i28 >> 0] = 48;
           i204 = i28;
          }
          do {
           if ((i149 | 0) == (i177 | 0)) {
            i118 = i204 + 1 | 0;
            ___fwritex(i204, 1, i1) | 0;
            if (!((i135 | 0) > 0 | i112)) {
             i205 = i118;
             break;
            }
            ___fwritex(558840, 1, i1) | 0;
            i205 = i118;
           } else {
            if (i204 >>> 0 > i9 >>> 0) {
             i206 = i204;
            } else {
             i205 = i204;
             break;
            }
            while (1) {
             i118 = i206 + -1 | 0;
             HEAP8[i118 >> 0] = 48;
             if (i118 >>> 0 > i9 >>> 0) {
              i206 = i118;
             } else {
              i205 = i118;
              break;
             }
            }
           }
          } while (0);
          i115 = i27 - i205 | 0;
          ___fwritex(i205, (i115 | 0) < (i135 | 0) ? i115 : i135, i1) | 0;
          i135 = i135 - i115 | 0;
          i149 = i149 + 4 | 0;
         } while (i149 >>> 0 < i116 >>> 0 & (i135 | 0) > -1);
         if ((i135 | 0) <= 0) {
          break;
         }
         _memset(i12 | 0, 48, (i135 >>> 0 > 256 ? 256 : i135) | 0) | 0;
         if (i135 >>> 0 > 255) {
          i149 = i135;
          while (1) {
           ___fwritex(i12, 256, i1) | 0;
           i112 = i149 + -256 | 0;
           if (i112 >>> 0 > 255) {
            i149 = i112;
           } else {
            i207 = i112;
            break;
           }
          }
         } else {
          i207 = i135;
         }
         ___fwritex(i12, i207, i1) | 0;
        }
       } while (0);
       ___fwritex(i190, i11 - i190 | 0, i1) | 0;
      }
     } while (0);
     if ((i117 | 0) == 8192 & i147) {
      i142 = i65 - i99 | 0;
      _memset(i12 | 0, 32, (i142 >>> 0 > 256 ? 256 : i142) | 0) | 0;
      if (i142 >>> 0 > 255) {
       i46 = i142;
       while (1) {
        ___fwritex(i12, 256, i1) | 0;
        i55 = i46 + -256 | 0;
        if (i55 >>> 0 > 255) {
         i46 = i55;
        } else {
         i208 = i55;
         break;
        }
       }
      } else {
       i208 = i142;
      }
      ___fwritex(i12, i208, i1) | 0;
     }
     i29 = i79;
     i30 = i78;
     i31 = i72;
     i2 = i34;
     i32 = i147 ? i65 : i99;
     i33 = i64;
     continue L1;
     break;
    }
   case 99:
    {
     HEAP8[i19 >> 0] = i78;
     i209 = i79;
     i210 = i78;
     i211 = i19;
     i212 = i45;
     i213 = 1;
     i214 = 0;
     i215 = 558744;
     i216 = i17;
     break;
    }
   default:
    {
     i209 = i79;
     i210 = i78;
     i211 = i31;
     i212 = i56;
     i213 = i70;
     i214 = 0;
     i215 = 558744;
     i216 = i17;
    }
   }
  } while (0);
  L445 : do {
   if ((i36 | 0) == 77) {
    i36 = 0;
    i35 = i78;
    i43 = i94 & 32;
    if (!((i35 | 0) == 0 & (i79 | 0) == 0)) {
     i51 = i17;
     i46 = i35;
     i35 = i79;
     do {
      i51 = i51 + -1 | 0;
      HEAP8[i51 >> 0] = HEAPU8[558824 + (i46 & 15) >> 0] | i43;
      i46 = _bitshift64Lshr(i46 | 0, i35 | 0, 4) | 0;
      i35 = tempRet0;
     } while (!((i46 | 0) == 0 & (i35 | 0) == 0));
     if ((i92 & 8 | 0) == 0) {
      i100 = i78;
      i101 = i79;
      i102 = i51;
      i103 = i92;
      i104 = i93;
      i105 = 0;
      i106 = 558744;
      i36 = 94;
     } else {
      i100 = i78;
      i101 = i79;
      i102 = i51;
      i103 = i92;
      i104 = i93;
      i105 = 2;
      i106 = 558744 + (i94 >> 4) | 0;
      i36 = 94;
     }
    } else {
     i100 = i78;
     i101 = i79;
     i102 = i17;
     i103 = i92;
     i104 = i93;
     i105 = 0;
     i106 = 558744;
     i36 = 94;
    }
   } else if ((i36 | 0) == 89) {
    i36 = 0;
    i35 = i85;
    if (i86 >>> 0 > 0 | (i86 | 0) == 0 & i35 >>> 0 > 4294967295) {
     i46 = i17;
     i43 = i35;
     i99 = i86;
     while (1) {
      i147 = ___uremdi3(i43 | 0, i99 | 0, 10, 0) | 0;
      i46 = i46 + -1 | 0;
      HEAP8[i46 >> 0] = i147 | 48;
      i147 = i43;
      i43 = ___udivdi3(i43 | 0, i99 | 0, 10, 0) | 0;
      if (!(i99 >>> 0 > 9 | (i99 | 0) == 9 & i147 >>> 0 > 4294967295)) {
       break;
      } else {
       i99 = tempRet0;
      }
     }
     i217 = i46;
     i218 = i43;
    } else {
     i217 = i17;
     i218 = i35;
    }
    if ((i218 | 0) == 0) {
     i100 = i85;
     i101 = i86;
     i102 = i217;
     i103 = i56;
     i104 = i70;
     i105 = i87;
     i106 = i88;
     i36 = 94;
    } else {
     i99 = i217;
     i51 = i218;
     while (1) {
      i147 = i99 + -1 | 0;
      HEAP8[i147 >> 0] = (i51 >>> 0) % 10 | 0 | 48;
      if (i51 >>> 0 < 10) {
       i100 = i85;
       i101 = i86;
       i102 = i147;
       i103 = i56;
       i104 = i70;
       i105 = i87;
       i106 = i88;
       i36 = 94;
       break;
      } else {
       i99 = i147;
       i51 = (i51 >>> 0) / 10 | 0;
      }
     }
    }
   } else if ((i36 | 0) == 99) {
    i36 = 0;
    i51 = _memchr(i84, 0, i70) | 0;
    if ((i51 | 0) == 0) {
     i209 = i79;
     i210 = i78;
     i211 = i84;
     i212 = i45;
     i213 = i70;
     i214 = 0;
     i215 = 558744;
     i216 = i84 + i70 | 0;
     break;
    } else {
     i209 = i79;
     i210 = i78;
     i211 = i84;
     i212 = i45;
     i213 = i51 - i84 | 0;
     i214 = 0;
     i215 = 558744;
     i216 = i51;
     break;
    }
   } else if ((i36 | 0) == 104) {
    i36 = 0;
    i51 = 0;
    i99 = 0;
    i35 = i89;
    while (1) {
     i43 = HEAP32[i35 >> 2] | 0;
     if ((i43 | 0) == 0) {
      i219 = i51;
      i220 = i99;
      break;
     }
     i46 = _wctomb(i15, i43) | 0;
     if (!((i46 | 0) > -1)) {
      i61 = -1;
      i36 = 362;
      break L1;
     }
     i43 = i46 + i51 | 0;
     if (i46 >>> 0 > (i91 - i51 | 0) >>> 0) {
      i95 = i89;
      i96 = i90;
      i97 = i51;
      i36 = 110;
      break L445;
     }
     if (i43 >>> 0 < i91 >>> 0) {
      i51 = i43;
      i99 = i46;
      i35 = i35 + 4 | 0;
     } else {
      i219 = i43;
      i220 = i46;
      break;
     }
    }
    if ((i220 | 0) < 0) {
     i61 = -1;
     i36 = 362;
     break L1;
    } else {
     i95 = i89;
     i96 = i90;
     i97 = i219;
     i36 = 110;
    }
   }
  } while (0);
  if ((i36 | 0) == 94) {
   i36 = 0;
   i45 = (i104 | 0) > -1 ? i103 & -65537 : i103;
   i35 = (i100 | 0) == 0 & (i101 | 0) == 0;
   if (i35 & (i104 | 0) == 0) {
    i209 = i101;
    i210 = i100;
    i211 = i17;
    i212 = i45;
    i213 = 0;
    i214 = i105;
    i215 = i106;
    i216 = i17;
   } else {
    i99 = (i35 & 1) + (i18 - i102) | 0;
    i209 = i101;
    i210 = i100;
    i211 = i102;
    i212 = i45;
    i213 = (i104 | 0) > (i99 | 0) ? i104 : i99;
    i214 = i105;
    i215 = i106;
    i216 = i17;
   }
  } else if ((i36 | 0) == 110) {
   i36 = 0;
   i99 = i56 & 73728;
   i45 = (i97 | 0) < (i65 | 0);
   if ((i99 | 0) == 0 & i45) {
    i35 = i65 - i97 | 0;
    _memset(i12 | 0, 32, (i35 >>> 0 > 256 ? 256 : i35) | 0) | 0;
    if (i35 >>> 0 > 255) {
     i51 = i35;
     while (1) {
      ___fwritex(i12, 256, i1) | 0;
      i46 = i51 + -256 | 0;
      if (i46 >>> 0 > 255) {
       i51 = i46;
      } else {
       i221 = i46;
       break;
      }
     }
    } else {
     i221 = i35;
    }
    ___fwritex(i12, i221, i1) | 0;
   }
   L479 : do {
    if ((i97 | 0) != 0) {
     i51 = 0;
     i56 = i95;
     while (1) {
      i46 = HEAP32[i56 >> 2] | 0;
      if ((i46 | 0) == 0) {
       break L479;
      }
      i43 = _wctomb(i15, i46) | 0;
      i51 = i43 + i51 | 0;
      if ((i51 | 0) > (i97 | 0)) {
       break L479;
      }
      ___fwritex(i15, i43, i1) | 0;
      if (!(i51 >>> 0 < i97 >>> 0)) {
       break;
      } else {
       i56 = i56 + 4 | 0;
      }
     }
    }
   } while (0);
   if ((i99 | 0) == 8192 & i45) {
    i35 = i65 - i97 | 0;
    _memset(i12 | 0, 32, (i35 >>> 0 > 256 ? 256 : i35) | 0) | 0;
    if (i35 >>> 0 > 255) {
     i56 = i35;
     while (1) {
      ___fwritex(i12, 256, i1) | 0;
      i51 = i56 + -256 | 0;
      if (i51 >>> 0 > 255) {
       i56 = i51;
      } else {
       i222 = i51;
       break;
      }
     }
    } else {
     i222 = i35;
    }
    ___fwritex(i12, i222, i1) | 0;
   }
   i29 = i79;
   i30 = i96;
   i31 = i72;
   i2 = i34;
   i32 = i45 ? i65 : i97;
   i33 = i64;
   continue;
  }
  i56 = i216 - i211 | 0;
  i99 = (i213 | 0) < (i56 | 0) ? i56 : i213;
  i51 = i214 + i99 | 0;
  i43 = (i65 | 0) < (i51 | 0) ? i51 : i65;
  i46 = i212 & 73728;
  i147 = (i51 | 0) < (i43 | 0);
  if ((i46 | 0) == 0 & i147) {
   i142 = i43 - i51 | 0;
   _memset(i12 | 0, 32, (i142 >>> 0 > 256 ? 256 : i142) | 0) | 0;
   if (i142 >>> 0 > 255) {
    i117 = i142;
    while (1) {
     ___fwritex(i12, 256, i1) | 0;
     i55 = i117 + -256 | 0;
     if (i55 >>> 0 > 255) {
      i117 = i55;
     } else {
      i223 = i55;
      break;
     }
    }
   } else {
    i223 = i142;
   }
   ___fwritex(i12, i223, i1) | 0;
  }
  ___fwritex(i215, i214, i1) | 0;
  if ((i46 | 0) == 65536 & i147) {
   i117 = i43 - i51 | 0;
   _memset(i12 | 0, 48, (i117 >>> 0 > 256 ? 256 : i117) | 0) | 0;
   if (i117 >>> 0 > 255) {
    i45 = i117;
    while (1) {
     ___fwritex(i12, 256, i1) | 0;
     i35 = i45 + -256 | 0;
     if (i35 >>> 0 > 255) {
      i45 = i35;
     } else {
      i224 = i35;
      break;
     }
    }
   } else {
    i224 = i117;
   }
   ___fwritex(i12, i224, i1) | 0;
  }
  if ((i56 | 0) < (i99 | 0)) {
   i45 = i99 - i56 | 0;
   _memset(i12 | 0, 48, (i45 >>> 0 > 256 ? 256 : i45) | 0) | 0;
   if (i45 >>> 0 > 255) {
    i142 = i45;
    while (1) {
     ___fwritex(i12, 256, i1) | 0;
     i35 = i142 + -256 | 0;
     if (i35 >>> 0 > 255) {
      i142 = i35;
     } else {
      i225 = i35;
      break;
     }
    }
   } else {
    i225 = i45;
   }
   ___fwritex(i12, i225, i1) | 0;
  }
  ___fwritex(i211, i56, i1) | 0;
  if (!((i46 | 0) == 8192 & i147)) {
   i29 = i209;
   i30 = i210;
   i31 = i72;
   i2 = i34;
   i32 = i43;
   i33 = i64;
   continue;
  }
  i142 = i43 - i51 | 0;
  _memset(i12 | 0, 32, (i142 >>> 0 > 256 ? 256 : i142) | 0) | 0;
  if (i142 >>> 0 > 255) {
   i99 = i142;
   while (1) {
    ___fwritex(i12, 256, i1) | 0;
    i117 = i99 + -256 | 0;
    if (i117 >>> 0 > 255) {
     i99 = i117;
    } else {
     i226 = i117;
     break;
    }
   }
  } else {
   i226 = i142;
  }
  ___fwritex(i12, i226, i1) | 0;
  i29 = i209;
  i30 = i210;
  i31 = i72;
  i2 = i34;
  i32 = i43;
  i33 = i64;
 }
 if ((i36 | 0) == 344) {
  if ((i1 | 0) != 0) {
   i61 = i34;
   STACKTOP = i6;
   return i61 | 0;
  }
  if ((i33 | 0) == 0) {
   i61 = 0;
   STACKTOP = i6;
   return i61 | 0;
  } else {
   i227 = 1;
  }
  while (1) {
   i33 = HEAP32[i5 + (i227 << 2) >> 2] | 0;
   if ((i33 | 0) == 0) {
    i228 = i227;
    break;
   }
   i34 = i4 + (i227 << 3) | 0;
   L537 : do {
    if (!(i33 >>> 0 > 20)) {
     do {
      switch (i33 | 0) {
      case 10:
       {
        i1 = HEAP32[i3 >> 2] | 0;
        i64 = HEAP32[i1 >> 2] | 0;
        HEAP32[i3 >> 2] = i1 + 4;
        i1 = i34;
        HEAP32[i1 >> 2] = i64;
        HEAP32[i1 + 4 >> 2] = ((i64 | 0) < 0) << 31 >> 31;
        break L537;
        break;
       }
      case 14:
       {
        i64 = HEAP32[i3 >> 2] | 0;
        i1 = HEAP32[i64 >> 2] | 0;
        HEAP32[i3 >> 2] = i64 + 4;
        i64 = i34;
        HEAP32[i64 >> 2] = i1 & 65535;
        HEAP32[i64 + 4 >> 2] = 0;
        break L537;
        break;
       }
      case 15:
       {
        i64 = HEAP32[i3 >> 2] | 0;
        i1 = HEAP32[i64 >> 2] | 0;
        HEAP32[i3 >> 2] = i64 + 4;
        i64 = (i1 & 255) << 24 >> 24;
        i1 = i34;
        HEAP32[i1 >> 2] = i64;
        HEAP32[i1 + 4 >> 2] = ((i64 | 0) < 0) << 31 >> 31;
        break L537;
        break;
       }
      case 17:
       {
        i64 = HEAP32[i3 >> 2] | 0;
        HEAP32[tempDoublePtr >> 2] = HEAP32[i64 >> 2];
        HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[i64 + 4 >> 2];
        d170 = +HEAPF64[tempDoublePtr >> 3];
        HEAP32[i3 >> 2] = i64 + 8;
        HEAPF64[i34 >> 3] = d170;
        break L537;
        break;
       }
      case 13:
       {
        i64 = HEAP32[i3 >> 2] | 0;
        i1 = HEAP32[i64 >> 2] | 0;
        HEAP32[i3 >> 2] = i64 + 4;
        i64 = (i1 & 65535) << 16 >> 16;
        i1 = i34;
        HEAP32[i1 >> 2] = i64;
        HEAP32[i1 + 4 >> 2] = ((i64 | 0) < 0) << 31 >> 31;
        break L537;
        break;
       }
      case 16:
       {
        i64 = HEAP32[i3 >> 2] | 0;
        i1 = HEAP32[i64 >> 2] | 0;
        HEAP32[i3 >> 2] = i64 + 4;
        i64 = i34;
        HEAP32[i64 >> 2] = i1 & 255;
        HEAP32[i64 + 4 >> 2] = 0;
        break L537;
        break;
       }
      case 12:
       {
        i64 = HEAP32[i3 >> 2] | 0;
        i1 = i64;
        i32 = HEAP32[i1 >> 2] | 0;
        i2 = HEAP32[i1 + 4 >> 2] | 0;
        HEAP32[i3 >> 2] = i64 + 8;
        i64 = i34;
        HEAP32[i64 >> 2] = i32;
        HEAP32[i64 + 4 >> 2] = i2;
        break L537;
        break;
       }
      case 11:
       {
        i2 = HEAP32[i3 >> 2] | 0;
        i64 = HEAP32[i2 >> 2] | 0;
        HEAP32[i3 >> 2] = i2 + 4;
        i2 = i34;
        HEAP32[i2 >> 2] = i64;
        HEAP32[i2 + 4 >> 2] = 0;
        break L537;
        break;
       }
      case 9:
       {
        i2 = HEAP32[i3 >> 2] | 0;
        i64 = HEAP32[i2 >> 2] | 0;
        HEAP32[i3 >> 2] = i2 + 4;
        HEAP32[i34 >> 2] = i64;
        break L537;
        break;
       }
      case 18:
       {
        i64 = HEAP32[i3 >> 2] | 0;
        HEAP32[tempDoublePtr >> 2] = HEAP32[i64 >> 2];
        HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[i64 + 4 >> 2];
        d170 = +HEAPF64[tempDoublePtr >> 3];
        HEAP32[i3 >> 2] = i64 + 8;
        HEAPF64[i34 >> 3] = d170;
        break L537;
        break;
       }
      default:
       {
        break L537;
       }
      }
     } while (0);
    }
   } while (0);
   i227 = i227 + 1 | 0;
   if ((i227 | 0) >= 10) {
    i61 = 1;
    i36 = 362;
    break;
   }
  }
  if ((i36 | 0) == 362) {
   STACKTOP = i6;
   return i61 | 0;
  }
  while (1) {
   if ((HEAP32[i5 + (i228 << 2) >> 2] | 0) != 0) {
    i61 = -1;
    i36 = 362;
    break;
   }
   i228 = i228 + 1 | 0;
   if ((i228 | 0) >= 10) {
    i61 = 1;
    i36 = 362;
    break;
   }
  }
  if ((i36 | 0) == 362) {
   STACKTOP = i6;
   return i61 | 0;
  }
 } else if ((i36 | 0) == 362) {
  STACKTOP = i6;
  return i61 | 0;
 }
 return 0;
}
function _malloc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0;
 i2 = STACKTOP;
 do {
  if (i1 >>> 0 < 245) {
   if (i1 >>> 0 < 11) {
    i3 = 16;
   } else {
    i3 = i1 + 11 & -8;
   }
   i4 = i3 >>> 3;
   i5 = HEAP32[139430] | 0;
   i6 = i5 >>> i4;
   if ((i6 & 3 | 0) != 0) {
    i7 = (i6 & 1 ^ 1) + i4 | 0;
    i8 = i7 << 1;
    i9 = 557760 + (i8 << 2) | 0;
    i10 = 557760 + (i8 + 2 << 2) | 0;
    i8 = HEAP32[i10 >> 2] | 0;
    i11 = i8 + 8 | 0;
    i12 = HEAP32[i11 >> 2] | 0;
    do {
     if ((i9 | 0) != (i12 | 0)) {
      if (i12 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
       _abort();
      }
      i13 = i12 + 12 | 0;
      if ((HEAP32[i13 >> 2] | 0) == (i8 | 0)) {
       HEAP32[i13 >> 2] = i9;
       HEAP32[i10 >> 2] = i12;
       break;
      } else {
       _abort();
      }
     } else {
      HEAP32[139430] = i5 & ~(1 << i7);
     }
    } while (0);
    i12 = i7 << 3;
    HEAP32[i8 + 4 >> 2] = i12 | 3;
    i10 = i8 + (i12 | 4) | 0;
    HEAP32[i10 >> 2] = HEAP32[i10 >> 2] | 1;
    i14 = i11;
    STACKTOP = i2;
    return i14 | 0;
   }
   if (i3 >>> 0 > (HEAP32[557728 >> 2] | 0) >>> 0) {
    if ((i6 | 0) != 0) {
     i10 = 2 << i4;
     i12 = i6 << i4 & (i10 | 0 - i10);
     i10 = (i12 & 0 - i12) + -1 | 0;
     i12 = i10 >>> 12 & 16;
     i9 = i10 >>> i12;
     i10 = i9 >>> 5 & 8;
     i13 = i9 >>> i10;
     i9 = i13 >>> 2 & 4;
     i15 = i13 >>> i9;
     i13 = i15 >>> 1 & 2;
     i16 = i15 >>> i13;
     i15 = i16 >>> 1 & 1;
     i17 = (i10 | i12 | i9 | i13 | i15) + (i16 >>> i15) | 0;
     i15 = i17 << 1;
     i16 = 557760 + (i15 << 2) | 0;
     i13 = 557760 + (i15 + 2 << 2) | 0;
     i15 = HEAP32[i13 >> 2] | 0;
     i9 = i15 + 8 | 0;
     i12 = HEAP32[i9 >> 2] | 0;
     do {
      if ((i16 | 0) != (i12 | 0)) {
       if (i12 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
        _abort();
       }
       i10 = i12 + 12 | 0;
       if ((HEAP32[i10 >> 2] | 0) == (i15 | 0)) {
        HEAP32[i10 >> 2] = i16;
        HEAP32[i13 >> 2] = i12;
        break;
       } else {
        _abort();
       }
      } else {
       HEAP32[139430] = i5 & ~(1 << i17);
      }
     } while (0);
     i5 = i17 << 3;
     i12 = i5 - i3 | 0;
     HEAP32[i15 + 4 >> 2] = i3 | 3;
     i13 = i15 + i3 | 0;
     HEAP32[i15 + (i3 | 4) >> 2] = i12 | 1;
     HEAP32[i15 + i5 >> 2] = i12;
     i5 = HEAP32[557728 >> 2] | 0;
     if ((i5 | 0) != 0) {
      i16 = HEAP32[557740 >> 2] | 0;
      i4 = i5 >>> 3;
      i5 = i4 << 1;
      i6 = 557760 + (i5 << 2) | 0;
      i11 = HEAP32[139430] | 0;
      i8 = 1 << i4;
      if ((i11 & i8 | 0) != 0) {
       i4 = 557760 + (i5 + 2 << 2) | 0;
       i7 = HEAP32[i4 >> 2] | 0;
       if (i7 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
        _abort();
       } else {
        i18 = i4;
        i19 = i7;
       }
      } else {
       HEAP32[139430] = i11 | i8;
       i18 = 557760 + (i5 + 2 << 2) | 0;
       i19 = i6;
      }
      HEAP32[i18 >> 2] = i16;
      HEAP32[i19 + 12 >> 2] = i16;
      HEAP32[i16 + 8 >> 2] = i19;
      HEAP32[i16 + 12 >> 2] = i6;
     }
     HEAP32[557728 >> 2] = i12;
     HEAP32[557740 >> 2] = i13;
     i14 = i9;
     STACKTOP = i2;
     return i14 | 0;
    }
    i13 = HEAP32[557724 >> 2] | 0;
    if ((i13 | 0) != 0) {
     i12 = (i13 & 0 - i13) + -1 | 0;
     i13 = i12 >>> 12 & 16;
     i6 = i12 >>> i13;
     i12 = i6 >>> 5 & 8;
     i16 = i6 >>> i12;
     i6 = i16 >>> 2 & 4;
     i5 = i16 >>> i6;
     i16 = i5 >>> 1 & 2;
     i8 = i5 >>> i16;
     i5 = i8 >>> 1 & 1;
     i11 = HEAP32[558024 + ((i12 | i13 | i6 | i16 | i5) + (i8 >>> i5) << 2) >> 2] | 0;
     i5 = (HEAP32[i11 + 4 >> 2] & -8) - i3 | 0;
     i8 = i11;
     i16 = i11;
     while (1) {
      i11 = HEAP32[i8 + 16 >> 2] | 0;
      if ((i11 | 0) == 0) {
       i6 = HEAP32[i8 + 20 >> 2] | 0;
       if ((i6 | 0) == 0) {
        break;
       } else {
        i20 = i6;
       }
      } else {
       i20 = i11;
      }
      i11 = (HEAP32[i20 + 4 >> 2] & -8) - i3 | 0;
      i6 = i11 >>> 0 < i5 >>> 0;
      i5 = i6 ? i11 : i5;
      i8 = i20;
      i16 = i6 ? i20 : i16;
     }
     i8 = HEAP32[557736 >> 2] | 0;
     if (i16 >>> 0 < i8 >>> 0) {
      _abort();
     }
     i9 = i16 + i3 | 0;
     if (!(i16 >>> 0 < i9 >>> 0)) {
      _abort();
     }
     i15 = HEAP32[i16 + 24 >> 2] | 0;
     i17 = HEAP32[i16 + 12 >> 2] | 0;
     do {
      if ((i17 | 0) == (i16 | 0)) {
       i6 = i16 + 20 | 0;
       i11 = HEAP32[i6 >> 2] | 0;
       if ((i11 | 0) == 0) {
        i13 = i16 + 16 | 0;
        i12 = HEAP32[i13 >> 2] | 0;
        if ((i12 | 0) == 0) {
         i21 = 0;
         break;
        } else {
         i22 = i12;
         i23 = i13;
        }
       } else {
        i22 = i11;
        i23 = i6;
       }
       while (1) {
        i6 = i22 + 20 | 0;
        i11 = HEAP32[i6 >> 2] | 0;
        if ((i11 | 0) != 0) {
         i22 = i11;
         i23 = i6;
         continue;
        }
        i6 = i22 + 16 | 0;
        i11 = HEAP32[i6 >> 2] | 0;
        if ((i11 | 0) == 0) {
         break;
        } else {
         i22 = i11;
         i23 = i6;
        }
       }
       if (i23 >>> 0 < i8 >>> 0) {
        _abort();
       } else {
        HEAP32[i23 >> 2] = 0;
        i21 = i22;
        break;
       }
      } else {
       i6 = HEAP32[i16 + 8 >> 2] | 0;
       if (i6 >>> 0 < i8 >>> 0) {
        _abort();
       }
       i11 = i6 + 12 | 0;
       if ((HEAP32[i11 >> 2] | 0) != (i16 | 0)) {
        _abort();
       }
       i13 = i17 + 8 | 0;
       if ((HEAP32[i13 >> 2] | 0) == (i16 | 0)) {
        HEAP32[i11 >> 2] = i17;
        HEAP32[i13 >> 2] = i6;
        i21 = i17;
        break;
       } else {
        _abort();
       }
      }
     } while (0);
     do {
      if ((i15 | 0) != 0) {
       i17 = HEAP32[i16 + 28 >> 2] | 0;
       i8 = 558024 + (i17 << 2) | 0;
       if ((i16 | 0) == (HEAP32[i8 >> 2] | 0)) {
        HEAP32[i8 >> 2] = i21;
        if ((i21 | 0) == 0) {
         HEAP32[557724 >> 2] = HEAP32[557724 >> 2] & ~(1 << i17);
         break;
        }
       } else {
        if (i15 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
         _abort();
        }
        i17 = i15 + 16 | 0;
        if ((HEAP32[i17 >> 2] | 0) == (i16 | 0)) {
         HEAP32[i17 >> 2] = i21;
        } else {
         HEAP32[i15 + 20 >> 2] = i21;
        }
        if ((i21 | 0) == 0) {
         break;
        }
       }
       if (i21 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
        _abort();
       }
       HEAP32[i21 + 24 >> 2] = i15;
       i17 = HEAP32[i16 + 16 >> 2] | 0;
       do {
        if ((i17 | 0) != 0) {
         if (i17 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
          _abort();
         } else {
          HEAP32[i21 + 16 >> 2] = i17;
          HEAP32[i17 + 24 >> 2] = i21;
          break;
         }
        }
       } while (0);
       i17 = HEAP32[i16 + 20 >> 2] | 0;
       if ((i17 | 0) != 0) {
        if (i17 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
         _abort();
        } else {
         HEAP32[i21 + 20 >> 2] = i17;
         HEAP32[i17 + 24 >> 2] = i21;
         break;
        }
       }
      }
     } while (0);
     if (i5 >>> 0 < 16) {
      i15 = i5 + i3 | 0;
      HEAP32[i16 + 4 >> 2] = i15 | 3;
      i17 = i16 + (i15 + 4) | 0;
      HEAP32[i17 >> 2] = HEAP32[i17 >> 2] | 1;
     } else {
      HEAP32[i16 + 4 >> 2] = i3 | 3;
      HEAP32[i16 + (i3 | 4) >> 2] = i5 | 1;
      HEAP32[i16 + (i5 + i3) >> 2] = i5;
      i17 = HEAP32[557728 >> 2] | 0;
      if ((i17 | 0) != 0) {
       i15 = HEAP32[557740 >> 2] | 0;
       i8 = i17 >>> 3;
       i17 = i8 << 1;
       i6 = 557760 + (i17 << 2) | 0;
       i13 = HEAP32[139430] | 0;
       i11 = 1 << i8;
       if ((i13 & i11 | 0) != 0) {
        i8 = 557760 + (i17 + 2 << 2) | 0;
        i12 = HEAP32[i8 >> 2] | 0;
        if (i12 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
         _abort();
        } else {
         i24 = i8;
         i25 = i12;
        }
       } else {
        HEAP32[139430] = i13 | i11;
        i24 = 557760 + (i17 + 2 << 2) | 0;
        i25 = i6;
       }
       HEAP32[i24 >> 2] = i15;
       HEAP32[i25 + 12 >> 2] = i15;
       HEAP32[i15 + 8 >> 2] = i25;
       HEAP32[i15 + 12 >> 2] = i6;
      }
      HEAP32[557728 >> 2] = i5;
      HEAP32[557740 >> 2] = i9;
     }
     i14 = i16 + 8 | 0;
     STACKTOP = i2;
     return i14 | 0;
    } else {
     i26 = i3;
    }
   } else {
    i26 = i3;
   }
  } else {
   if (!(i1 >>> 0 > 4294967231)) {
    i6 = i1 + 11 | 0;
    i15 = i6 & -8;
    i17 = HEAP32[557724 >> 2] | 0;
    if ((i17 | 0) != 0) {
     i11 = 0 - i15 | 0;
     i13 = i6 >>> 8;
     if ((i13 | 0) != 0) {
      if (i15 >>> 0 > 16777215) {
       i27 = 31;
      } else {
       i6 = (i13 + 1048320 | 0) >>> 16 & 8;
       i12 = i13 << i6;
       i13 = (i12 + 520192 | 0) >>> 16 & 4;
       i8 = i12 << i13;
       i12 = (i8 + 245760 | 0) >>> 16 & 2;
       i7 = 14 - (i13 | i6 | i12) + (i8 << i12 >>> 15) | 0;
       i27 = i15 >>> (i7 + 7 | 0) & 1 | i7 << 1;
      }
     } else {
      i27 = 0;
     }
     i7 = HEAP32[558024 + (i27 << 2) >> 2] | 0;
     L9 : do {
      if ((i7 | 0) == 0) {
       i28 = i11;
       i29 = 0;
       i30 = 0;
      } else {
       if ((i27 | 0) == 31) {
        i31 = 0;
       } else {
        i31 = 25 - (i27 >>> 1) | 0;
       }
       i12 = i11;
       i8 = 0;
       i6 = i15 << i31;
       i13 = i7;
       i4 = 0;
       while (1) {
        i10 = HEAP32[i13 + 4 >> 2] & -8;
        i32 = i10 - i15 | 0;
        if (i32 >>> 0 < i12 >>> 0) {
         if ((i10 | 0) == (i15 | 0)) {
          i28 = i32;
          i29 = i13;
          i30 = i13;
          break L9;
         } else {
          i33 = i32;
          i34 = i13;
         }
        } else {
         i33 = i12;
         i34 = i4;
        }
        i32 = HEAP32[i13 + 20 >> 2] | 0;
        i13 = HEAP32[i13 + (i6 >>> 31 << 2) + 16 >> 2] | 0;
        i10 = (i32 | 0) == 0 | (i32 | 0) == (i13 | 0) ? i8 : i32;
        if ((i13 | 0) == 0) {
         i28 = i33;
         i29 = i10;
         i30 = i34;
         break;
        } else {
         i12 = i33;
         i8 = i10;
         i6 = i6 << 1;
         i4 = i34;
        }
       }
      }
     } while (0);
     if ((i29 | 0) == 0 & (i30 | 0) == 0) {
      i7 = 2 << i27;
      i11 = i17 & (i7 | 0 - i7);
      if ((i11 | 0) == 0) {
       i26 = i15;
       break;
      }
      i7 = (i11 & 0 - i11) + -1 | 0;
      i11 = i7 >>> 12 & 16;
      i16 = i7 >>> i11;
      i7 = i16 >>> 5 & 8;
      i9 = i16 >>> i7;
      i16 = i9 >>> 2 & 4;
      i5 = i9 >>> i16;
      i9 = i5 >>> 1 & 2;
      i4 = i5 >>> i9;
      i5 = i4 >>> 1 & 1;
      i35 = HEAP32[558024 + ((i7 | i11 | i16 | i9 | i5) + (i4 >>> i5) << 2) >> 2] | 0;
     } else {
      i35 = i29;
     }
     if ((i35 | 0) == 0) {
      i36 = i28;
      i37 = i30;
     } else {
      i5 = i28;
      i4 = i35;
      i9 = i30;
      while (1) {
       i16 = (HEAP32[i4 + 4 >> 2] & -8) - i15 | 0;
       i11 = i16 >>> 0 < i5 >>> 0;
       i7 = i11 ? i16 : i5;
       i16 = i11 ? i4 : i9;
       i11 = HEAP32[i4 + 16 >> 2] | 0;
       if ((i11 | 0) != 0) {
        i5 = i7;
        i4 = i11;
        i9 = i16;
        continue;
       }
       i4 = HEAP32[i4 + 20 >> 2] | 0;
       if ((i4 | 0) == 0) {
        i36 = i7;
        i37 = i16;
        break;
       } else {
        i5 = i7;
        i9 = i16;
       }
      }
     }
     if ((i37 | 0) != 0 ? i36 >>> 0 < ((HEAP32[557728 >> 2] | 0) - i15 | 0) >>> 0 : 0) {
      i9 = HEAP32[557736 >> 2] | 0;
      if (i37 >>> 0 < i9 >>> 0) {
       _abort();
      }
      i5 = i37 + i15 | 0;
      if (!(i37 >>> 0 < i5 >>> 0)) {
       _abort();
      }
      i4 = HEAP32[i37 + 24 >> 2] | 0;
      i17 = HEAP32[i37 + 12 >> 2] | 0;
      do {
       if ((i17 | 0) == (i37 | 0)) {
        i16 = i37 + 20 | 0;
        i7 = HEAP32[i16 >> 2] | 0;
        if ((i7 | 0) == 0) {
         i11 = i37 + 16 | 0;
         i6 = HEAP32[i11 >> 2] | 0;
         if ((i6 | 0) == 0) {
          i38 = 0;
          break;
         } else {
          i39 = i6;
          i40 = i11;
         }
        } else {
         i39 = i7;
         i40 = i16;
        }
        while (1) {
         i16 = i39 + 20 | 0;
         i7 = HEAP32[i16 >> 2] | 0;
         if ((i7 | 0) != 0) {
          i39 = i7;
          i40 = i16;
          continue;
         }
         i16 = i39 + 16 | 0;
         i7 = HEAP32[i16 >> 2] | 0;
         if ((i7 | 0) == 0) {
          break;
         } else {
          i39 = i7;
          i40 = i16;
         }
        }
        if (i40 >>> 0 < i9 >>> 0) {
         _abort();
        } else {
         HEAP32[i40 >> 2] = 0;
         i38 = i39;
         break;
        }
       } else {
        i16 = HEAP32[i37 + 8 >> 2] | 0;
        if (i16 >>> 0 < i9 >>> 0) {
         _abort();
        }
        i7 = i16 + 12 | 0;
        if ((HEAP32[i7 >> 2] | 0) != (i37 | 0)) {
         _abort();
        }
        i11 = i17 + 8 | 0;
        if ((HEAP32[i11 >> 2] | 0) == (i37 | 0)) {
         HEAP32[i7 >> 2] = i17;
         HEAP32[i11 >> 2] = i16;
         i38 = i17;
         break;
        } else {
         _abort();
        }
       }
      } while (0);
      do {
       if ((i4 | 0) != 0) {
        i17 = HEAP32[i37 + 28 >> 2] | 0;
        i9 = 558024 + (i17 << 2) | 0;
        if ((i37 | 0) == (HEAP32[i9 >> 2] | 0)) {
         HEAP32[i9 >> 2] = i38;
         if ((i38 | 0) == 0) {
          HEAP32[557724 >> 2] = HEAP32[557724 >> 2] & ~(1 << i17);
          break;
         }
        } else {
         if (i4 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
          _abort();
         }
         i17 = i4 + 16 | 0;
         if ((HEAP32[i17 >> 2] | 0) == (i37 | 0)) {
          HEAP32[i17 >> 2] = i38;
         } else {
          HEAP32[i4 + 20 >> 2] = i38;
         }
         if ((i38 | 0) == 0) {
          break;
         }
        }
        if (i38 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
         _abort();
        }
        HEAP32[i38 + 24 >> 2] = i4;
        i17 = HEAP32[i37 + 16 >> 2] | 0;
        do {
         if ((i17 | 0) != 0) {
          if (i17 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
           _abort();
          } else {
           HEAP32[i38 + 16 >> 2] = i17;
           HEAP32[i17 + 24 >> 2] = i38;
           break;
          }
         }
        } while (0);
        i17 = HEAP32[i37 + 20 >> 2] | 0;
        if ((i17 | 0) != 0) {
         if (i17 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
          _abort();
         } else {
          HEAP32[i38 + 20 >> 2] = i17;
          HEAP32[i17 + 24 >> 2] = i38;
          break;
         }
        }
       }
      } while (0);
      L87 : do {
       if (!(i36 >>> 0 < 16)) {
        HEAP32[i37 + 4 >> 2] = i15 | 3;
        HEAP32[i37 + (i15 | 4) >> 2] = i36 | 1;
        HEAP32[i37 + (i36 + i15) >> 2] = i36;
        i4 = i36 >>> 3;
        if (i36 >>> 0 < 256) {
         i17 = i4 << 1;
         i9 = 557760 + (i17 << 2) | 0;
         i16 = HEAP32[139430] | 0;
         i11 = 1 << i4;
         do {
          if ((i16 & i11 | 0) == 0) {
           HEAP32[139430] = i16 | i11;
           i41 = 557760 + (i17 + 2 << 2) | 0;
           i42 = i9;
          } else {
           i4 = 557760 + (i17 + 2 << 2) | 0;
           i7 = HEAP32[i4 >> 2] | 0;
           if (!(i7 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0)) {
            i41 = i4;
            i42 = i7;
            break;
           }
           _abort();
          }
         } while (0);
         HEAP32[i41 >> 2] = i5;
         HEAP32[i42 + 12 >> 2] = i5;
         HEAP32[i37 + (i15 + 8) >> 2] = i42;
         HEAP32[i37 + (i15 + 12) >> 2] = i9;
         break;
        }
        i17 = i36 >>> 8;
        if ((i17 | 0) != 0) {
         if (i36 >>> 0 > 16777215) {
          i43 = 31;
         } else {
          i11 = (i17 + 1048320 | 0) >>> 16 & 8;
          i16 = i17 << i11;
          i17 = (i16 + 520192 | 0) >>> 16 & 4;
          i7 = i16 << i17;
          i16 = (i7 + 245760 | 0) >>> 16 & 2;
          i4 = 14 - (i17 | i11 | i16) + (i7 << i16 >>> 15) | 0;
          i43 = i36 >>> (i4 + 7 | 0) & 1 | i4 << 1;
         }
        } else {
         i43 = 0;
        }
        i4 = 558024 + (i43 << 2) | 0;
        HEAP32[i37 + (i15 + 28) >> 2] = i43;
        HEAP32[i37 + (i15 + 20) >> 2] = 0;
        HEAP32[i37 + (i15 + 16) >> 2] = 0;
        i16 = HEAP32[557724 >> 2] | 0;
        i7 = 1 << i43;
        if ((i16 & i7 | 0) == 0) {
         HEAP32[557724 >> 2] = i16 | i7;
         HEAP32[i4 >> 2] = i5;
         HEAP32[i37 + (i15 + 24) >> 2] = i4;
         HEAP32[i37 + (i15 + 12) >> 2] = i5;
         HEAP32[i37 + (i15 + 8) >> 2] = i5;
         break;
        }
        i7 = HEAP32[i4 >> 2] | 0;
        if ((i43 | 0) == 31) {
         i44 = 0;
        } else {
         i44 = 25 - (i43 >>> 1) | 0;
        }
        L107 : do {
         if ((HEAP32[i7 + 4 >> 2] & -8 | 0) != (i36 | 0)) {
          i4 = i36 << i44;
          i16 = i7;
          while (1) {
           i45 = i16 + (i4 >>> 31 << 2) + 16 | 0;
           i11 = HEAP32[i45 >> 2] | 0;
           if ((i11 | 0) == 0) {
            break;
           }
           if ((HEAP32[i11 + 4 >> 2] & -8 | 0) == (i36 | 0)) {
            i46 = i11;
            break L107;
           } else {
            i4 = i4 << 1;
            i16 = i11;
           }
          }
          if (i45 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
           _abort();
          } else {
           HEAP32[i45 >> 2] = i5;
           HEAP32[i37 + (i15 + 24) >> 2] = i16;
           HEAP32[i37 + (i15 + 12) >> 2] = i5;
           HEAP32[i37 + (i15 + 8) >> 2] = i5;
           break L87;
          }
         } else {
          i46 = i7;
         }
        } while (0);
        i7 = i46 + 8 | 0;
        i9 = HEAP32[i7 >> 2] | 0;
        i4 = HEAP32[557736 >> 2] | 0;
        if (i46 >>> 0 < i4 >>> 0) {
         _abort();
        }
        if (i9 >>> 0 < i4 >>> 0) {
         _abort();
        } else {
         HEAP32[i9 + 12 >> 2] = i5;
         HEAP32[i7 >> 2] = i5;
         HEAP32[i37 + (i15 + 8) >> 2] = i9;
         HEAP32[i37 + (i15 + 12) >> 2] = i46;
         HEAP32[i37 + (i15 + 24) >> 2] = 0;
         break;
        }
       } else {
        i9 = i36 + i15 | 0;
        HEAP32[i37 + 4 >> 2] = i9 | 3;
        i7 = i37 + (i9 + 4) | 0;
        HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 1;
       }
      } while (0);
      i14 = i37 + 8 | 0;
      STACKTOP = i2;
      return i14 | 0;
     } else {
      i26 = i15;
     }
    } else {
     i26 = i15;
    }
   } else {
    i26 = -1;
   }
  }
 } while (0);
 i37 = HEAP32[557728 >> 2] | 0;
 if (!(i26 >>> 0 > i37 >>> 0)) {
  i36 = i37 - i26 | 0;
  i46 = HEAP32[557740 >> 2] | 0;
  if (i36 >>> 0 > 15) {
   HEAP32[557740 >> 2] = i46 + i26;
   HEAP32[557728 >> 2] = i36;
   HEAP32[i46 + (i26 + 4) >> 2] = i36 | 1;
   HEAP32[i46 + i37 >> 2] = i36;
   HEAP32[i46 + 4 >> 2] = i26 | 3;
  } else {
   HEAP32[557728 >> 2] = 0;
   HEAP32[557740 >> 2] = 0;
   HEAP32[i46 + 4 >> 2] = i37 | 3;
   i36 = i46 + (i37 + 4) | 0;
   HEAP32[i36 >> 2] = HEAP32[i36 >> 2] | 1;
  }
  i14 = i46 + 8 | 0;
  STACKTOP = i2;
  return i14 | 0;
 }
 i46 = HEAP32[557732 >> 2] | 0;
 if (i26 >>> 0 < i46 >>> 0) {
  i36 = i46 - i26 | 0;
  HEAP32[557732 >> 2] = i36;
  i46 = HEAP32[557744 >> 2] | 0;
  HEAP32[557744 >> 2] = i46 + i26;
  HEAP32[i46 + (i26 + 4) >> 2] = i36 | 1;
  HEAP32[i46 + 4 >> 2] = i26 | 3;
  i14 = i46 + 8 | 0;
  STACKTOP = i2;
  return i14 | 0;
 }
 do {
  if ((HEAP32[139548] | 0) == 0) {
   i46 = _sysconf(30) | 0;
   if ((i46 + -1 & i46 | 0) == 0) {
    HEAP32[558200 >> 2] = i46;
    HEAP32[558196 >> 2] = i46;
    HEAP32[558204 >> 2] = -1;
    HEAP32[558208 >> 2] = -1;
    HEAP32[558212 >> 2] = 0;
    HEAP32[558164 >> 2] = 0;
    HEAP32[139548] = (_time(0) | 0) & -16 ^ 1431655768;
    break;
   } else {
    _abort();
   }
  }
 } while (0);
 i46 = i26 + 48 | 0;
 i36 = HEAP32[558200 >> 2] | 0;
 i37 = i26 + 47 | 0;
 i45 = i36 + i37 | 0;
 i44 = 0 - i36 | 0;
 i36 = i45 & i44;
 if (!(i36 >>> 0 > i26 >>> 0)) {
  i14 = 0;
  STACKTOP = i2;
  return i14 | 0;
 }
 i43 = HEAP32[558160 >> 2] | 0;
 if ((i43 | 0) != 0 ? (i42 = HEAP32[558152 >> 2] | 0, i41 = i42 + i36 | 0, i41 >>> 0 <= i42 >>> 0 | i41 >>> 0 > i43 >>> 0) : 0) {
  i14 = 0;
  STACKTOP = i2;
  return i14 | 0;
 }
 L269 : do {
  if ((HEAP32[558164 >> 2] & 4 | 0) == 0) {
   i43 = HEAP32[557744 >> 2] | 0;
   L271 : do {
    if ((i43 | 0) != 0) {
     i41 = 558168 | 0;
     while (1) {
      i42 = HEAP32[i41 >> 2] | 0;
      if (!(i42 >>> 0 > i43 >>> 0) ? (i47 = i41 + 4 | 0, (i42 + (HEAP32[i47 >> 2] | 0) | 0) >>> 0 > i43 >>> 0) : 0) {
       break;
      }
      i42 = HEAP32[i41 + 8 >> 2] | 0;
      if ((i42 | 0) == 0) {
       i48 = 182;
       break L271;
      } else {
       i41 = i42;
      }
     }
     if ((i41 | 0) != 0) {
      i42 = i45 - (HEAP32[557732 >> 2] | 0) & i44;
      if (i42 >>> 0 < 2147483647) {
       i38 = _sbrk(i42 | 0) | 0;
       i39 = (i38 | 0) == ((HEAP32[i41 >> 2] | 0) + (HEAP32[i47 >> 2] | 0) | 0);
       i49 = i38;
       i50 = i42;
       i51 = i39 ? i38 : -1;
       i52 = i39 ? i42 : 0;
       i48 = 191;
      } else {
       i53 = 0;
      }
     } else {
      i48 = 182;
     }
    } else {
     i48 = 182;
    }
   } while (0);
   do {
    if ((i48 | 0) == 182) {
     i43 = _sbrk(0) | 0;
     if ((i43 | 0) != (-1 | 0)) {
      i15 = i43;
      i42 = HEAP32[558196 >> 2] | 0;
      i39 = i42 + -1 | 0;
      if ((i39 & i15 | 0) == 0) {
       i54 = i36;
      } else {
       i54 = i36 - i15 + (i39 + i15 & 0 - i42) | 0;
      }
      i42 = HEAP32[558152 >> 2] | 0;
      i15 = i42 + i54 | 0;
      if (i54 >>> 0 > i26 >>> 0 & i54 >>> 0 < 2147483647) {
       i39 = HEAP32[558160 >> 2] | 0;
       if ((i39 | 0) != 0 ? i15 >>> 0 <= i42 >>> 0 | i15 >>> 0 > i39 >>> 0 : 0) {
        i53 = 0;
        break;
       }
       i39 = _sbrk(i54 | 0) | 0;
       i15 = (i39 | 0) == (i43 | 0);
       i49 = i39;
       i50 = i54;
       i51 = i15 ? i43 : -1;
       i52 = i15 ? i54 : 0;
       i48 = 191;
      } else {
       i53 = 0;
      }
     } else {
      i53 = 0;
     }
    }
   } while (0);
   L291 : do {
    if ((i48 | 0) == 191) {
     i15 = 0 - i50 | 0;
     if ((i51 | 0) != (-1 | 0)) {
      i55 = i51;
      i56 = i52;
      i48 = 202;
      break L269;
     }
     do {
      if ((i49 | 0) != (-1 | 0) & i50 >>> 0 < 2147483647 & i50 >>> 0 < i46 >>> 0 ? (i43 = HEAP32[558200 >> 2] | 0, i39 = i37 - i50 + i43 & 0 - i43, i39 >>> 0 < 2147483647) : 0) {
       if ((_sbrk(i39 | 0) | 0) == (-1 | 0)) {
        _sbrk(i15 | 0) | 0;
        i53 = i52;
        break L291;
       } else {
        i57 = i39 + i50 | 0;
        break;
       }
      } else {
       i57 = i50;
      }
     } while (0);
     if ((i49 | 0) == (-1 | 0)) {
      i53 = i52;
     } else {
      i55 = i49;
      i56 = i57;
      i48 = 202;
      break L269;
     }
    }
   } while (0);
   HEAP32[558164 >> 2] = HEAP32[558164 >> 2] | 4;
   i58 = i53;
   i48 = 199;
  } else {
   i58 = 0;
   i48 = 199;
  }
 } while (0);
 if ((((i48 | 0) == 199 ? i36 >>> 0 < 2147483647 : 0) ? (i53 = _sbrk(i36 | 0) | 0, i36 = _sbrk(0) | 0, (i36 | 0) != (-1 | 0) & (i53 | 0) != (-1 | 0) & i53 >>> 0 < i36 >>> 0) : 0) ? (i57 = i36 - i53 | 0, i36 = i57 >>> 0 > (i26 + 40 | 0) >>> 0, i36) : 0) {
  i55 = i53;
  i56 = i36 ? i57 : i58;
  i48 = 202;
 }
 if ((i48 | 0) == 202) {
  i58 = (HEAP32[558152 >> 2] | 0) + i56 | 0;
  HEAP32[558152 >> 2] = i58;
  if (i58 >>> 0 > (HEAP32[558156 >> 2] | 0) >>> 0) {
   HEAP32[558156 >> 2] = i58;
  }
  i58 = HEAP32[557744 >> 2] | 0;
  L311 : do {
   if ((i58 | 0) != 0) {
    i57 = 558168 | 0;
    while (1) {
     i59 = HEAP32[i57 >> 2] | 0;
     i60 = i57 + 4 | 0;
     i61 = HEAP32[i60 >> 2] | 0;
     if ((i55 | 0) == (i59 + i61 | 0)) {
      i48 = 214;
      break;
     }
     i36 = HEAP32[i57 + 8 >> 2] | 0;
     if ((i36 | 0) == 0) {
      break;
     } else {
      i57 = i36;
     }
    }
    if (((i48 | 0) == 214 ? (HEAP32[i57 + 12 >> 2] & 8 | 0) == 0 : 0) ? i58 >>> 0 >= i59 >>> 0 & i58 >>> 0 < i55 >>> 0 : 0) {
     HEAP32[i60 >> 2] = i61 + i56;
     i36 = (HEAP32[557732 >> 2] | 0) + i56 | 0;
     i53 = i58 + 8 | 0;
     if ((i53 & 7 | 0) == 0) {
      i62 = 0;
     } else {
      i62 = 0 - i53 & 7;
     }
     i53 = i36 - i62 | 0;
     HEAP32[557744 >> 2] = i58 + i62;
     HEAP32[557732 >> 2] = i53;
     HEAP32[i58 + (i62 + 4) >> 2] = i53 | 1;
     HEAP32[i58 + (i36 + 4) >> 2] = 40;
     HEAP32[557748 >> 2] = HEAP32[558208 >> 2];
     break;
    }
    if (i55 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
     HEAP32[557736 >> 2] = i55;
    }
    i36 = i55 + i56 | 0;
    i53 = 558168 | 0;
    while (1) {
     if ((HEAP32[i53 >> 2] | 0) == (i36 | 0)) {
      i48 = 224;
      break;
     }
     i49 = HEAP32[i53 + 8 >> 2] | 0;
     if ((i49 | 0) == 0) {
      break;
     } else {
      i53 = i49;
     }
    }
    if ((i48 | 0) == 224 ? (HEAP32[i53 + 12 >> 2] & 8 | 0) == 0 : 0) {
     HEAP32[i53 >> 2] = i55;
     i36 = i53 + 4 | 0;
     HEAP32[i36 >> 2] = (HEAP32[i36 >> 2] | 0) + i56;
     i36 = i55 + 8 | 0;
     if ((i36 & 7 | 0) == 0) {
      i63 = 0;
     } else {
      i63 = 0 - i36 & 7;
     }
     i36 = i55 + (i56 + 8) | 0;
     if ((i36 & 7 | 0) == 0) {
      i64 = 0;
     } else {
      i64 = 0 - i36 & 7;
     }
     i36 = i55 + (i64 + i56) | 0;
     i57 = i63 + i26 | 0;
     i49 = i55 + i57 | 0;
     i52 = i36 - (i55 + i63) - i26 | 0;
     HEAP32[i55 + (i63 + 4) >> 2] = i26 | 3;
     L348 : do {
      if ((i36 | 0) != (HEAP32[557744 >> 2] | 0)) {
       if ((i36 | 0) == (HEAP32[557740 >> 2] | 0)) {
        i50 = (HEAP32[557728 >> 2] | 0) + i52 | 0;
        HEAP32[557728 >> 2] = i50;
        HEAP32[557740 >> 2] = i49;
        HEAP32[i55 + (i57 + 4) >> 2] = i50 | 1;
        HEAP32[i55 + (i50 + i57) >> 2] = i50;
        break;
       }
       i50 = i56 + 4 | 0;
       i37 = HEAP32[i55 + (i50 + i64) >> 2] | 0;
       if ((i37 & 3 | 0) == 1) {
        i46 = i37 & -8;
        i51 = i37 >>> 3;
        L355 : do {
         if (!(i37 >>> 0 < 256)) {
          i54 = HEAP32[i55 + ((i64 | 24) + i56) >> 2] | 0;
          i47 = HEAP32[i55 + (i56 + 12 + i64) >> 2] | 0;
          do {
           if ((i47 | 0) == (i36 | 0)) {
            i44 = i64 | 16;
            i45 = i55 + (i50 + i44) | 0;
            i15 = HEAP32[i45 >> 2] | 0;
            if ((i15 | 0) == 0) {
             i41 = i55 + (i44 + i56) | 0;
             i44 = HEAP32[i41 >> 2] | 0;
             if ((i44 | 0) == 0) {
              i65 = 0;
              break;
             } else {
              i66 = i44;
              i67 = i41;
             }
            } else {
             i66 = i15;
             i67 = i45;
            }
            while (1) {
             i45 = i66 + 20 | 0;
             i15 = HEAP32[i45 >> 2] | 0;
             if ((i15 | 0) != 0) {
              i66 = i15;
              i67 = i45;
              continue;
             }
             i45 = i66 + 16 | 0;
             i15 = HEAP32[i45 >> 2] | 0;
             if ((i15 | 0) == 0) {
              break;
             } else {
              i66 = i15;
              i67 = i45;
             }
            }
            if (i67 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
             _abort();
            } else {
             HEAP32[i67 >> 2] = 0;
             i65 = i66;
             break;
            }
           } else {
            i45 = HEAP32[i55 + ((i64 | 8) + i56) >> 2] | 0;
            if (i45 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
             _abort();
            }
            i15 = i45 + 12 | 0;
            if ((HEAP32[i15 >> 2] | 0) != (i36 | 0)) {
             _abort();
            }
            i41 = i47 + 8 | 0;
            if ((HEAP32[i41 >> 2] | 0) == (i36 | 0)) {
             HEAP32[i15 >> 2] = i47;
             HEAP32[i41 >> 2] = i45;
             i65 = i47;
             break;
            } else {
             _abort();
            }
           }
          } while (0);
          if ((i54 | 0) == 0) {
           break;
          }
          i47 = HEAP32[i55 + (i56 + 28 + i64) >> 2] | 0;
          i16 = 558024 + (i47 << 2) | 0;
          do {
           if ((i36 | 0) != (HEAP32[i16 >> 2] | 0)) {
            if (i54 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
             _abort();
            }
            i45 = i54 + 16 | 0;
            if ((HEAP32[i45 >> 2] | 0) == (i36 | 0)) {
             HEAP32[i45 >> 2] = i65;
            } else {
             HEAP32[i54 + 20 >> 2] = i65;
            }
            if ((i65 | 0) == 0) {
             break L355;
            }
           } else {
            HEAP32[i16 >> 2] = i65;
            if ((i65 | 0) != 0) {
             break;
            }
            HEAP32[557724 >> 2] = HEAP32[557724 >> 2] & ~(1 << i47);
            break L355;
           }
          } while (0);
          if (i65 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
           _abort();
          }
          HEAP32[i65 + 24 >> 2] = i54;
          i47 = i64 | 16;
          i16 = HEAP32[i55 + (i47 + i56) >> 2] | 0;
          do {
           if ((i16 | 0) != 0) {
            if (i16 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
             _abort();
            } else {
             HEAP32[i65 + 16 >> 2] = i16;
             HEAP32[i16 + 24 >> 2] = i65;
             break;
            }
           }
          } while (0);
          i16 = HEAP32[i55 + (i50 + i47) >> 2] | 0;
          if ((i16 | 0) == 0) {
           break;
          }
          if (i16 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
           _abort();
          } else {
           HEAP32[i65 + 20 >> 2] = i16;
           HEAP32[i16 + 24 >> 2] = i65;
           break;
          }
         } else {
          i16 = HEAP32[i55 + ((i64 | 8) + i56) >> 2] | 0;
          i54 = HEAP32[i55 + (i56 + 12 + i64) >> 2] | 0;
          i45 = 557760 + (i51 << 1 << 2) | 0;
          do {
           if ((i16 | 0) != (i45 | 0)) {
            if (i16 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
             _abort();
            }
            if ((HEAP32[i16 + 12 >> 2] | 0) == (i36 | 0)) {
             break;
            }
            _abort();
           }
          } while (0);
          if ((i54 | 0) == (i16 | 0)) {
           HEAP32[139430] = HEAP32[139430] & ~(1 << i51);
           break;
          }
          do {
           if ((i54 | 0) == (i45 | 0)) {
            i68 = i54 + 8 | 0;
           } else {
            if (i54 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
             _abort();
            }
            i47 = i54 + 8 | 0;
            if ((HEAP32[i47 >> 2] | 0) == (i36 | 0)) {
             i68 = i47;
             break;
            }
            _abort();
           }
          } while (0);
          HEAP32[i16 + 12 >> 2] = i54;
          HEAP32[i68 >> 2] = i16;
         }
        } while (0);
        i69 = i55 + ((i46 | i64) + i56) | 0;
        i70 = i46 + i52 | 0;
       } else {
        i69 = i36;
        i70 = i52;
       }
       i51 = i69 + 4 | 0;
       HEAP32[i51 >> 2] = HEAP32[i51 >> 2] & -2;
       HEAP32[i55 + (i57 + 4) >> 2] = i70 | 1;
       HEAP32[i55 + (i70 + i57) >> 2] = i70;
       i51 = i70 >>> 3;
       if (i70 >>> 0 < 256) {
        i50 = i51 << 1;
        i37 = 557760 + (i50 << 2) | 0;
        i45 = HEAP32[139430] | 0;
        i47 = 1 << i51;
        do {
         if ((i45 & i47 | 0) == 0) {
          HEAP32[139430] = i45 | i47;
          i71 = 557760 + (i50 + 2 << 2) | 0;
          i72 = i37;
         } else {
          i51 = 557760 + (i50 + 2 << 2) | 0;
          i41 = HEAP32[i51 >> 2] | 0;
          if (!(i41 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0)) {
           i71 = i51;
           i72 = i41;
           break;
          }
          _abort();
         }
        } while (0);
        HEAP32[i71 >> 2] = i49;
        HEAP32[i72 + 12 >> 2] = i49;
        HEAP32[i55 + (i57 + 8) >> 2] = i72;
        HEAP32[i55 + (i57 + 12) >> 2] = i37;
        break;
       }
       i50 = i70 >>> 8;
       do {
        if ((i50 | 0) == 0) {
         i73 = 0;
        } else {
         if (i70 >>> 0 > 16777215) {
          i73 = 31;
          break;
         }
         i47 = (i50 + 1048320 | 0) >>> 16 & 8;
         i45 = i50 << i47;
         i46 = (i45 + 520192 | 0) >>> 16 & 4;
         i41 = i45 << i46;
         i45 = (i41 + 245760 | 0) >>> 16 & 2;
         i51 = 14 - (i46 | i47 | i45) + (i41 << i45 >>> 15) | 0;
         i73 = i70 >>> (i51 + 7 | 0) & 1 | i51 << 1;
        }
       } while (0);
       i50 = 558024 + (i73 << 2) | 0;
       HEAP32[i55 + (i57 + 28) >> 2] = i73;
       HEAP32[i55 + (i57 + 20) >> 2] = 0;
       HEAP32[i55 + (i57 + 16) >> 2] = 0;
       i37 = HEAP32[557724 >> 2] | 0;
       i51 = 1 << i73;
       if ((i37 & i51 | 0) == 0) {
        HEAP32[557724 >> 2] = i37 | i51;
        HEAP32[i50 >> 2] = i49;
        HEAP32[i55 + (i57 + 24) >> 2] = i50;
        HEAP32[i55 + (i57 + 12) >> 2] = i49;
        HEAP32[i55 + (i57 + 8) >> 2] = i49;
        break;
       }
       i51 = HEAP32[i50 >> 2] | 0;
       if ((i73 | 0) == 31) {
        i74 = 0;
       } else {
        i74 = 25 - (i73 >>> 1) | 0;
       }
       L444 : do {
        if ((HEAP32[i51 + 4 >> 2] & -8 | 0) != (i70 | 0)) {
         i50 = i70 << i74;
         i37 = i51;
         while (1) {
          i75 = i37 + (i50 >>> 31 << 2) + 16 | 0;
          i45 = HEAP32[i75 >> 2] | 0;
          if ((i45 | 0) == 0) {
           break;
          }
          if ((HEAP32[i45 + 4 >> 2] & -8 | 0) == (i70 | 0)) {
           i76 = i45;
           break L444;
          } else {
           i50 = i50 << 1;
           i37 = i45;
          }
         }
         if (i75 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
          _abort();
         } else {
          HEAP32[i75 >> 2] = i49;
          HEAP32[i55 + (i57 + 24) >> 2] = i37;
          HEAP32[i55 + (i57 + 12) >> 2] = i49;
          HEAP32[i55 + (i57 + 8) >> 2] = i49;
          break L348;
         }
        } else {
         i76 = i51;
        }
       } while (0);
       i51 = i76 + 8 | 0;
       i50 = HEAP32[i51 >> 2] | 0;
       i16 = HEAP32[557736 >> 2] | 0;
       if (i76 >>> 0 < i16 >>> 0) {
        _abort();
       }
       if (i50 >>> 0 < i16 >>> 0) {
        _abort();
       } else {
        HEAP32[i50 + 12 >> 2] = i49;
        HEAP32[i51 >> 2] = i49;
        HEAP32[i55 + (i57 + 8) >> 2] = i50;
        HEAP32[i55 + (i57 + 12) >> 2] = i76;
        HEAP32[i55 + (i57 + 24) >> 2] = 0;
        break;
       }
      } else {
       i50 = (HEAP32[557732 >> 2] | 0) + i52 | 0;
       HEAP32[557732 >> 2] = i50;
       HEAP32[557744 >> 2] = i49;
       HEAP32[i55 + (i57 + 4) >> 2] = i50 | 1;
      }
     } while (0);
     i14 = i55 + (i63 | 8) | 0;
     STACKTOP = i2;
     return i14 | 0;
    }
    i57 = 558168 | 0;
    while (1) {
     i77 = HEAP32[i57 >> 2] | 0;
     if (!(i77 >>> 0 > i58 >>> 0) ? (i78 = HEAP32[i57 + 4 >> 2] | 0, i79 = i77 + i78 | 0, i79 >>> 0 > i58 >>> 0) : 0) {
      break;
     }
     i57 = HEAP32[i57 + 8 >> 2] | 0;
    }
    i57 = i77 + (i78 + -39) | 0;
    if ((i57 & 7 | 0) == 0) {
     i80 = 0;
    } else {
     i80 = 0 - i57 & 7;
    }
    i57 = i77 + (i78 + -47 + i80) | 0;
    i49 = i57 >>> 0 < (i58 + 16 | 0) >>> 0 ? i58 : i57;
    i57 = i49 + 8 | 0;
    i52 = i55 + 8 | 0;
    if ((i52 & 7 | 0) == 0) {
     i81 = 0;
    } else {
     i81 = 0 - i52 & 7;
    }
    i52 = i56 + -40 - i81 | 0;
    HEAP32[557744 >> 2] = i55 + i81;
    HEAP32[557732 >> 2] = i52;
    HEAP32[i55 + (i81 + 4) >> 2] = i52 | 1;
    HEAP32[i55 + (i56 + -36) >> 2] = 40;
    HEAP32[557748 >> 2] = HEAP32[558208 >> 2];
    HEAP32[i49 + 4 >> 2] = 27;
    HEAP32[i57 + 0 >> 2] = HEAP32[558168 >> 2];
    HEAP32[i57 + 4 >> 2] = HEAP32[558172 >> 2];
    HEAP32[i57 + 8 >> 2] = HEAP32[558176 >> 2];
    HEAP32[i57 + 12 >> 2] = HEAP32[558180 >> 2];
    HEAP32[558168 >> 2] = i55;
    HEAP32[558172 >> 2] = i56;
    HEAP32[558180 >> 2] = 0;
    HEAP32[558176 >> 2] = i57;
    i57 = i49 + 28 | 0;
    HEAP32[i57 >> 2] = 7;
    if ((i49 + 32 | 0) >>> 0 < i79 >>> 0) {
     i52 = i57;
     do {
      i57 = i52;
      i52 = i52 + 4 | 0;
      HEAP32[i52 >> 2] = 7;
     } while ((i57 + 8 | 0) >>> 0 < i79 >>> 0);
    }
    if ((i49 | 0) != (i58 | 0)) {
     i52 = i49 - i58 | 0;
     i57 = i58 + (i52 + 4) | 0;
     HEAP32[i57 >> 2] = HEAP32[i57 >> 2] & -2;
     HEAP32[i58 + 4 >> 2] = i52 | 1;
     HEAP32[i58 + i52 >> 2] = i52;
     i57 = i52 >>> 3;
     if (i52 >>> 0 < 256) {
      i36 = i57 << 1;
      i53 = 557760 + (i36 << 2) | 0;
      i50 = HEAP32[139430] | 0;
      i51 = 1 << i57;
      do {
       if ((i50 & i51 | 0) == 0) {
        HEAP32[139430] = i50 | i51;
        i82 = 557760 + (i36 + 2 << 2) | 0;
        i83 = i53;
       } else {
        i57 = 557760 + (i36 + 2 << 2) | 0;
        i16 = HEAP32[i57 >> 2] | 0;
        if (!(i16 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0)) {
         i82 = i57;
         i83 = i16;
         break;
        }
        _abort();
       }
      } while (0);
      HEAP32[i82 >> 2] = i58;
      HEAP32[i83 + 12 >> 2] = i58;
      HEAP32[i58 + 8 >> 2] = i83;
      HEAP32[i58 + 12 >> 2] = i53;
      break;
     }
     i36 = i52 >>> 8;
     if ((i36 | 0) != 0) {
      if (i52 >>> 0 > 16777215) {
       i84 = 31;
      } else {
       i51 = (i36 + 1048320 | 0) >>> 16 & 8;
       i50 = i36 << i51;
       i36 = (i50 + 520192 | 0) >>> 16 & 4;
       i49 = i50 << i36;
       i50 = (i49 + 245760 | 0) >>> 16 & 2;
       i16 = 14 - (i36 | i51 | i50) + (i49 << i50 >>> 15) | 0;
       i84 = i52 >>> (i16 + 7 | 0) & 1 | i16 << 1;
      }
     } else {
      i84 = 0;
     }
     i16 = 558024 + (i84 << 2) | 0;
     HEAP32[i58 + 28 >> 2] = i84;
     HEAP32[i58 + 20 >> 2] = 0;
     HEAP32[i58 + 16 >> 2] = 0;
     i50 = HEAP32[557724 >> 2] | 0;
     i49 = 1 << i84;
     if ((i50 & i49 | 0) == 0) {
      HEAP32[557724 >> 2] = i50 | i49;
      HEAP32[i16 >> 2] = i58;
      HEAP32[i58 + 24 >> 2] = i16;
      HEAP32[i58 + 12 >> 2] = i58;
      HEAP32[i58 + 8 >> 2] = i58;
      break;
     }
     i49 = HEAP32[i16 >> 2] | 0;
     if ((i84 | 0) == 31) {
      i85 = 0;
     } else {
      i85 = 25 - (i84 >>> 1) | 0;
     }
     L499 : do {
      if ((HEAP32[i49 + 4 >> 2] & -8 | 0) != (i52 | 0)) {
       i16 = i52 << i85;
       i50 = i49;
       while (1) {
        i86 = i50 + (i16 >>> 31 << 2) + 16 | 0;
        i51 = HEAP32[i86 >> 2] | 0;
        if ((i51 | 0) == 0) {
         break;
        }
        if ((HEAP32[i51 + 4 >> 2] & -8 | 0) == (i52 | 0)) {
         i87 = i51;
         break L499;
        } else {
         i16 = i16 << 1;
         i50 = i51;
        }
       }
       if (i86 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
        _abort();
       } else {
        HEAP32[i86 >> 2] = i58;
        HEAP32[i58 + 24 >> 2] = i50;
        HEAP32[i58 + 12 >> 2] = i58;
        HEAP32[i58 + 8 >> 2] = i58;
        break L311;
       }
      } else {
       i87 = i49;
      }
     } while (0);
     i49 = i87 + 8 | 0;
     i52 = HEAP32[i49 >> 2] | 0;
     i53 = HEAP32[557736 >> 2] | 0;
     if (i87 >>> 0 < i53 >>> 0) {
      _abort();
     }
     if (i52 >>> 0 < i53 >>> 0) {
      _abort();
     } else {
      HEAP32[i52 + 12 >> 2] = i58;
      HEAP32[i49 >> 2] = i58;
      HEAP32[i58 + 8 >> 2] = i52;
      HEAP32[i58 + 12 >> 2] = i87;
      HEAP32[i58 + 24 >> 2] = 0;
      break;
     }
    }
   } else {
    i52 = HEAP32[557736 >> 2] | 0;
    if ((i52 | 0) == 0 | i55 >>> 0 < i52 >>> 0) {
     HEAP32[557736 >> 2] = i55;
    }
    HEAP32[558168 >> 2] = i55;
    HEAP32[558172 >> 2] = i56;
    HEAP32[558180 >> 2] = 0;
    HEAP32[557756 >> 2] = HEAP32[139548];
    HEAP32[557752 >> 2] = -1;
    i52 = 0;
    do {
     i49 = i52 << 1;
     i53 = 557760 + (i49 << 2) | 0;
     HEAP32[557760 + (i49 + 3 << 2) >> 2] = i53;
     HEAP32[557760 + (i49 + 2 << 2) >> 2] = i53;
     i52 = i52 + 1 | 0;
    } while ((i52 | 0) != 32);
    i52 = i55 + 8 | 0;
    if ((i52 & 7 | 0) == 0) {
     i88 = 0;
    } else {
     i88 = 0 - i52 & 7;
    }
    i52 = i56 + -40 - i88 | 0;
    HEAP32[557744 >> 2] = i55 + i88;
    HEAP32[557732 >> 2] = i52;
    HEAP32[i55 + (i88 + 4) >> 2] = i52 | 1;
    HEAP32[i55 + (i56 + -36) >> 2] = 40;
    HEAP32[557748 >> 2] = HEAP32[558208 >> 2];
   }
  } while (0);
  i56 = HEAP32[557732 >> 2] | 0;
  if (i56 >>> 0 > i26 >>> 0) {
   i55 = i56 - i26 | 0;
   HEAP32[557732 >> 2] = i55;
   i56 = HEAP32[557744 >> 2] | 0;
   HEAP32[557744 >> 2] = i56 + i26;
   HEAP32[i56 + (i26 + 4) >> 2] = i55 | 1;
   HEAP32[i56 + 4 >> 2] = i26 | 3;
   i14 = i56 + 8 | 0;
   STACKTOP = i2;
   return i14 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 i14 = 0;
 STACKTOP = i2;
 return i14 | 0;
}
function ___floatscan(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, d34 = 0.0, i35 = 0, d36 = 0.0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, d47 = 0.0, i48 = 0, d49 = 0.0, i50 = 0, d51 = 0.0, i52 = 0, d53 = 0.0, i54 = 0, d55 = 0.0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, d63 = 0.0, i64 = 0, d65 = 0.0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, d70 = 0.0, i71 = 0, d72 = 0.0, d73 = 0.0, i74 = 0, d75 = 0.0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0, i151 = 0, i152 = 0, i153 = 0, i154 = 0, i155 = 0, i156 = 0, i157 = 0, i158 = 0, i159 = 0, i160 = 0, i161 = 0, i162 = 0, i163 = 0, i164 = 0, i165 = 0, d166 = 0.0, i167 = 0, i168 = 0, d169 = 0.0, d170 = 0.0, d171 = 0.0, d172 = 0.0, d173 = 0.0, d174 = 0.0, i175 = 0, i176 = 0, d177 = 0.0, i178 = 0, d179 = 0.0, i180 = 0, i181 = 0, i182 = 0, i183 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 i5 = i4;
 if ((i2 | 0) == 1) {
  i6 = 53;
  i7 = -1074;
 } else if ((i2 | 0) == 2) {
  i6 = 53;
  i7 = -1074;
 } else if ((i2 | 0) == 0) {
  i6 = 24;
  i7 = -149;
 } else {
  d8 = 0.0;
  STACKTOP = i4;
  return +d8;
 }
 i2 = i1 + 4 | 0;
 i9 = i1 + 100 | 0;
 do {
  i10 = HEAP32[i2 >> 2] | 0;
  if (i10 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
   HEAP32[i2 >> 2] = i10 + 1;
   i11 = HEAPU8[i10 >> 0] | 0;
  } else {
   i11 = ___shgetc(i1) | 0;
  }
 } while ((_isspace(i11) | 0) != 0);
 do {
  if ((i11 | 0) == 43 | (i11 | 0) == 45) {
   i10 = 1 - (((i11 | 0) == 45 & 1) << 1) | 0;
   i12 = HEAP32[i2 >> 2] | 0;
   if (i12 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
    HEAP32[i2 >> 2] = i12 + 1;
    i13 = HEAPU8[i12 >> 0] | 0;
    i14 = i10;
    break;
   } else {
    i13 = ___shgetc(i1) | 0;
    i14 = i10;
    break;
   }
  } else {
   i13 = i11;
   i14 = 1;
  }
 } while (0);
 i11 = i13;
 i13 = 0;
 while (1) {
  if ((i11 | 32 | 0) != (HEAP8[558216 + i13 >> 0] | 0)) {
   i15 = i11;
   i16 = i13;
   break;
  }
  do {
   if (i13 >>> 0 < 7) {
    i10 = HEAP32[i2 >> 2] | 0;
    if (i10 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
     HEAP32[i2 >> 2] = i10 + 1;
     i17 = HEAPU8[i10 >> 0] | 0;
     break;
    } else {
     i17 = ___shgetc(i1) | 0;
     break;
    }
   } else {
    i17 = i11;
   }
  } while (0);
  i10 = i13 + 1 | 0;
  if (i10 >>> 0 < 8) {
   i11 = i17;
   i13 = i10;
  } else {
   i15 = i17;
   i16 = i10;
   break;
  }
 }
 do {
  if ((i16 | 0) == 3) {
   i18 = 23;
  } else if ((i16 | 0) != 8) {
   i17 = (i3 | 0) == 0;
   if (!(i16 >>> 0 < 4 | i17)) {
    if ((i16 | 0) == 8) {
     break;
    } else {
     i18 = 23;
     break;
    }
   }
   L34 : do {
    if ((i16 | 0) == 0) {
     i13 = i15;
     i11 = 0;
     while (1) {
      if ((i13 | 32 | 0) != (HEAP8[558232 + i11 >> 0] | 0)) {
       i19 = i13;
       i20 = i11;
       break L34;
      }
      do {
       if (i11 >>> 0 < 2) {
        i10 = HEAP32[i2 >> 2] | 0;
        if (i10 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
         HEAP32[i2 >> 2] = i10 + 1;
         i21 = HEAPU8[i10 >> 0] | 0;
         break;
        } else {
         i21 = ___shgetc(i1) | 0;
         break;
        }
       } else {
        i21 = i13;
       }
      } while (0);
      i10 = i11 + 1 | 0;
      if (i10 >>> 0 < 3) {
       i13 = i21;
       i11 = i10;
      } else {
       i19 = i21;
       i20 = i10;
       break;
      }
     }
    } else {
     i19 = i15;
     i20 = i16;
    }
   } while (0);
   if ((i20 | 0) == 0) {
    do {
     if ((i19 | 0) == 48) {
      i11 = HEAP32[i2 >> 2] | 0;
      if (i11 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
       HEAP32[i2 >> 2] = i11 + 1;
       i22 = HEAPU8[i11 >> 0] | 0;
      } else {
       i22 = ___shgetc(i1) | 0;
      }
      if ((i22 | 32 | 0) != 120) {
       if ((HEAP32[i9 >> 2] | 0) == 0) {
        i23 = 48;
        break;
       }
       HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
       i23 = 48;
       break;
      }
      i11 = HEAP32[i2 >> 2] | 0;
      if (i11 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
       HEAP32[i2 >> 2] = i11 + 1;
       i24 = HEAPU8[i11 >> 0] | 0;
       i25 = 0;
      } else {
       i24 = ___shgetc(i1) | 0;
       i25 = 0;
      }
      while (1) {
       if ((i24 | 0) == 46) {
        i18 = 70;
        break;
       } else if ((i24 | 0) != 48) {
        i26 = 0;
        i27 = 0;
        i28 = 0;
        i29 = 0;
        i30 = i24;
        i31 = i25;
        i32 = 0;
        i33 = 0;
        d34 = 1.0;
        i35 = 0;
        d36 = 0.0;
        break;
       }
       i11 = HEAP32[i2 >> 2] | 0;
       if (i11 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
        HEAP32[i2 >> 2] = i11 + 1;
        i24 = HEAPU8[i11 >> 0] | 0;
        i25 = 1;
        continue;
       } else {
        i24 = ___shgetc(i1) | 0;
        i25 = 1;
        continue;
       }
      }
      L66 : do {
       if ((i18 | 0) == 70) {
        i11 = HEAP32[i2 >> 2] | 0;
        if (i11 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
         HEAP32[i2 >> 2] = i11 + 1;
         i37 = HEAPU8[i11 >> 0] | 0;
        } else {
         i37 = ___shgetc(i1) | 0;
        }
        if ((i37 | 0) == 48) {
         i11 = -1;
         i13 = -1;
         while (1) {
          i10 = HEAP32[i2 >> 2] | 0;
          if (i10 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
           HEAP32[i2 >> 2] = i10 + 1;
           i38 = HEAPU8[i10 >> 0] | 0;
          } else {
           i38 = ___shgetc(i1) | 0;
          }
          if ((i38 | 0) != 48) {
           i26 = 0;
           i27 = 0;
           i28 = i11;
           i29 = i13;
           i30 = i38;
           i31 = 1;
           i32 = 1;
           i33 = 0;
           d34 = 1.0;
           i35 = 0;
           d36 = 0.0;
           break L66;
          }
          i10 = _i64Add(i11 | 0, i13 | 0, -1, -1) | 0;
          i11 = i10;
          i13 = tempRet0;
         }
        } else {
         i26 = 0;
         i27 = 0;
         i28 = 0;
         i29 = 0;
         i30 = i37;
         i31 = i25;
         i32 = 1;
         i33 = 0;
         d34 = 1.0;
         i35 = 0;
         d36 = 0.0;
        }
       }
      } while (0);
      L79 : while (1) {
       i13 = i30 + -48 | 0;
       do {
        if (!(i13 >>> 0 < 10)) {
         i11 = i30 | 32;
         i10 = (i30 | 0) == 46;
         if (!((i11 + -97 | 0) >>> 0 < 6 | i10)) {
          i39 = i30;
          break L79;
         }
         if (i10) {
          if ((i32 | 0) == 0) {
           i40 = i27;
           i41 = i26;
           i42 = i27;
           i43 = i26;
           i44 = i31;
           i45 = 1;
           i46 = i33;
           d47 = d34;
           i48 = i35;
           d49 = d36;
           break;
          } else {
           i39 = 46;
           break L79;
          }
         } else {
          i50 = (i30 | 0) > 57 ? i11 + -87 | 0 : i13;
          i18 = 84;
          break;
         }
        } else {
         i50 = i13;
         i18 = 84;
        }
       } while (0);
       if ((i18 | 0) == 84) {
        i18 = 0;
        do {
         if (!((i26 | 0) < 0 | (i26 | 0) == 0 & i27 >>> 0 < 8)) {
          if ((i26 | 0) < 0 | (i26 | 0) == 0 & i27 >>> 0 < 14) {
           d51 = d34 * .0625;
           i52 = i33;
           d53 = d51;
           i54 = i35;
           d55 = d36 + d51 * +(i50 | 0);
           break;
          }
          if ((i50 | 0) != 0 & (i33 | 0) == 0) {
           i52 = 1;
           d53 = d34;
           i54 = i35;
           d55 = d36 + d34 * .5;
          } else {
           i52 = i33;
           d53 = d34;
           i54 = i35;
           d55 = d36;
          }
         } else {
          i52 = i33;
          d53 = d34;
          i54 = i50 + (i35 << 4) | 0;
          d55 = d36;
         }
        } while (0);
        i13 = _i64Add(i27 | 0, i26 | 0, 1, 0) | 0;
        i40 = i28;
        i41 = i29;
        i42 = i13;
        i43 = tempRet0;
        i44 = 1;
        i45 = i32;
        i46 = i52;
        d47 = d53;
        i48 = i54;
        d49 = d55;
       }
       i13 = HEAP32[i2 >> 2] | 0;
       if (i13 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
        HEAP32[i2 >> 2] = i13 + 1;
        i26 = i43;
        i27 = i42;
        i28 = i40;
        i29 = i41;
        i30 = HEAPU8[i13 >> 0] | 0;
        i31 = i44;
        i32 = i45;
        i33 = i46;
        d34 = d47;
        i35 = i48;
        d36 = d49;
        continue;
       } else {
        i26 = i43;
        i27 = i42;
        i28 = i40;
        i29 = i41;
        i30 = ___shgetc(i1) | 0;
        i31 = i44;
        i32 = i45;
        i33 = i46;
        d34 = d47;
        i35 = i48;
        d36 = d49;
        continue;
       }
      }
      if ((i31 | 0) == 0) {
       i13 = (HEAP32[i9 >> 2] | 0) == 0;
       if (!i13) {
        HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
       }
       if (!i17) {
        if (!i13 ? (i13 = HEAP32[i2 >> 2] | 0, HEAP32[i2 >> 2] = i13 + -1, (i32 | 0) != 0) : 0) {
         HEAP32[i2 >> 2] = i13 + -2;
        }
       } else {
        ___shlim(i1, 0);
       }
       d8 = +(i14 | 0) * 0.0;
       STACKTOP = i4;
       return +d8;
      }
      i13 = (i32 | 0) == 0;
      i11 = i13 ? i27 : i28;
      i10 = i13 ? i26 : i29;
      if ((i26 | 0) < 0 | (i26 | 0) == 0 & i27 >>> 0 < 8) {
       i13 = i27;
       i12 = i26;
       i56 = i35;
       while (1) {
        i57 = i56 << 4;
        i13 = _i64Add(i13 | 0, i12 | 0, 1, 0) | 0;
        i12 = tempRet0;
        if (!((i12 | 0) < 0 | (i12 | 0) == 0 & i13 >>> 0 < 8)) {
         i58 = i57;
         break;
        } else {
         i56 = i57;
        }
       }
      } else {
       i58 = i35;
      }
      do {
       if ((i39 | 32 | 0) == 112) {
        i56 = _scanexp(i1, i3) | 0;
        i13 = tempRet0;
        if ((i56 | 0) == 0 & (i13 | 0) == -2147483648) {
         if (i17) {
          ___shlim(i1, 0);
          d8 = 0.0;
          STACKTOP = i4;
          return +d8;
         } else {
          if ((HEAP32[i9 >> 2] | 0) == 0) {
           i59 = 0;
           i60 = 0;
           break;
          }
          HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
          i59 = 0;
          i60 = 0;
          break;
         }
        } else {
         i59 = i56;
         i60 = i13;
        }
       } else {
        if ((HEAP32[i9 >> 2] | 0) == 0) {
         i59 = 0;
         i60 = 0;
        } else {
         HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
         i59 = 0;
         i60 = 0;
        }
       }
      } while (0);
      i13 = _bitshift64Shl(i11 | 0, i10 | 0, 2) | 0;
      i56 = _i64Add(i13 | 0, tempRet0 | 0, -32, -1) | 0;
      i13 = _i64Add(i56 | 0, tempRet0 | 0, i59 | 0, i60 | 0) | 0;
      i56 = tempRet0;
      if ((i58 | 0) == 0) {
       d8 = +(i14 | 0) * 0.0;
       STACKTOP = i4;
       return +d8;
      }
      if ((i56 | 0) > 0 | (i56 | 0) == 0 & i13 >>> 0 > (0 - i7 | 0) >>> 0) {
       HEAP32[(___errno_location() | 0) >> 2] = 34;
       d8 = +(i14 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308;
       STACKTOP = i4;
       return +d8;
      }
      i12 = i7 + -106 | 0;
      i57 = ((i12 | 0) < 0) << 31 >> 31;
      if ((i56 | 0) < (i57 | 0) | (i56 | 0) == (i57 | 0) & i13 >>> 0 < i12 >>> 0) {
       HEAP32[(___errno_location() | 0) >> 2] = 34;
       d8 = +(i14 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
       STACKTOP = i4;
       return +d8;
      }
      if ((i58 | 0) > -1) {
       i12 = i13;
       i57 = i56;
       i61 = i58;
       d51 = d36;
       while (1) {
        i62 = i61 << 1;
        if (!(d51 >= .5)) {
         d63 = d51;
         i64 = i62;
        } else {
         d63 = d51 + -1.0;
         i64 = i62 | 1;
        }
        d65 = d51 + d63;
        i62 = _i64Add(i12 | 0, i57 | 0, -1, -1) | 0;
        i66 = tempRet0;
        if ((i64 | 0) > -1) {
         i12 = i62;
         i57 = i66;
         i61 = i64;
         d51 = d65;
        } else {
         i67 = i62;
         i68 = i66;
         i69 = i64;
         d70 = d65;
         break;
        }
       }
      } else {
       i67 = i13;
       i68 = i56;
       i69 = i58;
       d70 = d36;
      }
      i61 = _i64Subtract(32, 0, i7 | 0, ((i7 | 0) < 0) << 31 >> 31 | 0) | 0;
      i57 = _i64Add(i67 | 0, i68 | 0, i61 | 0, tempRet0 | 0) | 0;
      i61 = tempRet0;
      if (0 > (i61 | 0) | 0 == (i61 | 0) & i6 >>> 0 > i57 >>> 0) {
       i71 = (i57 | 0) < 0 ? 0 : i57;
      } else {
       i71 = i6;
      }
      do {
       if ((i71 | 0) < 53) {
        d51 = +(i14 | 0);
        d65 = +_copysignl(+(+_scalbn(1.0, 84 - i71 | 0)), +d51);
        if (!((i71 | 0) < 32 & d70 != 0.0)) {
         d72 = d51;
         d73 = d65;
         i74 = i69;
         d75 = d70;
         break;
        }
        i57 = i69 & 1;
        d72 = d51;
        d73 = d65;
        i74 = (i57 ^ 1) + i69 | 0;
        d75 = (i57 | 0) == 0 ? 0.0 : d70;
       } else {
        d72 = +(i14 | 0);
        d73 = 0.0;
        i74 = i69;
        d75 = d70;
       }
      } while (0);
      d65 = d72 * d75 + (d73 + d72 * +(i74 >>> 0)) - d73;
      if (!(d65 != 0.0)) {
       HEAP32[(___errno_location() | 0) >> 2] = 34;
      }
      d8 = +_scalbnl(d65, i67);
      STACKTOP = i4;
      return +d8;
     } else {
      i23 = i19;
     }
    } while (0);
    i56 = i7 + i6 | 0;
    i13 = 0 - i56 | 0;
    i57 = i23;
    i61 = 0;
    while (1) {
     if ((i57 | 0) == 46) {
      i18 = 139;
      break;
     } else if ((i57 | 0) != 48) {
      i76 = i57;
      i77 = 0;
      i78 = 0;
      i79 = i61;
      i80 = 0;
      break;
     }
     i12 = HEAP32[i2 >> 2] | 0;
     if (i12 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
      HEAP32[i2 >> 2] = i12 + 1;
      i57 = HEAPU8[i12 >> 0] | 0;
      i61 = 1;
      continue;
     } else {
      i57 = ___shgetc(i1) | 0;
      i61 = 1;
      continue;
     }
    }
    L168 : do {
     if ((i18 | 0) == 139) {
      i57 = HEAP32[i2 >> 2] | 0;
      if (i57 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
       HEAP32[i2 >> 2] = i57 + 1;
       i81 = HEAPU8[i57 >> 0] | 0;
      } else {
       i81 = ___shgetc(i1) | 0;
      }
      if ((i81 | 0) == 48) {
       i57 = -1;
       i12 = -1;
       while (1) {
        i10 = HEAP32[i2 >> 2] | 0;
        if (i10 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
         HEAP32[i2 >> 2] = i10 + 1;
         i82 = HEAPU8[i10 >> 0] | 0;
        } else {
         i82 = ___shgetc(i1) | 0;
        }
        if ((i82 | 0) != 48) {
         i76 = i82;
         i77 = i57;
         i78 = i12;
         i79 = 1;
         i80 = 1;
         break L168;
        }
        i10 = _i64Add(i57 | 0, i12 | 0, -1, -1) | 0;
        i57 = i10;
        i12 = tempRet0;
       }
      } else {
       i76 = i81;
       i77 = 0;
       i78 = 0;
       i79 = i61;
       i80 = 1;
      }
     }
    } while (0);
    HEAP32[i5 >> 2] = 0;
    i61 = i76 + -48 | 0;
    i12 = (i76 | 0) == 46;
    L182 : do {
     if (i61 >>> 0 < 10 | i12) {
      i57 = i5 + 496 | 0;
      i10 = i76;
      i11 = 0;
      i66 = 0;
      i62 = i12;
      i83 = i61;
      i84 = i77;
      i85 = i78;
      i86 = i79;
      i87 = i80;
      i88 = 0;
      i89 = 0;
      i90 = 0;
      while (1) {
       do {
        if (i62) {
         if ((i87 | 0) == 0) {
          i91 = i11;
          i92 = i66;
          i93 = i11;
          i94 = i66;
          i95 = i86;
          i96 = 1;
          i97 = i88;
          i98 = i89;
          i99 = i90;
         } else {
          i100 = i10;
          i101 = i84;
          i102 = i85;
          i103 = i11;
          i104 = i66;
          i105 = i86;
          i106 = i88;
          i107 = i89;
          i108 = i90;
          break L182;
         }
        } else {
         i109 = _i64Add(i11 | 0, i66 | 0, 1, 0) | 0;
         i110 = tempRet0;
         i111 = (i10 | 0) != 48;
         if ((i89 | 0) >= 125) {
          if (!i111) {
           i91 = i84;
           i92 = i85;
           i93 = i109;
           i94 = i110;
           i95 = i86;
           i96 = i87;
           i97 = i88;
           i98 = i89;
           i99 = i90;
           break;
          }
          HEAP32[i57 >> 2] = HEAP32[i57 >> 2] | 1;
          i91 = i84;
          i92 = i85;
          i93 = i109;
          i94 = i110;
          i95 = i86;
          i96 = i87;
          i97 = i88;
          i98 = i89;
          i99 = i90;
          break;
         }
         i112 = i5 + (i89 << 2) | 0;
         if ((i88 | 0) == 0) {
          i113 = i83;
         } else {
          i113 = i10 + -48 + ((HEAP32[i112 >> 2] | 0) * 10 | 0) | 0;
         }
         HEAP32[i112 >> 2] = i113;
         i112 = i88 + 1 | 0;
         i114 = (i112 | 0) == 9;
         i91 = i84;
         i92 = i85;
         i93 = i109;
         i94 = i110;
         i95 = 1;
         i96 = i87;
         i97 = i114 ? 0 : i112;
         i98 = (i114 & 1) + i89 | 0;
         i99 = i111 ? i109 : i90;
        }
       } while (0);
       i109 = HEAP32[i2 >> 2] | 0;
       if (i109 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
        HEAP32[i2 >> 2] = i109 + 1;
        i115 = HEAPU8[i109 >> 0] | 0;
       } else {
        i115 = ___shgetc(i1) | 0;
       }
       i83 = i115 + -48 | 0;
       i62 = (i115 | 0) == 46;
       if (!(i83 >>> 0 < 10 | i62)) {
        i116 = i115;
        i117 = i91;
        i118 = i93;
        i119 = i92;
        i120 = i94;
        i121 = i95;
        i122 = i96;
        i123 = i97;
        i124 = i98;
        i125 = i99;
        i18 = 162;
        break;
       } else {
        i10 = i115;
        i11 = i93;
        i66 = i94;
        i84 = i91;
        i85 = i92;
        i86 = i95;
        i87 = i96;
        i88 = i97;
        i89 = i98;
        i90 = i99;
       }
      }
     } else {
      i116 = i76;
      i117 = i77;
      i118 = 0;
      i119 = i78;
      i120 = 0;
      i121 = i79;
      i122 = i80;
      i123 = 0;
      i124 = 0;
      i125 = 0;
      i18 = 162;
     }
    } while (0);
    if ((i18 | 0) == 162) {
     i61 = (i122 | 0) == 0;
     i100 = i116;
     i101 = i61 ? i118 : i117;
     i102 = i61 ? i120 : i119;
     i103 = i118;
     i104 = i120;
     i105 = i121;
     i106 = i123;
     i107 = i124;
     i108 = i125;
    }
    i61 = (i105 | 0) != 0;
    if (i61 ? (i100 | 32 | 0) == 101 : 0) {
     i12 = _scanexp(i1, i3) | 0;
     i90 = tempRet0;
     do {
      if ((i12 | 0) == 0 & (i90 | 0) == -2147483648) {
       if (i17) {
        ___shlim(i1, 0);
        d8 = 0.0;
        STACKTOP = i4;
        return +d8;
       } else {
        if ((HEAP32[i9 >> 2] | 0) == 0) {
         i126 = 0;
         i127 = 0;
         break;
        }
        HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
        i126 = 0;
        i127 = 0;
        break;
       }
      } else {
       i126 = i12;
       i127 = i90;
      }
     } while (0);
     i90 = _i64Add(i126 | 0, i127 | 0, i101 | 0, i102 | 0) | 0;
     i128 = i90;
     i129 = tempRet0;
    } else {
     if ((i100 | 0) > -1 ? (HEAP32[i9 >> 2] | 0) != 0 : 0) {
      HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
      i128 = i101;
      i129 = i102;
     } else {
      i128 = i101;
      i129 = i102;
     }
    }
    if (!i61) {
     HEAP32[(___errno_location() | 0) >> 2] = 22;
     ___shlim(i1, 0);
     d8 = 0.0;
     STACKTOP = i4;
     return +d8;
    }
    i90 = HEAP32[i5 >> 2] | 0;
    if ((i90 | 0) == 0) {
     d8 = +(i14 | 0) * 0.0;
     STACKTOP = i4;
     return +d8;
    }
    do {
     if ((i128 | 0) == (i103 | 0) & (i129 | 0) == (i104 | 0) & ((i104 | 0) < 0 | (i104 | 0) == 0 & i103 >>> 0 < 10)) {
      if (!(i6 >>> 0 > 30) ? (i90 >>> i6 | 0) != 0 : 0) {
       break;
      }
      d8 = +(i14 | 0) * +(i90 >>> 0);
      STACKTOP = i4;
      return +d8;
     }
    } while (0);
    i90 = (i7 | 0) / -2 | 0;
    i61 = ((i90 | 0) < 0) << 31 >> 31;
    if ((i129 | 0) > (i61 | 0) | (i129 | 0) == (i61 | 0) & i128 >>> 0 > i90 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     d8 = +(i14 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308;
     STACKTOP = i4;
     return +d8;
    }
    i90 = i7 + -106 | 0;
    i61 = ((i90 | 0) < 0) << 31 >> 31;
    if ((i129 | 0) < (i61 | 0) | (i129 | 0) == (i61 | 0) & i128 >>> 0 < i90 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     d8 = +(i14 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
     STACKTOP = i4;
     return +d8;
    }
    if ((i106 | 0) == 0) {
     i130 = i107;
    } else {
     if ((i106 | 0) < 9) {
      i90 = i5 + (i107 << 2) | 0;
      i61 = HEAP32[i90 >> 2] | 0;
      i12 = i106;
      do {
       i61 = i61 * 10 | 0;
       i12 = i12 + 1 | 0;
      } while ((i12 | 0) != 9);
      HEAP32[i90 >> 2] = i61;
     }
     i130 = i107 + 1 | 0;
    }
    do {
     if ((i108 | 0) < 9 ? (i108 | 0) <= (i128 | 0) & (i128 | 0) < 18 : 0) {
      if ((i128 | 0) == 9) {
       d8 = +(i14 | 0) * +((HEAP32[i5 >> 2] | 0) >>> 0);
       STACKTOP = i4;
       return +d8;
      }
      if ((i128 | 0) < 9) {
       d8 = +(i14 | 0) * +((HEAP32[i5 >> 2] | 0) >>> 0) / +(HEAP32[558248 + (8 - i128 << 2) >> 2] | 0);
       STACKTOP = i4;
       return +d8;
      }
      i12 = i6 + 27 + (Math_imul(i128, -3) | 0) | 0;
      i89 = HEAP32[i5 >> 2] | 0;
      if ((i12 | 0) <= 30 ? (i89 >>> i12 | 0) != 0 : 0) {
       break;
      }
      d8 = +(i14 | 0) * +(i89 >>> 0) * +(HEAP32[558248 + (i128 + -10 << 2) >> 2] | 0);
      STACKTOP = i4;
      return +d8;
     }
    } while (0);
    i61 = (i128 | 0) % 9 | 0;
    if ((i61 | 0) == 0) {
     i131 = 0;
     i132 = 0;
     i133 = i128;
     i134 = i130;
    } else {
     i90 = (i128 | 0) > -1 ? i61 : i61 + 9 | 0;
     i61 = HEAP32[558248 + (8 - i90 << 2) >> 2] | 0;
     if ((i130 | 0) != 0) {
      i89 = 1e9 / (i61 | 0) | 0;
      i12 = 0;
      i88 = 0;
      i87 = 0;
      i86 = i128;
      while (1) {
       i85 = i5 + (i87 << 2) | 0;
       i84 = HEAP32[i85 >> 2] | 0;
       i66 = ((i84 >>> 0) / (i61 >>> 0) | 0) + i88 | 0;
       HEAP32[i85 >> 2] = i66;
       i88 = Math_imul((i84 >>> 0) % (i61 >>> 0) | 0, i89) | 0;
       i84 = i87;
       i87 = i87 + 1 | 0;
       if ((i84 | 0) == (i12 | 0) & (i66 | 0) == 0) {
        i135 = i87 & 127;
        i136 = i86 + -9 | 0;
       } else {
        i135 = i12;
        i136 = i86;
       }
       if ((i87 | 0) == (i130 | 0)) {
        break;
       } else {
        i12 = i135;
        i86 = i136;
       }
      }
      if ((i88 | 0) == 0) {
       i137 = i135;
       i138 = i136;
       i139 = i130;
      } else {
       HEAP32[i5 + (i130 << 2) >> 2] = i88;
       i137 = i135;
       i138 = i136;
       i139 = i130 + 1 | 0;
      }
     } else {
      i137 = 0;
      i138 = i128;
      i139 = 0;
     }
     i131 = i137;
     i132 = 0;
     i133 = 9 - i90 + i138 | 0;
     i134 = i139;
    }
    L280 : while (1) {
     i86 = i5 + (i131 << 2) | 0;
     if ((i133 | 0) < 18) {
      i12 = i132;
      i87 = i134;
      while (1) {
       i89 = 0;
       i61 = i87 + 127 | 0;
       i66 = i87;
       while (1) {
        i84 = i61 & 127;
        i85 = i5 + (i84 << 2) | 0;
        i11 = _bitshift64Shl(HEAP32[i85 >> 2] | 0, 0, 29) | 0;
        i10 = _i64Add(i11 | 0, tempRet0 | 0, i89 | 0, 0) | 0;
        i11 = tempRet0;
        if (i11 >>> 0 > 0 | (i11 | 0) == 0 & i10 >>> 0 > 1e9) {
         i62 = ___udivdi3(i10 | 0, i11 | 0, 1e9, 0) | 0;
         i83 = ___uremdi3(i10 | 0, i11 | 0, 1e9, 0) | 0;
         i140 = i83;
         i141 = i62;
        } else {
         i140 = i10;
         i141 = 0;
        }
        HEAP32[i85 >> 2] = i140;
        i85 = (i84 | 0) == (i131 | 0);
        if ((i84 | 0) != (i66 + 127 & 127 | 0) | i85) {
         i142 = i66;
        } else {
         i142 = (i140 | 0) == 0 ? i84 : i66;
        }
        if (i85) {
         break;
        } else {
         i89 = i141;
         i61 = i84 + -1 | 0;
         i66 = i142;
        }
       }
       i66 = i12 + -29 | 0;
       if ((i141 | 0) == 0) {
        i12 = i66;
        i87 = i142;
       } else {
        i143 = i66;
        i144 = i141;
        i145 = i142;
        break;
       }
      }
     } else {
      if ((i133 | 0) == 18) {
       i146 = i132;
       i147 = i134;
      } else {
       i148 = i131;
       i149 = i132;
       i150 = i133;
       i151 = i134;
       break;
      }
      while (1) {
       if (!((HEAP32[i86 >> 2] | 0) >>> 0 < 9007199)) {
        i148 = i131;
        i149 = i146;
        i150 = 18;
        i151 = i147;
        break L280;
       }
       i87 = 0;
       i12 = i147 + 127 | 0;
       i66 = i147;
       while (1) {
        i61 = i12 & 127;
        i89 = i5 + (i61 << 2) | 0;
        i84 = _bitshift64Shl(HEAP32[i89 >> 2] | 0, 0, 29) | 0;
        i85 = _i64Add(i84 | 0, tempRet0 | 0, i87 | 0, 0) | 0;
        i84 = tempRet0;
        if (i84 >>> 0 > 0 | (i84 | 0) == 0 & i85 >>> 0 > 1e9) {
         i10 = ___udivdi3(i85 | 0, i84 | 0, 1e9, 0) | 0;
         i62 = ___uremdi3(i85 | 0, i84 | 0, 1e9, 0) | 0;
         i152 = i62;
         i153 = i10;
        } else {
         i152 = i85;
         i153 = 0;
        }
        HEAP32[i89 >> 2] = i152;
        i89 = (i61 | 0) == (i131 | 0);
        if ((i61 | 0) != (i66 + 127 & 127 | 0) | i89) {
         i154 = i66;
        } else {
         i154 = (i152 | 0) == 0 ? i61 : i66;
        }
        if (i89) {
         break;
        } else {
         i87 = i153;
         i12 = i61 + -1 | 0;
         i66 = i154;
        }
       }
       i66 = i146 + -29 | 0;
       if ((i153 | 0) == 0) {
        i146 = i66;
        i147 = i154;
       } else {
        i143 = i66;
        i144 = i153;
        i145 = i154;
        break;
       }
      }
     }
     i86 = i131 + 127 & 127;
     if ((i86 | 0) == (i145 | 0)) {
      i66 = i145 + 127 & 127;
      i12 = i5 + ((i145 + 126 & 127) << 2) | 0;
      HEAP32[i12 >> 2] = HEAP32[i12 >> 2] | HEAP32[i5 + (i66 << 2) >> 2];
      i155 = i66;
     } else {
      i155 = i145;
     }
     HEAP32[i5 + (i86 << 2) >> 2] = i144;
     i131 = i86;
     i132 = i143;
     i133 = i133 + 9 | 0;
     i134 = i155;
    }
    L311 : while (1) {
     i156 = i151 + 1 & 127;
     i90 = i5 + ((i151 + 127 & 127) << 2) | 0;
     i88 = i148;
     i86 = i149;
     i66 = i150;
     while (1) {
      i12 = (i66 | 0) == 18;
      i87 = (i66 | 0) > 27 ? 9 : 1;
      i157 = i88;
      i158 = i86;
      while (1) {
       i61 = 0;
       while (1) {
        i89 = i61 + i157 & 127;
        if ((i89 | 0) == (i151 | 0)) {
         i159 = 2;
         break;
        }
        i85 = HEAP32[i5 + (i89 << 2) >> 2] | 0;
        i89 = HEAP32[558240 + (i61 << 2) >> 2] | 0;
        if (i85 >>> 0 < i89 >>> 0) {
         i159 = 2;
         break;
        }
        i10 = i61 + 1 | 0;
        if (i85 >>> 0 > i89 >>> 0) {
         i159 = i61;
         break;
        }
        if ((i10 | 0) < 2) {
         i61 = i10;
        } else {
         i159 = i10;
         break;
        }
       }
       if ((i159 | 0) == 2 & i12) {
        break L311;
       }
       i160 = i87 + i158 | 0;
       if ((i157 | 0) == (i151 | 0)) {
        i157 = i151;
        i158 = i160;
       } else {
        break;
       }
      }
      i12 = (1 << i87) + -1 | 0;
      i61 = 1e9 >>> i87;
      i161 = i157;
      i162 = 0;
      i10 = i157;
      i163 = i66;
      do {
       i89 = i5 + (i10 << 2) | 0;
       i85 = HEAP32[i89 >> 2] | 0;
       i62 = (i85 >>> i87) + i162 | 0;
       HEAP32[i89 >> 2] = i62;
       i162 = Math_imul(i85 & i12, i61) | 0;
       i85 = (i10 | 0) == (i161 | 0) & (i62 | 0) == 0;
       i10 = i10 + 1 & 127;
       i163 = i85 ? i163 + -9 | 0 : i163;
       i161 = i85 ? i10 : i161;
      } while ((i10 | 0) != (i151 | 0));
      if ((i162 | 0) == 0) {
       i88 = i161;
       i86 = i160;
       i66 = i163;
       continue;
      }
      if ((i156 | 0) != (i161 | 0)) {
       break;
      }
      HEAP32[i90 >> 2] = HEAP32[i90 >> 2] | 1;
      i88 = i161;
      i86 = i160;
      i66 = i163;
     }
     HEAP32[i5 + (i151 << 2) >> 2] = i162;
     i148 = i161;
     i149 = i160;
     i150 = i163;
     i151 = i156;
    }
    i66 = i157 & 127;
    if ((i66 | 0) == (i151 | 0)) {
     HEAP32[i5 + (i156 + -1 << 2) >> 2] = 0;
     i164 = i156;
    } else {
     i164 = i151;
    }
    d65 = +((HEAP32[i5 + (i66 << 2) >> 2] | 0) >>> 0);
    i66 = i157 + 1 & 127;
    if ((i66 | 0) == (i164 | 0)) {
     i86 = i164 + 1 & 127;
     HEAP32[i5 + (i86 + -1 << 2) >> 2] = 0;
     i165 = i86;
    } else {
     i165 = i164;
    }
    d51 = +(i14 | 0);
    d166 = d51 * (d65 * 1.0e9 + +((HEAP32[i5 + (i66 << 2) >> 2] | 0) >>> 0));
    i66 = i158 + 53 | 0;
    i86 = i66 - i7 | 0;
    if ((i86 | 0) < (i6 | 0)) {
     i167 = (i86 | 0) < 0 ? 0 : i86;
     i168 = 1;
    } else {
     i167 = i6;
     i168 = 0;
    }
    if ((i167 | 0) < 53) {
     d65 = +_copysignl(+(+_scalbn(1.0, 105 - i167 | 0)), +d166);
     d169 = +_fmodl(+d166, +(+_scalbn(1.0, 53 - i167 | 0)));
     d170 = d65;
     d171 = d169;
     d172 = d65 + (d166 - d169);
    } else {
     d170 = 0.0;
     d171 = 0.0;
     d172 = d166;
    }
    i88 = i157 + 2 & 127;
    do {
     if ((i88 | 0) == (i165 | 0)) {
      d173 = d171;
     } else {
      i90 = HEAP32[i5 + (i88 << 2) >> 2] | 0;
      do {
       if (!(i90 >>> 0 < 5e8)) {
        if (i90 >>> 0 > 5e8) {
         d174 = d51 * .75 + d171;
         break;
        }
        if ((i157 + 3 & 127 | 0) == (i165 | 0)) {
         d174 = d51 * .5 + d171;
         break;
        } else {
         d174 = d51 * .75 + d171;
         break;
        }
       } else {
        if ((i90 | 0) == 0 ? (i157 + 3 & 127 | 0) == (i165 | 0) : 0) {
         d174 = d171;
         break;
        }
        d174 = d51 * .25 + d171;
       }
      } while (0);
      if ((53 - i167 | 0) <= 1) {
       d173 = d174;
       break;
      }
      if (+_fmodl(+d174, 1.0) != 0.0) {
       d173 = d174;
       break;
      }
      d173 = d174 + 1.0;
     }
    } while (0);
    d51 = d172 + d173 - d170;
    do {
     if ((i66 & 2147483647 | 0) > (-2 - i56 | 0)) {
      if (!(+Math_abs(+d51) >= 9007199254740992.0)) {
       i175 = i168;
       i176 = i158;
       d177 = d51;
      } else {
       i175 = (i168 | 0) != 0 & (i167 | 0) == (i86 | 0) ? 0 : i168;
       i176 = i158 + 1 | 0;
       d177 = d51 * .5;
      }
      if ((i176 + 50 | 0) <= (i13 | 0) ? !((i175 | 0) != 0 & d173 != 0.0) : 0) {
       i178 = i176;
       d179 = d177;
       break;
      }
      HEAP32[(___errno_location() | 0) >> 2] = 34;
      i178 = i176;
      d179 = d177;
     } else {
      i178 = i158;
      d179 = d51;
     }
    } while (0);
    d8 = +_scalbnl(d179, i178);
    STACKTOP = i4;
    return +d8;
   } else if ((i20 | 0) == 3) {
    i13 = HEAP32[i2 >> 2] | 0;
    if (i13 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
     HEAP32[i2 >> 2] = i13 + 1;
     i180 = HEAPU8[i13 >> 0] | 0;
    } else {
     i180 = ___shgetc(i1) | 0;
    }
    if ((i180 | 0) == 40) {
     i181 = 1;
    } else {
     if ((HEAP32[i9 >> 2] | 0) == 0) {
      d8 = nan;
      STACKTOP = i4;
      return +d8;
     }
     HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
     d8 = nan;
     STACKTOP = i4;
     return +d8;
    }
    while (1) {
     i13 = HEAP32[i2 >> 2] | 0;
     if (i13 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
      HEAP32[i2 >> 2] = i13 + 1;
      i182 = HEAPU8[i13 >> 0] | 0;
     } else {
      i182 = ___shgetc(i1) | 0;
     }
     if (!((i182 + -48 | 0) >>> 0 < 10 | (i182 + -65 | 0) >>> 0 < 26) ? !((i182 + -97 | 0) >>> 0 < 26 | (i182 | 0) == 95) : 0) {
      break;
     }
     i181 = i181 + 1 | 0;
    }
    if ((i182 | 0) == 41) {
     d8 = nan;
     STACKTOP = i4;
     return +d8;
    }
    i13 = (HEAP32[i9 >> 2] | 0) == 0;
    if (!i13) {
     HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
    }
    if (i17) {
     HEAP32[(___errno_location() | 0) >> 2] = 22;
     ___shlim(i1, 0);
     d8 = 0.0;
     STACKTOP = i4;
     return +d8;
    }
    if ((i181 | 0) == 0 | i13) {
     d8 = nan;
     STACKTOP = i4;
     return +d8;
    } else {
     i183 = i181;
    }
    do {
     i183 = i183 + -1 | 0;
     HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
    } while ((i183 | 0) != 0);
    d8 = nan;
    STACKTOP = i4;
    return +d8;
   } else {
    if ((HEAP32[i9 >> 2] | 0) != 0) {
     HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
    }
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    ___shlim(i1, 0);
    d8 = 0.0;
    STACKTOP = i4;
    return +d8;
   }
  }
 } while (0);
 if ((i18 | 0) == 23) {
  i18 = (HEAP32[i9 >> 2] | 0) == 0;
  if (!i18) {
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
  }
  if (!(i16 >>> 0 < 4 | (i3 | 0) == 0 | i18)) {
   i18 = i16;
   do {
    HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
    i18 = i18 + -1 | 0;
   } while (i18 >>> 0 > 3);
  }
 }
 d8 = +(i14 | 0) * inf;
 STACKTOP = i4;
 return +d8;
}
function _do_fractal(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, d34 = 0.0, d35 = 0.0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0;
 i3 = STACKTOP;
 HEAP32[71600] = i1;
 HEAP32[i1 + 120 >> 2] = 0;
 HEAP32[i1 + 112 >> 2] = 0;
 HEAP32[i1 + 116 >> 2] = 0;
 HEAP32[i1 + 140 >> 2] = 0;
 i4 = i1 + 104 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if ((i5 | 0) != 0) {
  HEAP32[i4 >> 2] = i5 + -1;
 }
 i5 = HEAP32[i1 + 60 >> 2] | 0;
 i4 = HEAP32[i1 + 84 >> 2] | 0;
 i6 = HEAP32[i1 + 88 >> 2] | 0;
 if ((HEAP32[i1 + 92 >> 2] | 0) == (HEAP32[i5 + 48 >> 2] | 0)) {
  d7 = +HEAPF64[i5 + (i4 * 24 | 0) + 72 >> 3];
  d8 = d7 == +HEAPF64[i5 + (i6 * 24 | 0) + 240 >> 3] ? d7 : 2147483647.0;
  HEAPF64[35801] = d8;
  d7 = +HEAPF64[i5 + (i4 * 24 | 0) + 80 >> 3];
  d9 = d7 == +HEAPF64[i5 + (i6 * 24 | 0) + 248 >> 3] ? d7 : 2147483647.0;
  HEAPF64[35802] = d9;
  HEAP32[71608] = 286664;
  HEAP32[71606] = 0;
  i10 = i5 + (i4 * 24 | 0) + 88 | 0;
  i11 = HEAP32[i10 >> 2] | 0;
  if ((i11 | 0) > 0) {
   i12 = HEAP32[i5 + (i4 * 24 | 0) + 92 >> 2] | 0;
   i4 = i1 + 1192 | 0;
   i13 = i1 + 1184 | 0;
   i14 = i1 + 1208 | 0;
   i15 = i1 + 1200 | 0;
   i16 = i5 + (i6 * 24 | 0) + 256 | 0;
   i17 = i5 + (i6 * 24 | 0) + 260 | 0;
   i6 = i11;
   i11 = 0;
   i5 = 0;
   while (1) {
    i18 = i12 + (i5 << 4) | 0;
    d7 = +HEAPF64[i18 >> 3];
    i19 = i12 + (i5 << 4) + 8 | 0;
    d20 = +HEAPF64[i19 >> 3];
    d21 = d7 + +HEAPF64[i4 >> 3] * d20;
    d22 = d7 + d20 * +HEAPF64[i13 >> 3];
    d7 = +HEAPF64[i14 >> 3];
    if (d21 > d7) {
     d23 = +HEAPF64[i15 >> 3];
     if (d21 < d23 | d22 < d23) {
      i24 = 10;
     } else {
      i25 = i11;
      i26 = i6;
     }
    } else {
     if (d22 > d7) {
      i24 = 10;
     } else {
      i25 = i11;
      i26 = i6;
     }
    }
    if ((i24 | 0) == 10) {
     i24 = 0;
     i27 = HEAP32[i16 >> 2] | 0;
     if ((i27 | 0) > 0) {
      i28 = HEAP32[i17 >> 2] | 0;
      d7 = d20;
      i29 = i27;
      i27 = i11;
      i30 = 0;
      while (1) {
       if (d7 == +HEAPF64[i28 + (i30 << 4) + 8 >> 3] ? +HEAPF64[i18 >> 3] == +HEAPF64[i28 + (i30 << 4) >> 3] : 0) {
        HEAPF64[286672 + (i27 << 5) >> 3] = d7;
        HEAPF64[286664 + (i27 << 5) >> 3] = +HEAPF64[i18 >> 3];
        d20 = +HEAPF64[i19 >> 3];
        HEAPF64[286680 + (i27 << 5) >> 3] = d20 * d20 + 1.0;
        d20 = +HEAPF64[i18 >> 3] * +HEAPF64[i19 >> 3];
        i31 = i27 + 1 | 0;
        HEAP32[71606] = i31;
        HEAPF64[286688 + (i27 << 5) >> 3] = d20;
        i32 = i31;
        i33 = HEAP32[i16 >> 2] | 0;
       } else {
        i32 = i27;
        i33 = i29;
       }
       i31 = i30 + 1 | 0;
       if ((i31 | 0) >= (i33 | 0)) {
        break;
       }
       d7 = +HEAPF64[i19 >> 3];
       i29 = i33;
       i27 = i32;
       i30 = i31;
      }
      i25 = i32;
      i26 = HEAP32[i10 >> 2] | 0;
     } else {
      i25 = i11;
      i26 = i6;
     }
    }
    i5 = i5 + 1 | 0;
    if ((i5 | 0) >= (i26 | 0)) {
     break;
    } else {
     i6 = i26;
     i11 = i25;
    }
   }
  }
  if (d8 == 2147483647.0) {
   d34 = d9;
   i24 = 20;
  } else {
   d35 = d9;
  }
 } else {
  HEAPF64[35801] = 2147483647.0;
  HEAPF64[35802] = 2147483647.0;
  HEAP32[71606] = 0;
  d34 = 2147483647.0;
  i24 = 20;
 }
 if ((i24 | 0) == 20) {
  HEAPF64[35801] = +HEAPF64[i1 + 1184 >> 3] + 2147483647.0;
  d35 = d34;
 }
 if (d35 == 2147483647.0) {
  HEAPF64[35802] = +HEAPF64[i1 + 1200 >> 3] + 2147483647.0;
 }
 i25 = HEAP32[i1 + 24 >> 2] | 0;
 i1 = _emscripten_alloc_async_context(8) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i3;
 FUNCTION_TABLE_v[i25 & 63]();
 if (___async) {
  HEAP32[i1 >> 2] = 210;
  HEAP32[i1 + 4 >> 2] = i2;
  i3 = STACKTOP;
  STACKTOP = i3;
  return;
 }
 _emscripten_free_async_context(i1 | 0);
 i1 = HEAP32[71600] | 0;
 HEAP32[i1 + 68 >> 2] = 0;
 HEAP32[i1 + 72 >> 2] = 286440;
 i1 = HEAP32[71600] | 0;
 HEAP32[i1 + 64 >> 2] = 0;
 i25 = i1 + 36 | 0;
 i11 = HEAP32[i25 >> 2] | 0;
 HEAP32[i25 >> 2] = HEAP32[i1 + 40 >> 2];
 HEAP32[(HEAP32[71600] | 0) + 40 >> 2] = i11;
 i11 = HEAP32[71600] | 0;
 i1 = i11 + 44 | 0;
 i25 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 >> 2] = HEAP32[i11 + 48 >> 2];
 HEAP32[(HEAP32[71600] | 0) + 48 >> 2] = i25;
 i25 = HEAP32[71600] | 0;
 HEAP32[71598] = HEAP32[i25 + 80 >> 2];
 HEAP32[72628] = HEAP32[i25 + 84 >> 2];
 HEAP32[72630] = HEAP32[i25 + 88 >> 2];
 HEAP32[i25 + 72 >> 2] = 286456;
 i25 = HEAP32[71600] | 0;
 _mkrealloc_table(HEAP32[i25 + 16 >> 2] | 0, HEAP32[i25 + 52 >> 2] | 0, HEAP32[i25 + 128 >> 2] | 0, +HEAPF64[i25 + 1192 >> 3], +HEAPF64[i25 + 1184 >> 3], +HEAPF64[35801]);
 i25 = HEAP32[71600] | 0;
 i11 = HEAP32[i25 + 28 >> 2] | 0;
 do {
  if ((i11 | 0) != 0) {
   i1 = _emscripten_alloc_async_context(8) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i3;
   FUNCTION_TABLE_v[i11 & 63]();
   if (___async) {
    HEAP32[i1 >> 2] = 211;
    HEAP32[i1 + 4 >> 2] = i2;
    i3 = STACKTOP;
    STACKTOP = i3;
    return;
   } else {
    _emscripten_free_async_context(i1 | 0);
    i36 = HEAP32[71600] | 0;
    break;
   }
  } else {
   i36 = i25;
  }
 } while (0);
 HEAP32[i36 + 72 >> 2] = 286480;
 i36 = HEAP32[71600] | 0;
 _mkrealloc_table(HEAP32[i36 + 20 >> 2] | 0, HEAP32[i36 + 56 >> 2] | 0, HEAP32[i36 + 132 >> 2] | 0, +HEAPF64[i36 + 1208 >> 3], +HEAPF64[i36 + 1200 >> 3], +HEAPF64[35802]);
 i36 = HEAP32[71600] | 0;
 i25 = HEAP32[i36 + 28 >> 2] | 0;
 do {
  if ((i25 | 0) != 0) {
   i11 = _emscripten_alloc_async_context(8) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i3;
   FUNCTION_TABLE_v[i25 & 63]();
   if (___async) {
    HEAP32[i11 >> 2] = 212;
    HEAP32[i11 + 4 >> 2] = i2;
    i3 = STACKTOP;
    STACKTOP = i3;
    return;
   }
   _emscripten_free_async_context(i11 | 0);
   i11 = HEAP32[71600] | 0;
   i1 = HEAP32[i11 + 28 >> 2] | 0;
   if ((i1 | 0) != 0) {
    i26 = _emscripten_alloc_async_context(8) | 0;
    HEAP32[___async_cur_frame + 4 >> 2] = i3;
    FUNCTION_TABLE_v[i1 & 63]();
    if (___async) {
     HEAP32[i26 >> 2] = 213;
     HEAP32[i26 + 4 >> 2] = i2;
     i3 = STACKTOP;
     STACKTOP = i3;
     return;
    } else {
     _emscripten_free_async_context(i26 | 0);
     i37 = HEAP32[71600] | 0;
     break;
    }
   } else {
    i37 = i11;
   }
  } else {
   i37 = i36;
  }
 } while (0);
 HEAP32[i37 + 72 >> 2] = 286504;
 _moveoldpoints();
 i37 = HEAP32[71600] | 0;
 i36 = HEAP32[i37 + 28 >> 2] | 0;
 do {
  if ((i36 | 0) != 0) {
   i25 = _emscripten_alloc_async_context(8) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i3;
   FUNCTION_TABLE_v[i36 & 63]();
   if (___async) {
    HEAP32[i25 >> 2] = 214;
    HEAP32[i25 + 4 >> 2] = i2;
    i3 = STACKTOP;
    STACKTOP = i3;
    return;
   } else {
    _emscripten_free_async_context(i25 | 0);
    i38 = HEAP32[71600] | 0;
    break;
   }
  } else {
   i38 = i37;
  }
 } while (0);
 HEAP32[i38 + 72 >> 2] = 286528;
 i38 = HEAP32[71600] | 0;
 L58 : do {
  if ((i2 | 0) != 0) {
   i37 = i38 + 128 | 0;
   i36 = _malloc((HEAP32[i38 + 132 >> 2] | 0) + (HEAP32[i37 >> 2] | 0) << 2) | 0;
   i25 = (HEAP32[i38 + 52 >> 2] | 0) + ((HEAP32[i37 >> 2] | 0) * 40 | 0) | 0;
   HEAP32[i38 + 72 >> 2] = 286624;
   i37 = HEAP32[71600] | 0;
   i11 = HEAP32[i37 + 52 >> 2] | 0;
   if (i11 >>> 0 < i25 >>> 0) {
    i26 = 0;
    i1 = i11;
    do {
     i26 = ((HEAP32[i1 + 32 >> 2] | 0) != 0 & 1) + i26 | 0;
     i1 = i1 + 40 | 0;
    } while (i1 >>> 0 < i25 >>> 0);
    i39 = i11;
    i40 = i36;
    while (1) {
     if ((HEAP32[i39 + 20 >> 2] | 0) == 0) {
      i41 = i39;
      i42 = i40;
     } else {
      if (i39 >>> 0 < i25 >>> 0) {
       i11 = i39;
       i1 = i40;
       while (1) {
        i6 = i1 + 4 | 0;
        HEAP32[i1 >> 2] = i11;
        i5 = i11 + 40 | 0;
        if (i5 >>> 0 < i25 >>> 0 & (HEAP32[i11 + 60 >> 2] | 0) != 0) {
         i11 = i5;
         i1 = i6;
        } else {
         i43 = i5;
         i44 = i6;
         break;
        }
       }
      } else {
       i43 = i39;
       i44 = i40;
      }
      i1 = (i43 | 0) == (i25 | 0) ? i43 + -40 | 0 : i43;
      _addprices(i39, i1);
      i41 = i1;
      i42 = i44;
     }
     i39 = i41 + 40 | 0;
     if (!(i39 >>> 0 < i25 >>> 0)) {
      break;
     } else {
      i40 = i42;
     }
    }
    i45 = HEAP32[71600] | 0;
    i46 = i26;
    i47 = i42;
   } else {
    i45 = i37;
    i46 = 0;
    i47 = i36;
   }
   i1 = HEAP32[i45 + 56 >> 2] | 0;
   i11 = HEAP32[i45 + 132 >> 2] | 0;
   i6 = i1 + (i11 * 40 | 0) | 0;
   if ((i11 | 0) > 0) {
    i11 = 0;
    i5 = i1;
    do {
     i11 = ((HEAP32[i5 + 32 >> 2] | 0) != 0 & 1) + i11 | 0;
     i5 = i5 + 40 | 0;
    } while (i5 >>> 0 < i6 >>> 0);
    i48 = i1;
    i49 = i47;
    while (1) {
     if ((HEAP32[i48 + 20 >> 2] | 0) == 0) {
      i50 = i48;
      i51 = i49;
     } else {
      if (i48 >>> 0 < i6 >>> 0) {
       i1 = i48;
       i5 = i49;
       while (1) {
        i37 = i5 + 4 | 0;
        HEAP32[i5 >> 2] = i1;
        i26 = i1 + 40 | 0;
        if (i26 >>> 0 < i6 >>> 0 & (HEAP32[i1 + 60 >> 2] | 0) != 0) {
         i1 = i26;
         i5 = i37;
        } else {
         i52 = i26;
         i53 = i37;
         break;
        }
       }
      } else {
       i52 = i48;
       i53 = i49;
      }
      i5 = (i52 | 0) == (i6 | 0) ? i52 + -40 | 0 : i52;
      _addprices(i48, i5);
      i50 = i5;
      i51 = i53;
     }
     i48 = i50 + 40 | 0;
     if (!(i48 >>> 0 < i6 >>> 0)) {
      i54 = i11;
      i55 = i51;
      break;
     } else {
      i49 = i51;
     }
    }
   } else {
    i54 = 0;
    i55 = i47;
   }
   i11 = i55 - i36 >> 2;
   _qsort(i36, i11, 4, 3);
   i6 = HEAP32[71600] | 0;
   HEAP32[i6 + 68 >> 2] = i11;
   HEAP32[i6 + 112 >> 2] = 1;
   L87 : do {
    if (i36 >>> 0 < i55 >>> 0) {
     i11 = i6;
     i5 = i46;
     i1 = i54;
     i37 = i36;
     while (1) {
      if ((HEAP32[i11 + 140 >> 2] | 0) != 0) {
       i56 = i11;
       break L87;
      }
      i57 = HEAP32[i37 >> 2] | 0;
      i26 = i11 + 64 | 0;
      HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + 1;
      if ((i5 | 0) < ((HEAP32[i11 + 128 >> 2] | 0) + -2 | 0) ? (i1 | 0) < ((HEAP32[i11 + 132 >> 2] | 0) + -2 | 0) : 0) {
       HEAP32[i11 + 116 >> 2] = 1;
      }
      i26 = HEAP32[i11 + 28 >> 2] | 0;
      if ((i26 | 0) == 0) {
       i58 = i11;
      } else {
       i59 = _emscripten_alloc_async_context(32) | 0;
       HEAP32[___async_cur_frame + 4 >> 2] = i3;
       FUNCTION_TABLE_v[i26 & 63]();
       if (___async) {
        i24 = 63;
        break;
       }
       _emscripten_free_async_context(i59 | 0);
       i58 = HEAP32[71600] | 0;
      }
      i26 = HEAP32[i58 + 52 >> 2] | 0;
      i10 = HEAP32[i58 + 36 >> 2] | 0;
      if (i57 >>> 0 >= i26 >>> 0 & i57 >>> 0 < i25 >>> 0) {
       i60 = i5 + -1 | 0;
       i61 = _emscripten_alloc_async_context(28) | 0;
       HEAP32[___async_cur_frame + 4 >> 2] = i3;
       _calccolumn(i10 + ((i57 - i26 | 0) / 40 | 0) | 0, i57);
       if (___async) {
        i24 = 67;
        break;
       }
       _emscripten_free_async_context(i61 | 0);
       i62 = i60;
       i63 = i1;
      } else {
       i26 = i10 + (Math_imul(HEAP32[i58 + 136 >> 2] | 0, (i57 - (HEAP32[i58 + 56 >> 2] | 0) | 0) / 40 | 0) | 0) | 0;
       i64 = i1 + -1 | 0;
       i65 = _emscripten_alloc_async_context(28) | 0;
       HEAP32[___async_cur_frame + 4 >> 2] = i3;
       _calcline(i26, i57);
       if (___async) {
        i24 = 70;
        break;
       }
       _emscripten_free_async_context(i65 | 0);
       i62 = i5;
       i63 = i64;
      }
      i26 = i37 + 4 | 0;
      i10 = HEAP32[71600] | 0;
      if (i26 >>> 0 < i55 >>> 0) {
       i11 = i10;
       i5 = i62;
       i1 = i63;
       i37 = i26;
      } else {
       i56 = i10;
       break L87;
      }
     }
     if ((i24 | 0) == 63) {
      HEAP32[i59 >> 2] = 215;
      HEAP32[i59 + 4 >> 2] = i57;
      HEAP32[i59 + 8 >> 2] = i25;
      HEAP32[i59 + 12 >> 2] = i36;
      HEAP32[i59 + 16 >> 2] = i5;
      HEAP32[i59 + 20 >> 2] = i1;
      HEAP32[i59 + 24 >> 2] = i37;
      HEAP32[i59 + 28 >> 2] = i55;
      i3 = STACKTOP;
      STACKTOP = i3;
      return;
     } else if ((i24 | 0) == 67) {
      HEAP32[i61 >> 2] = 216;
      HEAP32[i61 + 4 >> 2] = i36;
      HEAP32[i61 + 8 >> 2] = i25;
      HEAP32[i61 + 12 >> 2] = i55;
      HEAP32[i61 + 16 >> 2] = i1;
      HEAP32[i61 + 20 >> 2] = i60;
      HEAP32[i61 + 24 >> 2] = i37;
      i3 = STACKTOP;
      STACKTOP = i3;
      return;
     } else if ((i24 | 0) == 70) {
      HEAP32[i65 >> 2] = 217;
      HEAP32[i65 + 4 >> 2] = i36;
      HEAP32[i65 + 8 >> 2] = i25;
      HEAP32[i65 + 12 >> 2] = i55;
      HEAP32[i65 + 16 >> 2] = i64;
      HEAP32[i65 + 20 >> 2] = i5;
      HEAP32[i65 + 24 >> 2] = i37;
      i3 = STACKTOP;
      STACKTOP = i3;
      return;
     }
    } else {
     i56 = i6;
    }
   } while (0);
   i6 = HEAP32[i56 + 28 >> 2] | 0;
   do {
    if ((i6 | 0) != 0) {
     i25 = _emscripten_alloc_async_context(8) | 0;
     HEAP32[___async_cur_frame + 4 >> 2] = i3;
     FUNCTION_TABLE_v[i6 & 63]();
     if (___async) {
      HEAP32[i25 >> 2] = 218;
      HEAP32[i25 + 4 >> 2] = i36;
      i3 = STACKTOP;
      STACKTOP = i3;
      return;
     } else {
      _emscripten_free_async_context(i25 | 0);
      break;
     }
    }
   } while (0);
   _free(i36);
   i6 = HEAP32[71600] | 0;
   HEAP32[i6 + 64 >> 2] = 0;
   HEAP32[i6 + 68 >> 2] = 0;
   HEAP32[i6 + 72 >> 2] = 286552;
   i6 = HEAP32[71600] | 0;
   HEAP32[i6 + 112 >> 2] = 0;
   i25 = HEAP32[i6 + 28 >> 2] | 0;
   do {
    if ((i25 | 0) != 0) {
     i6 = _emscripten_alloc_async_context(4) | 0;
     HEAP32[___async_cur_frame + 4 >> 2] = i3;
     FUNCTION_TABLE_v[i25 & 63]();
     if (___async) {
      HEAP32[i6 >> 2] = 219;
      i3 = STACKTOP;
      STACKTOP = i3;
      return;
     } else {
      _emscripten_free_async_context(i6 | 0);
      break;
     }
    }
   } while (0);
   _dosymetry();
   i25 = HEAP32[71600] | 0;
   if ((HEAP32[i25 + 140 >> 2] | 0) != 0) {
    HEAP32[i25 + 72 >> 2] = 286640;
    i25 = HEAP32[71600] | 0;
    i36 = HEAP32[i25 + 56 >> 2] | 0;
    i6 = HEAP32[i25 + 132 >> 2] | 0;
    i11 = i36 + (i6 * 40 | 0) | 0;
    do {
     if ((i6 | 0) > 0) {
      i10 = i36;
      L124 : while (1) {
       i26 = i10 + 32 | 0;
       L126 : do {
        if ((HEAP32[i26 >> 2] | 0) == 0) {
         i66 = i10;
        } else {
         i32 = HEAP32[71600] | 0;
         HEAP32[i32 + 120 >> 2] = 1;
         i33 = i10;
         do {
          i16 = i33;
          i33 = i33 + 40 | 0;
          i67 = i33 >>> 0 < i11 >>> 0;
         } while ((HEAP32[i16 + 72 >> 2] | 0) != 0 & i67);
         i16 = i10 + -40 | 0;
         if (!((HEAP32[i26 >> 2] | 0) != 0 & i10 >>> 0 < i11 >>> 0)) {
          i66 = i10;
          break;
         }
         i17 = i67 ^ 1;
         i15 = i32;
         i14 = i26;
         i13 = i10;
         while (1) {
          i4 = HEAP32[i15 + 56 >> 2] | 0;
          i12 = i16 >>> 0 < i4 >>> 0;
          if (i12 | i17) {
           i68 = i12 ? i33 : i16;
          } else {
           d35 = +HEAPF64[i13 >> 3];
           i68 = d35 - +HEAPF64[i16 >> 3] < +HEAPF64[i33 >> 3] - d35 ? i16 : i33;
          }
          if (i68 >>> 0 >= i11 >>> 0 | (HEAP32[i68 + 32 >> 2] | 0) != 0 | i68 >>> 0 < i4 >>> 0) {
           i24 = 91;
           break L124;
          }
          i12 = HEAP32[i15 + 36 >> 2] | 0;
          i30 = HEAP32[i15 + 136 >> 2] | 0;
          i27 = i4;
          i4 = i12 + (Math_imul((i13 - i27 | 0) / 40 | 0, i30) | 0) | 0;
          i29 = i12 + (Math_imul((i68 - i27 | 0) / 40 | 0, i30) | 0) | 0;
          _memcpy(i4 | 0, i29 | 0, HEAP32[i15 + 128 >> 2] | 0) | 0;
          HEAP32[i14 >> 2] = 0;
          HEAPF64[i13 >> 3] = +HEAPF64[i68 >> 3];
          i29 = i13 + 40 | 0;
          i4 = i13 + 72 | 0;
          if (!((HEAP32[i4 >> 2] | 0) != 0 & i29 >>> 0 < i11 >>> 0)) {
           i66 = i29;
           break L126;
          }
          i15 = HEAP32[71600] | 0;
          i14 = i4;
          i13 = i29;
         }
        }
       } while (0);
       i10 = i66 + 40 | 0;
       if (!(i10 >>> 0 < i11 >>> 0)) {
        i24 = 95;
        break;
       }
      }
      if ((i24 | 0) == 91) {
       _puts(289864) | 0;
       _init_tables(HEAP32[71600] | 0);
       break L58;
      } else if ((i24 | 0) == 95) {
       i10 = HEAP32[71600] | 0;
       i69 = i10;
       i70 = HEAP32[i10 + 132 >> 2] | 0;
       break;
      }
     } else {
      i69 = i25;
      i70 = i6;
     }
    } while (0);
    i6 = HEAP32[i69 + 36 >> 2] | 0;
    i25 = i6 + (Math_imul(HEAP32[i69 + 136 >> 2] | 0, i70) | 0) | 0;
    i11 = HEAP32[i69 + 52 >> 2] | 0;
    i36 = HEAP32[i69 + 128 >> 2] | 0;
    i10 = i11 + (i36 * 40 | 0) | 0;
    if ((i36 | 0) > 0) {
     i36 = i69;
     i37 = 0;
     i5 = i11;
     i11 = i6;
     i6 = 0;
     L144 : while (1) {
      i1 = i5 + 32 | 0;
      do {
       if ((HEAP32[i1 >> 2] | 0) != 0) {
        HEAP32[i36 + 120 >> 2] = 1;
        i26 = i5;
        while (1) {
         i71 = i26 >>> 0 < i10 >>> 0;
         if ((HEAP32[i26 + 32 >> 2] | 0) != 0 & i71) {
          i26 = i26 + 40 | 0;
         } else {
          break;
         }
        }
        i13 = i5 + -40 | 0;
        if (!((HEAP32[i1 >> 2] | 0) != 0 & i5 >>> 0 < i10 >>> 0)) {
         i72 = i36;
         i73 = i37;
         i74 = i5;
         i75 = i11;
         i76 = i6;
         break;
        }
        i14 = i71 ^ 1;
        i77 = i36;
        i15 = i1;
        i33 = i37;
        i16 = 0;
        i17 = i5;
        i32 = i11;
        i29 = i6;
        while (1) {
         i4 = HEAP32[i77 + 52 >> 2] | 0;
         i30 = i13 >>> 0 < i4 >>> 0;
         if (i30 | i14) {
          i78 = i30 ? i26 : i13;
         } else {
          d35 = +HEAPF64[i17 >> 3];
          i78 = d35 - +HEAPF64[i13 >> 3] < +HEAPF64[i26 >> 3] - d35 ? i13 : i26;
         }
         if (i78 >>> 0 >= i10 >>> 0 | (HEAP32[i78 + 32 >> 2] | 0) != 0 | i78 >>> 0 < i4 >>> 0) {
          break L144;
         }
         if ((i78 | 0) == (i16 | 0)) {
          i79 = i77;
          i80 = i33 + 1 | 0;
          i81 = i16;
          i82 = i32;
          i83 = i29;
         } else {
          L161 : do {
           if ((i16 | 0) == 0) {
            i84 = i77;
           } else {
            if ((i33 | 0) != 1) {
             if (i32 >>> 0 < i25 >>> 0) {
              i85 = i32;
              i86 = i29;
             } else {
              i84 = i77;
              break;
             }
             while (1) {
              _memset(i85 | 0, HEAP8[i86 >> 0] | 0, i33 | 0) | 0;
              i4 = HEAP32[71600] | 0;
              i30 = HEAP32[i4 + 136 >> 2] | 0;
              i85 = i85 + i30 | 0;
              if (!(i85 >>> 0 < i25 >>> 0)) {
               i84 = i4;
               break L161;
              } else {
               i86 = i86 + i30 | 0;
              }
             }
            }
            i30 = HEAP32[i77 + 136 >> 2] | 0;
            if (i32 >>> 0 < i25 >>> 0) {
             i87 = i32;
             i88 = i29;
            } else {
             i84 = i77;
             break;
            }
            while (1) {
             HEAP8[i87 >> 0] = HEAP8[i88 >> 0] | 0;
             i87 = i87 + i30 | 0;
             if (!(i87 >>> 0 < i25 >>> 0)) {
              break;
             } else {
              i88 = i88 + i30 | 0;
             }
            }
            i84 = HEAP32[71600] | 0;
           }
          } while (0);
          i30 = HEAP32[i84 + 36 >> 2] | 0;
          i4 = HEAP32[i84 + 52 >> 2] | 0;
          i79 = i84;
          i80 = 1;
          i81 = i78;
          i82 = i30 + ((i17 - i4 | 0) / 40 | 0) | 0;
          i83 = i30 + ((i78 - i4 | 0) / 40 | 0) | 0;
         }
         HEAP32[i15 >> 2] = 0;
         HEAPF64[i17 >> 3] = +HEAPF64[i78 >> 3];
         i4 = i17;
         i17 = i17 + 40 | 0;
         i15 = i4 + 72 | 0;
         if (!((HEAP32[i15 >> 2] | 0) != 0 & i17 >>> 0 < i10 >>> 0)) {
          break;
         } else {
          i77 = i79;
          i33 = i80;
          i16 = i81;
          i32 = i82;
          i29 = i83;
         }
        }
        if ((i81 | 0) == 0) {
         i72 = i79;
         i73 = i80;
         i74 = i17;
         i75 = i82;
         i76 = i83;
         break;
        }
        i29 = i82 >>> 0 < i25 >>> 0;
        if ((i80 | 0) == 1) {
         if (i29) {
          i89 = i82;
          i90 = i83;
         } else {
          i72 = i79;
          i73 = 1;
          i74 = i17;
          i75 = i82;
          i76 = i83;
          break;
         }
         while (1) {
          HEAP8[i89 >> 0] = HEAP8[i90 >> 0] | 0;
          i32 = HEAP32[71600] | 0;
          i16 = HEAP32[i32 + 136 >> 2] | 0;
          i33 = i89 + i16 | 0;
          i15 = i90 + i16 | 0;
          if (i33 >>> 0 < i25 >>> 0) {
           i89 = i33;
           i90 = i15;
          } else {
           i72 = i32;
           i73 = 1;
           i74 = i17;
           i75 = i33;
           i76 = i15;
           break;
          }
         }
        } else {
         if (i29) {
          i91 = i82;
          i92 = i83;
         } else {
          i72 = i79;
          i73 = i80;
          i74 = i17;
          i75 = i82;
          i76 = i83;
          break;
         }
         while (1) {
          _memset(i91 | 0, HEAP8[i92 >> 0] | 0, i80 | 0) | 0;
          i15 = HEAP32[71600] | 0;
          i33 = HEAP32[i15 + 136 >> 2] | 0;
          i32 = i91 + i33 | 0;
          i16 = i92 + i33 | 0;
          if (i32 >>> 0 < i25 >>> 0) {
           i91 = i32;
           i92 = i16;
          } else {
           i72 = i15;
           i73 = i80;
           i74 = i17;
           i75 = i32;
           i76 = i16;
           break;
          }
         }
        }
       } else {
        i72 = i36;
        i73 = i37;
        i74 = i5;
        i75 = i11;
        i76 = i6;
       }
      } while (0);
      i5 = i74 + 40 | 0;
      if (!(i5 >>> 0 < i10 >>> 0)) {
       break L58;
      } else {
       i36 = i72;
       i37 = i73;
       i11 = i75;
       i6 = i76;
      }
     }
     _init_tables(i77);
     _puts(289864) | 0;
    }
   }
  } else {
   HEAP32[i38 + 72 >> 2] = 286576;
   i6 = HEAP32[71600] | 0;
   i11 = i6 + 68 | 0;
   HEAP32[i11 >> 2] = 0;
   HEAP32[i6 + 64 >> 2] = 0;
   i37 = HEAP32[i6 + 56 >> 2] | 0;
   i36 = HEAP32[i6 + 132 >> 2] | 0;
   i10 = i37 + (i36 * 40 | 0) | 0;
   if ((i36 | 0) > 0) {
    i36 = 0;
    i5 = i37;
    while (1) {
     if ((HEAP32[i5 + 20 >> 2] | 0) == 0) {
      i93 = i36;
     } else {
      i37 = i36 + 1 | 0;
      HEAP32[i11 >> 2] = i37;
      i93 = i37;
     }
     i5 = i5 + 40 | 0;
     if (!(i5 >>> 0 < i10 >>> 0)) {
      break;
     } else {
      i36 = i93;
     }
    }
   }
   i36 = HEAP32[i6 + 28 >> 2] | 0;
   do {
    if ((i36 | 0) != 0) {
     i10 = _emscripten_alloc_async_context(4) | 0;
     HEAP32[___async_cur_frame + 4 >> 2] = i3;
     FUNCTION_TABLE_v[i36 & 63]();
     if (___async) {
      HEAP32[i10 >> 2] = 220;
      i3 = STACKTOP;
      STACKTOP = i3;
      return;
     } else {
      _emscripten_free_async_context(i10 | 0);
      i94 = HEAP32[71600] | 0;
      i95 = 0;
      break;
     }
    } else {
     i94 = i6;
     i95 = 0;
    }
   } while (0);
   L197 : while (1) {
    i6 = HEAP32[i94 + 56 >> 2] | 0;
    i36 = HEAP32[i94 + 132 >> 2] | 0;
    i96 = i6 + (i36 * 40 | 0) | 0;
    if ((i95 | 0) < (i36 | 0)) {
     i36 = Math_imul(HEAP32[i94 + 136 >> 2] | 0, i95) | 0;
     i10 = i94;
     i97 = i6 + (i95 * 40 | 0) | 0;
     i98 = (HEAP32[i94 + 36 >> 2] | 0) + i36 | 0;
     while (1) {
      if ((HEAP32[i97 + 20 >> 2] | 0) != 0) {
       i99 = _emscripten_alloc_async_context(20) | 0;
       HEAP32[___async_cur_frame + 4 >> 2] = i3;
       _calcline(i98, i97);
       if (___async) {
        i24 = 136;
        break L197;
       }
       _emscripten_free_async_context(i99 | 0);
       i36 = HEAP32[71600] | 0;
       i6 = i36 + 64 | 0;
       HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
       i6 = HEAP32[i36 + 28 >> 2] | 0;
       if ((i6 | 0) == 0) {
        i100 = i36;
       } else {
        i101 = _emscripten_alloc_async_context(20) | 0;
        HEAP32[___async_cur_frame + 4 >> 2] = i3;
        FUNCTION_TABLE_v[i6 & 63]();
        if (___async) {
         i24 = 139;
         break L197;
        }
        _emscripten_free_async_context(i101 | 0);
        i100 = HEAP32[71600] | 0;
       }
       if ((HEAP32[i100 + 140 >> 2] | 0) == 0) {
        i102 = i100;
       } else {
        i103 = i100;
        break L197;
       }
      } else {
       i102 = i10;
      }
      i6 = i97 + 80 | 0;
      if (i6 >>> 0 < i96 >>> 0) {
       i10 = i102;
       i97 = i6;
       i98 = i98 + (HEAP32[i102 + 136 >> 2] << 1) | 0;
      } else {
       i104 = i102;
       break;
      }
     }
    } else {
     i104 = i94;
    }
    i10 = i95 + 1 | 0;
    if ((i10 | 0) < 2) {
     i94 = i104;
     i95 = i10;
    } else {
     i24 = 144;
     break;
    }
   }
   L212 : do {
    if ((i24 | 0) == 136) {
     HEAP32[i99 >> 2] = 221;
     HEAP32[i99 + 4 >> 2] = i95;
     HEAP32[i99 + 8 >> 2] = i98;
     HEAP32[i99 + 12 >> 2] = i97;
     HEAP32[i99 + 16 >> 2] = i96;
     i3 = STACKTOP;
     STACKTOP = i3;
     return;
    } else if ((i24 | 0) == 139) {
     HEAP32[i101 >> 2] = 222;
     HEAP32[i101 + 4 >> 2] = i95;
     HEAP32[i101 + 8 >> 2] = i98;
     HEAP32[i101 + 12 >> 2] = i97;
     HEAP32[i101 + 16 >> 2] = i96;
     i3 = STACKTOP;
     STACKTOP = i3;
     return;
    } else if ((i24 | 0) == 144) {
     HEAP32[i104 + 68 >> 2] = 0;
     HEAP32[i104 + 72 >> 2] = 286600;
     i10 = HEAP32[71600] | 0;
     HEAP32[i10 + 64 >> 2] = 0;
     i6 = HEAP32[i10 + 52 >> 2] | 0;
     i36 = HEAP32[i10 + 128 >> 2] | 0;
     i5 = i6 + (i36 * 40 | 0) | 0;
     if ((i36 | 0) > 0) {
      i11 = i10 + 68 | 0;
      i37 = i6;
      do {
       if ((HEAP32[i37 + 20 >> 2] | 0) != 0) {
        HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
       }
       i37 = i37 + 40 | 0;
      } while (i37 >>> 0 < i5 >>> 0);
      i105 = i6;
      i106 = i36;
      i107 = i10;
      i108 = 0;
     } else {
      i105 = i6;
      i106 = i36;
      i107 = i10;
      i108 = 0;
     }
     L223 : while (1) {
      i109 = i105 + (i106 * 40 | 0) | 0;
      if ((i108 | 0) < (i106 | 0)) {
       i5 = i107;
       i110 = i105 + (i108 * 40 | 0) | 0;
       i111 = (HEAP32[i107 + 36 >> 2] | 0) + i108 | 0;
       while (1) {
        if ((HEAP32[i110 + 20 >> 2] | 0) != 0) {
         i112 = _emscripten_alloc_async_context(20) | 0;
         HEAP32[___async_cur_frame + 4 >> 2] = i3;
         _calccolumn(i111, i110);
         if (___async) {
          i24 = 153;
          break L223;
         }
         _emscripten_free_async_context(i112 | 0);
         i37 = HEAP32[71600] | 0;
         i11 = i37 + 64 | 0;
         HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
         i11 = HEAP32[i37 + 28 >> 2] | 0;
         if ((i11 | 0) == 0) {
          i113 = i37;
         } else {
          i114 = _emscripten_alloc_async_context(20) | 0;
          HEAP32[___async_cur_frame + 4 >> 2] = i3;
          FUNCTION_TABLE_v[i11 & 63]();
          if (___async) {
           i24 = 156;
           break L223;
          }
          _emscripten_free_async_context(i114 | 0);
          i113 = HEAP32[71600] | 0;
         }
         if ((HEAP32[i113 + 140 >> 2] | 0) == 0) {
          i115 = i113;
         } else {
          i103 = i113;
          break L212;
         }
        } else {
         i115 = i5;
        }
        i11 = i110 + 80 | 0;
        if (i11 >>> 0 < i109 >>> 0) {
         i5 = i115;
         i110 = i11;
         i111 = i111 + 2 | 0;
        } else {
         i116 = i115;
         break;
        }
       }
      } else {
       i116 = i107;
      }
      i5 = i108 + 1 | 0;
      if ((i5 | 0) >= 2) {
       i24 = 162;
       break;
      }
      i105 = HEAP32[i116 + 52 >> 2] | 0;
      i106 = HEAP32[i116 + 128 >> 2] | 0;
      i107 = i116;
      i108 = i5;
     }
     if ((i24 | 0) == 153) {
      HEAP32[i112 >> 2] = 223;
      HEAP32[i112 + 4 >> 2] = i108;
      HEAP32[i112 + 8 >> 2] = i111;
      HEAP32[i112 + 12 >> 2] = i110;
      HEAP32[i112 + 16 >> 2] = i109;
      i3 = STACKTOP;
      STACKTOP = i3;
      return;
     } else if ((i24 | 0) == 156) {
      HEAP32[i114 >> 2] = 224;
      HEAP32[i114 + 4 >> 2] = i108;
      HEAP32[i114 + 8 >> 2] = i111;
      HEAP32[i114 + 12 >> 2] = i110;
      HEAP32[i114 + 16 >> 2] = i109;
      i3 = STACKTOP;
      STACKTOP = i3;
      return;
     } else if ((i24 | 0) == 162) {
      if ((HEAP32[i116 + 140 >> 2] | 0) != 0) {
       i103 = i116;
       break;
      }
      i10 = HEAP32[i116 + 28 >> 2] | 0;
      do {
       if ((i10 | 0) != 0) {
        i36 = _emscripten_alloc_async_context(4) | 0;
        HEAP32[___async_cur_frame + 4 >> 2] = i3;
        FUNCTION_TABLE_v[i10 & 63]();
        if (___async) {
         HEAP32[i36 >> 2] = 225;
         i3 = STACKTOP;
         STACKTOP = i3;
         return;
        } else {
         _emscripten_free_async_context(i36 | 0);
         i117 = HEAP32[71600] | 0;
         break;
        }
       } else {
        i117 = i116;
       }
      } while (0);
      HEAP32[i117 + 64 >> 2] = 0;
      HEAP32[i117 + 68 >> 2] = 0;
      HEAP32[i117 + 72 >> 2] = 286552;
      _dosymetry();
      break L58;
     }
    }
   } while (0);
   _init_tables(i103);
   STACKTOP = i3;
   return;
  }
 } while (0);
 i103 = HEAP32[71600] | 0;
 i117 = HEAP32[i103 + 28 >> 2] | 0;
 do {
  if ((i117 | 0) != 0) {
   i116 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i3;
   FUNCTION_TABLE_v[i117 & 63]();
   if (___async) {
    HEAP32[i116 >> 2] = 226;
    i3 = STACKTOP;
    STACKTOP = i3;
    return;
   } else {
    _emscripten_free_async_context(i116 | 0);
    i118 = HEAP32[71600] | 0;
    break;
   }
  } else {
   i118 = i103;
  }
 } while (0);
 i103 = HEAP32[i118 + 52 >> 2] | 0;
 i117 = HEAP32[i118 + 128 >> 2] | 0;
 i116 = i103 + (i117 * 40 | 0) | 0;
 if ((i117 | 0) > 0) {
  i117 = HEAP32[i118 + 16 >> 2] | 0;
  i24 = i103;
  while (1) {
   HEAPF64[i117 >> 3] = +HEAPF64[i24 >> 3];
   i24 = i24 + 40 | 0;
   if (!(i24 >>> 0 < i116 >>> 0)) {
    break;
   } else {
    i117 = i117 + 8 | 0;
   }
  }
 }
 i117 = HEAP32[i118 + 56 >> 2] | 0;
 i116 = HEAP32[i118 + 132 >> 2] | 0;
 i24 = i117 + (i116 * 40 | 0) | 0;
 if ((i116 | 0) <= 0) {
  STACKTOP = i3;
  return;
 }
 i116 = HEAP32[i118 + 20 >> 2] | 0;
 i118 = i117;
 while (1) {
  HEAPF64[i116 >> 3] = +HEAPF64[i118 >> 3];
  i118 = i118 + 40 | 0;
  if (!(i118 >>> 0 < i24 >>> 0)) {
   break;
  } else {
   i116 = i116 + 8 | 0;
  }
 }
 STACKTOP = i3;
 return;
}
function _do_fractal__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, d60 = 0.0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i1 = HEAP32[71600] | 0;
 HEAP32[i1 + 68 >> 2] = 0;
 HEAP32[i1 + 72 >> 2] = 286440;
 i1 = HEAP32[71600] | 0;
 HEAP32[i1 + 64 >> 2] = 0;
 i4 = i1 + 36 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = HEAP32[i1 + 40 >> 2];
 HEAP32[(HEAP32[71600] | 0) + 40 >> 2] = i5;
 i5 = HEAP32[71600] | 0;
 i1 = i5 + 44 | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 >> 2] = HEAP32[i5 + 48 >> 2];
 HEAP32[(HEAP32[71600] | 0) + 48 >> 2] = i4;
 i4 = HEAP32[71600] | 0;
 HEAP32[71598] = HEAP32[i4 + 80 >> 2];
 HEAP32[72628] = HEAP32[i4 + 84 >> 2];
 HEAP32[72630] = HEAP32[i4 + 88 >> 2];
 HEAP32[i4 + 72 >> 2] = 286456;
 i4 = HEAP32[71600] | 0;
 _mkrealloc_table(HEAP32[i4 + 16 >> 2] | 0, HEAP32[i4 + 52 >> 2] | 0, HEAP32[i4 + 128 >> 2] | 0, +HEAPF64[i4 + 1192 >> 3], +HEAPF64[i4 + 1184 >> 3], +HEAPF64[35801]);
 i4 = HEAP32[71600] | 0;
 i5 = HEAP32[i4 + 28 >> 2] | 0;
 if ((i5 | 0) != 0) {
  i1 = _emscripten_realloc_async_context(8) | 0;
  FUNCTION_TABLE_v[i5 & 63]();
  if (___async) {
   HEAP32[i1 >> 2] = 211;
   i6 = i1 + 4 | 0;
   HEAP32[i6 >> 2] = i3;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i1 >> 2] = 211;
  i6 = i1 + 4 | 0;
  HEAP32[i6 >> 2] = i3;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 + 72 >> 2] = 286480;
 i4 = HEAP32[71600] | 0;
 _mkrealloc_table(HEAP32[i4 + 20 >> 2] | 0, HEAP32[i4 + 56 >> 2] | 0, HEAP32[i4 + 132 >> 2] | 0, +HEAPF64[i4 + 1208 >> 3], +HEAPF64[i4 + 1200 >> 3], +HEAPF64[35802]);
 i4 = HEAP32[71600] | 0;
 i6 = HEAP32[i4 + 28 >> 2] | 0;
 if ((i6 | 0) != 0) {
  i1 = _emscripten_realloc_async_context(8) | 0;
  FUNCTION_TABLE_v[i6 & 63]();
  if (___async) {
   HEAP32[i1 >> 2] = 212;
   i7 = i1 + 4 | 0;
   HEAP32[i7 >> 2] = i3;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i1 >> 2] = 212;
  i7 = i1 + 4 | 0;
  HEAP32[i7 >> 2] = i3;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 + 72 >> 2] = 286504;
 _moveoldpoints();
 i4 = HEAP32[71600] | 0;
 i7 = HEAP32[i4 + 28 >> 2] | 0;
 if ((i7 | 0) != 0) {
  i1 = _emscripten_realloc_async_context(8) | 0;
  FUNCTION_TABLE_v[i7 & 63]();
  if (___async) {
   HEAP32[i1 >> 2] = 214;
   i8 = i1 + 4 | 0;
   HEAP32[i8 >> 2] = i3;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i1 >> 2] = 214;
  i8 = i1 + 4 | 0;
  HEAP32[i8 >> 2] = i3;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 + 72 >> 2] = 286528;
 i4 = HEAP32[71600] | 0;
 L23 : do {
  if ((i3 | 0) != 0) {
   i8 = i4 + 128 | 0;
   i1 = _malloc((HEAP32[i4 + 132 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) << 2) | 0;
   i7 = (HEAP32[i4 + 52 >> 2] | 0) + ((HEAP32[i8 >> 2] | 0) * 40 | 0) | 0;
   HEAP32[i4 + 72 >> 2] = 286624;
   i8 = HEAP32[71600] | 0;
   i6 = HEAP32[i8 + 52 >> 2] | 0;
   if (i6 >>> 0 < i7 >>> 0) {
    i5 = 0;
    i9 = i6;
    do {
     i5 = ((HEAP32[i9 + 32 >> 2] | 0) != 0 & 1) + i5 | 0;
     i9 = i9 + 40 | 0;
    } while (i9 >>> 0 < i7 >>> 0);
    i10 = i6;
    i11 = i1;
    while (1) {
     if ((HEAP32[i10 + 20 >> 2] | 0) == 0) {
      i12 = i10;
      i13 = i11;
     } else {
      if (i10 >>> 0 < i7 >>> 0) {
       i6 = i10;
       i9 = i11;
       while (1) {
        i14 = i9 + 4 | 0;
        HEAP32[i9 >> 2] = i6;
        i15 = i6 + 40 | 0;
        if (i15 >>> 0 < i7 >>> 0 & (HEAP32[i6 + 60 >> 2] | 0) != 0) {
         i6 = i15;
         i9 = i14;
        } else {
         i16 = i15;
         i17 = i14;
         break;
        }
       }
      } else {
       i16 = i10;
       i17 = i11;
      }
      i9 = (i16 | 0) == (i7 | 0) ? i16 + -40 | 0 : i16;
      _addprices(i10, i9);
      i12 = i9;
      i13 = i17;
     }
     i10 = i12 + 40 | 0;
     if (!(i10 >>> 0 < i7 >>> 0)) {
      break;
     } else {
      i11 = i13;
     }
    }
    i18 = HEAP32[71600] | 0;
    i19 = i5;
    i20 = i13;
   } else {
    i18 = i8;
    i19 = 0;
    i20 = i1;
   }
   i9 = HEAP32[i18 + 56 >> 2] | 0;
   i6 = HEAP32[i18 + 132 >> 2] | 0;
   i14 = i9 + (i6 * 40 | 0) | 0;
   if ((i6 | 0) > 0) {
    i6 = 0;
    i15 = i9;
    do {
     i6 = ((HEAP32[i15 + 32 >> 2] | 0) != 0 & 1) + i6 | 0;
     i15 = i15 + 40 | 0;
    } while (i15 >>> 0 < i14 >>> 0);
    i21 = i9;
    i22 = i20;
    while (1) {
     if ((HEAP32[i21 + 20 >> 2] | 0) == 0) {
      i23 = i21;
      i24 = i22;
     } else {
      if (i21 >>> 0 < i14 >>> 0) {
       i9 = i21;
       i15 = i22;
       while (1) {
        i8 = i15 + 4 | 0;
        HEAP32[i15 >> 2] = i9;
        i5 = i9 + 40 | 0;
        if (i5 >>> 0 < i14 >>> 0 & (HEAP32[i9 + 60 >> 2] | 0) != 0) {
         i9 = i5;
         i15 = i8;
        } else {
         i25 = i5;
         i26 = i8;
         break;
        }
       }
      } else {
       i25 = i21;
       i26 = i22;
      }
      i15 = (i25 | 0) == (i14 | 0) ? i25 + -40 | 0 : i25;
      _addprices(i21, i15);
      i23 = i15;
      i24 = i26;
     }
     i21 = i23 + 40 | 0;
     if (!(i21 >>> 0 < i14 >>> 0)) {
      i27 = i6;
      i28 = i24;
      break;
     } else {
      i22 = i24;
     }
    }
   } else {
    i27 = 0;
    i28 = i20;
   }
   i6 = i28 - i1 >> 2;
   _qsort(i1, i6, 4, 3);
   i14 = HEAP32[71600] | 0;
   HEAP32[i14 + 68 >> 2] = i6;
   HEAP32[i14 + 112 >> 2] = 1;
   if (i1 >>> 0 < i28 >>> 0 ? (HEAP32[i14 + 140 >> 2] | 0) == 0 : 0) {
    i6 = HEAP32[i1 >> 2] | 0;
    i15 = i14 + 64 | 0;
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
    if ((i19 | 0) < ((HEAP32[i14 + 128 >> 2] | 0) + -2 | 0) ? (i27 | 0) < ((HEAP32[i14 + 132 >> 2] | 0) + -2 | 0) : 0) {
     HEAP32[i14 + 116 >> 2] = 1;
    }
    i15 = HEAP32[i14 + 28 >> 2] | 0;
    if ((i15 | 0) != 0) {
     i9 = _emscripten_realloc_async_context(32) | 0;
     FUNCTION_TABLE_v[i15 & 63]();
     if (___async) {
      HEAP32[i9 >> 2] = 215;
      i29 = i9 + 4 | 0;
      HEAP32[i29 >> 2] = i6;
      i30 = i9 + 8 | 0;
      HEAP32[i30 >> 2] = i7;
      i31 = i9 + 12 | 0;
      HEAP32[i31 >> 2] = i1;
      i32 = i9 + 16 | 0;
      HEAP32[i32 >> 2] = i19;
      i33 = i9 + 20 | 0;
      HEAP32[i33 >> 2] = i27;
      i34 = i9 + 24 | 0;
      HEAP32[i34 >> 2] = i1;
      i35 = i9 + 28 | 0;
      HEAP32[i35 >> 2] = i28;
      i2 = STACKTOP;
      STACKTOP = i2;
      return;
     }
     ___async_unwind = 0;
     HEAP32[i9 >> 2] = 215;
     i29 = i9 + 4 | 0;
     HEAP32[i29 >> 2] = i6;
     i30 = i9 + 8 | 0;
     HEAP32[i30 >> 2] = i7;
     i31 = i9 + 12 | 0;
     HEAP32[i31 >> 2] = i1;
     i32 = i9 + 16 | 0;
     HEAP32[i32 >> 2] = i19;
     i33 = i9 + 20 | 0;
     HEAP32[i33 >> 2] = i27;
     i34 = i9 + 24 | 0;
     HEAP32[i34 >> 2] = i1;
     i35 = i9 + 28 | 0;
     HEAP32[i35 >> 2] = i28;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    i9 = HEAP32[i14 + 52 >> 2] | 0;
    i15 = HEAP32[i14 + 36 >> 2] | 0;
    if (i6 >>> 0 >= i9 >>> 0 & i6 >>> 0 < i7 >>> 0) {
     i8 = i19 + -1 | 0;
     i5 = _emscripten_realloc_async_context(28) | 0;
     _calccolumn(i15 + ((i6 - i9 | 0) / 40 | 0) | 0, i6);
     if (___async) {
      HEAP32[i5 >> 2] = 216;
      i36 = i5 + 4 | 0;
      HEAP32[i36 >> 2] = i1;
      i37 = i5 + 8 | 0;
      HEAP32[i37 >> 2] = i7;
      i38 = i5 + 12 | 0;
      HEAP32[i38 >> 2] = i28;
      i39 = i5 + 16 | 0;
      HEAP32[i39 >> 2] = i27;
      i40 = i5 + 20 | 0;
      HEAP32[i40 >> 2] = i8;
      i41 = i5 + 24 | 0;
      HEAP32[i41 >> 2] = i1;
      i2 = STACKTOP;
      STACKTOP = i2;
      return;
     }
     ___async_unwind = 0;
     HEAP32[i5 >> 2] = 216;
     i36 = i5 + 4 | 0;
     HEAP32[i36 >> 2] = i1;
     i37 = i5 + 8 | 0;
     HEAP32[i37 >> 2] = i7;
     i38 = i5 + 12 | 0;
     HEAP32[i38 >> 2] = i28;
     i39 = i5 + 16 | 0;
     HEAP32[i39 >> 2] = i27;
     i40 = i5 + 20 | 0;
     HEAP32[i40 >> 2] = i8;
     i41 = i5 + 24 | 0;
     HEAP32[i41 >> 2] = i1;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    } else {
     i5 = i15 + (Math_imul(HEAP32[i14 + 136 >> 2] | 0, (i6 - (HEAP32[i14 + 56 >> 2] | 0) | 0) / 40 | 0) | 0) | 0;
     i15 = i27 + -1 | 0;
     i8 = _emscripten_realloc_async_context(28) | 0;
     _calcline(i5, i6);
     if (___async) {
      HEAP32[i8 >> 2] = 217;
      i42 = i8 + 4 | 0;
      HEAP32[i42 >> 2] = i1;
      i43 = i8 + 8 | 0;
      HEAP32[i43 >> 2] = i7;
      i44 = i8 + 12 | 0;
      HEAP32[i44 >> 2] = i28;
      i45 = i8 + 16 | 0;
      HEAP32[i45 >> 2] = i15;
      i46 = i8 + 20 | 0;
      HEAP32[i46 >> 2] = i19;
      i47 = i8 + 24 | 0;
      HEAP32[i47 >> 2] = i1;
      i2 = STACKTOP;
      STACKTOP = i2;
      return;
     }
     ___async_unwind = 0;
     HEAP32[i8 >> 2] = 217;
     i42 = i8 + 4 | 0;
     HEAP32[i42 >> 2] = i1;
     i43 = i8 + 8 | 0;
     HEAP32[i43 >> 2] = i7;
     i44 = i8 + 12 | 0;
     HEAP32[i44 >> 2] = i28;
     i45 = i8 + 16 | 0;
     HEAP32[i45 >> 2] = i15;
     i46 = i8 + 20 | 0;
     HEAP32[i46 >> 2] = i19;
     i47 = i8 + 24 | 0;
     HEAP32[i47 >> 2] = i1;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
   }
   i8 = HEAP32[i14 + 28 >> 2] | 0;
   if ((i8 | 0) != 0) {
    i14 = _emscripten_realloc_async_context(8) | 0;
    FUNCTION_TABLE_v[i8 & 63]();
    if (___async) {
     HEAP32[i14 >> 2] = 218;
     i48 = i14 + 4 | 0;
     HEAP32[i48 >> 2] = i1;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i14 >> 2] = 218;
    i48 = i14 + 4 | 0;
    HEAP32[i48 >> 2] = i1;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   _free(i1);
   i14 = HEAP32[71600] | 0;
   HEAP32[i14 + 64 >> 2] = 0;
   HEAP32[i14 + 68 >> 2] = 0;
   HEAP32[i14 + 72 >> 2] = 286552;
   i14 = HEAP32[71600] | 0;
   HEAP32[i14 + 112 >> 2] = 0;
   i8 = HEAP32[i14 + 28 >> 2] | 0;
   if ((i8 | 0) != 0) {
    i14 = _emscripten_realloc_async_context(4) | 0;
    FUNCTION_TABLE_v[i8 & 63]();
    if (___async) {
     HEAP32[i14 >> 2] = 219;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i14 >> 2] = 219;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   _dosymetry();
   i14 = HEAP32[71600] | 0;
   if ((HEAP32[i14 + 140 >> 2] | 0) != 0) {
    HEAP32[i14 + 72 >> 2] = 286640;
    i14 = HEAP32[71600] | 0;
    i8 = HEAP32[i14 + 56 >> 2] | 0;
    i15 = HEAP32[i14 + 132 >> 2] | 0;
    i6 = i8 + (i15 * 40 | 0) | 0;
    do {
     if ((i15 | 0) > 0) {
      i5 = i8;
      L157 : while (1) {
       i9 = i5 + 32 | 0;
       L159 : do {
        if ((HEAP32[i9 >> 2] | 0) != 0) {
         i49 = HEAP32[71600] | 0;
         HEAP32[i49 + 120 >> 2] = 1;
         i50 = i5;
         do {
          i51 = i50;
          i50 = i50 + 40 | 0;
          i52 = i50 >>> 0 < i6 >>> 0;
         } while ((HEAP32[i51 + 72 >> 2] | 0) != 0 & i52);
         i51 = i5 + -40 | 0;
         if ((HEAP32[i9 >> 2] | 0) != 0 & i5 >>> 0 < i6 >>> 0) {
          i53 = i52 ^ 1;
          i54 = i49;
          i55 = i9;
          i56 = i5;
          while (1) {
           i57 = HEAP32[i54 + 56 >> 2] | 0;
           i58 = i51 >>> 0 < i57 >>> 0;
           if (i58 | i53) {
            i59 = i58 ? i50 : i51;
           } else {
            d60 = +HEAPF64[i56 >> 3];
            i59 = d60 - +HEAPF64[i51 >> 3] < +HEAPF64[i50 >> 3] - d60 ? i51 : i50;
           }
           if (i59 >>> 0 >= i6 >>> 0 | (HEAP32[i59 + 32 >> 2] | 0) != 0 | i59 >>> 0 < i57 >>> 0) {
            i61 = 64;
            break L157;
           }
           i58 = HEAP32[i54 + 36 >> 2] | 0;
           i62 = HEAP32[i54 + 136 >> 2] | 0;
           i63 = i57;
           i57 = i58 + (Math_imul((i56 - i63 | 0) / 40 | 0, i62) | 0) | 0;
           i64 = i58 + (Math_imul((i59 - i63 | 0) / 40 | 0, i62) | 0) | 0;
           _memcpy(i57 | 0, i64 | 0, HEAP32[i54 + 128 >> 2] | 0) | 0;
           HEAP32[i55 >> 2] = 0;
           HEAPF64[i56 >> 3] = +HEAPF64[i59 >> 3];
           i64 = i56 + 40 | 0;
           i57 = i56 + 72 | 0;
           if (!((HEAP32[i57 >> 2] | 0) != 0 & i64 >>> 0 < i6 >>> 0)) {
            i65 = i64;
            break L159;
           }
           i54 = HEAP32[71600] | 0;
           i55 = i57;
           i56 = i64;
          }
         } else {
          i65 = i5;
         }
        } else {
         i65 = i5;
        }
       } while (0);
       i5 = i65 + 40 | 0;
       if (!(i5 >>> 0 < i6 >>> 0)) {
        i61 = 68;
        break;
       }
      }
      if ((i61 | 0) == 64) {
       _puts(289864) | 0;
       _init_tables(HEAP32[71600] | 0);
       break L23;
      } else if ((i61 | 0) == 68) {
       i5 = HEAP32[71600] | 0;
       i66 = i5;
       i67 = HEAP32[i5 + 132 >> 2] | 0;
       break;
      }
     } else {
      i66 = i14;
      i67 = i15;
     }
    } while (0);
    i15 = HEAP32[i66 + 36 >> 2] | 0;
    i14 = i15 + (Math_imul(HEAP32[i66 + 136 >> 2] | 0, i67) | 0) | 0;
    i6 = HEAP32[i66 + 52 >> 2] | 0;
    i8 = HEAP32[i66 + 128 >> 2] | 0;
    i1 = i6 + (i8 * 40 | 0) | 0;
    if ((i8 | 0) > 0) {
     i8 = i66;
     i7 = 0;
     i5 = i6;
     i6 = i15;
     i15 = 0;
     L177 : while (1) {
      i9 = i5 + 32 | 0;
      do {
       if ((HEAP32[i9 >> 2] | 0) != 0) {
        HEAP32[i8 + 120 >> 2] = 1;
        i56 = i5;
        while (1) {
         i68 = i56 >>> 0 < i1 >>> 0;
         if ((HEAP32[i56 + 32 >> 2] | 0) != 0 & i68) {
          i56 = i56 + 40 | 0;
         } else {
          break;
         }
        }
        i55 = i5 + -40 | 0;
        if ((HEAP32[i9 >> 2] | 0) != 0 & i5 >>> 0 < i1 >>> 0) {
         i54 = i68 ^ 1;
         i69 = i8;
         i50 = i9;
         i51 = i7;
         i53 = 0;
         i49 = i5;
         i64 = i6;
         i57 = i15;
         while (1) {
          i62 = HEAP32[i69 + 52 >> 2] | 0;
          i63 = i55 >>> 0 < i62 >>> 0;
          if (i63 | i54) {
           i70 = i63 ? i56 : i55;
          } else {
           d60 = +HEAPF64[i49 >> 3];
           i70 = d60 - +HEAPF64[i55 >> 3] < +HEAPF64[i56 >> 3] - d60 ? i55 : i56;
          }
          if (i70 >>> 0 >= i1 >>> 0 | (HEAP32[i70 + 32 >> 2] | 0) != 0 | i70 >>> 0 < i62 >>> 0) {
           break L177;
          }
          if ((i70 | 0) == (i53 | 0)) {
           i71 = i69;
           i72 = i51 + 1 | 0;
           i73 = i53;
           i74 = i64;
           i75 = i57;
          } else {
           L194 : do {
            if ((i53 | 0) == 0) {
             i76 = i69;
            } else {
             if ((i51 | 0) != 1) {
              if (i64 >>> 0 < i14 >>> 0) {
               i77 = i64;
               i78 = i57;
              } else {
               i76 = i69;
               break;
              }
              while (1) {
               _memset(i77 | 0, HEAP8[i78 >> 0] | 0, i51 | 0) | 0;
               i62 = HEAP32[71600] | 0;
               i63 = HEAP32[i62 + 136 >> 2] | 0;
               i77 = i77 + i63 | 0;
               if (!(i77 >>> 0 < i14 >>> 0)) {
                i76 = i62;
                break L194;
               } else {
                i78 = i78 + i63 | 0;
               }
              }
             }
             i63 = HEAP32[i69 + 136 >> 2] | 0;
             if (i64 >>> 0 < i14 >>> 0) {
              i79 = i64;
              i80 = i57;
             } else {
              i76 = i69;
              break;
             }
             while (1) {
              HEAP8[i79 >> 0] = HEAP8[i80 >> 0] | 0;
              i79 = i79 + i63 | 0;
              if (!(i79 >>> 0 < i14 >>> 0)) {
               break;
              } else {
               i80 = i80 + i63 | 0;
              }
             }
             i76 = HEAP32[71600] | 0;
            }
           } while (0);
           i63 = HEAP32[i76 + 36 >> 2] | 0;
           i62 = HEAP32[i76 + 52 >> 2] | 0;
           i71 = i76;
           i72 = 1;
           i73 = i70;
           i74 = i63 + ((i49 - i62 | 0) / 40 | 0) | 0;
           i75 = i63 + ((i70 - i62 | 0) / 40 | 0) | 0;
          }
          HEAP32[i50 >> 2] = 0;
          HEAPF64[i49 >> 3] = +HEAPF64[i70 >> 3];
          i62 = i49;
          i49 = i49 + 40 | 0;
          i50 = i62 + 72 | 0;
          if (!((HEAP32[i50 >> 2] | 0) != 0 & i49 >>> 0 < i1 >>> 0)) {
           break;
          } else {
           i69 = i71;
           i51 = i72;
           i53 = i73;
           i64 = i74;
           i57 = i75;
          }
         }
         if ((i73 | 0) != 0) {
          i57 = i74 >>> 0 < i14 >>> 0;
          if ((i72 | 0) == 1) {
           if (i57) {
            i81 = i74;
            i82 = i75;
           } else {
            i83 = i71;
            i84 = 1;
            i85 = i49;
            i86 = i74;
            i87 = i75;
            break;
           }
           while (1) {
            HEAP8[i81 >> 0] = HEAP8[i82 >> 0] | 0;
            i64 = HEAP32[71600] | 0;
            i53 = HEAP32[i64 + 136 >> 2] | 0;
            i51 = i81 + i53 | 0;
            i50 = i82 + i53 | 0;
            if (i51 >>> 0 < i14 >>> 0) {
             i81 = i51;
             i82 = i50;
            } else {
             i83 = i64;
             i84 = 1;
             i85 = i49;
             i86 = i51;
             i87 = i50;
             break;
            }
           }
          } else {
           if (i57) {
            i88 = i74;
            i89 = i75;
           } else {
            i83 = i71;
            i84 = i72;
            i85 = i49;
            i86 = i74;
            i87 = i75;
            break;
           }
           while (1) {
            _memset(i88 | 0, HEAP8[i89 >> 0] | 0, i72 | 0) | 0;
            i50 = HEAP32[71600] | 0;
            i51 = HEAP32[i50 + 136 >> 2] | 0;
            i64 = i88 + i51 | 0;
            i53 = i89 + i51 | 0;
            if (i64 >>> 0 < i14 >>> 0) {
             i88 = i64;
             i89 = i53;
            } else {
             i83 = i50;
             i84 = i72;
             i85 = i49;
             i86 = i64;
             i87 = i53;
             break;
            }
           }
          }
         } else {
          i83 = i71;
          i84 = i72;
          i85 = i49;
          i86 = i74;
          i87 = i75;
         }
        } else {
         i83 = i8;
         i84 = i7;
         i85 = i5;
         i86 = i6;
         i87 = i15;
        }
       } else {
        i83 = i8;
        i84 = i7;
        i85 = i5;
        i86 = i6;
        i87 = i15;
       }
      } while (0);
      i5 = i85 + 40 | 0;
      if (!(i5 >>> 0 < i1 >>> 0)) {
       break L23;
      } else {
       i8 = i83;
       i7 = i84;
       i6 = i86;
       i15 = i87;
      }
     }
     _init_tables(i69);
     _puts(289864) | 0;
    }
   }
  } else {
   HEAP32[i4 + 72 >> 2] = 286576;
   i15 = HEAP32[71600] | 0;
   i6 = i15 + 68 | 0;
   HEAP32[i6 >> 2] = 0;
   HEAP32[i15 + 64 >> 2] = 0;
   i7 = HEAP32[i15 + 56 >> 2] | 0;
   i8 = HEAP32[i15 + 132 >> 2] | 0;
   i1 = i7 + (i8 * 40 | 0) | 0;
   if ((i8 | 0) > 0) {
    i8 = 0;
    i5 = i7;
    while (1) {
     if ((HEAP32[i5 + 20 >> 2] | 0) == 0) {
      i90 = i8;
     } else {
      i7 = i8 + 1 | 0;
      HEAP32[i6 >> 2] = i7;
      i90 = i7;
     }
     i5 = i5 + 40 | 0;
     if (!(i5 >>> 0 < i1 >>> 0)) {
      break;
     } else {
      i8 = i90;
     }
    }
   }
   i8 = HEAP32[i15 + 28 >> 2] | 0;
   if ((i8 | 0) == 0) {
    i91 = i15;
    i92 = 0;
   } else {
    i1 = _emscripten_realloc_async_context(4) | 0;
    FUNCTION_TABLE_v[i8 & 63]();
    if (___async) {
     HEAP32[i1 >> 2] = 220;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i1 >> 2] = 220;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   L38 : while (1) {
    i1 = HEAP32[i91 + 56 >> 2] | 0;
    i8 = HEAP32[i91 + 132 >> 2] | 0;
    i93 = i1 + (i8 * 40 | 0) | 0;
    if ((i92 | 0) < (i8 | 0)) {
     i8 = Math_imul(HEAP32[i91 + 136 >> 2] | 0, i92) | 0;
     i5 = i91;
     i94 = i1 + (i92 * 40 | 0) | 0;
     i95 = (HEAP32[i91 + 36 >> 2] | 0) + i8 | 0;
     while (1) {
      if ((HEAP32[i94 + 20 >> 2] | 0) != 0) {
       i61 = 108;
       break L38;
      }
      i8 = i94 + 80 | 0;
      if (i8 >>> 0 < i93 >>> 0) {
       i94 = i8;
       i95 = i95 + (HEAP32[i5 + 136 >> 2] << 1) | 0;
      } else {
       i96 = i5;
       break;
      }
     }
    } else {
     i96 = i91;
    }
    i5 = i92 + 1 | 0;
    if ((i5 | 0) < 2) {
     i91 = i96;
     i92 = i5;
    } else {
     break;
    }
   }
   if ((i61 | 0) == 108) {
    i15 = _emscripten_realloc_async_context(20) | 0;
    _calcline(i95, i94);
    if (___async) {
     HEAP32[i15 >> 2] = 221;
     i97 = i15 + 4 | 0;
     HEAP32[i97 >> 2] = i92;
     i98 = i15 + 8 | 0;
     HEAP32[i98 >> 2] = i95;
     i99 = i15 + 12 | 0;
     HEAP32[i99 >> 2] = i94;
     i100 = i15 + 16 | 0;
     HEAP32[i100 >> 2] = i93;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i15 >> 2] = 221;
    i97 = i15 + 4 | 0;
    HEAP32[i97 >> 2] = i92;
    i98 = i15 + 8 | 0;
    HEAP32[i98 >> 2] = i95;
    i99 = i15 + 12 | 0;
    HEAP32[i99 >> 2] = i94;
    i100 = i15 + 16 | 0;
    HEAP32[i100 >> 2] = i93;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   HEAP32[i96 + 68 >> 2] = 0;
   HEAP32[i96 + 72 >> 2] = 286600;
   i15 = HEAP32[71600] | 0;
   HEAP32[i15 + 64 >> 2] = 0;
   i5 = HEAP32[i15 + 52 >> 2] | 0;
   i8 = HEAP32[i15 + 128 >> 2] | 0;
   i1 = i5 + (i8 * 40 | 0) | 0;
   if ((i8 | 0) > 0) {
    i6 = i15 + 68 | 0;
    i7 = i5;
    do {
     if ((HEAP32[i7 + 20 >> 2] | 0) != 0) {
      HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
     }
     i7 = i7 + 40 | 0;
    } while (i7 >>> 0 < i1 >>> 0);
    i101 = i5;
    i102 = i8;
    i103 = i15;
    i104 = 0;
   } else {
    i101 = i5;
    i102 = i8;
    i103 = i15;
    i104 = 0;
   }
   L60 : while (1) {
    i105 = i101 + (i102 * 40 | 0) | 0;
    if ((i104 | 0) < (i102 | 0)) {
     i1 = i103;
     i106 = i101 + (i104 * 40 | 0) | 0;
     i107 = (HEAP32[i103 + 36 >> 2] | 0) + i104 | 0;
     while (1) {
      if ((HEAP32[i106 + 20 >> 2] | 0) != 0) {
       i61 = 121;
       break L60;
      }
      i7 = i106 + 80 | 0;
      if (i7 >>> 0 < i105 >>> 0) {
       i106 = i7;
       i107 = i107 + 2 | 0;
      } else {
       i108 = i1;
       break;
      }
     }
    } else {
     i108 = i103;
    }
    i1 = i104 + 1 | 0;
    if ((i1 | 0) >= 2) {
     break;
    }
    i101 = HEAP32[i108 + 52 >> 2] | 0;
    i102 = HEAP32[i108 + 128 >> 2] | 0;
    i103 = i108;
    i104 = i1;
   }
   if ((i61 | 0) == 121) {
    i15 = _emscripten_realloc_async_context(20) | 0;
    _calccolumn(i107, i106);
    if (___async) {
     HEAP32[i15 >> 2] = 223;
     i109 = i15 + 4 | 0;
     HEAP32[i109 >> 2] = i104;
     i110 = i15 + 8 | 0;
     HEAP32[i110 >> 2] = i107;
     i111 = i15 + 12 | 0;
     HEAP32[i111 >> 2] = i106;
     i112 = i15 + 16 | 0;
     HEAP32[i112 >> 2] = i105;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i15 >> 2] = 223;
    i109 = i15 + 4 | 0;
    HEAP32[i109 >> 2] = i104;
    i110 = i15 + 8 | 0;
    HEAP32[i110 >> 2] = i107;
    i111 = i15 + 12 | 0;
    HEAP32[i111 >> 2] = i106;
    i112 = i15 + 16 | 0;
    HEAP32[i112 >> 2] = i105;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   if ((HEAP32[i108 + 140 >> 2] | 0) != 0) {
    _init_tables(i108);
    STACKTOP = i2;
    return;
   }
   i15 = HEAP32[i108 + 28 >> 2] | 0;
   if ((i15 | 0) == 0) {
    HEAP32[i108 + 64 >> 2] = 0;
    HEAP32[i108 + 68 >> 2] = 0;
    HEAP32[i108 + 72 >> 2] = 286552;
    _dosymetry();
    break;
   }
   i8 = _emscripten_realloc_async_context(4) | 0;
   FUNCTION_TABLE_v[i15 & 63]();
   if (___async) {
    HEAP32[i8 >> 2] = 225;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   ___async_unwind = 0;
   HEAP32[i8 >> 2] = 225;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
 } while (0);
 i108 = HEAP32[71600] | 0;
 i105 = HEAP32[i108 + 28 >> 2] | 0;
 if ((i105 | 0) != 0) {
  i112 = _emscripten_realloc_async_context(4) | 0;
  FUNCTION_TABLE_v[i105 & 63]();
  if (___async) {
   HEAP32[i112 >> 2] = 226;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i112 >> 2] = 226;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i112 = HEAP32[i108 + 52 >> 2] | 0;
 i105 = HEAP32[i108 + 128 >> 2] | 0;
 i106 = i112 + (i105 * 40 | 0) | 0;
 if ((i105 | 0) > 0) {
  i105 = HEAP32[i108 + 16 >> 2] | 0;
  i111 = i112;
  while (1) {
   HEAPF64[i105 >> 3] = +HEAPF64[i111 >> 3];
   i111 = i111 + 40 | 0;
   if (!(i111 >>> 0 < i106 >>> 0)) {
    break;
   } else {
    i105 = i105 + 8 | 0;
   }
  }
 }
 i105 = HEAP32[i108 + 56 >> 2] | 0;
 i106 = HEAP32[i108 + 132 >> 2] | 0;
 i111 = i105 + (i106 * 40 | 0) | 0;
 if ((i106 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i106 = HEAP32[i108 + 20 >> 2] | 0;
 i108 = i105;
 while (1) {
  HEAPF64[i106 >> 3] = +HEAPF64[i108 >> 3];
  i108 = i108 + 40 | 0;
  if (!(i108 >>> 0 < i111 >>> 0)) {
   break;
  } else {
   i106 = i106 + 8 | 0;
  }
 }
 STACKTOP = i2;
 return;
}
function _do_fractal__async_cb135(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, d60 = 0.0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[(HEAP32[71600] | 0) + 72 >> 2] = 286480;
 i1 = HEAP32[71600] | 0;
 _mkrealloc_table(HEAP32[i1 + 20 >> 2] | 0, HEAP32[i1 + 56 >> 2] | 0, HEAP32[i1 + 132 >> 2] | 0, +HEAPF64[i1 + 1208 >> 3], +HEAPF64[i1 + 1200 >> 3], +HEAPF64[35802]);
 i1 = HEAP32[71600] | 0;
 i4 = HEAP32[i1 + 28 >> 2] | 0;
 if ((i4 | 0) != 0) {
  i5 = _emscripten_realloc_async_context(8) | 0;
  FUNCTION_TABLE_v[i4 & 63]();
  if (___async) {
   HEAP32[i5 >> 2] = 212;
   i6 = i5 + 4 | 0;
   HEAP32[i6 >> 2] = i3;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i5 >> 2] = 212;
  i6 = i5 + 4 | 0;
  HEAP32[i6 >> 2] = i3;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 HEAP32[i1 + 72 >> 2] = 286504;
 _moveoldpoints();
 i1 = HEAP32[71600] | 0;
 i6 = HEAP32[i1 + 28 >> 2] | 0;
 if ((i6 | 0) != 0) {
  i5 = _emscripten_realloc_async_context(8) | 0;
  FUNCTION_TABLE_v[i6 & 63]();
  if (___async) {
   HEAP32[i5 >> 2] = 214;
   i7 = i5 + 4 | 0;
   HEAP32[i7 >> 2] = i3;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i5 >> 2] = 214;
  i7 = i5 + 4 | 0;
  HEAP32[i7 >> 2] = i3;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 HEAP32[i1 + 72 >> 2] = 286528;
 i1 = HEAP32[71600] | 0;
 L17 : do {
  if ((i3 | 0) != 0) {
   i7 = i1 + 128 | 0;
   i5 = _malloc((HEAP32[i1 + 132 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) << 2) | 0;
   i6 = (HEAP32[i1 + 52 >> 2] | 0) + ((HEAP32[i7 >> 2] | 0) * 40 | 0) | 0;
   HEAP32[i1 + 72 >> 2] = 286624;
   i7 = HEAP32[71600] | 0;
   i4 = HEAP32[i7 + 52 >> 2] | 0;
   if (i4 >>> 0 < i6 >>> 0) {
    i8 = 0;
    i9 = i4;
    do {
     i8 = ((HEAP32[i9 + 32 >> 2] | 0) != 0 & 1) + i8 | 0;
     i9 = i9 + 40 | 0;
    } while (i9 >>> 0 < i6 >>> 0);
    i10 = i4;
    i11 = i5;
    while (1) {
     if ((HEAP32[i10 + 20 >> 2] | 0) == 0) {
      i12 = i10;
      i13 = i11;
     } else {
      if (i10 >>> 0 < i6 >>> 0) {
       i4 = i10;
       i9 = i11;
       while (1) {
        i14 = i9 + 4 | 0;
        HEAP32[i9 >> 2] = i4;
        i15 = i4 + 40 | 0;
        if (i15 >>> 0 < i6 >>> 0 & (HEAP32[i4 + 60 >> 2] | 0) != 0) {
         i4 = i15;
         i9 = i14;
        } else {
         i16 = i15;
         i17 = i14;
         break;
        }
       }
      } else {
       i16 = i10;
       i17 = i11;
      }
      i9 = (i16 | 0) == (i6 | 0) ? i16 + -40 | 0 : i16;
      _addprices(i10, i9);
      i12 = i9;
      i13 = i17;
     }
     i10 = i12 + 40 | 0;
     if (!(i10 >>> 0 < i6 >>> 0)) {
      break;
     } else {
      i11 = i13;
     }
    }
    i18 = HEAP32[71600] | 0;
    i19 = i8;
    i20 = i13;
   } else {
    i18 = i7;
    i19 = 0;
    i20 = i5;
   }
   i9 = HEAP32[i18 + 56 >> 2] | 0;
   i4 = HEAP32[i18 + 132 >> 2] | 0;
   i14 = i9 + (i4 * 40 | 0) | 0;
   if ((i4 | 0) > 0) {
    i4 = 0;
    i15 = i9;
    do {
     i4 = ((HEAP32[i15 + 32 >> 2] | 0) != 0 & 1) + i4 | 0;
     i15 = i15 + 40 | 0;
    } while (i15 >>> 0 < i14 >>> 0);
    i21 = i9;
    i22 = i20;
    while (1) {
     if ((HEAP32[i21 + 20 >> 2] | 0) == 0) {
      i23 = i21;
      i24 = i22;
     } else {
      if (i21 >>> 0 < i14 >>> 0) {
       i9 = i21;
       i15 = i22;
       while (1) {
        i7 = i15 + 4 | 0;
        HEAP32[i15 >> 2] = i9;
        i8 = i9 + 40 | 0;
        if (i8 >>> 0 < i14 >>> 0 & (HEAP32[i9 + 60 >> 2] | 0) != 0) {
         i9 = i8;
         i15 = i7;
        } else {
         i25 = i8;
         i26 = i7;
         break;
        }
       }
      } else {
       i25 = i21;
       i26 = i22;
      }
      i15 = (i25 | 0) == (i14 | 0) ? i25 + -40 | 0 : i25;
      _addprices(i21, i15);
      i23 = i15;
      i24 = i26;
     }
     i21 = i23 + 40 | 0;
     if (!(i21 >>> 0 < i14 >>> 0)) {
      i27 = i4;
      i28 = i24;
      break;
     } else {
      i22 = i24;
     }
    }
   } else {
    i27 = 0;
    i28 = i20;
   }
   i4 = i28 - i5 >> 2;
   _qsort(i5, i4, 4, 3);
   i14 = HEAP32[71600] | 0;
   HEAP32[i14 + 68 >> 2] = i4;
   HEAP32[i14 + 112 >> 2] = 1;
   if (i5 >>> 0 < i28 >>> 0 ? (HEAP32[i14 + 140 >> 2] | 0) == 0 : 0) {
    i4 = HEAP32[i5 >> 2] | 0;
    i15 = i14 + 64 | 0;
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
    if ((i19 | 0) < ((HEAP32[i14 + 128 >> 2] | 0) + -2 | 0) ? (i27 | 0) < ((HEAP32[i14 + 132 >> 2] | 0) + -2 | 0) : 0) {
     HEAP32[i14 + 116 >> 2] = 1;
    }
    i15 = HEAP32[i14 + 28 >> 2] | 0;
    if ((i15 | 0) != 0) {
     i9 = _emscripten_realloc_async_context(32) | 0;
     FUNCTION_TABLE_v[i15 & 63]();
     if (___async) {
      HEAP32[i9 >> 2] = 215;
      i29 = i9 + 4 | 0;
      HEAP32[i29 >> 2] = i4;
      i30 = i9 + 8 | 0;
      HEAP32[i30 >> 2] = i6;
      i31 = i9 + 12 | 0;
      HEAP32[i31 >> 2] = i5;
      i32 = i9 + 16 | 0;
      HEAP32[i32 >> 2] = i19;
      i33 = i9 + 20 | 0;
      HEAP32[i33 >> 2] = i27;
      i34 = i9 + 24 | 0;
      HEAP32[i34 >> 2] = i5;
      i35 = i9 + 28 | 0;
      HEAP32[i35 >> 2] = i28;
      i2 = STACKTOP;
      STACKTOP = i2;
      return;
     }
     ___async_unwind = 0;
     HEAP32[i9 >> 2] = 215;
     i29 = i9 + 4 | 0;
     HEAP32[i29 >> 2] = i4;
     i30 = i9 + 8 | 0;
     HEAP32[i30 >> 2] = i6;
     i31 = i9 + 12 | 0;
     HEAP32[i31 >> 2] = i5;
     i32 = i9 + 16 | 0;
     HEAP32[i32 >> 2] = i19;
     i33 = i9 + 20 | 0;
     HEAP32[i33 >> 2] = i27;
     i34 = i9 + 24 | 0;
     HEAP32[i34 >> 2] = i5;
     i35 = i9 + 28 | 0;
     HEAP32[i35 >> 2] = i28;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    i9 = HEAP32[i14 + 52 >> 2] | 0;
    i15 = HEAP32[i14 + 36 >> 2] | 0;
    if (i4 >>> 0 >= i9 >>> 0 & i4 >>> 0 < i6 >>> 0) {
     i7 = i19 + -1 | 0;
     i8 = _emscripten_realloc_async_context(28) | 0;
     _calccolumn(i15 + ((i4 - i9 | 0) / 40 | 0) | 0, i4);
     if (___async) {
      HEAP32[i8 >> 2] = 216;
      i36 = i8 + 4 | 0;
      HEAP32[i36 >> 2] = i5;
      i37 = i8 + 8 | 0;
      HEAP32[i37 >> 2] = i6;
      i38 = i8 + 12 | 0;
      HEAP32[i38 >> 2] = i28;
      i39 = i8 + 16 | 0;
      HEAP32[i39 >> 2] = i27;
      i40 = i8 + 20 | 0;
      HEAP32[i40 >> 2] = i7;
      i41 = i8 + 24 | 0;
      HEAP32[i41 >> 2] = i5;
      i2 = STACKTOP;
      STACKTOP = i2;
      return;
     }
     ___async_unwind = 0;
     HEAP32[i8 >> 2] = 216;
     i36 = i8 + 4 | 0;
     HEAP32[i36 >> 2] = i5;
     i37 = i8 + 8 | 0;
     HEAP32[i37 >> 2] = i6;
     i38 = i8 + 12 | 0;
     HEAP32[i38 >> 2] = i28;
     i39 = i8 + 16 | 0;
     HEAP32[i39 >> 2] = i27;
     i40 = i8 + 20 | 0;
     HEAP32[i40 >> 2] = i7;
     i41 = i8 + 24 | 0;
     HEAP32[i41 >> 2] = i5;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    } else {
     i8 = i15 + (Math_imul(HEAP32[i14 + 136 >> 2] | 0, (i4 - (HEAP32[i14 + 56 >> 2] | 0) | 0) / 40 | 0) | 0) | 0;
     i15 = i27 + -1 | 0;
     i7 = _emscripten_realloc_async_context(28) | 0;
     _calcline(i8, i4);
     if (___async) {
      HEAP32[i7 >> 2] = 217;
      i42 = i7 + 4 | 0;
      HEAP32[i42 >> 2] = i5;
      i43 = i7 + 8 | 0;
      HEAP32[i43 >> 2] = i6;
      i44 = i7 + 12 | 0;
      HEAP32[i44 >> 2] = i28;
      i45 = i7 + 16 | 0;
      HEAP32[i45 >> 2] = i15;
      i46 = i7 + 20 | 0;
      HEAP32[i46 >> 2] = i19;
      i47 = i7 + 24 | 0;
      HEAP32[i47 >> 2] = i5;
      i2 = STACKTOP;
      STACKTOP = i2;
      return;
     }
     ___async_unwind = 0;
     HEAP32[i7 >> 2] = 217;
     i42 = i7 + 4 | 0;
     HEAP32[i42 >> 2] = i5;
     i43 = i7 + 8 | 0;
     HEAP32[i43 >> 2] = i6;
     i44 = i7 + 12 | 0;
     HEAP32[i44 >> 2] = i28;
     i45 = i7 + 16 | 0;
     HEAP32[i45 >> 2] = i15;
     i46 = i7 + 20 | 0;
     HEAP32[i46 >> 2] = i19;
     i47 = i7 + 24 | 0;
     HEAP32[i47 >> 2] = i5;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
   }
   i7 = HEAP32[i14 + 28 >> 2] | 0;
   if ((i7 | 0) != 0) {
    i14 = _emscripten_realloc_async_context(8) | 0;
    FUNCTION_TABLE_v[i7 & 63]();
    if (___async) {
     HEAP32[i14 >> 2] = 218;
     i48 = i14 + 4 | 0;
     HEAP32[i48 >> 2] = i5;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i14 >> 2] = 218;
    i48 = i14 + 4 | 0;
    HEAP32[i48 >> 2] = i5;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   _free(i5);
   i14 = HEAP32[71600] | 0;
   HEAP32[i14 + 64 >> 2] = 0;
   HEAP32[i14 + 68 >> 2] = 0;
   HEAP32[i14 + 72 >> 2] = 286552;
   i14 = HEAP32[71600] | 0;
   HEAP32[i14 + 112 >> 2] = 0;
   i7 = HEAP32[i14 + 28 >> 2] | 0;
   if ((i7 | 0) != 0) {
    i14 = _emscripten_realloc_async_context(4) | 0;
    FUNCTION_TABLE_v[i7 & 63]();
    if (___async) {
     HEAP32[i14 >> 2] = 219;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i14 >> 2] = 219;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   _dosymetry();
   i14 = HEAP32[71600] | 0;
   if ((HEAP32[i14 + 140 >> 2] | 0) != 0) {
    HEAP32[i14 + 72 >> 2] = 286640;
    i14 = HEAP32[71600] | 0;
    i7 = HEAP32[i14 + 56 >> 2] | 0;
    i15 = HEAP32[i14 + 132 >> 2] | 0;
    i4 = i7 + (i15 * 40 | 0) | 0;
    do {
     if ((i15 | 0) > 0) {
      i8 = i7;
      L151 : while (1) {
       i9 = i8 + 32 | 0;
       L153 : do {
        if ((HEAP32[i9 >> 2] | 0) != 0) {
         i49 = HEAP32[71600] | 0;
         HEAP32[i49 + 120 >> 2] = 1;
         i50 = i8;
         do {
          i51 = i50;
          i50 = i50 + 40 | 0;
          i52 = i50 >>> 0 < i4 >>> 0;
         } while ((HEAP32[i51 + 72 >> 2] | 0) != 0 & i52);
         i51 = i8 + -40 | 0;
         if ((HEAP32[i9 >> 2] | 0) != 0 & i8 >>> 0 < i4 >>> 0) {
          i53 = i52 ^ 1;
          i54 = i49;
          i55 = i9;
          i56 = i8;
          while (1) {
           i57 = HEAP32[i54 + 56 >> 2] | 0;
           i58 = i51 >>> 0 < i57 >>> 0;
           if (i58 | i53) {
            i59 = i58 ? i50 : i51;
           } else {
            d60 = +HEAPF64[i56 >> 3];
            i59 = d60 - +HEAPF64[i51 >> 3] < +HEAPF64[i50 >> 3] - d60 ? i51 : i50;
           }
           if (i59 >>> 0 >= i4 >>> 0 | (HEAP32[i59 + 32 >> 2] | 0) != 0 | i59 >>> 0 < i57 >>> 0) {
            i61 = 61;
            break L151;
           }
           i58 = HEAP32[i54 + 36 >> 2] | 0;
           i62 = HEAP32[i54 + 136 >> 2] | 0;
           i63 = i57;
           i57 = i58 + (Math_imul((i56 - i63 | 0) / 40 | 0, i62) | 0) | 0;
           i64 = i58 + (Math_imul((i59 - i63 | 0) / 40 | 0, i62) | 0) | 0;
           _memcpy(i57 | 0, i64 | 0, HEAP32[i54 + 128 >> 2] | 0) | 0;
           HEAP32[i55 >> 2] = 0;
           HEAPF64[i56 >> 3] = +HEAPF64[i59 >> 3];
           i64 = i56 + 40 | 0;
           i57 = i56 + 72 | 0;
           if (!((HEAP32[i57 >> 2] | 0) != 0 & i64 >>> 0 < i4 >>> 0)) {
            i65 = i64;
            break L153;
           }
           i54 = HEAP32[71600] | 0;
           i55 = i57;
           i56 = i64;
          }
         } else {
          i65 = i8;
         }
        } else {
         i65 = i8;
        }
       } while (0);
       i8 = i65 + 40 | 0;
       if (!(i8 >>> 0 < i4 >>> 0)) {
        i61 = 65;
        break;
       }
      }
      if ((i61 | 0) == 61) {
       _puts(289864) | 0;
       _init_tables(HEAP32[71600] | 0);
       break L17;
      } else if ((i61 | 0) == 65) {
       i8 = HEAP32[71600] | 0;
       i66 = i8;
       i67 = HEAP32[i8 + 132 >> 2] | 0;
       break;
      }
     } else {
      i66 = i14;
      i67 = i15;
     }
    } while (0);
    i15 = HEAP32[i66 + 36 >> 2] | 0;
    i14 = i15 + (Math_imul(HEAP32[i66 + 136 >> 2] | 0, i67) | 0) | 0;
    i4 = HEAP32[i66 + 52 >> 2] | 0;
    i7 = HEAP32[i66 + 128 >> 2] | 0;
    i5 = i4 + (i7 * 40 | 0) | 0;
    if ((i7 | 0) > 0) {
     i7 = i66;
     i6 = 0;
     i8 = i4;
     i4 = i15;
     i15 = 0;
     L171 : while (1) {
      i9 = i8 + 32 | 0;
      do {
       if ((HEAP32[i9 >> 2] | 0) != 0) {
        HEAP32[i7 + 120 >> 2] = 1;
        i56 = i8;
        while (1) {
         i68 = i56 >>> 0 < i5 >>> 0;
         if ((HEAP32[i56 + 32 >> 2] | 0) != 0 & i68) {
          i56 = i56 + 40 | 0;
         } else {
          break;
         }
        }
        i55 = i8 + -40 | 0;
        if ((HEAP32[i9 >> 2] | 0) != 0 & i8 >>> 0 < i5 >>> 0) {
         i54 = i68 ^ 1;
         i69 = i7;
         i50 = i9;
         i51 = i6;
         i53 = 0;
         i49 = i8;
         i64 = i4;
         i57 = i15;
         while (1) {
          i62 = HEAP32[i69 + 52 >> 2] | 0;
          i63 = i55 >>> 0 < i62 >>> 0;
          if (i63 | i54) {
           i70 = i63 ? i56 : i55;
          } else {
           d60 = +HEAPF64[i49 >> 3];
           i70 = d60 - +HEAPF64[i55 >> 3] < +HEAPF64[i56 >> 3] - d60 ? i55 : i56;
          }
          if (i70 >>> 0 >= i5 >>> 0 | (HEAP32[i70 + 32 >> 2] | 0) != 0 | i70 >>> 0 < i62 >>> 0) {
           break L171;
          }
          if ((i70 | 0) == (i53 | 0)) {
           i71 = i69;
           i72 = i51 + 1 | 0;
           i73 = i53;
           i74 = i64;
           i75 = i57;
          } else {
           L187 : do {
            if ((i53 | 0) == 0) {
             i76 = i69;
            } else {
             if ((i51 | 0) != 1) {
              if (i64 >>> 0 < i14 >>> 0) {
               i77 = i64;
               i78 = i57;
              } else {
               i76 = i69;
               break;
              }
              while (1) {
               _memset(i77 | 0, HEAP8[i78 >> 0] | 0, i51 | 0) | 0;
               i62 = HEAP32[71600] | 0;
               i63 = HEAP32[i62 + 136 >> 2] | 0;
               i77 = i77 + i63 | 0;
               if (!(i77 >>> 0 < i14 >>> 0)) {
                i76 = i62;
                break L187;
               } else {
                i78 = i78 + i63 | 0;
               }
              }
             }
             i63 = HEAP32[i69 + 136 >> 2] | 0;
             if (i64 >>> 0 < i14 >>> 0) {
              i79 = i64;
              i80 = i57;
             } else {
              i76 = i69;
              break;
             }
             while (1) {
              HEAP8[i79 >> 0] = HEAP8[i80 >> 0] | 0;
              i79 = i79 + i63 | 0;
              if (!(i79 >>> 0 < i14 >>> 0)) {
               break;
              } else {
               i80 = i80 + i63 | 0;
              }
             }
             i76 = HEAP32[71600] | 0;
            }
           } while (0);
           i63 = HEAP32[i76 + 36 >> 2] | 0;
           i62 = HEAP32[i76 + 52 >> 2] | 0;
           i71 = i76;
           i72 = 1;
           i73 = i70;
           i74 = i63 + ((i49 - i62 | 0) / 40 | 0) | 0;
           i75 = i63 + ((i70 - i62 | 0) / 40 | 0) | 0;
          }
          HEAP32[i50 >> 2] = 0;
          HEAPF64[i49 >> 3] = +HEAPF64[i70 >> 3];
          i62 = i49;
          i49 = i49 + 40 | 0;
          i50 = i62 + 72 | 0;
          if (!((HEAP32[i50 >> 2] | 0) != 0 & i49 >>> 0 < i5 >>> 0)) {
           break;
          } else {
           i69 = i71;
           i51 = i72;
           i53 = i73;
           i64 = i74;
           i57 = i75;
          }
         }
         if ((i73 | 0) != 0) {
          i57 = i74 >>> 0 < i14 >>> 0;
          if ((i72 | 0) == 1) {
           if (i57) {
            i81 = i74;
            i82 = i75;
           } else {
            i83 = i71;
            i84 = 1;
            i85 = i49;
            i86 = i74;
            i87 = i75;
            break;
           }
           while (1) {
            HEAP8[i81 >> 0] = HEAP8[i82 >> 0] | 0;
            i64 = HEAP32[71600] | 0;
            i53 = HEAP32[i64 + 136 >> 2] | 0;
            i51 = i81 + i53 | 0;
            i50 = i82 + i53 | 0;
            if (i51 >>> 0 < i14 >>> 0) {
             i81 = i51;
             i82 = i50;
            } else {
             i83 = i64;
             i84 = 1;
             i85 = i49;
             i86 = i51;
             i87 = i50;
             break;
            }
           }
          } else {
           if (i57) {
            i88 = i74;
            i89 = i75;
           } else {
            i83 = i71;
            i84 = i72;
            i85 = i49;
            i86 = i74;
            i87 = i75;
            break;
           }
           while (1) {
            _memset(i88 | 0, HEAP8[i89 >> 0] | 0, i72 | 0) | 0;
            i50 = HEAP32[71600] | 0;
            i51 = HEAP32[i50 + 136 >> 2] | 0;
            i64 = i88 + i51 | 0;
            i53 = i89 + i51 | 0;
            if (i64 >>> 0 < i14 >>> 0) {
             i88 = i64;
             i89 = i53;
            } else {
             i83 = i50;
             i84 = i72;
             i85 = i49;
             i86 = i64;
             i87 = i53;
             break;
            }
           }
          }
         } else {
          i83 = i71;
          i84 = i72;
          i85 = i49;
          i86 = i74;
          i87 = i75;
         }
        } else {
         i83 = i7;
         i84 = i6;
         i85 = i8;
         i86 = i4;
         i87 = i15;
        }
       } else {
        i83 = i7;
        i84 = i6;
        i85 = i8;
        i86 = i4;
        i87 = i15;
       }
      } while (0);
      i8 = i85 + 40 | 0;
      if (!(i8 >>> 0 < i5 >>> 0)) {
       break L17;
      } else {
       i7 = i83;
       i6 = i84;
       i4 = i86;
       i15 = i87;
      }
     }
     _init_tables(i69);
     _puts(289864) | 0;
    }
   }
  } else {
   HEAP32[i1 + 72 >> 2] = 286576;
   i15 = HEAP32[71600] | 0;
   i4 = i15 + 68 | 0;
   HEAP32[i4 >> 2] = 0;
   HEAP32[i15 + 64 >> 2] = 0;
   i6 = HEAP32[i15 + 56 >> 2] | 0;
   i7 = HEAP32[i15 + 132 >> 2] | 0;
   i5 = i6 + (i7 * 40 | 0) | 0;
   if ((i7 | 0) > 0) {
    i7 = 0;
    i8 = i6;
    while (1) {
     if ((HEAP32[i8 + 20 >> 2] | 0) == 0) {
      i90 = i7;
     } else {
      i6 = i7 + 1 | 0;
      HEAP32[i4 >> 2] = i6;
      i90 = i6;
     }
     i8 = i8 + 40 | 0;
     if (!(i8 >>> 0 < i5 >>> 0)) {
      break;
     } else {
      i7 = i90;
     }
    }
   }
   i7 = HEAP32[i15 + 28 >> 2] | 0;
   if ((i7 | 0) == 0) {
    i91 = i15;
    i92 = 0;
   } else {
    i5 = _emscripten_realloc_async_context(4) | 0;
    FUNCTION_TABLE_v[i7 & 63]();
    if (___async) {
     HEAP32[i5 >> 2] = 220;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i5 >> 2] = 220;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   L32 : while (1) {
    i5 = HEAP32[i91 + 56 >> 2] | 0;
    i7 = HEAP32[i91 + 132 >> 2] | 0;
    i93 = i5 + (i7 * 40 | 0) | 0;
    if ((i92 | 0) < (i7 | 0)) {
     i7 = Math_imul(HEAP32[i91 + 136 >> 2] | 0, i92) | 0;
     i8 = i91;
     i94 = i5 + (i92 * 40 | 0) | 0;
     i95 = (HEAP32[i91 + 36 >> 2] | 0) + i7 | 0;
     while (1) {
      if ((HEAP32[i94 + 20 >> 2] | 0) != 0) {
       i61 = 105;
       break L32;
      }
      i7 = i94 + 80 | 0;
      if (i7 >>> 0 < i93 >>> 0) {
       i94 = i7;
       i95 = i95 + (HEAP32[i8 + 136 >> 2] << 1) | 0;
      } else {
       i96 = i8;
       break;
      }
     }
    } else {
     i96 = i91;
    }
    i8 = i92 + 1 | 0;
    if ((i8 | 0) < 2) {
     i91 = i96;
     i92 = i8;
    } else {
     break;
    }
   }
   if ((i61 | 0) == 105) {
    i15 = _emscripten_realloc_async_context(20) | 0;
    _calcline(i95, i94);
    if (___async) {
     HEAP32[i15 >> 2] = 221;
     i97 = i15 + 4 | 0;
     HEAP32[i97 >> 2] = i92;
     i98 = i15 + 8 | 0;
     HEAP32[i98 >> 2] = i95;
     i99 = i15 + 12 | 0;
     HEAP32[i99 >> 2] = i94;
     i100 = i15 + 16 | 0;
     HEAP32[i100 >> 2] = i93;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i15 >> 2] = 221;
    i97 = i15 + 4 | 0;
    HEAP32[i97 >> 2] = i92;
    i98 = i15 + 8 | 0;
    HEAP32[i98 >> 2] = i95;
    i99 = i15 + 12 | 0;
    HEAP32[i99 >> 2] = i94;
    i100 = i15 + 16 | 0;
    HEAP32[i100 >> 2] = i93;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   HEAP32[i96 + 68 >> 2] = 0;
   HEAP32[i96 + 72 >> 2] = 286600;
   i15 = HEAP32[71600] | 0;
   HEAP32[i15 + 64 >> 2] = 0;
   i8 = HEAP32[i15 + 52 >> 2] | 0;
   i7 = HEAP32[i15 + 128 >> 2] | 0;
   i5 = i8 + (i7 * 40 | 0) | 0;
   if ((i7 | 0) > 0) {
    i4 = i15 + 68 | 0;
    i6 = i8;
    do {
     if ((HEAP32[i6 + 20 >> 2] | 0) != 0) {
      HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
     }
     i6 = i6 + 40 | 0;
    } while (i6 >>> 0 < i5 >>> 0);
    i101 = i8;
    i102 = i7;
    i103 = i15;
    i104 = 0;
   } else {
    i101 = i8;
    i102 = i7;
    i103 = i15;
    i104 = 0;
   }
   L54 : while (1) {
    i105 = i101 + (i102 * 40 | 0) | 0;
    if ((i104 | 0) < (i102 | 0)) {
     i5 = i103;
     i106 = i101 + (i104 * 40 | 0) | 0;
     i107 = (HEAP32[i103 + 36 >> 2] | 0) + i104 | 0;
     while (1) {
      if ((HEAP32[i106 + 20 >> 2] | 0) != 0) {
       i61 = 118;
       break L54;
      }
      i6 = i106 + 80 | 0;
      if (i6 >>> 0 < i105 >>> 0) {
       i106 = i6;
       i107 = i107 + 2 | 0;
      } else {
       i108 = i5;
       break;
      }
     }
    } else {
     i108 = i103;
    }
    i5 = i104 + 1 | 0;
    if ((i5 | 0) >= 2) {
     break;
    }
    i101 = HEAP32[i108 + 52 >> 2] | 0;
    i102 = HEAP32[i108 + 128 >> 2] | 0;
    i103 = i108;
    i104 = i5;
   }
   if ((i61 | 0) == 118) {
    i15 = _emscripten_realloc_async_context(20) | 0;
    _calccolumn(i107, i106);
    if (___async) {
     HEAP32[i15 >> 2] = 223;
     i109 = i15 + 4 | 0;
     HEAP32[i109 >> 2] = i104;
     i110 = i15 + 8 | 0;
     HEAP32[i110 >> 2] = i107;
     i111 = i15 + 12 | 0;
     HEAP32[i111 >> 2] = i106;
     i112 = i15 + 16 | 0;
     HEAP32[i112 >> 2] = i105;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i15 >> 2] = 223;
    i109 = i15 + 4 | 0;
    HEAP32[i109 >> 2] = i104;
    i110 = i15 + 8 | 0;
    HEAP32[i110 >> 2] = i107;
    i111 = i15 + 12 | 0;
    HEAP32[i111 >> 2] = i106;
    i112 = i15 + 16 | 0;
    HEAP32[i112 >> 2] = i105;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   if ((HEAP32[i108 + 140 >> 2] | 0) != 0) {
    _init_tables(i108);
    STACKTOP = i2;
    return;
   }
   i15 = HEAP32[i108 + 28 >> 2] | 0;
   if ((i15 | 0) == 0) {
    HEAP32[i108 + 64 >> 2] = 0;
    HEAP32[i108 + 68 >> 2] = 0;
    HEAP32[i108 + 72 >> 2] = 286552;
    _dosymetry();
    break;
   }
   i7 = _emscripten_realloc_async_context(4) | 0;
   FUNCTION_TABLE_v[i15 & 63]();
   if (___async) {
    HEAP32[i7 >> 2] = 225;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   ___async_unwind = 0;
   HEAP32[i7 >> 2] = 225;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
 } while (0);
 i108 = HEAP32[71600] | 0;
 i105 = HEAP32[i108 + 28 >> 2] | 0;
 if ((i105 | 0) != 0) {
  i112 = _emscripten_realloc_async_context(4) | 0;
  FUNCTION_TABLE_v[i105 & 63]();
  if (___async) {
   HEAP32[i112 >> 2] = 226;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i112 >> 2] = 226;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i112 = HEAP32[i108 + 52 >> 2] | 0;
 i105 = HEAP32[i108 + 128 >> 2] | 0;
 i106 = i112 + (i105 * 40 | 0) | 0;
 if ((i105 | 0) > 0) {
  i105 = HEAP32[i108 + 16 >> 2] | 0;
  i111 = i112;
  while (1) {
   HEAPF64[i105 >> 3] = +HEAPF64[i111 >> 3];
   i111 = i111 + 40 | 0;
   if (!(i111 >>> 0 < i106 >>> 0)) {
    break;
   } else {
    i105 = i105 + 8 | 0;
   }
  }
 }
 i105 = HEAP32[i108 + 56 >> 2] | 0;
 i106 = HEAP32[i108 + 132 >> 2] | 0;
 i111 = i105 + (i106 * 40 | 0) | 0;
 if ((i106 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i106 = HEAP32[i108 + 20 >> 2] | 0;
 i108 = i105;
 while (1) {
  HEAPF64[i106 >> 3] = +HEAPF64[i108 >> 3];
  i108 = i108 + 40 | 0;
  if (!(i108 >>> 0 < i111 >>> 0)) {
   break;
  } else {
   i106 = i106 + 8 | 0;
  }
 }
 STACKTOP = i2;
 return;
}
function _do_fractal__async_cb136(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, d60 = 0.0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i1 = HEAP32[71600] | 0;
 i4 = HEAP32[i1 + 28 >> 2] | 0;
 if ((i4 | 0) != 0) {
  i5 = _emscripten_realloc_async_context(8) | 0;
  FUNCTION_TABLE_v[i4 & 63]();
  if (___async) {
   HEAP32[i5 >> 2] = 213;
   i6 = i5 + 4 | 0;
   HEAP32[i6 >> 2] = i3;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i5 >> 2] = 213;
  i6 = i5 + 4 | 0;
  HEAP32[i6 >> 2] = i3;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 HEAP32[i1 + 72 >> 2] = 286504;
 _moveoldpoints();
 i1 = HEAP32[71600] | 0;
 i6 = HEAP32[i1 + 28 >> 2] | 0;
 if ((i6 | 0) != 0) {
  i5 = _emscripten_realloc_async_context(8) | 0;
  FUNCTION_TABLE_v[i6 & 63]();
  if (___async) {
   HEAP32[i5 >> 2] = 214;
   i7 = i5 + 4 | 0;
   HEAP32[i7 >> 2] = i3;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i5 >> 2] = 214;
  i7 = i5 + 4 | 0;
  HEAP32[i7 >> 2] = i3;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 HEAP32[i1 + 72 >> 2] = 286528;
 i1 = HEAP32[71600] | 0;
 L16 : do {
  if ((i3 | 0) != 0) {
   i7 = i1 + 128 | 0;
   i5 = _malloc((HEAP32[i1 + 132 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) << 2) | 0;
   i6 = (HEAP32[i1 + 52 >> 2] | 0) + ((HEAP32[i7 >> 2] | 0) * 40 | 0) | 0;
   HEAP32[i1 + 72 >> 2] = 286624;
   i7 = HEAP32[71600] | 0;
   i4 = HEAP32[i7 + 52 >> 2] | 0;
   if (i4 >>> 0 < i6 >>> 0) {
    i8 = 0;
    i9 = i4;
    do {
     i8 = ((HEAP32[i9 + 32 >> 2] | 0) != 0 & 1) + i8 | 0;
     i9 = i9 + 40 | 0;
    } while (i9 >>> 0 < i6 >>> 0);
    i10 = i4;
    i11 = i5;
    while (1) {
     if ((HEAP32[i10 + 20 >> 2] | 0) == 0) {
      i12 = i10;
      i13 = i11;
     } else {
      if (i10 >>> 0 < i6 >>> 0) {
       i4 = i10;
       i9 = i11;
       while (1) {
        i14 = i9 + 4 | 0;
        HEAP32[i9 >> 2] = i4;
        i15 = i4 + 40 | 0;
        if (i15 >>> 0 < i6 >>> 0 & (HEAP32[i4 + 60 >> 2] | 0) != 0) {
         i4 = i15;
         i9 = i14;
        } else {
         i16 = i15;
         i17 = i14;
         break;
        }
       }
      } else {
       i16 = i10;
       i17 = i11;
      }
      i9 = (i16 | 0) == (i6 | 0) ? i16 + -40 | 0 : i16;
      _addprices(i10, i9);
      i12 = i9;
      i13 = i17;
     }
     i10 = i12 + 40 | 0;
     if (!(i10 >>> 0 < i6 >>> 0)) {
      break;
     } else {
      i11 = i13;
     }
    }
    i18 = HEAP32[71600] | 0;
    i19 = i8;
    i20 = i13;
   } else {
    i18 = i7;
    i19 = 0;
    i20 = i5;
   }
   i9 = HEAP32[i18 + 56 >> 2] | 0;
   i4 = HEAP32[i18 + 132 >> 2] | 0;
   i14 = i9 + (i4 * 40 | 0) | 0;
   if ((i4 | 0) > 0) {
    i4 = 0;
    i15 = i9;
    do {
     i4 = ((HEAP32[i15 + 32 >> 2] | 0) != 0 & 1) + i4 | 0;
     i15 = i15 + 40 | 0;
    } while (i15 >>> 0 < i14 >>> 0);
    i21 = i9;
    i22 = i20;
    while (1) {
     if ((HEAP32[i21 + 20 >> 2] | 0) == 0) {
      i23 = i21;
      i24 = i22;
     } else {
      if (i21 >>> 0 < i14 >>> 0) {
       i9 = i21;
       i15 = i22;
       while (1) {
        i7 = i15 + 4 | 0;
        HEAP32[i15 >> 2] = i9;
        i8 = i9 + 40 | 0;
        if (i8 >>> 0 < i14 >>> 0 & (HEAP32[i9 + 60 >> 2] | 0) != 0) {
         i9 = i8;
         i15 = i7;
        } else {
         i25 = i8;
         i26 = i7;
         break;
        }
       }
      } else {
       i25 = i21;
       i26 = i22;
      }
      i15 = (i25 | 0) == (i14 | 0) ? i25 + -40 | 0 : i25;
      _addprices(i21, i15);
      i23 = i15;
      i24 = i26;
     }
     i21 = i23 + 40 | 0;
     if (!(i21 >>> 0 < i14 >>> 0)) {
      i27 = i4;
      i28 = i24;
      break;
     } else {
      i22 = i24;
     }
    }
   } else {
    i27 = 0;
    i28 = i20;
   }
   i4 = i28 - i5 >> 2;
   _qsort(i5, i4, 4, 3);
   i14 = HEAP32[71600] | 0;
   HEAP32[i14 + 68 >> 2] = i4;
   HEAP32[i14 + 112 >> 2] = 1;
   if (i5 >>> 0 < i28 >>> 0 ? (HEAP32[i14 + 140 >> 2] | 0) == 0 : 0) {
    i4 = HEAP32[i5 >> 2] | 0;
    i15 = i14 + 64 | 0;
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
    if ((i19 | 0) < ((HEAP32[i14 + 128 >> 2] | 0) + -2 | 0) ? (i27 | 0) < ((HEAP32[i14 + 132 >> 2] | 0) + -2 | 0) : 0) {
     HEAP32[i14 + 116 >> 2] = 1;
    }
    i15 = HEAP32[i14 + 28 >> 2] | 0;
    if ((i15 | 0) != 0) {
     i9 = _emscripten_realloc_async_context(32) | 0;
     FUNCTION_TABLE_v[i15 & 63]();
     if (___async) {
      HEAP32[i9 >> 2] = 215;
      i29 = i9 + 4 | 0;
      HEAP32[i29 >> 2] = i4;
      i30 = i9 + 8 | 0;
      HEAP32[i30 >> 2] = i6;
      i31 = i9 + 12 | 0;
      HEAP32[i31 >> 2] = i5;
      i32 = i9 + 16 | 0;
      HEAP32[i32 >> 2] = i19;
      i33 = i9 + 20 | 0;
      HEAP32[i33 >> 2] = i27;
      i34 = i9 + 24 | 0;
      HEAP32[i34 >> 2] = i5;
      i35 = i9 + 28 | 0;
      HEAP32[i35 >> 2] = i28;
      i2 = STACKTOP;
      STACKTOP = i2;
      return;
     }
     ___async_unwind = 0;
     HEAP32[i9 >> 2] = 215;
     i29 = i9 + 4 | 0;
     HEAP32[i29 >> 2] = i4;
     i30 = i9 + 8 | 0;
     HEAP32[i30 >> 2] = i6;
     i31 = i9 + 12 | 0;
     HEAP32[i31 >> 2] = i5;
     i32 = i9 + 16 | 0;
     HEAP32[i32 >> 2] = i19;
     i33 = i9 + 20 | 0;
     HEAP32[i33 >> 2] = i27;
     i34 = i9 + 24 | 0;
     HEAP32[i34 >> 2] = i5;
     i35 = i9 + 28 | 0;
     HEAP32[i35 >> 2] = i28;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    i9 = HEAP32[i14 + 52 >> 2] | 0;
    i15 = HEAP32[i14 + 36 >> 2] | 0;
    if (i4 >>> 0 >= i9 >>> 0 & i4 >>> 0 < i6 >>> 0) {
     i7 = i19 + -1 | 0;
     i8 = _emscripten_realloc_async_context(28) | 0;
     _calccolumn(i15 + ((i4 - i9 | 0) / 40 | 0) | 0, i4);
     if (___async) {
      HEAP32[i8 >> 2] = 216;
      i36 = i8 + 4 | 0;
      HEAP32[i36 >> 2] = i5;
      i37 = i8 + 8 | 0;
      HEAP32[i37 >> 2] = i6;
      i38 = i8 + 12 | 0;
      HEAP32[i38 >> 2] = i28;
      i39 = i8 + 16 | 0;
      HEAP32[i39 >> 2] = i27;
      i40 = i8 + 20 | 0;
      HEAP32[i40 >> 2] = i7;
      i41 = i8 + 24 | 0;
      HEAP32[i41 >> 2] = i5;
      i2 = STACKTOP;
      STACKTOP = i2;
      return;
     }
     ___async_unwind = 0;
     HEAP32[i8 >> 2] = 216;
     i36 = i8 + 4 | 0;
     HEAP32[i36 >> 2] = i5;
     i37 = i8 + 8 | 0;
     HEAP32[i37 >> 2] = i6;
     i38 = i8 + 12 | 0;
     HEAP32[i38 >> 2] = i28;
     i39 = i8 + 16 | 0;
     HEAP32[i39 >> 2] = i27;
     i40 = i8 + 20 | 0;
     HEAP32[i40 >> 2] = i7;
     i41 = i8 + 24 | 0;
     HEAP32[i41 >> 2] = i5;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    } else {
     i8 = i15 + (Math_imul(HEAP32[i14 + 136 >> 2] | 0, (i4 - (HEAP32[i14 + 56 >> 2] | 0) | 0) / 40 | 0) | 0) | 0;
     i15 = i27 + -1 | 0;
     i7 = _emscripten_realloc_async_context(28) | 0;
     _calcline(i8, i4);
     if (___async) {
      HEAP32[i7 >> 2] = 217;
      i42 = i7 + 4 | 0;
      HEAP32[i42 >> 2] = i5;
      i43 = i7 + 8 | 0;
      HEAP32[i43 >> 2] = i6;
      i44 = i7 + 12 | 0;
      HEAP32[i44 >> 2] = i28;
      i45 = i7 + 16 | 0;
      HEAP32[i45 >> 2] = i15;
      i46 = i7 + 20 | 0;
      HEAP32[i46 >> 2] = i19;
      i47 = i7 + 24 | 0;
      HEAP32[i47 >> 2] = i5;
      i2 = STACKTOP;
      STACKTOP = i2;
      return;
     }
     ___async_unwind = 0;
     HEAP32[i7 >> 2] = 217;
     i42 = i7 + 4 | 0;
     HEAP32[i42 >> 2] = i5;
     i43 = i7 + 8 | 0;
     HEAP32[i43 >> 2] = i6;
     i44 = i7 + 12 | 0;
     HEAP32[i44 >> 2] = i28;
     i45 = i7 + 16 | 0;
     HEAP32[i45 >> 2] = i15;
     i46 = i7 + 20 | 0;
     HEAP32[i46 >> 2] = i19;
     i47 = i7 + 24 | 0;
     HEAP32[i47 >> 2] = i5;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
   }
   i7 = HEAP32[i14 + 28 >> 2] | 0;
   if ((i7 | 0) != 0) {
    i14 = _emscripten_realloc_async_context(8) | 0;
    FUNCTION_TABLE_v[i7 & 63]();
    if (___async) {
     HEAP32[i14 >> 2] = 218;
     i48 = i14 + 4 | 0;
     HEAP32[i48 >> 2] = i5;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i14 >> 2] = 218;
    i48 = i14 + 4 | 0;
    HEAP32[i48 >> 2] = i5;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   _free(i5);
   i14 = HEAP32[71600] | 0;
   HEAP32[i14 + 64 >> 2] = 0;
   HEAP32[i14 + 68 >> 2] = 0;
   HEAP32[i14 + 72 >> 2] = 286552;
   i14 = HEAP32[71600] | 0;
   HEAP32[i14 + 112 >> 2] = 0;
   i7 = HEAP32[i14 + 28 >> 2] | 0;
   if ((i7 | 0) != 0) {
    i14 = _emscripten_realloc_async_context(4) | 0;
    FUNCTION_TABLE_v[i7 & 63]();
    if (___async) {
     HEAP32[i14 >> 2] = 219;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i14 >> 2] = 219;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   _dosymetry();
   i14 = HEAP32[71600] | 0;
   if ((HEAP32[i14 + 140 >> 2] | 0) != 0) {
    HEAP32[i14 + 72 >> 2] = 286640;
    i14 = HEAP32[71600] | 0;
    i7 = HEAP32[i14 + 56 >> 2] | 0;
    i15 = HEAP32[i14 + 132 >> 2] | 0;
    i4 = i7 + (i15 * 40 | 0) | 0;
    do {
     if ((i15 | 0) > 0) {
      i8 = i7;
      L150 : while (1) {
       i9 = i8 + 32 | 0;
       L152 : do {
        if ((HEAP32[i9 >> 2] | 0) != 0) {
         i49 = HEAP32[71600] | 0;
         HEAP32[i49 + 120 >> 2] = 1;
         i50 = i8;
         do {
          i51 = i50;
          i50 = i50 + 40 | 0;
          i52 = i50 >>> 0 < i4 >>> 0;
         } while ((HEAP32[i51 + 72 >> 2] | 0) != 0 & i52);
         i51 = i8 + -40 | 0;
         if ((HEAP32[i9 >> 2] | 0) != 0 & i8 >>> 0 < i4 >>> 0) {
          i53 = i52 ^ 1;
          i54 = i49;
          i55 = i9;
          i56 = i8;
          while (1) {
           i57 = HEAP32[i54 + 56 >> 2] | 0;
           i58 = i51 >>> 0 < i57 >>> 0;
           if (i58 | i53) {
            i59 = i58 ? i50 : i51;
           } else {
            d60 = +HEAPF64[i56 >> 3];
            i59 = d60 - +HEAPF64[i51 >> 3] < +HEAPF64[i50 >> 3] - d60 ? i51 : i50;
           }
           if (i59 >>> 0 >= i4 >>> 0 | (HEAP32[i59 + 32 >> 2] | 0) != 0 | i59 >>> 0 < i57 >>> 0) {
            i61 = 60;
            break L150;
           }
           i58 = HEAP32[i54 + 36 >> 2] | 0;
           i62 = HEAP32[i54 + 136 >> 2] | 0;
           i63 = i57;
           i57 = i58 + (Math_imul((i56 - i63 | 0) / 40 | 0, i62) | 0) | 0;
           i64 = i58 + (Math_imul((i59 - i63 | 0) / 40 | 0, i62) | 0) | 0;
           _memcpy(i57 | 0, i64 | 0, HEAP32[i54 + 128 >> 2] | 0) | 0;
           HEAP32[i55 >> 2] = 0;
           HEAPF64[i56 >> 3] = +HEAPF64[i59 >> 3];
           i64 = i56 + 40 | 0;
           i57 = i56 + 72 | 0;
           if (!((HEAP32[i57 >> 2] | 0) != 0 & i64 >>> 0 < i4 >>> 0)) {
            i65 = i64;
            break L152;
           }
           i54 = HEAP32[71600] | 0;
           i55 = i57;
           i56 = i64;
          }
         } else {
          i65 = i8;
         }
        } else {
         i65 = i8;
        }
       } while (0);
       i8 = i65 + 40 | 0;
       if (!(i8 >>> 0 < i4 >>> 0)) {
        i61 = 64;
        break;
       }
      }
      if ((i61 | 0) == 60) {
       _puts(289864) | 0;
       _init_tables(HEAP32[71600] | 0);
       break L16;
      } else if ((i61 | 0) == 64) {
       i8 = HEAP32[71600] | 0;
       i66 = i8;
       i67 = HEAP32[i8 + 132 >> 2] | 0;
       break;
      }
     } else {
      i66 = i14;
      i67 = i15;
     }
    } while (0);
    i15 = HEAP32[i66 + 36 >> 2] | 0;
    i14 = i15 + (Math_imul(HEAP32[i66 + 136 >> 2] | 0, i67) | 0) | 0;
    i4 = HEAP32[i66 + 52 >> 2] | 0;
    i7 = HEAP32[i66 + 128 >> 2] | 0;
    i5 = i4 + (i7 * 40 | 0) | 0;
    if ((i7 | 0) > 0) {
     i7 = i66;
     i6 = 0;
     i8 = i4;
     i4 = i15;
     i15 = 0;
     L170 : while (1) {
      i9 = i8 + 32 | 0;
      do {
       if ((HEAP32[i9 >> 2] | 0) != 0) {
        HEAP32[i7 + 120 >> 2] = 1;
        i56 = i8;
        while (1) {
         i68 = i56 >>> 0 < i5 >>> 0;
         if ((HEAP32[i56 + 32 >> 2] | 0) != 0 & i68) {
          i56 = i56 + 40 | 0;
         } else {
          break;
         }
        }
        i55 = i8 + -40 | 0;
        if ((HEAP32[i9 >> 2] | 0) != 0 & i8 >>> 0 < i5 >>> 0) {
         i54 = i68 ^ 1;
         i69 = i7;
         i50 = i9;
         i51 = i6;
         i53 = 0;
         i49 = i8;
         i64 = i4;
         i57 = i15;
         while (1) {
          i62 = HEAP32[i69 + 52 >> 2] | 0;
          i63 = i55 >>> 0 < i62 >>> 0;
          if (i63 | i54) {
           i70 = i63 ? i56 : i55;
          } else {
           d60 = +HEAPF64[i49 >> 3];
           i70 = d60 - +HEAPF64[i55 >> 3] < +HEAPF64[i56 >> 3] - d60 ? i55 : i56;
          }
          if (i70 >>> 0 >= i5 >>> 0 | (HEAP32[i70 + 32 >> 2] | 0) != 0 | i70 >>> 0 < i62 >>> 0) {
           break L170;
          }
          if ((i70 | 0) == (i53 | 0)) {
           i71 = i69;
           i72 = i51 + 1 | 0;
           i73 = i53;
           i74 = i64;
           i75 = i57;
          } else {
           L187 : do {
            if ((i53 | 0) == 0) {
             i76 = i69;
            } else {
             if ((i51 | 0) != 1) {
              if (i64 >>> 0 < i14 >>> 0) {
               i77 = i64;
               i78 = i57;
              } else {
               i76 = i69;
               break;
              }
              while (1) {
               _memset(i77 | 0, HEAP8[i78 >> 0] | 0, i51 | 0) | 0;
               i62 = HEAP32[71600] | 0;
               i63 = HEAP32[i62 + 136 >> 2] | 0;
               i77 = i77 + i63 | 0;
               if (!(i77 >>> 0 < i14 >>> 0)) {
                i76 = i62;
                break L187;
               } else {
                i78 = i78 + i63 | 0;
               }
              }
             }
             i63 = HEAP32[i69 + 136 >> 2] | 0;
             if (i64 >>> 0 < i14 >>> 0) {
              i79 = i64;
              i80 = i57;
             } else {
              i76 = i69;
              break;
             }
             while (1) {
              HEAP8[i79 >> 0] = HEAP8[i80 >> 0] | 0;
              i79 = i79 + i63 | 0;
              if (!(i79 >>> 0 < i14 >>> 0)) {
               break;
              } else {
               i80 = i80 + i63 | 0;
              }
             }
             i76 = HEAP32[71600] | 0;
            }
           } while (0);
           i63 = HEAP32[i76 + 36 >> 2] | 0;
           i62 = HEAP32[i76 + 52 >> 2] | 0;
           i71 = i76;
           i72 = 1;
           i73 = i70;
           i74 = i63 + ((i49 - i62 | 0) / 40 | 0) | 0;
           i75 = i63 + ((i70 - i62 | 0) / 40 | 0) | 0;
          }
          HEAP32[i50 >> 2] = 0;
          HEAPF64[i49 >> 3] = +HEAPF64[i70 >> 3];
          i62 = i49;
          i49 = i49 + 40 | 0;
          i50 = i62 + 72 | 0;
          if (!((HEAP32[i50 >> 2] | 0) != 0 & i49 >>> 0 < i5 >>> 0)) {
           break;
          } else {
           i69 = i71;
           i51 = i72;
           i53 = i73;
           i64 = i74;
           i57 = i75;
          }
         }
         if ((i73 | 0) != 0) {
          i57 = i74 >>> 0 < i14 >>> 0;
          if ((i72 | 0) == 1) {
           if (i57) {
            i81 = i74;
            i82 = i75;
           } else {
            i83 = i71;
            i84 = 1;
            i85 = i49;
            i86 = i74;
            i87 = i75;
            break;
           }
           while (1) {
            HEAP8[i81 >> 0] = HEAP8[i82 >> 0] | 0;
            i64 = HEAP32[71600] | 0;
            i53 = HEAP32[i64 + 136 >> 2] | 0;
            i51 = i81 + i53 | 0;
            i50 = i82 + i53 | 0;
            if (i51 >>> 0 < i14 >>> 0) {
             i81 = i51;
             i82 = i50;
            } else {
             i83 = i64;
             i84 = 1;
             i85 = i49;
             i86 = i51;
             i87 = i50;
             break;
            }
           }
          } else {
           if (i57) {
            i88 = i74;
            i89 = i75;
           } else {
            i83 = i71;
            i84 = i72;
            i85 = i49;
            i86 = i74;
            i87 = i75;
            break;
           }
           while (1) {
            _memset(i88 | 0, HEAP8[i89 >> 0] | 0, i72 | 0) | 0;
            i50 = HEAP32[71600] | 0;
            i51 = HEAP32[i50 + 136 >> 2] | 0;
            i64 = i88 + i51 | 0;
            i53 = i89 + i51 | 0;
            if (i64 >>> 0 < i14 >>> 0) {
             i88 = i64;
             i89 = i53;
            } else {
             i83 = i50;
             i84 = i72;
             i85 = i49;
             i86 = i64;
             i87 = i53;
             break;
            }
           }
          }
         } else {
          i83 = i71;
          i84 = i72;
          i85 = i49;
          i86 = i74;
          i87 = i75;
         }
        } else {
         i83 = i7;
         i84 = i6;
         i85 = i8;
         i86 = i4;
         i87 = i15;
        }
       } else {
        i83 = i7;
        i84 = i6;
        i85 = i8;
        i86 = i4;
        i87 = i15;
       }
      } while (0);
      i8 = i85 + 40 | 0;
      if (!(i8 >>> 0 < i5 >>> 0)) {
       break L16;
      } else {
       i7 = i83;
       i6 = i84;
       i4 = i86;
       i15 = i87;
      }
     }
     _init_tables(i69);
     _puts(289864) | 0;
    }
   }
  } else {
   HEAP32[i1 + 72 >> 2] = 286576;
   i15 = HEAP32[71600] | 0;
   i4 = i15 + 68 | 0;
   HEAP32[i4 >> 2] = 0;
   HEAP32[i15 + 64 >> 2] = 0;
   i6 = HEAP32[i15 + 56 >> 2] | 0;
   i7 = HEAP32[i15 + 132 >> 2] | 0;
   i5 = i6 + (i7 * 40 | 0) | 0;
   if ((i7 | 0) > 0) {
    i7 = 0;
    i8 = i6;
    while (1) {
     if ((HEAP32[i8 + 20 >> 2] | 0) == 0) {
      i90 = i7;
     } else {
      i6 = i7 + 1 | 0;
      HEAP32[i4 >> 2] = i6;
      i90 = i6;
     }
     i8 = i8 + 40 | 0;
     if (!(i8 >>> 0 < i5 >>> 0)) {
      break;
     } else {
      i7 = i90;
     }
    }
   }
   i7 = HEAP32[i15 + 28 >> 2] | 0;
   if ((i7 | 0) == 0) {
    i91 = i15;
    i92 = 0;
   } else {
    i5 = _emscripten_realloc_async_context(4) | 0;
    FUNCTION_TABLE_v[i7 & 63]();
    if (___async) {
     HEAP32[i5 >> 2] = 220;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i5 >> 2] = 220;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   L31 : while (1) {
    i5 = HEAP32[i91 + 56 >> 2] | 0;
    i7 = HEAP32[i91 + 132 >> 2] | 0;
    i93 = i5 + (i7 * 40 | 0) | 0;
    if ((i92 | 0) < (i7 | 0)) {
     i7 = Math_imul(HEAP32[i91 + 136 >> 2] | 0, i92) | 0;
     i8 = i91;
     i94 = i5 + (i92 * 40 | 0) | 0;
     i95 = (HEAP32[i91 + 36 >> 2] | 0) + i7 | 0;
     while (1) {
      if ((HEAP32[i94 + 20 >> 2] | 0) != 0) {
       i61 = 104;
       break L31;
      }
      i7 = i94 + 80 | 0;
      if (i7 >>> 0 < i93 >>> 0) {
       i94 = i7;
       i95 = i95 + (HEAP32[i8 + 136 >> 2] << 1) | 0;
      } else {
       i96 = i8;
       break;
      }
     }
    } else {
     i96 = i91;
    }
    i8 = i92 + 1 | 0;
    if ((i8 | 0) < 2) {
     i91 = i96;
     i92 = i8;
    } else {
     break;
    }
   }
   if ((i61 | 0) == 104) {
    i15 = _emscripten_realloc_async_context(20) | 0;
    _calcline(i95, i94);
    if (___async) {
     HEAP32[i15 >> 2] = 221;
     i97 = i15 + 4 | 0;
     HEAP32[i97 >> 2] = i92;
     i98 = i15 + 8 | 0;
     HEAP32[i98 >> 2] = i95;
     i99 = i15 + 12 | 0;
     HEAP32[i99 >> 2] = i94;
     i100 = i15 + 16 | 0;
     HEAP32[i100 >> 2] = i93;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i15 >> 2] = 221;
    i97 = i15 + 4 | 0;
    HEAP32[i97 >> 2] = i92;
    i98 = i15 + 8 | 0;
    HEAP32[i98 >> 2] = i95;
    i99 = i15 + 12 | 0;
    HEAP32[i99 >> 2] = i94;
    i100 = i15 + 16 | 0;
    HEAP32[i100 >> 2] = i93;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   HEAP32[i96 + 68 >> 2] = 0;
   HEAP32[i96 + 72 >> 2] = 286600;
   i15 = HEAP32[71600] | 0;
   HEAP32[i15 + 64 >> 2] = 0;
   i8 = HEAP32[i15 + 52 >> 2] | 0;
   i7 = HEAP32[i15 + 128 >> 2] | 0;
   i5 = i8 + (i7 * 40 | 0) | 0;
   if ((i7 | 0) > 0) {
    i4 = i15 + 68 | 0;
    i6 = i8;
    do {
     if ((HEAP32[i6 + 20 >> 2] | 0) != 0) {
      HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
     }
     i6 = i6 + 40 | 0;
    } while (i6 >>> 0 < i5 >>> 0);
    i101 = i8;
    i102 = i7;
    i103 = i15;
    i104 = 0;
   } else {
    i101 = i8;
    i102 = i7;
    i103 = i15;
    i104 = 0;
   }
   L53 : while (1) {
    i105 = i101 + (i102 * 40 | 0) | 0;
    if ((i104 | 0) < (i102 | 0)) {
     i5 = i103;
     i106 = i101 + (i104 * 40 | 0) | 0;
     i107 = (HEAP32[i103 + 36 >> 2] | 0) + i104 | 0;
     while (1) {
      if ((HEAP32[i106 + 20 >> 2] | 0) != 0) {
       i61 = 117;
       break L53;
      }
      i6 = i106 + 80 | 0;
      if (i6 >>> 0 < i105 >>> 0) {
       i106 = i6;
       i107 = i107 + 2 | 0;
      } else {
       i108 = i5;
       break;
      }
     }
    } else {
     i108 = i103;
    }
    i5 = i104 + 1 | 0;
    if ((i5 | 0) >= 2) {
     break;
    }
    i101 = HEAP32[i108 + 52 >> 2] | 0;
    i102 = HEAP32[i108 + 128 >> 2] | 0;
    i103 = i108;
    i104 = i5;
   }
   if ((i61 | 0) == 117) {
    i15 = _emscripten_realloc_async_context(20) | 0;
    _calccolumn(i107, i106);
    if (___async) {
     HEAP32[i15 >> 2] = 223;
     i109 = i15 + 4 | 0;
     HEAP32[i109 >> 2] = i104;
     i110 = i15 + 8 | 0;
     HEAP32[i110 >> 2] = i107;
     i111 = i15 + 12 | 0;
     HEAP32[i111 >> 2] = i106;
     i112 = i15 + 16 | 0;
     HEAP32[i112 >> 2] = i105;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i15 >> 2] = 223;
    i109 = i15 + 4 | 0;
    HEAP32[i109 >> 2] = i104;
    i110 = i15 + 8 | 0;
    HEAP32[i110 >> 2] = i107;
    i111 = i15 + 12 | 0;
    HEAP32[i111 >> 2] = i106;
    i112 = i15 + 16 | 0;
    HEAP32[i112 >> 2] = i105;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   if ((HEAP32[i108 + 140 >> 2] | 0) != 0) {
    _init_tables(i108);
    STACKTOP = i2;
    return;
   }
   i15 = HEAP32[i108 + 28 >> 2] | 0;
   if ((i15 | 0) == 0) {
    HEAP32[i108 + 64 >> 2] = 0;
    HEAP32[i108 + 68 >> 2] = 0;
    HEAP32[i108 + 72 >> 2] = 286552;
    _dosymetry();
    break;
   }
   i7 = _emscripten_realloc_async_context(4) | 0;
   FUNCTION_TABLE_v[i15 & 63]();
   if (___async) {
    HEAP32[i7 >> 2] = 225;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   ___async_unwind = 0;
   HEAP32[i7 >> 2] = 225;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
 } while (0);
 i108 = HEAP32[71600] | 0;
 i105 = HEAP32[i108 + 28 >> 2] | 0;
 if ((i105 | 0) != 0) {
  i112 = _emscripten_realloc_async_context(4) | 0;
  FUNCTION_TABLE_v[i105 & 63]();
  if (___async) {
   HEAP32[i112 >> 2] = 226;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i112 >> 2] = 226;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i112 = HEAP32[i108 + 52 >> 2] | 0;
 i105 = HEAP32[i108 + 128 >> 2] | 0;
 i106 = i112 + (i105 * 40 | 0) | 0;
 if ((i105 | 0) > 0) {
  i105 = HEAP32[i108 + 16 >> 2] | 0;
  i111 = i112;
  while (1) {
   HEAPF64[i105 >> 3] = +HEAPF64[i111 >> 3];
   i111 = i111 + 40 | 0;
   if (!(i111 >>> 0 < i106 >>> 0)) {
    break;
   } else {
    i105 = i105 + 8 | 0;
   }
  }
 }
 i105 = HEAP32[i108 + 56 >> 2] | 0;
 i106 = HEAP32[i108 + 132 >> 2] | 0;
 i111 = i105 + (i106 * 40 | 0) | 0;
 if ((i106 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i106 = HEAP32[i108 + 20 >> 2] | 0;
 i108 = i105;
 while (1) {
  HEAPF64[i106 >> 3] = +HEAPF64[i108 >> 3];
  i108 = i108 + 40 | 0;
  if (!(i108 >>> 0 < i111 >>> 0)) {
   break;
  } else {
   i106 = i106 + 8 | 0;
  }
 }
 STACKTOP = i2;
 return;
}
function _do_fractal__async_cb137(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, d60 = 0.0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[(HEAP32[71600] | 0) + 72 >> 2] = 286504;
 _moveoldpoints();
 i1 = HEAP32[71600] | 0;
 i4 = HEAP32[i1 + 28 >> 2] | 0;
 if ((i4 | 0) != 0) {
  i5 = _emscripten_realloc_async_context(8) | 0;
  FUNCTION_TABLE_v[i4 & 63]();
  if (___async) {
   HEAP32[i5 >> 2] = 214;
   i6 = i5 + 4 | 0;
   HEAP32[i6 >> 2] = i3;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i5 >> 2] = 214;
  i6 = i5 + 4 | 0;
  HEAP32[i6 >> 2] = i3;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 HEAP32[i1 + 72 >> 2] = 286528;
 i1 = HEAP32[71600] | 0;
 L10 : do {
  if ((i3 | 0) != 0) {
   i6 = i1 + 128 | 0;
   i5 = _malloc((HEAP32[i1 + 132 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) << 2) | 0;
   i4 = (HEAP32[i1 + 52 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) * 40 | 0) | 0;
   HEAP32[i1 + 72 >> 2] = 286624;
   i6 = HEAP32[71600] | 0;
   i7 = HEAP32[i6 + 52 >> 2] | 0;
   if (i7 >>> 0 < i4 >>> 0) {
    i8 = 0;
    i9 = i7;
    do {
     i8 = ((HEAP32[i9 + 32 >> 2] | 0) != 0 & 1) + i8 | 0;
     i9 = i9 + 40 | 0;
    } while (i9 >>> 0 < i4 >>> 0);
    i10 = i7;
    i11 = i5;
    while (1) {
     if ((HEAP32[i10 + 20 >> 2] | 0) == 0) {
      i12 = i10;
      i13 = i11;
     } else {
      if (i10 >>> 0 < i4 >>> 0) {
       i7 = i10;
       i9 = i11;
       while (1) {
        i14 = i9 + 4 | 0;
        HEAP32[i9 >> 2] = i7;
        i15 = i7 + 40 | 0;
        if (i15 >>> 0 < i4 >>> 0 & (HEAP32[i7 + 60 >> 2] | 0) != 0) {
         i7 = i15;
         i9 = i14;
        } else {
         i16 = i15;
         i17 = i14;
         break;
        }
       }
      } else {
       i16 = i10;
       i17 = i11;
      }
      i9 = (i16 | 0) == (i4 | 0) ? i16 + -40 | 0 : i16;
      _addprices(i10, i9);
      i12 = i9;
      i13 = i17;
     }
     i10 = i12 + 40 | 0;
     if (!(i10 >>> 0 < i4 >>> 0)) {
      break;
     } else {
      i11 = i13;
     }
    }
    i18 = HEAP32[71600] | 0;
    i19 = i8;
    i20 = i13;
   } else {
    i18 = i6;
    i19 = 0;
    i20 = i5;
   }
   i9 = HEAP32[i18 + 56 >> 2] | 0;
   i7 = HEAP32[i18 + 132 >> 2] | 0;
   i14 = i9 + (i7 * 40 | 0) | 0;
   if ((i7 | 0) > 0) {
    i7 = 0;
    i15 = i9;
    do {
     i7 = ((HEAP32[i15 + 32 >> 2] | 0) != 0 & 1) + i7 | 0;
     i15 = i15 + 40 | 0;
    } while (i15 >>> 0 < i14 >>> 0);
    i21 = i9;
    i22 = i20;
    while (1) {
     if ((HEAP32[i21 + 20 >> 2] | 0) == 0) {
      i23 = i21;
      i24 = i22;
     } else {
      if (i21 >>> 0 < i14 >>> 0) {
       i9 = i21;
       i15 = i22;
       while (1) {
        i6 = i15 + 4 | 0;
        HEAP32[i15 >> 2] = i9;
        i8 = i9 + 40 | 0;
        if (i8 >>> 0 < i14 >>> 0 & (HEAP32[i9 + 60 >> 2] | 0) != 0) {
         i9 = i8;
         i15 = i6;
        } else {
         i25 = i8;
         i26 = i6;
         break;
        }
       }
      } else {
       i25 = i21;
       i26 = i22;
      }
      i15 = (i25 | 0) == (i14 | 0) ? i25 + -40 | 0 : i25;
      _addprices(i21, i15);
      i23 = i15;
      i24 = i26;
     }
     i21 = i23 + 40 | 0;
     if (!(i21 >>> 0 < i14 >>> 0)) {
      i27 = i7;
      i28 = i24;
      break;
     } else {
      i22 = i24;
     }
    }
   } else {
    i27 = 0;
    i28 = i20;
   }
   i7 = i28 - i5 >> 2;
   _qsort(i5, i7, 4, 3);
   i14 = HEAP32[71600] | 0;
   HEAP32[i14 + 68 >> 2] = i7;
   HEAP32[i14 + 112 >> 2] = 1;
   if (i5 >>> 0 < i28 >>> 0 ? (HEAP32[i14 + 140 >> 2] | 0) == 0 : 0) {
    i7 = HEAP32[i5 >> 2] | 0;
    i15 = i14 + 64 | 0;
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
    if ((i19 | 0) < ((HEAP32[i14 + 128 >> 2] | 0) + -2 | 0) ? (i27 | 0) < ((HEAP32[i14 + 132 >> 2] | 0) + -2 | 0) : 0) {
     HEAP32[i14 + 116 >> 2] = 1;
    }
    i15 = HEAP32[i14 + 28 >> 2] | 0;
    if ((i15 | 0) != 0) {
     i9 = _emscripten_realloc_async_context(32) | 0;
     FUNCTION_TABLE_v[i15 & 63]();
     if (___async) {
      HEAP32[i9 >> 2] = 215;
      i29 = i9 + 4 | 0;
      HEAP32[i29 >> 2] = i7;
      i30 = i9 + 8 | 0;
      HEAP32[i30 >> 2] = i4;
      i31 = i9 + 12 | 0;
      HEAP32[i31 >> 2] = i5;
      i32 = i9 + 16 | 0;
      HEAP32[i32 >> 2] = i19;
      i33 = i9 + 20 | 0;
      HEAP32[i33 >> 2] = i27;
      i34 = i9 + 24 | 0;
      HEAP32[i34 >> 2] = i5;
      i35 = i9 + 28 | 0;
      HEAP32[i35 >> 2] = i28;
      i2 = STACKTOP;
      STACKTOP = i2;
      return;
     }
     ___async_unwind = 0;
     HEAP32[i9 >> 2] = 215;
     i29 = i9 + 4 | 0;
     HEAP32[i29 >> 2] = i7;
     i30 = i9 + 8 | 0;
     HEAP32[i30 >> 2] = i4;
     i31 = i9 + 12 | 0;
     HEAP32[i31 >> 2] = i5;
     i32 = i9 + 16 | 0;
     HEAP32[i32 >> 2] = i19;
     i33 = i9 + 20 | 0;
     HEAP32[i33 >> 2] = i27;
     i34 = i9 + 24 | 0;
     HEAP32[i34 >> 2] = i5;
     i35 = i9 + 28 | 0;
     HEAP32[i35 >> 2] = i28;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    i9 = HEAP32[i14 + 52 >> 2] | 0;
    i15 = HEAP32[i14 + 36 >> 2] | 0;
    if (i7 >>> 0 >= i9 >>> 0 & i7 >>> 0 < i4 >>> 0) {
     i6 = i19 + -1 | 0;
     i8 = _emscripten_realloc_async_context(28) | 0;
     _calccolumn(i15 + ((i7 - i9 | 0) / 40 | 0) | 0, i7);
     if (___async) {
      HEAP32[i8 >> 2] = 216;
      i36 = i8 + 4 | 0;
      HEAP32[i36 >> 2] = i5;
      i37 = i8 + 8 | 0;
      HEAP32[i37 >> 2] = i4;
      i38 = i8 + 12 | 0;
      HEAP32[i38 >> 2] = i28;
      i39 = i8 + 16 | 0;
      HEAP32[i39 >> 2] = i27;
      i40 = i8 + 20 | 0;
      HEAP32[i40 >> 2] = i6;
      i41 = i8 + 24 | 0;
      HEAP32[i41 >> 2] = i5;
      i2 = STACKTOP;
      STACKTOP = i2;
      return;
     }
     ___async_unwind = 0;
     HEAP32[i8 >> 2] = 216;
     i36 = i8 + 4 | 0;
     HEAP32[i36 >> 2] = i5;
     i37 = i8 + 8 | 0;
     HEAP32[i37 >> 2] = i4;
     i38 = i8 + 12 | 0;
     HEAP32[i38 >> 2] = i28;
     i39 = i8 + 16 | 0;
     HEAP32[i39 >> 2] = i27;
     i40 = i8 + 20 | 0;
     HEAP32[i40 >> 2] = i6;
     i41 = i8 + 24 | 0;
     HEAP32[i41 >> 2] = i5;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    } else {
     i8 = i15 + (Math_imul(HEAP32[i14 + 136 >> 2] | 0, (i7 - (HEAP32[i14 + 56 >> 2] | 0) | 0) / 40 | 0) | 0) | 0;
     i15 = i27 + -1 | 0;
     i6 = _emscripten_realloc_async_context(28) | 0;
     _calcline(i8, i7);
     if (___async) {
      HEAP32[i6 >> 2] = 217;
      i42 = i6 + 4 | 0;
      HEAP32[i42 >> 2] = i5;
      i43 = i6 + 8 | 0;
      HEAP32[i43 >> 2] = i4;
      i44 = i6 + 12 | 0;
      HEAP32[i44 >> 2] = i28;
      i45 = i6 + 16 | 0;
      HEAP32[i45 >> 2] = i15;
      i46 = i6 + 20 | 0;
      HEAP32[i46 >> 2] = i19;
      i47 = i6 + 24 | 0;
      HEAP32[i47 >> 2] = i5;
      i2 = STACKTOP;
      STACKTOP = i2;
      return;
     }
     ___async_unwind = 0;
     HEAP32[i6 >> 2] = 217;
     i42 = i6 + 4 | 0;
     HEAP32[i42 >> 2] = i5;
     i43 = i6 + 8 | 0;
     HEAP32[i43 >> 2] = i4;
     i44 = i6 + 12 | 0;
     HEAP32[i44 >> 2] = i28;
     i45 = i6 + 16 | 0;
     HEAP32[i45 >> 2] = i15;
     i46 = i6 + 20 | 0;
     HEAP32[i46 >> 2] = i19;
     i47 = i6 + 24 | 0;
     HEAP32[i47 >> 2] = i5;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
   }
   i6 = HEAP32[i14 + 28 >> 2] | 0;
   if ((i6 | 0) != 0) {
    i14 = _emscripten_realloc_async_context(8) | 0;
    FUNCTION_TABLE_v[i6 & 63]();
    if (___async) {
     HEAP32[i14 >> 2] = 218;
     i48 = i14 + 4 | 0;
     HEAP32[i48 >> 2] = i5;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i14 >> 2] = 218;
    i48 = i14 + 4 | 0;
    HEAP32[i48 >> 2] = i5;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   _free(i5);
   i14 = HEAP32[71600] | 0;
   HEAP32[i14 + 64 >> 2] = 0;
   HEAP32[i14 + 68 >> 2] = 0;
   HEAP32[i14 + 72 >> 2] = 286552;
   i14 = HEAP32[71600] | 0;
   HEAP32[i14 + 112 >> 2] = 0;
   i6 = HEAP32[i14 + 28 >> 2] | 0;
   if ((i6 | 0) != 0) {
    i14 = _emscripten_realloc_async_context(4) | 0;
    FUNCTION_TABLE_v[i6 & 63]();
    if (___async) {
     HEAP32[i14 >> 2] = 219;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i14 >> 2] = 219;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   _dosymetry();
   i14 = HEAP32[71600] | 0;
   if ((HEAP32[i14 + 140 >> 2] | 0) != 0) {
    HEAP32[i14 + 72 >> 2] = 286640;
    i14 = HEAP32[71600] | 0;
    i6 = HEAP32[i14 + 56 >> 2] | 0;
    i15 = HEAP32[i14 + 132 >> 2] | 0;
    i7 = i6 + (i15 * 40 | 0) | 0;
    do {
     if ((i15 | 0) > 0) {
      i8 = i6;
      L81 : while (1) {
       i9 = i8 + 32 | 0;
       L83 : do {
        if ((HEAP32[i9 >> 2] | 0) != 0) {
         i49 = HEAP32[71600] | 0;
         HEAP32[i49 + 120 >> 2] = 1;
         i50 = i8;
         do {
          i51 = i50;
          i50 = i50 + 40 | 0;
          i52 = i50 >>> 0 < i7 >>> 0;
         } while ((HEAP32[i51 + 72 >> 2] | 0) != 0 & i52);
         i51 = i8 + -40 | 0;
         if ((HEAP32[i9 >> 2] | 0) != 0 & i8 >>> 0 < i7 >>> 0) {
          i53 = i52 ^ 1;
          i54 = i49;
          i55 = i9;
          i56 = i8;
          while (1) {
           i57 = HEAP32[i54 + 56 >> 2] | 0;
           i58 = i51 >>> 0 < i57 >>> 0;
           if (i58 | i53) {
            i59 = i58 ? i50 : i51;
           } else {
            d60 = +HEAPF64[i56 >> 3];
            i59 = d60 - +HEAPF64[i51 >> 3] < +HEAPF64[i50 >> 3] - d60 ? i51 : i50;
           }
           if (i59 >>> 0 >= i7 >>> 0 | (HEAP32[i59 + 32 >> 2] | 0) != 0 | i59 >>> 0 < i57 >>> 0) {
            i61 = 57;
            break L81;
           }
           i58 = HEAP32[i54 + 36 >> 2] | 0;
           i62 = HEAP32[i54 + 136 >> 2] | 0;
           i63 = i57;
           i57 = i58 + (Math_imul((i56 - i63 | 0) / 40 | 0, i62) | 0) | 0;
           i64 = i58 + (Math_imul((i59 - i63 | 0) / 40 | 0, i62) | 0) | 0;
           _memcpy(i57 | 0, i64 | 0, HEAP32[i54 + 128 >> 2] | 0) | 0;
           HEAP32[i55 >> 2] = 0;
           HEAPF64[i56 >> 3] = +HEAPF64[i59 >> 3];
           i64 = i56 + 40 | 0;
           i57 = i56 + 72 | 0;
           if (!((HEAP32[i57 >> 2] | 0) != 0 & i64 >>> 0 < i7 >>> 0)) {
            i65 = i64;
            break L83;
           }
           i54 = HEAP32[71600] | 0;
           i55 = i57;
           i56 = i64;
          }
         } else {
          i65 = i8;
         }
        } else {
         i65 = i8;
        }
       } while (0);
       i8 = i65 + 40 | 0;
       if (!(i8 >>> 0 < i7 >>> 0)) {
        i61 = 61;
        break;
       }
      }
      if ((i61 | 0) == 57) {
       _puts(289864) | 0;
       _init_tables(HEAP32[71600] | 0);
       break L10;
      } else if ((i61 | 0) == 61) {
       i8 = HEAP32[71600] | 0;
       i66 = i8;
       i67 = HEAP32[i8 + 132 >> 2] | 0;
       break;
      }
     } else {
      i66 = i14;
      i67 = i15;
     }
    } while (0);
    i15 = HEAP32[i66 + 36 >> 2] | 0;
    i14 = i15 + (Math_imul(HEAP32[i66 + 136 >> 2] | 0, i67) | 0) | 0;
    i7 = HEAP32[i66 + 52 >> 2] | 0;
    i6 = HEAP32[i66 + 128 >> 2] | 0;
    i5 = i7 + (i6 * 40 | 0) | 0;
    if ((i6 | 0) > 0) {
     i6 = i66;
     i4 = 0;
     i8 = i7;
     i7 = i15;
     i15 = 0;
     L101 : while (1) {
      i9 = i8 + 32 | 0;
      do {
       if ((HEAP32[i9 >> 2] | 0) != 0) {
        HEAP32[i6 + 120 >> 2] = 1;
        i56 = i8;
        while (1) {
         i68 = i56 >>> 0 < i5 >>> 0;
         if ((HEAP32[i56 + 32 >> 2] | 0) != 0 & i68) {
          i56 = i56 + 40 | 0;
         } else {
          break;
         }
        }
        i55 = i8 + -40 | 0;
        if ((HEAP32[i9 >> 2] | 0) != 0 & i8 >>> 0 < i5 >>> 0) {
         i54 = i68 ^ 1;
         i69 = i6;
         i50 = i9;
         i51 = i4;
         i53 = 0;
         i49 = i8;
         i64 = i7;
         i57 = i15;
         while (1) {
          i62 = HEAP32[i69 + 52 >> 2] | 0;
          i63 = i55 >>> 0 < i62 >>> 0;
          if (i63 | i54) {
           i70 = i63 ? i56 : i55;
          } else {
           d60 = +HEAPF64[i49 >> 3];
           i70 = d60 - +HEAPF64[i55 >> 3] < +HEAPF64[i56 >> 3] - d60 ? i55 : i56;
          }
          if (i70 >>> 0 >= i5 >>> 0 | (HEAP32[i70 + 32 >> 2] | 0) != 0 | i70 >>> 0 < i62 >>> 0) {
           break L101;
          }
          if ((i70 | 0) == (i53 | 0)) {
           i71 = i69;
           i72 = i51 + 1 | 0;
           i73 = i53;
           i74 = i64;
           i75 = i57;
          } else {
           L117 : do {
            if ((i53 | 0) == 0) {
             i76 = i69;
            } else {
             if ((i51 | 0) != 1) {
              if (i64 >>> 0 < i14 >>> 0) {
               i77 = i64;
               i78 = i57;
              } else {
               i76 = i69;
               break;
              }
              while (1) {
               _memset(i77 | 0, HEAP8[i78 >> 0] | 0, i51 | 0) | 0;
               i62 = HEAP32[71600] | 0;
               i63 = HEAP32[i62 + 136 >> 2] | 0;
               i77 = i77 + i63 | 0;
               if (!(i77 >>> 0 < i14 >>> 0)) {
                i76 = i62;
                break L117;
               } else {
                i78 = i78 + i63 | 0;
               }
              }
             }
             i63 = HEAP32[i69 + 136 >> 2] | 0;
             if (i64 >>> 0 < i14 >>> 0) {
              i79 = i64;
              i80 = i57;
             } else {
              i76 = i69;
              break;
             }
             while (1) {
              HEAP8[i79 >> 0] = HEAP8[i80 >> 0] | 0;
              i79 = i79 + i63 | 0;
              if (!(i79 >>> 0 < i14 >>> 0)) {
               break;
              } else {
               i80 = i80 + i63 | 0;
              }
             }
             i76 = HEAP32[71600] | 0;
            }
           } while (0);
           i63 = HEAP32[i76 + 36 >> 2] | 0;
           i62 = HEAP32[i76 + 52 >> 2] | 0;
           i71 = i76;
           i72 = 1;
           i73 = i70;
           i74 = i63 + ((i49 - i62 | 0) / 40 | 0) | 0;
           i75 = i63 + ((i70 - i62 | 0) / 40 | 0) | 0;
          }
          HEAP32[i50 >> 2] = 0;
          HEAPF64[i49 >> 3] = +HEAPF64[i70 >> 3];
          i62 = i49;
          i49 = i49 + 40 | 0;
          i50 = i62 + 72 | 0;
          if (!((HEAP32[i50 >> 2] | 0) != 0 & i49 >>> 0 < i5 >>> 0)) {
           break;
          } else {
           i69 = i71;
           i51 = i72;
           i53 = i73;
           i64 = i74;
           i57 = i75;
          }
         }
         if ((i73 | 0) != 0) {
          i57 = i74 >>> 0 < i14 >>> 0;
          if ((i72 | 0) == 1) {
           if (i57) {
            i81 = i74;
            i82 = i75;
           } else {
            i83 = i71;
            i84 = 1;
            i85 = i49;
            i86 = i74;
            i87 = i75;
            break;
           }
           while (1) {
            HEAP8[i81 >> 0] = HEAP8[i82 >> 0] | 0;
            i64 = HEAP32[71600] | 0;
            i53 = HEAP32[i64 + 136 >> 2] | 0;
            i51 = i81 + i53 | 0;
            i50 = i82 + i53 | 0;
            if (i51 >>> 0 < i14 >>> 0) {
             i81 = i51;
             i82 = i50;
            } else {
             i83 = i64;
             i84 = 1;
             i85 = i49;
             i86 = i51;
             i87 = i50;
             break;
            }
           }
          } else {
           if (i57) {
            i88 = i74;
            i89 = i75;
           } else {
            i83 = i71;
            i84 = i72;
            i85 = i49;
            i86 = i74;
            i87 = i75;
            break;
           }
           while (1) {
            _memset(i88 | 0, HEAP8[i89 >> 0] | 0, i72 | 0) | 0;
            i50 = HEAP32[71600] | 0;
            i51 = HEAP32[i50 + 136 >> 2] | 0;
            i64 = i88 + i51 | 0;
            i53 = i89 + i51 | 0;
            if (i64 >>> 0 < i14 >>> 0) {
             i88 = i64;
             i89 = i53;
            } else {
             i83 = i50;
             i84 = i72;
             i85 = i49;
             i86 = i64;
             i87 = i53;
             break;
            }
           }
          }
         } else {
          i83 = i71;
          i84 = i72;
          i85 = i49;
          i86 = i74;
          i87 = i75;
         }
        } else {
         i83 = i6;
         i84 = i4;
         i85 = i8;
         i86 = i7;
         i87 = i15;
        }
       } else {
        i83 = i6;
        i84 = i4;
        i85 = i8;
        i86 = i7;
        i87 = i15;
       }
      } while (0);
      i8 = i85 + 40 | 0;
      if (!(i8 >>> 0 < i5 >>> 0)) {
       break L10;
      } else {
       i6 = i83;
       i4 = i84;
       i7 = i86;
       i15 = i87;
      }
     }
     _init_tables(i69);
     _puts(289864) | 0;
    }
   }
  } else {
   HEAP32[i1 + 72 >> 2] = 286576;
   i15 = HEAP32[71600] | 0;
   i7 = i15 + 68 | 0;
   HEAP32[i7 >> 2] = 0;
   HEAP32[i15 + 64 >> 2] = 0;
   i4 = HEAP32[i15 + 56 >> 2] | 0;
   i6 = HEAP32[i15 + 132 >> 2] | 0;
   i5 = i4 + (i6 * 40 | 0) | 0;
   if ((i6 | 0) > 0) {
    i6 = 0;
    i8 = i4;
    while (1) {
     if ((HEAP32[i8 + 20 >> 2] | 0) == 0) {
      i90 = i6;
     } else {
      i4 = i6 + 1 | 0;
      HEAP32[i7 >> 2] = i4;
      i90 = i4;
     }
     i8 = i8 + 40 | 0;
     if (!(i8 >>> 0 < i5 >>> 0)) {
      break;
     } else {
      i6 = i90;
     }
    }
   }
   i6 = HEAP32[i15 + 28 >> 2] | 0;
   if ((i6 | 0) == 0) {
    i91 = i15;
    i92 = 0;
   } else {
    i5 = _emscripten_realloc_async_context(4) | 0;
    FUNCTION_TABLE_v[i6 & 63]();
    if (___async) {
     HEAP32[i5 >> 2] = 220;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i5 >> 2] = 220;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   L155 : while (1) {
    i5 = HEAP32[i91 + 56 >> 2] | 0;
    i6 = HEAP32[i91 + 132 >> 2] | 0;
    i93 = i5 + (i6 * 40 | 0) | 0;
    if ((i92 | 0) < (i6 | 0)) {
     i6 = Math_imul(HEAP32[i91 + 136 >> 2] | 0, i92) | 0;
     i8 = i91;
     i94 = i5 + (i92 * 40 | 0) | 0;
     i95 = (HEAP32[i91 + 36 >> 2] | 0) + i6 | 0;
     while (1) {
      if ((HEAP32[i94 + 20 >> 2] | 0) != 0) {
       i61 = 101;
       break L155;
      }
      i6 = i94 + 80 | 0;
      if (i6 >>> 0 < i93 >>> 0) {
       i94 = i6;
       i95 = i95 + (HEAP32[i8 + 136 >> 2] << 1) | 0;
      } else {
       i96 = i8;
       break;
      }
     }
    } else {
     i96 = i91;
    }
    i8 = i92 + 1 | 0;
    if ((i8 | 0) < 2) {
     i91 = i96;
     i92 = i8;
    } else {
     break;
    }
   }
   if ((i61 | 0) == 101) {
    i15 = _emscripten_realloc_async_context(20) | 0;
    _calcline(i95, i94);
    if (___async) {
     HEAP32[i15 >> 2] = 221;
     i97 = i15 + 4 | 0;
     HEAP32[i97 >> 2] = i92;
     i98 = i15 + 8 | 0;
     HEAP32[i98 >> 2] = i95;
     i99 = i15 + 12 | 0;
     HEAP32[i99 >> 2] = i94;
     i100 = i15 + 16 | 0;
     HEAP32[i100 >> 2] = i93;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i15 >> 2] = 221;
    i97 = i15 + 4 | 0;
    HEAP32[i97 >> 2] = i92;
    i98 = i15 + 8 | 0;
    HEAP32[i98 >> 2] = i95;
    i99 = i15 + 12 | 0;
    HEAP32[i99 >> 2] = i94;
    i100 = i15 + 16 | 0;
    HEAP32[i100 >> 2] = i93;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   HEAP32[i96 + 68 >> 2] = 0;
   HEAP32[i96 + 72 >> 2] = 286600;
   i15 = HEAP32[71600] | 0;
   HEAP32[i15 + 64 >> 2] = 0;
   i8 = HEAP32[i15 + 52 >> 2] | 0;
   i6 = HEAP32[i15 + 128 >> 2] | 0;
   i5 = i8 + (i6 * 40 | 0) | 0;
   if ((i6 | 0) > 0) {
    i7 = i15 + 68 | 0;
    i4 = i8;
    do {
     if ((HEAP32[i4 + 20 >> 2] | 0) != 0) {
      HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
     }
     i4 = i4 + 40 | 0;
    } while (i4 >>> 0 < i5 >>> 0);
    i101 = i8;
    i102 = i6;
    i103 = i15;
    i104 = 0;
   } else {
    i101 = i8;
    i102 = i6;
    i103 = i15;
    i104 = 0;
   }
   L177 : while (1) {
    i105 = i101 + (i102 * 40 | 0) | 0;
    if ((i104 | 0) < (i102 | 0)) {
     i5 = i103;
     i106 = i101 + (i104 * 40 | 0) | 0;
     i107 = (HEAP32[i103 + 36 >> 2] | 0) + i104 | 0;
     while (1) {
      if ((HEAP32[i106 + 20 >> 2] | 0) != 0) {
       i61 = 114;
       break L177;
      }
      i4 = i106 + 80 | 0;
      if (i4 >>> 0 < i105 >>> 0) {
       i106 = i4;
       i107 = i107 + 2 | 0;
      } else {
       i108 = i5;
       break;
      }
     }
    } else {
     i108 = i103;
    }
    i5 = i104 + 1 | 0;
    if ((i5 | 0) >= 2) {
     break;
    }
    i101 = HEAP32[i108 + 52 >> 2] | 0;
    i102 = HEAP32[i108 + 128 >> 2] | 0;
    i103 = i108;
    i104 = i5;
   }
   if ((i61 | 0) == 114) {
    i15 = _emscripten_realloc_async_context(20) | 0;
    _calccolumn(i107, i106);
    if (___async) {
     HEAP32[i15 >> 2] = 223;
     i109 = i15 + 4 | 0;
     HEAP32[i109 >> 2] = i104;
     i110 = i15 + 8 | 0;
     HEAP32[i110 >> 2] = i107;
     i111 = i15 + 12 | 0;
     HEAP32[i111 >> 2] = i106;
     i112 = i15 + 16 | 0;
     HEAP32[i112 >> 2] = i105;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i15 >> 2] = 223;
    i109 = i15 + 4 | 0;
    HEAP32[i109 >> 2] = i104;
    i110 = i15 + 8 | 0;
    HEAP32[i110 >> 2] = i107;
    i111 = i15 + 12 | 0;
    HEAP32[i111 >> 2] = i106;
    i112 = i15 + 16 | 0;
    HEAP32[i112 >> 2] = i105;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   if ((HEAP32[i108 + 140 >> 2] | 0) != 0) {
    _init_tables(i108);
    STACKTOP = i2;
    return;
   }
   i15 = HEAP32[i108 + 28 >> 2] | 0;
   if ((i15 | 0) == 0) {
    HEAP32[i108 + 64 >> 2] = 0;
    HEAP32[i108 + 68 >> 2] = 0;
    HEAP32[i108 + 72 >> 2] = 286552;
    _dosymetry();
    break;
   }
   i6 = _emscripten_realloc_async_context(4) | 0;
   FUNCTION_TABLE_v[i15 & 63]();
   if (___async) {
    HEAP32[i6 >> 2] = 225;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   ___async_unwind = 0;
   HEAP32[i6 >> 2] = 225;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
 } while (0);
 i108 = HEAP32[71600] | 0;
 i105 = HEAP32[i108 + 28 >> 2] | 0;
 if ((i105 | 0) != 0) {
  i112 = _emscripten_realloc_async_context(4) | 0;
  FUNCTION_TABLE_v[i105 & 63]();
  if (___async) {
   HEAP32[i112 >> 2] = 226;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i112 >> 2] = 226;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i112 = HEAP32[i108 + 52 >> 2] | 0;
 i105 = HEAP32[i108 + 128 >> 2] | 0;
 i106 = i112 + (i105 * 40 | 0) | 0;
 if ((i105 | 0) > 0) {
  i105 = HEAP32[i108 + 16 >> 2] | 0;
  i111 = i112;
  while (1) {
   HEAPF64[i105 >> 3] = +HEAPF64[i111 >> 3];
   i111 = i111 + 40 | 0;
   if (!(i111 >>> 0 < i106 >>> 0)) {
    break;
   } else {
    i105 = i105 + 8 | 0;
   }
  }
 }
 i105 = HEAP32[i108 + 56 >> 2] | 0;
 i106 = HEAP32[i108 + 132 >> 2] | 0;
 i111 = i105 + (i106 * 40 | 0) | 0;
 if ((i106 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i106 = HEAP32[i108 + 20 >> 2] | 0;
 i108 = i105;
 while (1) {
  HEAPF64[i106 >> 3] = +HEAPF64[i108 >> 3];
  i108 = i108 + 40 | 0;
  if (!(i108 >>> 0 < i111 >>> 0)) {
   break;
  } else {
   i106 = i106 + 8 | 0;
  }
 }
 STACKTOP = i2;
 return;
}
function _do_fractal__async_cb138(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, d60 = 0.0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[(HEAP32[71600] | 0) + 72 >> 2] = 286528;
 i1 = HEAP32[71600] | 0;
 L3 : do {
  if ((i3 | 0) != 0) {
   i4 = i1 + 128 | 0;
   i5 = _malloc((HEAP32[i1 + 132 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) << 2) | 0;
   i6 = (HEAP32[i1 + 52 >> 2] | 0) + ((HEAP32[i4 >> 2] | 0) * 40 | 0) | 0;
   HEAP32[i1 + 72 >> 2] = 286624;
   i4 = HEAP32[71600] | 0;
   i7 = HEAP32[i4 + 52 >> 2] | 0;
   if (i7 >>> 0 < i6 >>> 0) {
    i8 = 0;
    i9 = i7;
    do {
     i8 = ((HEAP32[i9 + 32 >> 2] | 0) != 0 & 1) + i8 | 0;
     i9 = i9 + 40 | 0;
    } while (i9 >>> 0 < i6 >>> 0);
    i10 = i7;
    i11 = i5;
    while (1) {
     if ((HEAP32[i10 + 20 >> 2] | 0) == 0) {
      i12 = i10;
      i13 = i11;
     } else {
      if (i10 >>> 0 < i6 >>> 0) {
       i7 = i10;
       i9 = i11;
       while (1) {
        i14 = i9 + 4 | 0;
        HEAP32[i9 >> 2] = i7;
        i15 = i7 + 40 | 0;
        if (i15 >>> 0 < i6 >>> 0 & (HEAP32[i7 + 60 >> 2] | 0) != 0) {
         i7 = i15;
         i9 = i14;
        } else {
         i16 = i15;
         i17 = i14;
         break;
        }
       }
      } else {
       i16 = i10;
       i17 = i11;
      }
      i9 = (i16 | 0) == (i6 | 0) ? i16 + -40 | 0 : i16;
      _addprices(i10, i9);
      i12 = i9;
      i13 = i17;
     }
     i10 = i12 + 40 | 0;
     if (!(i10 >>> 0 < i6 >>> 0)) {
      break;
     } else {
      i11 = i13;
     }
    }
    i18 = HEAP32[71600] | 0;
    i19 = i8;
    i20 = i13;
   } else {
    i18 = i4;
    i19 = 0;
    i20 = i5;
   }
   i9 = HEAP32[i18 + 56 >> 2] | 0;
   i7 = HEAP32[i18 + 132 >> 2] | 0;
   i14 = i9 + (i7 * 40 | 0) | 0;
   if ((i7 | 0) > 0) {
    i7 = 0;
    i15 = i9;
    do {
     i7 = ((HEAP32[i15 + 32 >> 2] | 0) != 0 & 1) + i7 | 0;
     i15 = i15 + 40 | 0;
    } while (i15 >>> 0 < i14 >>> 0);
    i21 = i9;
    i22 = i20;
    while (1) {
     if ((HEAP32[i21 + 20 >> 2] | 0) == 0) {
      i23 = i21;
      i24 = i22;
     } else {
      if (i21 >>> 0 < i14 >>> 0) {
       i9 = i21;
       i15 = i22;
       while (1) {
        i4 = i15 + 4 | 0;
        HEAP32[i15 >> 2] = i9;
        i8 = i9 + 40 | 0;
        if (i8 >>> 0 < i14 >>> 0 & (HEAP32[i9 + 60 >> 2] | 0) != 0) {
         i9 = i8;
         i15 = i4;
        } else {
         i25 = i8;
         i26 = i4;
         break;
        }
       }
      } else {
       i25 = i21;
       i26 = i22;
      }
      i15 = (i25 | 0) == (i14 | 0) ? i25 + -40 | 0 : i25;
      _addprices(i21, i15);
      i23 = i15;
      i24 = i26;
     }
     i21 = i23 + 40 | 0;
     if (!(i21 >>> 0 < i14 >>> 0)) {
      i27 = i7;
      i28 = i24;
      break;
     } else {
      i22 = i24;
     }
    }
   } else {
    i27 = 0;
    i28 = i20;
   }
   i7 = i28 - i5 >> 2;
   _qsort(i5, i7, 4, 3);
   i14 = HEAP32[71600] | 0;
   HEAP32[i14 + 68 >> 2] = i7;
   HEAP32[i14 + 112 >> 2] = 1;
   if (i5 >>> 0 < i28 >>> 0 ? (HEAP32[i14 + 140 >> 2] | 0) == 0 : 0) {
    i7 = HEAP32[i5 >> 2] | 0;
    i15 = i14 + 64 | 0;
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
    if ((i19 | 0) < ((HEAP32[i14 + 128 >> 2] | 0) + -2 | 0) ? (i27 | 0) < ((HEAP32[i14 + 132 >> 2] | 0) + -2 | 0) : 0) {
     HEAP32[i14 + 116 >> 2] = 1;
    }
    i15 = HEAP32[i14 + 28 >> 2] | 0;
    if ((i15 | 0) != 0) {
     i9 = _emscripten_realloc_async_context(32) | 0;
     FUNCTION_TABLE_v[i15 & 63]();
     if (___async) {
      HEAP32[i9 >> 2] = 215;
      i29 = i9 + 4 | 0;
      HEAP32[i29 >> 2] = i7;
      i30 = i9 + 8 | 0;
      HEAP32[i30 >> 2] = i6;
      i31 = i9 + 12 | 0;
      HEAP32[i31 >> 2] = i5;
      i32 = i9 + 16 | 0;
      HEAP32[i32 >> 2] = i19;
      i33 = i9 + 20 | 0;
      HEAP32[i33 >> 2] = i27;
      i34 = i9 + 24 | 0;
      HEAP32[i34 >> 2] = i5;
      i35 = i9 + 28 | 0;
      HEAP32[i35 >> 2] = i28;
      i2 = STACKTOP;
      STACKTOP = i2;
      return;
     }
     ___async_unwind = 0;
     HEAP32[i9 >> 2] = 215;
     i29 = i9 + 4 | 0;
     HEAP32[i29 >> 2] = i7;
     i30 = i9 + 8 | 0;
     HEAP32[i30 >> 2] = i6;
     i31 = i9 + 12 | 0;
     HEAP32[i31 >> 2] = i5;
     i32 = i9 + 16 | 0;
     HEAP32[i32 >> 2] = i19;
     i33 = i9 + 20 | 0;
     HEAP32[i33 >> 2] = i27;
     i34 = i9 + 24 | 0;
     HEAP32[i34 >> 2] = i5;
     i35 = i9 + 28 | 0;
     HEAP32[i35 >> 2] = i28;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    i9 = HEAP32[i14 + 52 >> 2] | 0;
    i15 = HEAP32[i14 + 36 >> 2] | 0;
    if (i7 >>> 0 >= i9 >>> 0 & i7 >>> 0 < i6 >>> 0) {
     i4 = i19 + -1 | 0;
     i8 = _emscripten_realloc_async_context(28) | 0;
     _calccolumn(i15 + ((i7 - i9 | 0) / 40 | 0) | 0, i7);
     if (___async) {
      HEAP32[i8 >> 2] = 216;
      i36 = i8 + 4 | 0;
      HEAP32[i36 >> 2] = i5;
      i37 = i8 + 8 | 0;
      HEAP32[i37 >> 2] = i6;
      i38 = i8 + 12 | 0;
      HEAP32[i38 >> 2] = i28;
      i39 = i8 + 16 | 0;
      HEAP32[i39 >> 2] = i27;
      i40 = i8 + 20 | 0;
      HEAP32[i40 >> 2] = i4;
      i41 = i8 + 24 | 0;
      HEAP32[i41 >> 2] = i5;
      i2 = STACKTOP;
      STACKTOP = i2;
      return;
     }
     ___async_unwind = 0;
     HEAP32[i8 >> 2] = 216;
     i36 = i8 + 4 | 0;
     HEAP32[i36 >> 2] = i5;
     i37 = i8 + 8 | 0;
     HEAP32[i37 >> 2] = i6;
     i38 = i8 + 12 | 0;
     HEAP32[i38 >> 2] = i28;
     i39 = i8 + 16 | 0;
     HEAP32[i39 >> 2] = i27;
     i40 = i8 + 20 | 0;
     HEAP32[i40 >> 2] = i4;
     i41 = i8 + 24 | 0;
     HEAP32[i41 >> 2] = i5;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    } else {
     i8 = i15 + (Math_imul(HEAP32[i14 + 136 >> 2] | 0, (i7 - (HEAP32[i14 + 56 >> 2] | 0) | 0) / 40 | 0) | 0) | 0;
     i15 = i27 + -1 | 0;
     i4 = _emscripten_realloc_async_context(28) | 0;
     _calcline(i8, i7);
     if (___async) {
      HEAP32[i4 >> 2] = 217;
      i42 = i4 + 4 | 0;
      HEAP32[i42 >> 2] = i5;
      i43 = i4 + 8 | 0;
      HEAP32[i43 >> 2] = i6;
      i44 = i4 + 12 | 0;
      HEAP32[i44 >> 2] = i28;
      i45 = i4 + 16 | 0;
      HEAP32[i45 >> 2] = i15;
      i46 = i4 + 20 | 0;
      HEAP32[i46 >> 2] = i19;
      i47 = i4 + 24 | 0;
      HEAP32[i47 >> 2] = i5;
      i2 = STACKTOP;
      STACKTOP = i2;
      return;
     }
     ___async_unwind = 0;
     HEAP32[i4 >> 2] = 217;
     i42 = i4 + 4 | 0;
     HEAP32[i42 >> 2] = i5;
     i43 = i4 + 8 | 0;
     HEAP32[i43 >> 2] = i6;
     i44 = i4 + 12 | 0;
     HEAP32[i44 >> 2] = i28;
     i45 = i4 + 16 | 0;
     HEAP32[i45 >> 2] = i15;
     i46 = i4 + 20 | 0;
     HEAP32[i46 >> 2] = i19;
     i47 = i4 + 24 | 0;
     HEAP32[i47 >> 2] = i5;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
   }
   i4 = HEAP32[i14 + 28 >> 2] | 0;
   if ((i4 | 0) != 0) {
    i14 = _emscripten_realloc_async_context(8) | 0;
    FUNCTION_TABLE_v[i4 & 63]();
    if (___async) {
     HEAP32[i14 >> 2] = 218;
     i48 = i14 + 4 | 0;
     HEAP32[i48 >> 2] = i5;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i14 >> 2] = 218;
    i48 = i14 + 4 | 0;
    HEAP32[i48 >> 2] = i5;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   _free(i5);
   i14 = HEAP32[71600] | 0;
   HEAP32[i14 + 64 >> 2] = 0;
   HEAP32[i14 + 68 >> 2] = 0;
   HEAP32[i14 + 72 >> 2] = 286552;
   i14 = HEAP32[71600] | 0;
   HEAP32[i14 + 112 >> 2] = 0;
   i4 = HEAP32[i14 + 28 >> 2] | 0;
   if ((i4 | 0) != 0) {
    i14 = _emscripten_realloc_async_context(4) | 0;
    FUNCTION_TABLE_v[i4 & 63]();
    if (___async) {
     HEAP32[i14 >> 2] = 219;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i14 >> 2] = 219;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   _dosymetry();
   i14 = HEAP32[71600] | 0;
   if ((HEAP32[i14 + 140 >> 2] | 0) != 0) {
    HEAP32[i14 + 72 >> 2] = 286640;
    i14 = HEAP32[71600] | 0;
    i4 = HEAP32[i14 + 56 >> 2] | 0;
    i15 = HEAP32[i14 + 132 >> 2] | 0;
    i7 = i4 + (i15 * 40 | 0) | 0;
    do {
     if ((i15 | 0) > 0) {
      i8 = i4;
      L74 : while (1) {
       i9 = i8 + 32 | 0;
       L76 : do {
        if ((HEAP32[i9 >> 2] | 0) != 0) {
         i49 = HEAP32[71600] | 0;
         HEAP32[i49 + 120 >> 2] = 1;
         i50 = i8;
         do {
          i51 = i50;
          i50 = i50 + 40 | 0;
          i52 = i50 >>> 0 < i7 >>> 0;
         } while ((HEAP32[i51 + 72 >> 2] | 0) != 0 & i52);
         i51 = i8 + -40 | 0;
         if ((HEAP32[i9 >> 2] | 0) != 0 & i8 >>> 0 < i7 >>> 0) {
          i53 = i52 ^ 1;
          i54 = i49;
          i55 = i9;
          i56 = i8;
          while (1) {
           i57 = HEAP32[i54 + 56 >> 2] | 0;
           i58 = i51 >>> 0 < i57 >>> 0;
           if (i58 | i53) {
            i59 = i58 ? i50 : i51;
           } else {
            d60 = +HEAPF64[i56 >> 3];
            i59 = d60 - +HEAPF64[i51 >> 3] < +HEAPF64[i50 >> 3] - d60 ? i51 : i50;
           }
           if (i59 >>> 0 >= i7 >>> 0 | (HEAP32[i59 + 32 >> 2] | 0) != 0 | i59 >>> 0 < i57 >>> 0) {
            i61 = 53;
            break L74;
           }
           i58 = HEAP32[i54 + 36 >> 2] | 0;
           i62 = HEAP32[i54 + 136 >> 2] | 0;
           i63 = i57;
           i57 = i58 + (Math_imul((i56 - i63 | 0) / 40 | 0, i62) | 0) | 0;
           i64 = i58 + (Math_imul((i59 - i63 | 0) / 40 | 0, i62) | 0) | 0;
           _memcpy(i57 | 0, i64 | 0, HEAP32[i54 + 128 >> 2] | 0) | 0;
           HEAP32[i55 >> 2] = 0;
           HEAPF64[i56 >> 3] = +HEAPF64[i59 >> 3];
           i64 = i56 + 40 | 0;
           i57 = i56 + 72 | 0;
           if (!((HEAP32[i57 >> 2] | 0) != 0 & i64 >>> 0 < i7 >>> 0)) {
            i65 = i64;
            break L76;
           }
           i54 = HEAP32[71600] | 0;
           i55 = i57;
           i56 = i64;
          }
         } else {
          i65 = i8;
         }
        } else {
         i65 = i8;
        }
       } while (0);
       i8 = i65 + 40 | 0;
       if (!(i8 >>> 0 < i7 >>> 0)) {
        i61 = 57;
        break;
       }
      }
      if ((i61 | 0) == 53) {
       _puts(289864) | 0;
       _init_tables(HEAP32[71600] | 0);
       break L3;
      } else if ((i61 | 0) == 57) {
       i8 = HEAP32[71600] | 0;
       i66 = i8;
       i67 = HEAP32[i8 + 132 >> 2] | 0;
       break;
      }
     } else {
      i66 = i14;
      i67 = i15;
     }
    } while (0);
    i15 = HEAP32[i66 + 36 >> 2] | 0;
    i14 = i15 + (Math_imul(HEAP32[i66 + 136 >> 2] | 0, i67) | 0) | 0;
    i7 = HEAP32[i66 + 52 >> 2] | 0;
    i4 = HEAP32[i66 + 128 >> 2] | 0;
    i5 = i7 + (i4 * 40 | 0) | 0;
    if ((i4 | 0) > 0) {
     i4 = i66;
     i6 = 0;
     i8 = i7;
     i7 = i15;
     i15 = 0;
     L94 : while (1) {
      i9 = i8 + 32 | 0;
      do {
       if ((HEAP32[i9 >> 2] | 0) != 0) {
        HEAP32[i4 + 120 >> 2] = 1;
        i56 = i8;
        while (1) {
         i68 = i56 >>> 0 < i5 >>> 0;
         if ((HEAP32[i56 + 32 >> 2] | 0) != 0 & i68) {
          i56 = i56 + 40 | 0;
         } else {
          break;
         }
        }
        i55 = i8 + -40 | 0;
        if ((HEAP32[i9 >> 2] | 0) != 0 & i8 >>> 0 < i5 >>> 0) {
         i54 = i68 ^ 1;
         i69 = i4;
         i50 = i9;
         i51 = i6;
         i53 = 0;
         i49 = i8;
         i64 = i7;
         i57 = i15;
         while (1) {
          i62 = HEAP32[i69 + 52 >> 2] | 0;
          i63 = i55 >>> 0 < i62 >>> 0;
          if (i63 | i54) {
           i70 = i63 ? i56 : i55;
          } else {
           d60 = +HEAPF64[i49 >> 3];
           i70 = d60 - +HEAPF64[i55 >> 3] < +HEAPF64[i56 >> 3] - d60 ? i55 : i56;
          }
          if (i70 >>> 0 >= i5 >>> 0 | (HEAP32[i70 + 32 >> 2] | 0) != 0 | i70 >>> 0 < i62 >>> 0) {
           break L94;
          }
          if ((i70 | 0) == (i53 | 0)) {
           i71 = i69;
           i72 = i51 + 1 | 0;
           i73 = i53;
           i74 = i64;
           i75 = i57;
          } else {
           L110 : do {
            if ((i53 | 0) == 0) {
             i76 = i69;
            } else {
             if ((i51 | 0) != 1) {
              if (i64 >>> 0 < i14 >>> 0) {
               i77 = i64;
               i78 = i57;
              } else {
               i76 = i69;
               break;
              }
              while (1) {
               _memset(i77 | 0, HEAP8[i78 >> 0] | 0, i51 | 0) | 0;
               i62 = HEAP32[71600] | 0;
               i63 = HEAP32[i62 + 136 >> 2] | 0;
               i77 = i77 + i63 | 0;
               if (!(i77 >>> 0 < i14 >>> 0)) {
                i76 = i62;
                break L110;
               } else {
                i78 = i78 + i63 | 0;
               }
              }
             }
             i63 = HEAP32[i69 + 136 >> 2] | 0;
             if (i64 >>> 0 < i14 >>> 0) {
              i79 = i64;
              i80 = i57;
             } else {
              i76 = i69;
              break;
             }
             while (1) {
              HEAP8[i79 >> 0] = HEAP8[i80 >> 0] | 0;
              i79 = i79 + i63 | 0;
              if (!(i79 >>> 0 < i14 >>> 0)) {
               break;
              } else {
               i80 = i80 + i63 | 0;
              }
             }
             i76 = HEAP32[71600] | 0;
            }
           } while (0);
           i63 = HEAP32[i76 + 36 >> 2] | 0;
           i62 = HEAP32[i76 + 52 >> 2] | 0;
           i71 = i76;
           i72 = 1;
           i73 = i70;
           i74 = i63 + ((i49 - i62 | 0) / 40 | 0) | 0;
           i75 = i63 + ((i70 - i62 | 0) / 40 | 0) | 0;
          }
          HEAP32[i50 >> 2] = 0;
          HEAPF64[i49 >> 3] = +HEAPF64[i70 >> 3];
          i62 = i49;
          i49 = i49 + 40 | 0;
          i50 = i62 + 72 | 0;
          if (!((HEAP32[i50 >> 2] | 0) != 0 & i49 >>> 0 < i5 >>> 0)) {
           break;
          } else {
           i69 = i71;
           i51 = i72;
           i53 = i73;
           i64 = i74;
           i57 = i75;
          }
         }
         if ((i73 | 0) != 0) {
          i57 = i74 >>> 0 < i14 >>> 0;
          if ((i72 | 0) == 1) {
           if (i57) {
            i81 = i74;
            i82 = i75;
           } else {
            i83 = i71;
            i84 = 1;
            i85 = i49;
            i86 = i74;
            i87 = i75;
            break;
           }
           while (1) {
            HEAP8[i81 >> 0] = HEAP8[i82 >> 0] | 0;
            i64 = HEAP32[71600] | 0;
            i53 = HEAP32[i64 + 136 >> 2] | 0;
            i51 = i81 + i53 | 0;
            i50 = i82 + i53 | 0;
            if (i51 >>> 0 < i14 >>> 0) {
             i81 = i51;
             i82 = i50;
            } else {
             i83 = i64;
             i84 = 1;
             i85 = i49;
             i86 = i51;
             i87 = i50;
             break;
            }
           }
          } else {
           if (i57) {
            i88 = i74;
            i89 = i75;
           } else {
            i83 = i71;
            i84 = i72;
            i85 = i49;
            i86 = i74;
            i87 = i75;
            break;
           }
           while (1) {
            _memset(i88 | 0, HEAP8[i89 >> 0] | 0, i72 | 0) | 0;
            i50 = HEAP32[71600] | 0;
            i51 = HEAP32[i50 + 136 >> 2] | 0;
            i64 = i88 + i51 | 0;
            i53 = i89 + i51 | 0;
            if (i64 >>> 0 < i14 >>> 0) {
             i88 = i64;
             i89 = i53;
            } else {
             i83 = i50;
             i84 = i72;
             i85 = i49;
             i86 = i64;
             i87 = i53;
             break;
            }
           }
          }
         } else {
          i83 = i71;
          i84 = i72;
          i85 = i49;
          i86 = i74;
          i87 = i75;
         }
        } else {
         i83 = i4;
         i84 = i6;
         i85 = i8;
         i86 = i7;
         i87 = i15;
        }
       } else {
        i83 = i4;
        i84 = i6;
        i85 = i8;
        i86 = i7;
        i87 = i15;
       }
      } while (0);
      i8 = i85 + 40 | 0;
      if (!(i8 >>> 0 < i5 >>> 0)) {
       break L3;
      } else {
       i4 = i83;
       i6 = i84;
       i7 = i86;
       i15 = i87;
      }
     }
     _init_tables(i69);
     _puts(289864) | 0;
    }
   }
  } else {
   HEAP32[i1 + 72 >> 2] = 286576;
   i15 = HEAP32[71600] | 0;
   i7 = i15 + 68 | 0;
   HEAP32[i7 >> 2] = 0;
   HEAP32[i15 + 64 >> 2] = 0;
   i6 = HEAP32[i15 + 56 >> 2] | 0;
   i4 = HEAP32[i15 + 132 >> 2] | 0;
   i5 = i6 + (i4 * 40 | 0) | 0;
   if ((i4 | 0) > 0) {
    i4 = 0;
    i8 = i6;
    while (1) {
     if ((HEAP32[i8 + 20 >> 2] | 0) == 0) {
      i90 = i4;
     } else {
      i6 = i4 + 1 | 0;
      HEAP32[i7 >> 2] = i6;
      i90 = i6;
     }
     i8 = i8 + 40 | 0;
     if (!(i8 >>> 0 < i5 >>> 0)) {
      break;
     } else {
      i4 = i90;
     }
    }
   }
   i4 = HEAP32[i15 + 28 >> 2] | 0;
   if ((i4 | 0) == 0) {
    i91 = i15;
    i92 = 0;
   } else {
    i5 = _emscripten_realloc_async_context(4) | 0;
    FUNCTION_TABLE_v[i4 & 63]();
    if (___async) {
     HEAP32[i5 >> 2] = 220;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i5 >> 2] = 220;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   L148 : while (1) {
    i5 = HEAP32[i91 + 56 >> 2] | 0;
    i4 = HEAP32[i91 + 132 >> 2] | 0;
    i93 = i5 + (i4 * 40 | 0) | 0;
    if ((i92 | 0) < (i4 | 0)) {
     i4 = Math_imul(HEAP32[i91 + 136 >> 2] | 0, i92) | 0;
     i8 = i91;
     i94 = i5 + (i92 * 40 | 0) | 0;
     i95 = (HEAP32[i91 + 36 >> 2] | 0) + i4 | 0;
     while (1) {
      if ((HEAP32[i94 + 20 >> 2] | 0) != 0) {
       i61 = 97;
       break L148;
      }
      i4 = i94 + 80 | 0;
      if (i4 >>> 0 < i93 >>> 0) {
       i94 = i4;
       i95 = i95 + (HEAP32[i8 + 136 >> 2] << 1) | 0;
      } else {
       i96 = i8;
       break;
      }
     }
    } else {
     i96 = i91;
    }
    i8 = i92 + 1 | 0;
    if ((i8 | 0) < 2) {
     i91 = i96;
     i92 = i8;
    } else {
     break;
    }
   }
   if ((i61 | 0) == 97) {
    i15 = _emscripten_realloc_async_context(20) | 0;
    _calcline(i95, i94);
    if (___async) {
     HEAP32[i15 >> 2] = 221;
     i97 = i15 + 4 | 0;
     HEAP32[i97 >> 2] = i92;
     i98 = i15 + 8 | 0;
     HEAP32[i98 >> 2] = i95;
     i99 = i15 + 12 | 0;
     HEAP32[i99 >> 2] = i94;
     i100 = i15 + 16 | 0;
     HEAP32[i100 >> 2] = i93;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i15 >> 2] = 221;
    i97 = i15 + 4 | 0;
    HEAP32[i97 >> 2] = i92;
    i98 = i15 + 8 | 0;
    HEAP32[i98 >> 2] = i95;
    i99 = i15 + 12 | 0;
    HEAP32[i99 >> 2] = i94;
    i100 = i15 + 16 | 0;
    HEAP32[i100 >> 2] = i93;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   HEAP32[i96 + 68 >> 2] = 0;
   HEAP32[i96 + 72 >> 2] = 286600;
   i15 = HEAP32[71600] | 0;
   HEAP32[i15 + 64 >> 2] = 0;
   i8 = HEAP32[i15 + 52 >> 2] | 0;
   i4 = HEAP32[i15 + 128 >> 2] | 0;
   i5 = i8 + (i4 * 40 | 0) | 0;
   if ((i4 | 0) > 0) {
    i7 = i15 + 68 | 0;
    i6 = i8;
    do {
     if ((HEAP32[i6 + 20 >> 2] | 0) != 0) {
      HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
     }
     i6 = i6 + 40 | 0;
    } while (i6 >>> 0 < i5 >>> 0);
    i101 = i8;
    i102 = i4;
    i103 = i15;
    i104 = 0;
   } else {
    i101 = i8;
    i102 = i4;
    i103 = i15;
    i104 = 0;
   }
   L170 : while (1) {
    i105 = i101 + (i102 * 40 | 0) | 0;
    if ((i104 | 0) < (i102 | 0)) {
     i5 = i103;
     i106 = i101 + (i104 * 40 | 0) | 0;
     i107 = (HEAP32[i103 + 36 >> 2] | 0) + i104 | 0;
     while (1) {
      if ((HEAP32[i106 + 20 >> 2] | 0) != 0) {
       i61 = 110;
       break L170;
      }
      i6 = i106 + 80 | 0;
      if (i6 >>> 0 < i105 >>> 0) {
       i106 = i6;
       i107 = i107 + 2 | 0;
      } else {
       i108 = i5;
       break;
      }
     }
    } else {
     i108 = i103;
    }
    i5 = i104 + 1 | 0;
    if ((i5 | 0) >= 2) {
     break;
    }
    i101 = HEAP32[i108 + 52 >> 2] | 0;
    i102 = HEAP32[i108 + 128 >> 2] | 0;
    i103 = i108;
    i104 = i5;
   }
   if ((i61 | 0) == 110) {
    i15 = _emscripten_realloc_async_context(20) | 0;
    _calccolumn(i107, i106);
    if (___async) {
     HEAP32[i15 >> 2] = 223;
     i109 = i15 + 4 | 0;
     HEAP32[i109 >> 2] = i104;
     i110 = i15 + 8 | 0;
     HEAP32[i110 >> 2] = i107;
     i111 = i15 + 12 | 0;
     HEAP32[i111 >> 2] = i106;
     i112 = i15 + 16 | 0;
     HEAP32[i112 >> 2] = i105;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i15 >> 2] = 223;
    i109 = i15 + 4 | 0;
    HEAP32[i109 >> 2] = i104;
    i110 = i15 + 8 | 0;
    HEAP32[i110 >> 2] = i107;
    i111 = i15 + 12 | 0;
    HEAP32[i111 >> 2] = i106;
    i112 = i15 + 16 | 0;
    HEAP32[i112 >> 2] = i105;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   if ((HEAP32[i108 + 140 >> 2] | 0) != 0) {
    _init_tables(i108);
    STACKTOP = i2;
    return;
   }
   i15 = HEAP32[i108 + 28 >> 2] | 0;
   if ((i15 | 0) == 0) {
    HEAP32[i108 + 64 >> 2] = 0;
    HEAP32[i108 + 68 >> 2] = 0;
    HEAP32[i108 + 72 >> 2] = 286552;
    _dosymetry();
    break;
   }
   i4 = _emscripten_realloc_async_context(4) | 0;
   FUNCTION_TABLE_v[i15 & 63]();
   if (___async) {
    HEAP32[i4 >> 2] = 225;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   ___async_unwind = 0;
   HEAP32[i4 >> 2] = 225;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
 } while (0);
 i108 = HEAP32[71600] | 0;
 i105 = HEAP32[i108 + 28 >> 2] | 0;
 if ((i105 | 0) != 0) {
  i112 = _emscripten_realloc_async_context(4) | 0;
  FUNCTION_TABLE_v[i105 & 63]();
  if (___async) {
   HEAP32[i112 >> 2] = 226;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i112 >> 2] = 226;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i112 = HEAP32[i108 + 52 >> 2] | 0;
 i105 = HEAP32[i108 + 128 >> 2] | 0;
 i106 = i112 + (i105 * 40 | 0) | 0;
 if ((i105 | 0) > 0) {
  i105 = HEAP32[i108 + 16 >> 2] | 0;
  i111 = i112;
  while (1) {
   HEAPF64[i105 >> 3] = +HEAPF64[i111 >> 3];
   i111 = i111 + 40 | 0;
   if (!(i111 >>> 0 < i106 >>> 0)) {
    break;
   } else {
    i105 = i105 + 8 | 0;
   }
  }
 }
 i105 = HEAP32[i108 + 56 >> 2] | 0;
 i106 = HEAP32[i108 + 132 >> 2] | 0;
 i111 = i105 + (i106 * 40 | 0) | 0;
 if ((i106 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i106 = HEAP32[i108 + 20 >> 2] | 0;
 i108 = i105;
 while (1) {
  HEAPF64[i106 >> 3] = +HEAPF64[i108 >> 3];
  i108 = i108 + 40 | 0;
  if (!(i108 >>> 0 < i111 >>> 0)) {
   break;
  } else {
   i106 = i106 + 8 | 0;
  }
 }
 STACKTOP = i2;
 return;
}
function _scene4() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0;
 i1 = STACKTOP;
 HEAP32[44868] = _malloc(5120) | 0;
 i2 = HEAP32[12936] | 0;
 _memset(HEAP32[i2 + 164 >> 2] | 0, 32, Math_imul(HEAP32[i2 + 60 >> 2] | 0, HEAP32[i2 + 56 >> 2] | 0) | 0) | 0;
 i2 = HEAP32[12936] | 0;
 _memset(HEAP32[i2 + 168 >> 2] | 0, 0, Math_imul(HEAP32[i2 + 60 >> 2] | 0, HEAP32[i2 + 56 >> 2] | 0) | 0) | 0;
 i2 = HEAP32[12936] | 0;
 i3 = HEAP32[i2 + 56 >> 2] | 0;
 i4 = ~~(1.0e6 / +((i3 + -20 | 0) / 6 | 0 | 0));
 L1 : do {
  if ((i3 + -25 | 0) > 0) {
   i5 = i2;
   i6 = 0;
   while (1) {
    _aa_puts(i5, i6, 0, 0, 179480);
    _aa_puts(HEAP32[12936] | 0, i6, 3, 0, 179480);
    _aa_puts(HEAP32[12936] | 0, i6, 6, 0, 179480);
    _aa_puts(HEAP32[12936] | 0, i6, 9, 0, 179480);
    i7 = _emscripten_alloc_async_context(12) | 0;
    HEAP32[___async_cur_frame + 4 >> 2] = i1;
    _bbflushwait(i4);
    if (___async) {
     break;
    }
    _emscripten_free_async_context(i7 | 0);
    i8 = i6 + 6 | 0;
    i9 = HEAP32[12936] | 0;
    i10 = HEAP32[i9 + 56 >> 2] | 0;
    if ((i8 | 0) < (i10 + -25 | 0)) {
     i5 = i9;
     i6 = i8;
    } else {
     i11 = i10;
     i12 = i9;
     break L1;
    }
   }
   HEAP32[i7 >> 2] = 92;
   HEAP32[i7 + 4 >> 2] = i4;
   HEAP32[i7 + 8 >> 2] = i6;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  } else {
   i11 = i3;
   i12 = i2;
  }
 } while (0);
 i2 = ~~(1.0e6 / +((i11 | 0) / 8 | 0 | 0));
 L7 : do {
  if ((i11 + -7 | 0) > 0) {
   i3 = i12;
   i7 = 0;
   while (1) {
    _aa_puts(i3, i7, (HEAP32[i3 + 60 >> 2] | 0) + -3 | 0, 0, 179488);
    i13 = _emscripten_alloc_async_context(12) | 0;
    HEAP32[___async_cur_frame + 4 >> 2] = i1;
    _bbflushwait(i2);
    if (___async) {
     break;
    }
    _emscripten_free_async_context(i13 | 0);
    i4 = i7 + 8 | 0;
    i5 = HEAP32[12936] | 0;
    if ((i4 | 0) < ((HEAP32[i5 + 56 >> 2] | 0) + -7 | 0)) {
     i3 = i5;
     i7 = i4;
    } else {
     i14 = i5;
     i15 = 0;
     break L7;
    }
   }
   HEAP32[i13 >> 2] = 93;
   HEAP32[i13 + 4 >> 2] = i2;
   HEAP32[i13 + 8 >> 2] = i7;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  } else {
   i14 = i12;
   i15 = 0;
  }
 } while (0);
 while (1) {
  if (((HEAP32[i14 + 56 >> 2] | 0) + -25 | 0) > 0) {
   i12 = i14;
   i13 = 0;
   do {
    _aa_puts(i12, i13, i15, 0, 179496);
    i13 = i13 + 6 | 0;
    i12 = HEAP32[12936] | 0;
   } while ((i13 | 0) < ((HEAP32[i12 + 56 >> 2] | 0) + -25 | 0));
  }
  i16 = _emscripten_alloc_async_context(8) | 0;
  HEAP32[___async_cur_frame + 4 >> 2] = i1;
  _bbflushwait(1e5);
  if (___async) {
   i17 = 12;
   break;
  }
  _emscripten_free_async_context(i16 | 0);
  i12 = i15 + 3 | 0;
  if ((i12 | 0) >= 10) {
   break;
  }
  i14 = HEAP32[12936] | 0;
  i15 = i12;
 }
 if ((i17 | 0) == 12) {
  HEAP32[i16 >> 2] = 94;
  HEAP32[i16 + 4 >> 2] = i15;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 i15 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _bbflushwait(2e5);
 if (___async) {
  HEAP32[i15 >> 2] = 95;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i15 | 0);
 i15 = HEAP32[12936] | 0;
 i16 = HEAP32[i15 + 56 >> 2] | 0;
 i14 = HEAP32[i15 + 60 >> 2] | 0;
 _memset(HEAP32[i15 + 164 >> 2] | 0, 32, Math_imul((i14 | 0) > 15 ? 15 : i14, i16) | 0) | 0;
 i14 = 0;
 i15 = 0;
 i12 = (i16 | 0) / 2 | 0;
 i16 = 0;
 L26 : while (1) {
  i18 = i14;
  i19 = 0;
  i20 = i15;
  i21 = i12;
  while (1) {
   i13 = (i18 | 0) > 7;
   i18 = i13 ? 0 : i18 + 1 | 0;
   i7 = i13 & 1;
   i13 = i20;
   i20 = i7 ^ i20;
   i2 = HEAP32[12936] | 0;
   if (((HEAP32[i2 + 56 >> 2] | 0) + -25 | 0) > 0) {
    i11 = (i13 | 0) != (i7 | 0) ? 179504 : 179512;
    i7 = i2;
    i13 = 0;
    while (1) {
     i3 = i13 + i19 | 0;
     _aa_puts(i7, i3, i16, 0, i11);
     _aa_puts(HEAP32[12936] | 0, i3, i16 + 3 | 0, 0, i11);
     _aa_puts(HEAP32[12936] | 0, i3, i16 + 6 | 0, 0, i11);
     _aa_puts(HEAP32[12936] | 0, i3, i16 + 9 | 0, 0, i11);
     i13 = i13 + 6 | 0;
     i3 = HEAP32[12936] | 0;
     if ((i13 | 0) >= ((HEAP32[i3 + 56 >> 2] | 0) + -25 | 0)) {
      i22 = i3;
      break;
     } else {
      i7 = i3;
     }
    }
   } else {
    i22 = i2;
   }
   _aa_puts(i22, i21, (HEAP32[i22 + 60 >> 2] | 0) + -1 | 0, 0, 179520);
   i21 = i21 + -1 + ((_rand() | 0) % 3 | 0) | 0;
   i23 = _emscripten_alloc_async_context(24) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _bbflushwait(2e4);
   if (___async) {
    i17 = 23;
    break L26;
   }
   _emscripten_free_async_context(i23 | 0);
   i7 = i19 + 1 | 0;
   if ((i7 | 0) == 20) {
    break;
   } else {
    i19 = i7;
   }
  }
  i24 = i16 | 1;
  i7 = HEAP32[12936] | 0;
  i13 = HEAP32[i7 + 60 >> 2] | 0;
  _memset(HEAP32[i7 + 164 >> 2] | 0, 32, Math_imul((i13 | 0) > 15 ? 15 : i13, HEAP32[i7 + 56 >> 2] | 0) | 0) | 0;
  i25 = i18;
  i26 = 20;
  i27 = i20;
  i28 = i21;
  while (1) {
   i7 = (i25 | 0) > 7;
   i25 = i7 ? 0 : i25 + 1 | 0;
   i13 = i7 & 1;
   i7 = i27;
   i27 = i13 ^ i27;
   i11 = HEAP32[12936] | 0;
   if (((HEAP32[i11 + 56 >> 2] | 0) + -25 | 0) > 0) {
    i3 = (i7 | 0) != (i13 | 0) ? 179504 : 179512;
    i13 = i11;
    i7 = 0;
    while (1) {
     i6 = i7 + i26 | 0;
     _aa_puts(i13, i6, i24, 0, i3);
     _aa_puts(HEAP32[12936] | 0, i6, i24 + 3 | 0, 0, i3);
     _aa_puts(HEAP32[12936] | 0, i6, i24 + 6 | 0, 0, i3);
     _aa_puts(HEAP32[12936] | 0, i6, i24 + 9 | 0, 0, i3);
     i7 = i7 + 6 | 0;
     i6 = HEAP32[12936] | 0;
     if ((i7 | 0) >= ((HEAP32[i6 + 56 >> 2] | 0) + -25 | 0)) {
      i29 = i6;
      break;
     } else {
      i13 = i6;
     }
    }
   } else {
    i29 = i11;
   }
   _aa_puts(i29, i28, (HEAP32[i29 + 60 >> 2] | 0) + -1 | 0, 0, 179520);
   i28 = i28 + -1 + ((_rand() | 0) % 3 | 0) | 0;
   i30 = _emscripten_alloc_async_context(28) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _bbflushwait(2e4);
   if (___async) {
    i17 = 30;
    break L26;
   }
   _emscripten_free_async_context(i30 | 0);
   i13 = i26 + -1 | 0;
   if ((i13 | 0) == 0) {
    break;
   } else {
    i26 = i13;
   }
  }
  i13 = i16 + 2 | 0;
  i7 = HEAP32[12936] | 0;
  i3 = HEAP32[i7 + 60 >> 2] | 0;
  _memset(HEAP32[i7 + 164 >> 2] | 0, 32, Math_imul((i3 | 0) > 15 ? 15 : i3, HEAP32[i7 + 56 >> 2] | 0) | 0) | 0;
  if ((i13 | 0) < 5) {
   i14 = i25;
   i15 = i27;
   i12 = i28;
   i16 = i13;
  } else {
   i31 = i25;
   i32 = 0;
   i33 = i27;
   i34 = i28;
   i17 = 33;
   break;
  }
 }
 if ((i17 | 0) == 23) {
  HEAP32[i23 >> 2] = 96;
  HEAP32[i23 + 4 >> 2] = i19;
  HEAP32[i23 + 8 >> 2] = i16;
  HEAP32[i23 + 12 >> 2] = i21;
  HEAP32[i23 + 16 >> 2] = i20;
  HEAP32[i23 + 20 >> 2] = i18;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else if ((i17 | 0) == 30) {
  HEAP32[i30 >> 2] = 97;
  HEAP32[i30 + 4 >> 2] = i28;
  HEAP32[i30 + 8 >> 2] = i27;
  HEAP32[i30 + 12 >> 2] = i25;
  HEAP32[i30 + 16 >> 2] = i16;
  HEAP32[i30 + 20 >> 2] = i24;
  HEAP32[i30 + 24 >> 2] = i26;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else if ((i17 | 0) == 33) {
  while (1) {
   i17 = 0;
   i26 = (i31 | 0) > 7;
   i31 = i26 ? 0 : i31 + 1 | 0;
   i30 = i26 & 1;
   i26 = i33;
   i33 = i30 ^ i33;
   i24 = HEAP32[12936] | 0;
   if (((HEAP32[i24 + 56 >> 2] | 0) + -25 | 0) > 0) {
    i16 = (i26 | 0) != (i30 | 0) ? 179504 : 179512;
    i30 = i24;
    i26 = 0;
    while (1) {
     i25 = i26 + i32 | 0;
     _aa_puts(i30, i25, 6, 0, i16);
     _aa_puts(HEAP32[12936] | 0, i25, 9, 0, i16);
     _aa_puts(HEAP32[12936] | 0, i25, 12, 0, i16);
     _aa_puts(HEAP32[12936] | 0, i25, 15, 0, i16);
     i26 = i26 + 6 | 0;
     i25 = HEAP32[12936] | 0;
     if ((i26 | 0) >= ((HEAP32[i25 + 56 >> 2] | 0) + -25 | 0)) {
      i35 = i25;
      break;
     } else {
      i30 = i25;
     }
    }
   } else {
    i35 = i24;
   }
   _aa_puts(i35, i34, (HEAP32[i35 + 60 >> 2] | 0) + -1 | 0, 0, 179520);
   i34 = i34 + -1 + ((_rand() | 0) % 3 | 0) | 0;
   i36 = _emscripten_alloc_async_context(20) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _bbflushwait(1e4);
   if (___async) {
    i17 = 37;
    break;
   }
   _emscripten_free_async_context(i36 | 0);
   i30 = i32 + 1 | 0;
   if ((i30 | 0) == 10) {
    i37 = 0;
    break;
   } else {
    i32 = i30;
    i17 = 33;
   }
  }
  if ((i17 | 0) == 37) {
   HEAP32[i36 >> 2] = 98;
   HEAP32[i36 + 4 >> 2] = i34;
   HEAP32[i36 + 8 >> 2] = i32;
   HEAP32[i36 + 12 >> 2] = i33;
   HEAP32[i36 + 16 >> 2] = i31;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  }
  while (1) {
   i31 = HEAP32[12936] | 0;
   if (((HEAP32[i31 + 56 >> 2] | 0) + -25 | 0) > 0) {
    i36 = i31;
    i31 = 0;
    do {
     i33 = i31 + 10 | 0;
     _aa_puts(i36, i33, 6, 0, 179528);
     _aa_puts(HEAP32[12936] | 0, i33, 9, 0, 179528);
     _aa_puts(HEAP32[12936] | 0, i33, 12, 0, 179528);
     _aa_puts(HEAP32[12936] | 0, i33, 15, 0, 179528);
     i31 = i31 + 6 | 0;
     i36 = HEAP32[12936] | 0;
    } while ((i31 | 0) < ((HEAP32[i36 + 56 >> 2] | 0) + -25 | 0));
   }
   i38 = _emscripten_alloc_async_context(12) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _bbflushwait(1e5);
   if (___async) {
    i17 = 42;
    break;
   }
   _emscripten_free_async_context(i38 | 0);
   i36 = HEAP32[12936] | 0;
   if (((HEAP32[i36 + 56 >> 2] | 0) + -25 | 0) > 0) {
    i31 = i36;
    i36 = 0;
    do {
     i24 = i36 + 10 | 0;
     _aa_puts(i31, i24, 6, 0, 179536);
     _aa_puts(HEAP32[12936] | 0, i24, 9, 0, 179536);
     _aa_puts(HEAP32[12936] | 0, i24, 12, 0, 179536);
     _aa_puts(HEAP32[12936] | 0, i24, 15, 0, 179536);
     i36 = i36 + 6 | 0;
     i31 = HEAP32[12936] | 0;
    } while ((i36 | 0) < ((HEAP32[i31 + 56 >> 2] | 0) + -25 | 0));
   }
   i39 = _emscripten_alloc_async_context(12) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _bbflushwait(1e5);
   if (___async) {
    i17 = 46;
    break;
   }
   _emscripten_free_async_context(i39 | 0);
   i31 = i37 + 1 | 0;
   if ((i31 | 0) == 5) {
    i17 = 48;
    break;
   } else {
    i37 = i31;
   }
  }
  if ((i17 | 0) == 42) {
   HEAP32[i38 >> 2] = 99;
   HEAP32[i38 + 4 >> 2] = i34;
   HEAP32[i38 + 8 >> 2] = i37;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  } else if ((i17 | 0) == 46) {
   HEAP32[i39 >> 2] = 100;
   HEAP32[i39 + 4 >> 2] = i34;
   HEAP32[i39 + 8 >> 2] = i37;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  } else if ((i17 | 0) == 48) {
   i17 = HEAP32[12936] | 0;
   i37 = HEAP32[i17 + 60 >> 2] | 0;
   if ((i37 | 0) < 20) {
    i40 = (i37 | 0) / 2 | 0;
   } else {
    i40 = i37 + -10 | 0;
   }
   i39 = i40 + -6 | 0;
   L76 : do {
    if ((i39 | 0) < 1) {
     i40 = _emscripten_alloc_async_context(4) | 0;
     HEAP32[___async_cur_frame + 4 >> 2] = i1;
     _bbflushwait(7e5);
     if (___async) {
      HEAP32[i40 >> 2] = 101;
      i1 = STACKTOP;
      STACKTOP = i1;
      return;
     } else {
      _emscripten_free_async_context(i40 | 0);
      i41 = HEAP32[12936] | 0;
      break;
     }
    } else {
     i40 = ~~(7.0e5 / +(i39 | 0));
     L82 : do {
      if ((i37 | 0) > 13) {
       i38 = i17;
       i31 = 6;
       i36 = i34;
       while (1) {
        if (((HEAP32[i38 + 56 >> 2] | 0) + -25 | 0) > 0) {
         i24 = i38;
         i33 = 0;
         while (1) {
          i32 = i33 + 10 | 0;
          i35 = i24;
          i30 = 0;
          while (1) {
           i26 = i30 + i31 | 0;
           _aa_puts(i35, i32, i26, 0, 179544);
           _aa_puts(HEAP32[12936] | 0, i32, i26 + 1 | 0, 0, 179552);
           i26 = i30 + 3 | 0;
           if ((i26 | 0) >= 10) {
            break;
           }
           i35 = HEAP32[12936] | 0;
           i30 = i26;
          }
          i33 = i33 + 6 | 0;
          i30 = HEAP32[12936] | 0;
          if ((i33 | 0) >= ((HEAP32[i30 + 56 >> 2] | 0) + -25 | 0)) {
           i42 = i30;
           break;
          } else {
           i24 = i30;
          }
         }
        } else {
         i42 = i38;
        }
        i24 = i36 + -2 | 0;
        _aa_puts(i42, i24, (HEAP32[i42 + 60 >> 2] | 0) + -1 | 0, 0, 179560);
        i43 = i24 + ((_rand() | 0) % 5 | 0) | 0;
        i44 = _emscripten_alloc_async_context(16) | 0;
        HEAP32[___async_cur_frame + 4 >> 2] = i1;
        _bbflushwait(i40);
        if (___async) {
         break;
        }
        _emscripten_free_async_context(i44 | 0);
        i24 = i31 + 1 | 0;
        i33 = HEAP32[12936] | 0;
        i30 = HEAP32[i33 + 60 >> 2] | 0;
        if ((i24 | 0) < ((i30 | 0) / 2 | 0 | 0)) {
         i38 = i33;
         i31 = i24;
         i36 = i43;
        } else {
         i45 = i30;
         i46 = i33;
         i47 = i24;
         i48 = i43;
         break L82;
        }
       }
       HEAP32[i44 >> 2] = 102;
       HEAP32[i44 + 4 >> 2] = i40;
       HEAP32[i44 + 8 >> 2] = i43;
       HEAP32[i44 + 12 >> 2] = i31;
       i1 = STACKTOP;
       STACKTOP = i1;
       return;
      } else {
       i45 = i37;
       i46 = i17;
       i47 = 6;
       i48 = i34;
      }
     } while (0);
     if ((i47 | 0) < (i45 + -10 | 0)) {
      i36 = i46;
      i38 = i47;
      i11 = i48;
      while (1) {
       if (((HEAP32[i36 + 56 >> 2] | 0) + -25 | 0) > 0) {
        i24 = i36;
        i33 = 0;
        while (1) {
         i30 = i33 + 10 | 0;
         i35 = i24;
         i32 = 0;
         while (1) {
          i26 = i32 + i38 | 0;
          _aa_puts(i35, i30, i26, 0, 179544);
          _aa_puts(HEAP32[12936] | 0, i30, i26 + 1 | 0, 0, 179576);
          i26 = i32 + 3 | 0;
          if ((i26 | 0) >= 10) {
           break;
          }
          i35 = HEAP32[12936] | 0;
          i32 = i26;
         }
         i33 = i33 + 6 | 0;
         i32 = HEAP32[12936] | 0;
         if ((i33 | 0) >= ((HEAP32[i32 + 56 >> 2] | 0) + -25 | 0)) {
          i49 = i32;
          break;
         } else {
          i24 = i32;
         }
        }
       } else {
        i49 = i36;
       }
       _aa_puts(i49, i11 + -2 | 0, (HEAP32[i49 + 60 >> 2] | 0) + -1 | 0, 0, 179584);
       i11 = i11 + -3 + ((_rand() | 0) % 7 | 0) | 0;
       i50 = _emscripten_alloc_async_context(16) | 0;
       HEAP32[___async_cur_frame + 4 >> 2] = i1;
       _bbflushwait(i40);
       if (___async) {
        break;
       }
       _emscripten_free_async_context(i50 | 0);
       i24 = i38 + 1 | 0;
       i33 = HEAP32[12936] | 0;
       if ((i24 | 0) >= ((HEAP32[i33 + 60 >> 2] | 0) + -10 | 0)) {
        i41 = i33;
        break L76;
       } else {
        i36 = i33;
        i38 = i24;
       }
      }
      HEAP32[i50 >> 2] = 103;
      HEAP32[i50 + 4 >> 2] = i38;
      HEAP32[i50 + 8 >> 2] = i11;
      HEAP32[i50 + 12 >> 2] = i40;
      i1 = STACKTOP;
      STACKTOP = i1;
      return;
     } else {
      i41 = i46;
     }
    }
   } while (0);
   _free(HEAP32[i41 + 160 >> 2] | 0);
   i41 = HEAP32[12936] | 0;
   HEAP32[i41 + 160 >> 2] = _malloc(Math_imul((HEAP32[i41 + 156 >> 2] | 0) + 4 | 0, HEAP32[i41 + 152 >> 2] | 0) | 0) | 0;
   i41 = HEAP32[12936] | 0;
   _backconvert(0, 0, HEAP32[i41 + 56 >> 2] | 0, HEAP32[i41 + 60 >> 2] | 0);
   HEAP32[HEAP32[22682] >> 2] = 120;
   HEAP32[34] = 0;
   i41 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _draw();
   if (___async) {
    HEAP32[i41 >> 2] = 104;
    i1 = STACKTOP;
    STACKTOP = i1;
    return;
   }
   _emscripten_free_async_context(i41 | 0);
   i41 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _bbflushwait(1e5);
   if (___async) {
    HEAP32[i41 >> 2] = 105;
    i1 = STACKTOP;
    STACKTOP = i1;
    return;
   }
   _emscripten_free_async_context(i41 | 0);
   HEAP32[HEAP32[22682] >> 2] = 255;
   i41 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _draw();
   if (___async) {
    HEAP32[i41 >> 2] = 106;
    i1 = STACKTOP;
    STACKTOP = i1;
    return;
   }
   _emscripten_free_async_context(i41 | 0);
   i41 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _bbflushwait(1e5);
   if (___async) {
    HEAP32[i41 >> 2] = 107;
    i1 = STACKTOP;
    STACKTOP = i1;
    return;
   }
   _emscripten_free_async_context(i41 | 0);
   i41 = HEAP32[12936] | 0;
   i46 = HEAP32[i41 + 152 >> 2] | 0;
   if ((i46 + -20 | 0) > 20) {
    i50 = i41;
    i41 = i46;
    i46 = 20;
    do {
     i49 = (Math_imul((HEAP32[i50 + 156 >> 2] | 0) + -10 | 0, i41) | 0) + i46 | 0;
     HEAP8[(HEAP32[i50 + 160 >> 2] | 0) + i49 >> 0] = -1;
     i49 = HEAP32[12936] | 0;
     i48 = (Math_imul((HEAP32[i49 + 156 >> 2] | 0) + -11 | 0, HEAP32[i49 + 152 >> 2] | 0) | 0) + i46 | 0;
     HEAP8[(HEAP32[i49 + 160 >> 2] | 0) + i48 >> 0] = -1;
     i48 = HEAP32[12936] | 0;
     i49 = (Math_imul((HEAP32[i48 + 156 >> 2] | 0) + -12 | 0, HEAP32[i48 + 152 >> 2] | 0) | 0) + i46 | 0;
     HEAP8[(HEAP32[i48 + 160 >> 2] | 0) + i49 >> 0] = -1;
     i49 = HEAP32[12936] | 0;
     i48 = (Math_imul((HEAP32[i49 + 156 >> 2] | 0) + -13 | 0, HEAP32[i49 + 152 >> 2] | 0) | 0) + i46 | 0;
     HEAP8[(HEAP32[i49 + 160 >> 2] | 0) + i48 >> 0] = -1;
     i50 = HEAP32[12936] | 0;
     i48 = 800 / (HEAP32[i50 + 156 >> 2] | 0) | 0;
     HEAP32[44902] = HEAP32[i50 + 160 >> 2];
     i49 = (i48 | 0) == 0 ? 1 : i48;
     i48 = HEAP32[44868] | 0;
     i47 = 0;
     do {
      if (i47 >>> 0 > i49 >>> 0) {
       HEAP32[i48 + (i47 << 2) >> 2] = ((i47 - i49 | 0) >>> 0) / 5 | 0;
      } else {
       HEAP32[i48 + (i47 << 2) >> 2] = 0;
      }
      i47 = i47 + 1 | 0;
     } while ((i47 | 0) != 1280);
     i46 = i46 + 1 | 0;
     i41 = HEAP32[i50 + 152 >> 2] | 0;
    } while ((i46 | 0) < (i41 + -20 | 0));
   }
   i41 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _timestuff(-25, 108, 10, 7e6);
   if (___async) {
    HEAP32[i41 >> 2] = 109;
    i1 = STACKTOP;
    STACKTOP = i1;
    return;
   } else {
    _emscripten_free_async_context(i41 | 0);
    _free(HEAP32[44868] | 0);
    STACKTOP = i1;
    return;
   }
  }
 }
}
function _mkrealloc_table(i1, i2, i3, d4, d5, d6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 d4 = +d4;
 d5 = +d5;
 d6 = +d6;
 var i7 = 0, d8 = 0.0, d9 = 0.0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, d14 = 0.0, i15 = 0, d16 = 0.0, i17 = 0, d18 = 0.0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, d23 = 0.0, i24 = 0, i25 = 0, d26 = 0.0, d27 = 0.0, d28 = 0.0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, d39 = 0.0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, d84 = 0.0, d85 = 0.0, i86 = 0, i87 = 0, d88 = 0.0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, d93 = 0.0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, d98 = 0.0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, d105 = 0.0, i106 = 0, d107 = 0.0, i108 = 0, d109 = 0.0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0;
 i7 = STACKTOP;
 d8 = (d5 - d4) / +(i3 | 0);
 d9 = d8 * 4.0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (i3 * 72 | 0) | 0) + 15 & -16) | 0;
 i11 = i3 << 2;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i11 | 0) + 15 & -16) | 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i11 | 0) + 15 & -16) | 0;
 i11 = d4 > d6 ? -2 : -1;
 HEAPF64[i1 + (i3 << 3) >> 3] = d8 * 20.0 + d5;
 d14 = 512.0 / (d9 * d9);
 i15 = (i3 | 0) > 0;
 if (i15) {
  d16 = d4 - d8;
  i17 = i3 << 3;
  d18 = d8 + d5;
  i19 = i12;
  i12 = i13;
  i13 = 0;
  i20 = 0;
  i21 = 0;
  i22 = i11;
  while (1) {
   d23 = d8 * +(i13 | 0) + d4;
   i24 = i13 + -1 | 0;
   i25 = d23 > d6 & (i22 | 0) == -1 ? i24 : i22;
   d26 = d23 - d9;
   d27 = d8 + d26;
   d28 = d27 < d16 ? d16 : d27;
   i29 = i21;
   while (1) {
    if (!((i29 | 0) < (i3 | 0) ? +HEAPF64[i1 + (i29 << 3) >> 3] < d28 : 0)) {
     break;
    }
    i29 = i29 + 1 | 0;
   }
   if ((i29 | 0) != 0) {
    i30 = i29 + -1 | 0;
    if (+HEAPF64[i1 + (i30 << 3) >> 3] > d26) {
     i31 = i30;
    } else {
     i31 = i29;
    }
   } else {
    i31 = 0;
   }
   d28 = d9 + d23;
   i30 = (i21 | 0) != (i20 | 0);
   if (!(i30 & (i31 | 0) > (i21 | 0))) {
    if ((i13 | 0) > 0) {
     i32 = i24 + i17 | 0;
     i33 = HEAP32[i10 + (i32 << 3) >> 2] | 0;
     i34 = i32;
    } else {
     i33 = 0;
     i34 = 1073741824;
    }
   } else {
    i32 = HEAP32[i12 + (((i31 | 0) < (i20 | 0) ? i31 : i20) + -1 << 2) >> 2] | 0;
    i33 = HEAP32[i10 + (i32 << 3) >> 2] | 0;
    i34 = i32;
   }
   i32 = i13 + i17 | 0;
   i35 = i33 + 512 | 0;
   HEAP32[i10 + (i32 << 3) + 4 >> 2] = i34;
   HEAP32[i10 + (i32 << 3) >> 2] = i35;
   d27 = d28 > d18 ? d18 : d28;
   i36 = i31 << 3 | i13 & 7;
   i37 = i10 + (i36 << 3) | 0;
   if (i30) {
    if ((i31 | 0) == (i21 | 0)) {
     d28 = +HEAPF64[i1 + (i21 << 3) >> 3];
     i30 = i21 + 1 | 0;
     if (d28 != +HEAPF64[i1 + (i30 << 3) >> 3]) {
      i38 = i24 + i17 | 0;
      d39 = d28 - d23;
      i40 = ~~(d14 * d39 * d39 + +(HEAP32[i10 + (i38 << 3) >> 2] | 0));
      if ((i40 | 0) < (i35 | 0)) {
       HEAP32[i37 >> 2] = i40;
       HEAP32[i10 + (i36 << 3) + 4 >> 2] = i38;
       i41 = i36;
       i42 = i40;
       i43 = i40;
      } else {
       i41 = i32;
       i42 = i35;
       i43 = i40;
      }
     } else {
      i41 = i32;
      i42 = i35;
      i43 = i35;
     }
     HEAP32[i19 + (i21 << 2) >> 2] = i41;
     i40 = i36 + 8 | 0;
     i44 = i41;
     i45 = i42;
     i46 = i40;
     i47 = i10 + (i40 << 3) | 0;
     i48 = i43;
     i49 = i30;
    } else {
     i44 = i32;
     i45 = i35;
     i46 = i36;
     i47 = i37;
     i48 = i35;
     i49 = i31;
    }
    if ((i49 | 0) < (i20 | 0)) {
     i30 = i20 << 3;
     i40 = i49 << 3;
     i38 = i30 - i40 | 0;
     i50 = i46 + i30 | 0;
     d39 = +HEAPF64[i1 + (i49 << 3) >> 3];
     i30 = i44;
     i51 = i45;
     i52 = i46;
     i53 = i47;
     i54 = i48;
     i55 = i49;
     i56 = -1;
     i57 = 2147483647;
     while (1) {
      i58 = i1 + (i55 << 3) | 0;
      i59 = i55;
      i55 = i55 + 1 | 0;
      d28 = d39;
      d39 = +HEAPF64[i1 + (i55 << 3) >> 3];
      if (d28 != d39) {
       i60 = i59 + -1 | 0;
       i61 = HEAP32[i12 + (i60 << 2) >> 2] | 0;
       if ((i56 | 0) != (i61 | 0)) {
        i62 = HEAP32[i10 + (i61 << 3) >> 2] | 0;
        i63 = i62 + 512 | 0;
        if ((i63 | 0) < (i51 | 0)) {
         i64 = i52 + -8 | 0;
         HEAP32[i53 + -64 >> 2] = i63;
         HEAP32[i53 + -60 >> 2] = i61 | -2147483648;
         HEAP32[i19 + (i60 << 2) >> 2] = i64;
         i65 = i64;
         i66 = i63;
         i67 = i62;
         i68 = i61;
        } else {
         i65 = i30;
         i66 = i51;
         i67 = i62;
         i68 = i61;
        }
       } else {
        i65 = i30;
        i66 = i51;
        i67 = i57;
        i68 = i56;
       }
       d28 = +HEAPF64[i58 >> 3] - d23;
       i69 = i65;
       i70 = i66;
       i71 = ~~(+(i67 | 0) + d14 * d28 * d28);
       i72 = i68;
       i73 = i67;
      } else {
       i69 = i30;
       i70 = i51;
       i71 = i54 + 512 | 0;
       i72 = i56;
       i73 = i57;
      }
      if ((i71 | 0) < (i70 | 0)) {
       HEAP32[i53 >> 2] = i71;
       HEAP32[i53 + 4 >> 2] = i72;
       i74 = i52;
       i75 = i71;
      } else {
       i74 = i69;
       i75 = i70;
      }
      HEAP32[i19 + (i59 << 2) >> 2] = i74;
      if ((i55 | 0) == (i20 | 0)) {
       break;
      } else {
       i30 = i74;
       i51 = i75;
       i52 = i52 + 8 | 0;
       i53 = i53 + 64 | 0;
       i54 = i71;
       i56 = i72;
       i57 = i73;
      }
     }
     i76 = i74;
     i77 = i75;
     i78 = i50 - i40 | 0;
     i79 = i47 + (i38 << 3) | 0;
     i80 = i20;
    } else {
     i76 = i44;
     i77 = i45;
     i78 = i46;
     i79 = i47;
     i80 = i49;
    }
    if ((i80 | 0) > (i21 | 0)) {
     i81 = HEAP32[i12 + (i80 + -1 << 2) >> 2] | 0;
    } else {
     i81 = i24 + i17 | 0;
    }
    i57 = HEAP32[i10 + (i81 << 3) >> 2] | 0;
    i56 = i57 + 512 | 0;
    if ((i56 | 0) < (i77 | 0) & (i80 | 0) > (i31 | 0)) {
     i54 = i78 + -8 | 0;
     HEAP32[i79 + -64 >> 2] = i56;
     HEAP32[i79 + -60 >> 2] = i81 | -2147483648;
     HEAP32[i19 + (i80 + -1 << 2) >> 2] = i54;
     i82 = i54;
     i83 = i56;
    } else {
     i82 = i76;
     i83 = i77;
    }
    d39 = +HEAPF64[i1 + (i80 << 3) >> 3];
    L51 : do {
     if (d39 < d27) {
      d26 = +(i57 | 0);
      d28 = d39;
      i56 = i82;
      i54 = i83;
      i53 = i78;
      i52 = i79;
      i51 = i80;
      L53 : while (1) {
       i30 = i51 + 1 | 0;
       d84 = +HEAPF64[i1 + (i30 << 3) >> 3];
       do {
        if (d28 != d84) {
         d85 = d28 - d23;
         i55 = ~~(d26 + d14 * d85 * d85);
         if ((i55 | 0) >= (i54 | 0)) {
          if (d28 > d23) {
           break L53;
          } else {
           i86 = i56;
           i87 = i54;
           break;
          }
         } else {
          HEAP32[i52 >> 2] = i55;
          HEAP32[i52 + 4 >> 2] = i81;
          i86 = i53;
          i87 = i55;
          break;
         }
        } else {
         i86 = i56;
         i87 = i54;
        }
       } while (0);
       HEAP32[i19 + (i51 << 2) >> 2] = i86;
       if (d84 < d27) {
        d28 = d84;
        i56 = i86;
        i54 = i87;
        i53 = i53 + 8 | 0;
        i52 = i52 + 64 | 0;
        i51 = i30;
       } else {
        d88 = d84;
        i89 = i86;
        i90 = i30;
        break L51;
       }
      }
      d88 = +HEAPF64[i1 + (i51 << 3) >> 3];
      i89 = i56;
      i90 = i51;
     } else {
      d88 = d39;
      i89 = i82;
      i90 = i80;
     }
    } while (0);
    if (d88 < d27) {
     i57 = i90;
     while (1) {
      HEAP32[i19 + (i57 << 2) >> 2] = i89;
      i38 = i57 + 1 | 0;
      if (+HEAPF64[i1 + (i38 << 3) >> 3] < d27) {
       i57 = i38;
      } else {
       i91 = i89;
       i92 = i38;
       break;
      }
     }
    } else {
     i91 = i89;
     i92 = i90;
    }
   } else {
    d39 = +HEAPF64[i1 + (i31 << 3) >> 3];
    if (d39 < d27) {
     if ((i13 | 0) > 0) {
      i57 = i24 + i17 | 0;
      d93 = +(HEAP32[i10 + (i57 << 3) >> 2] | 0);
      i94 = i57;
     } else {
      d93 = 0.0;
      i94 = 1073741824;
     }
     d28 = d39;
     i57 = i32;
     i38 = i35;
     i40 = i36;
     i50 = i37;
     i52 = i31;
     L70 : while (1) {
      i53 = i52 + 1 | 0;
      d39 = +HEAPF64[i1 + (i53 << 3) >> 3];
      do {
       if (d28 != d39) {
        d26 = d28 - d23;
        i54 = ~~(d93 + d14 * d26 * d26);
        if ((i54 | 0) >= (i38 | 0)) {
         if (d28 > d23) {
          i95 = 55;
          break L70;
         } else {
          i96 = i57;
          i97 = i38;
          break;
         }
        } else {
         HEAP32[i50 >> 2] = i54;
         HEAP32[i50 + 4 >> 2] = i94;
         i96 = i40;
         i97 = i54;
         break;
        }
       } else {
        i96 = i57;
        i97 = i38;
       }
      } while (0);
      HEAP32[i19 + (i52 << 2) >> 2] = i96;
      if (d39 < d27) {
       d28 = d39;
       i57 = i96;
       i38 = i97;
       i40 = i40 + 8 | 0;
       i50 = i50 + 64 | 0;
       i52 = i53;
      } else {
       d98 = d39;
       i99 = i96;
       i100 = i53;
       break;
      }
     }
     if ((i95 | 0) == 55) {
      i95 = 0;
      d98 = +HEAPF64[i1 + (i52 << 3) >> 3];
      i99 = i57;
      i100 = i52;
     }
     if (d98 < d27) {
      i50 = i100;
      while (1) {
       HEAP32[i19 + (i50 << 2) >> 2] = i99;
       i40 = i50 + 1 | 0;
       if (+HEAPF64[i1 + (i40 << 3) >> 3] < d27) {
        i50 = i40;
       } else {
        i91 = i99;
        i92 = i40;
        break;
       }
      }
     } else {
      i91 = i99;
      i92 = i100;
     }
    } else {
     i91 = i32;
     i92 = i31;
    }
   }
   i13 = i13 + 1 | 0;
   if ((i13 | 0) == (i3 | 0)) {
    i101 = i91;
    i102 = i25;
    break;
   } else {
    i50 = i12;
    i20 = i92;
    i21 = i31;
    i22 = i25;
    i12 = i19;
    i19 = i50;
   }
  }
 } else {
  i101 = 0;
  i102 = i11;
 }
 i11 = i2 + (i3 * 40 | 0) | 0;
 d98 = +HEAPF64[i1 >> 3];
 if (d98 < d4) {
  i103 = +HEAPF64[i1 + (i3 + -1 << 3) >> 3] > d5;
 } else {
  i103 = 0;
 }
 i19 = i103 & 1;
 if (d98 > d4 ? +HEAPF64[i1 + (i3 + -1 << 3) >> 3] < d5 : 0) {
  i104 = 2;
 } else {
  i104 = i19;
 }
 if (i15) {
  i15 = i3 << 3;
  i19 = i11;
  i11 = i101;
  i101 = i3;
  i103 = 0;
  while (1) {
   i12 = i19;
   i19 = i19 + -40 | 0;
   i22 = i101;
   i101 = i101 + -1 | 0;
   HEAP32[i12 + -16 >> 2] = -1;
   HEAP32[i12 + -12 >> 2] = -1;
   i31 = HEAP32[i10 + (i11 << 3) + 4 >> 2] | 0;
   do {
    if (!((i31 | 0) > -1 & (i11 | 0) < (i15 | 0))) {
     d5 = d8 * +(i101 | 0) + d4;
     HEAPF64[i19 >> 3] = d5;
     HEAP32[i12 + -20 >> 2] = 1;
     HEAP32[i12 + -8 >> 2] = 1;
     i21 = i103 + 1 | 0;
     i92 = (i21 | 0) >= (i3 | 0) ? 0 : i21;
     HEAP32[i12 + -24 >> 2] = i92;
     if ((i104 | 0) == 2) {
      d98 = +HEAPF64[i1 + (i101 << 3) >> 3] - d5;
      if (d98 > 0.0) {
       d105 = d98;
      } else {
       d105 = -d98;
      }
      d98 = d105 / d8;
      i21 = i12 + -32 | 0;
      HEAPF64[i21 >> 3] = d98;
      if (!((i101 | 0) == 0 | (i22 | 0) == (i3 | 0))) {
       i106 = i92;
       break;
      }
      HEAPF64[i21 >> 3] = d98 * 500.0;
      i106 = i92;
      break;
     } else if ((i104 | 0) == 1) {
      d98 = +HEAPF64[i1 + (i101 << 3) >> 3] - d5;
      if (d98 > 0.0) {
       d107 = d98;
      } else {
       d107 = -d98;
      }
      HEAPF64[i12 + -32 >> 3] = 1.0 / (d107 / d8 + 1.0);
      i106 = i92;
      break;
     } else {
      HEAPF64[i12 + -32 >> 3] = 1.0;
      i106 = i92;
      break;
     }
    } else {
     i92 = i11 >> 3;
     HEAPF64[i19 >> 3] = +HEAPF64[i1 + (i92 << 3) >> 3];
     HEAP32[i12 + -24 >> 2] = i92;
     HEAP32[i12 + -8 >> 2] = 0;
     HEAP32[i12 + -20 >> 2] = 0;
     i106 = i92;
    }
   } while (0);
   if ((i101 | 0) <= 0) {
    break;
   } else {
    i11 = i31 & 2147483647;
    i103 = i106;
   }
  }
 }
 d8 = d6 * 2.0;
 if ((i102 | 0) < (i3 | 0) & (i102 | 0) > -1 ? (i106 = i102 << 1, i103 = i106 - i3 | 0, i11 = (i103 | 0) < 0 ? 0 : i103, (i11 | 0) <= (i102 | 0)) : 0) {
  i103 = i3 + -4 | 0;
  i101 = i3 + -5 | 0;
  i1 = i3 + -1 | 0;
  i19 = i2 + (i11 * 40 | 0) | 0;
  i104 = i11;
  while (1) {
   i11 = i19 + 24 | 0;
   do {
    if ((HEAP32[i11 >> 2] | 0) == -1) {
     d6 = +HEAPF64[i19 >> 3];
     i15 = i106 - i104 | 0;
     i10 = (i15 | 0) < (i103 | 0) ? i15 : i101;
     HEAP32[i11 >> 2] = i10;
     i15 = (i10 | 0) > 4 ? -4 : 0 - i10 | 0;
     if ((i15 | 0) < 4) {
      i12 = (i19 | 0) == (i2 | 0);
      i22 = i19 + 40 | 0;
      i25 = i19 + -40 | 0;
      d107 = d9;
      i32 = i15;
      i15 = 4;
      while (1) {
       i92 = i10 + i32 | 0;
       if ((i92 | 0) >= (i1 | 0)) {
        i108 = i15;
        break;
       }
       d105 = d8 - +HEAPF64[i2 + (i92 * 40 | 0) >> 3];
       d4 = +Math_abs(+(d105 - d6));
       do {
        if (d4 < d107) {
         if (!i12 ? !(d105 > +HEAPF64[i25 >> 3]) : 0) {
          d109 = d107;
          i110 = i15;
          break;
         }
         if (d105 < +HEAPF64[i22 >> 3]) {
          d109 = d4;
          i110 = i32;
         } else {
          d109 = d107;
          i110 = i15;
         }
        } else {
         d109 = d107;
         i110 = i15;
        }
       } while (0);
       i32 = i32 + 1 | 0;
       if ((i32 | 0) >= 4) {
        i108 = i110;
        break;
       } else {
        d107 = d109;
        i15 = i110;
       }
      }
      i15 = i10 + i108 | 0;
      HEAP32[i11 >> 2] = i15;
      if (((i108 | 0) != 4 & (i15 | 0) > (i102 | 0) ? (i32 = i2 + (i15 * 40 | 0) + 24 | 0, (HEAP32[i32 >> 2] | 0) == -1) : 0) ? (i22 = i2 + (i15 * 40 | 0) + 28 | 0, (HEAP32[i22 >> 2] | 0) == -1) : 0) {
       i25 = i2 + (i15 * 40 | 0) | 0;
       d107 = d8 - +HEAPF64[i25 >> 3];
       if (!(+Math_abs(+(d6 - d107)) < d9)) {
        HEAP32[i11 >> 2] = -1;
        break;
       }
       i12 = i19 + 20 | 0;
       if ((HEAP32[i12 >> 2] | 0) != 0) {
        HEAP32[i19 + 32 >> 2] = 1;
        HEAP32[i19 + 16 >> 2] = HEAP32[i2 + (i15 * 40 | 0) + 16 >> 2];
        HEAP32[i12 >> 2] = 0;
        HEAP32[i22 >> 2] = i104;
        HEAPF64[i19 >> 3] = d107;
        break;
       }
       HEAP32[i11 >> 2] = -1;
       if (!((HEAP32[i32 >> 2] | 0) == -1)) {
        break;
       }
       i22 = i2 + (i15 * 40 | 0) + 20 | 0;
       if ((HEAP32[i22 >> 2] | 0) == 0) {
        break;
       }
       HEAP32[i2 + (i15 * 40 | 0) + 16 >> 2] = HEAP32[i19 + 16 >> 2];
       HEAP32[i32 >> 2] = i104;
       HEAP32[i2 + (i15 * 40 | 0) + 32 >> 2] = 1;
       HEAP32[i19 + 28 >> 2] = (i15 * 40 | 0) / 40 | 0;
       HEAP32[i22 >> 2] = 0;
       HEAPF64[i25 >> 3] = d8 - d6;
       break;
      }
     } else {
      HEAP32[i11 >> 2] = i10 + 4;
     }
     HEAP32[i11 >> 2] = -1;
    }
   } while (0);
   if ((i104 | 0) < (i102 | 0)) {
    i19 = i19 + 40 | 0;
    i104 = i104 + 1 | 0;
   } else {
    break;
   }
  }
 }
 i104 = i3 + -1 | 0;
 if ((i104 | 0) > 1) {
  i111 = 1;
  i112 = i2;
 } else {
  STACKTOP = i7;
  return;
 }
 while (1) {
  i2 = i112 + 40 | 0;
  if ((HEAP32[i112 + 60 >> 2] | 0) == 0) {
   i113 = i2;
   i114 = i111;
  } else {
   if (!((HEAP32[i112 + 20 >> 2] | 0) != 0 ? (HEAP32[i112 + 100 >> 2] | 0) != 0 : 0)) {
    HEAPF64[i2 >> 3] = (+HEAPF64[i112 >> 3] + +HEAPF64[i112 + 80 >> 3]) * .5;
   }
   i113 = i112 + 80 | 0;
   i114 = i111 + 1 | 0;
  }
  i111 = i114 + 1 | 0;
  if ((i111 | 0) >= (i104 | 0)) {
   break;
  } else {
   i112 = i113;
  }
 }
 STACKTOP = i7;
 return;
}
function _aa_parseoptions(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 2064 | 0;
 i6 = i5 + 2048 | 0;
 i7 = i5 + 1024 | 0;
 i8 = i5;
 if ((HEAP32[131512] | 0) == 0 ? (HEAP32[131512] = 1, i9 = _getenv(526760) | 0, (i9 | 0) != 0) : 0) {
  do {
   if ((HEAP8[i9 >> 0] | 0) != 0) {
    HEAP32[i6 >> 2] = 0;
    if ((_strlen(i9 | 0) | 0) > 0) {
     i10 = 0;
     i11 = 1;
    } else {
     HEAP32[i6 >> 2] = 1;
     break;
    }
    while (1) {
     i12 = i10;
     while (1) {
      i13 = HEAP8[i9 + i12 >> 0] | 0;
      if (i13 << 24 >> 24 == 34) {
       i14 = 10;
       break;
      } else if (!(i13 << 24 >> 24 == 32)) {
       i15 = i12;
       i16 = i13;
       i17 = 32;
       break;
      }
      i13 = i12 + 1 | 0;
      HEAP32[i6 >> 2] = i13;
      i12 = i13;
     }
     if ((i14 | 0) == 10) {
      i14 = 0;
      i13 = i12 + 1 | 0;
      HEAP32[i6 >> 2] = i13;
      i15 = i13;
      i16 = HEAP8[i9 + i13 >> 0] | 0;
      i17 = 34;
     }
     i13 = i9 + i15 | 0;
     if (i16 << 24 >> 24 != 0 & (i16 << 24 >> 24 | 0) != (i17 | 0)) {
      i18 = i15;
      do {
       i18 = i18 + 1 | 0;
       HEAP32[i6 >> 2] = i18;
       i19 = HEAP8[i9 + i18 >> 0] | 0;
      } while (i19 << 24 >> 24 != 0 & (i19 << 24 >> 24 | 0) != (i17 | 0));
      if ((i18 | 0) == (i15 | 0)) {
       i20 = i18;
       i21 = i11;
      } else {
       i12 = _calloc(1 - i15 + i18 | 0, 1) | 0;
       HEAP32[i7 + (i11 << 2) >> 2] = i12;
       HEAP32[i8 + (i11 << 2) >> 2] = i12;
       _strncpy(i12 | 0, i13 | 0, i18 - i15 | 0) | 0;
       i12 = i11 + 1 | 0;
       if ((i12 | 0) == 255) {
        i14 = 16;
        break;
       }
       i20 = HEAP32[i6 >> 2] | 0;
       i21 = i12;
      }
     } else {
      i20 = i15;
      i21 = i11;
     }
     i10 = i20 + 1 | 0;
     HEAP32[i6 >> 2] = i10;
     if ((i10 | 0) >= (_strlen(i9 | 0) | 0)) {
      i14 = 18;
      break;
     } else {
      i11 = i21;
     }
    }
    if ((i14 | 0) == 16) {
     HEAP32[i6 >> 2] = 255;
     i22 = 255;
    } else if ((i14 | 0) == 18) {
     HEAP32[i6 >> 2] = i21;
     if ((i21 | 0) == 1) {
      break;
     } else {
      i22 = i21;
     }
    }
    _aa_parseoptions(i1, i2, i6, i7) | 0;
    HEAP32[i6 >> 2] = 1;
    if ((i22 | 0) > 1) {
     i12 = 1;
     do {
      _free(HEAP32[i8 + (i12 << 2) >> 2] | 0);
      i12 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
      HEAP32[i6 >> 2] = i12;
     } while ((i12 | 0) < (i22 | 0));
    }
   } else {
    HEAP32[i6 >> 2] = 1;
   }
  } while (0);
  HEAP32[131512] = 0;
 }
 if ((i3 | 0) == 0 | (i4 | 0) == 0) {
  i23 = 1;
  STACKTOP = i5;
  return i23 | 0;
 }
 i6 = (i1 | 0) == 0;
 i22 = i6 ? 525912 : i1;
 i8 = (i2 | 0) == 0 ? 526864 : i2;
 if ((HEAP32[i3 >> 2] | 0) <= 1) {
  i23 = 1;
  STACKTOP = i5;
  return i23 | 0;
 }
 i2 = i22 + 4 | 0;
 i7 = i8 + 16 | 0;
 i21 = i8 + 12 | 0;
 i11 = i8 + 20 | 0;
 i9 = i8 + 4 | 0;
 i10 = i22 + 40 | 0;
 i20 = i22 + 24 | 0;
 i15 = i22 + 8 | 0;
 i17 = i22 + 16 | 0;
 i16 = i22 + 44 | 0;
 i12 = i22 + 28 | 0;
 i19 = i22 + 12 | 0;
 i24 = i22 + 20 | 0;
 i25 = i8 + 8 | 0;
 i26 = i22 + 48 | 0;
 i27 = i22 + 56 | 0;
 i28 = 1;
 i29 = HEAP32[(i6 ? 525916 | 0 : i1 + 4 | 0) >> 2] | 0;
 L38 : while (1) {
  i1 = i4 + (i28 << 2) | 0;
  i6 = HEAP32[i1 >> 2] | 0;
  do {
   if ((_strcmp(i6, 526056) | 0) == 0) {
    _aa_remove(i28, i3, i4);
    if ((HEAP32[i3 >> 2] | 0) == (i28 | 0)) {
     i14 = 29;
     break L38;
    }
    i30 = HEAP32[133054] | 0;
    L43 : do {
     if ((i30 | 0) != 0) {
      i31 = HEAP32[i1 >> 2] | 0;
      i32 = i30;
      i33 = 0;
      while (1) {
       if ((_strcmp(i31, HEAP32[i32 + 8 >> 2] | 0) | 0) == 0) {
        break;
       }
       i33 = i33 + 1 | 0;
       if ((_strcmp(i31, HEAP32[i32 + 12 >> 2] | 0) | 0) == 0) {
        break;
       }
       i34 = HEAP32[532216 + (i33 << 2) >> 2] | 0;
       if ((i34 | 0) == 0) {
        break L43;
       } else {
        i32 = i34;
       }
      }
      HEAP32[i22 >> 2] = i32;
      _aa_remove(i28, i3, i4);
     }
    } while (0);
    if ((HEAP32[532216 + (i28 << 2) >> 2] | 0) == 0) {
     i14 = 35;
     break L38;
    }
    i35 = i28 + -1 | 0;
    i36 = i29;
   } else {
    if ((_strcmp(i6, 526088) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     i30 = i29 | 1;
     HEAP32[i2 >> 2] = i30;
     i35 = i28 + -1 | 0;
     i36 = i30;
     break;
    }
    if ((_strcmp(i6, 526096) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     i30 = i29 & -2;
     HEAP32[i2 >> 2] = i30;
     i35 = i28 + -1 | 0;
     i36 = i30;
     break;
    }
    if ((_strcmp(i6, 526112) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     i30 = i29 | 4;
     HEAP32[i2 >> 2] = i30;
     i35 = i28 + -1 | 0;
     i36 = i30;
     break;
    }
    if ((_strcmp(i6, 526120) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     i30 = i29 & -5;
     HEAP32[i2 >> 2] = i30;
     i35 = i28 + -1 | 0;
     i36 = i30;
     break;
    }
    if ((_strcmp(i6, 526128) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     i30 = i29 | 8;
     HEAP32[i2 >> 2] = i30;
     i35 = i28 + -1 | 0;
     i36 = i30;
     break;
    }
    if ((_strcmp(i6, 526144) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     i30 = i29 & -9;
     HEAP32[i2 >> 2] = i30;
     i35 = i28 + -1 | 0;
     i36 = i30;
     break;
    }
    if ((_strcmp(i6, 526160) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     i30 = i29 | 2;
     HEAP32[i2 >> 2] = i30;
     i35 = i28 + -1 | 0;
     i36 = i30;
     break;
    }
    if ((_strcmp(i6, 526168) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     i30 = i29 & -3;
     HEAP32[i2 >> 2] = i30;
     i35 = i28 + -1 | 0;
     i36 = i30;
     break;
    }
    if ((_strcmp(i6, 526176) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     i30 = i29 | 16;
     HEAP32[i2 >> 2] = i30;
     i35 = i28 + -1 | 0;
     i36 = i30;
     break;
    }
    if ((_strcmp(i6, 526192) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     i30 = i29 | 384;
     HEAP32[i2 >> 2] = i30;
     i35 = i28 + -1 | 0;
     i36 = i30;
     break;
    }
    if ((_strcmp(i6, 526208) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     i30 = i29 | 256;
     HEAP32[i2 >> 2] = i30;
     i35 = i28 + -1 | 0;
     i36 = i30;
     break;
    }
    if ((_strcmp(i6, 526216) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     i30 = i29 & -17;
     HEAP32[i2 >> 2] = i30;
     i35 = i28 + -1 | 0;
     i36 = i30;
     break;
    }
    if ((_strcmp(i6, 526232) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     HEAP32[i7 >> 2] = 1;
     i35 = i28 + -1 | 0;
     i36 = i29;
     break;
    }
    if ((_strcmp(i6, 526248) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     HEAP32[i7 >> 2] = 0;
     i35 = i28 + -1 | 0;
     i36 = i29;
     break;
    }
    if ((_strcmp(i6, 526264) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     HEAP32[i21 >> 2] = 0;
     i35 = i28 + -1 | 0;
     i36 = i29;
     break;
    }
    if ((_strcmp(i6, 526280) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     HEAP32[i21 >> 2] = 2;
     i35 = i28 + -1 | 0;
     i36 = i29;
     break;
    }
    if ((_strcmp(i6, 526304) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     HEAP32[i21 >> 2] = 1;
     i35 = i28 + -1 | 0;
     i36 = i29;
     break;
    }
    if ((_strcmp(i6, 526328) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     if ((HEAP32[i3 >> 2] | 0) == (i28 | 0)) {
      i14 = 73;
      break L38;
     }
     HEAP32[i11 >> 2] = _atol(HEAP32[i1 >> 2] | 0) | 0;
     _aa_remove(i28, i3, i4);
     i35 = i28 + -1 | 0;
     i36 = i29;
     break;
    }
    if ((_strcmp(i6, 526376) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     if ((HEAP32[i3 >> 2] | 0) == (i28 | 0)) {
      i14 = 77;
      break L38;
     }
     HEAP32[i8 >> 2] = _atol(HEAP32[i1 >> 2] | 0) | 0;
     _aa_remove(i28, i3, i4);
     i35 = i28 + -1 | 0;
     i36 = i29;
     break;
    }
    if ((_strcmp(i6, 526416) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     if ((HEAP32[i3 >> 2] | 0) == (i28 | 0)) {
      i14 = 81;
      break L38;
     }
     HEAP32[i9 >> 2] = _atol(HEAP32[i1 >> 2] | 0) | 0;
     _aa_remove(i28, i3, i4);
     i35 = i28 + -1 | 0;
     i36 = i29;
     break;
    }
    if ((_strcmp(i6, 526464) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     if ((HEAP32[i3 >> 2] | 0) == (i28 | 0)) {
      i14 = 85;
      break L38;
     }
     HEAP32[i10 >> 2] = _atol(HEAP32[i1 >> 2] | 0) | 0;
     _aa_remove(i28, i3, i4);
     i35 = i28 + -1 | 0;
     i36 = i29;
     break;
    }
    if ((_strcmp(i6, 526488) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     if ((HEAP32[i3 >> 2] | 0) == (i28 | 0)) {
      i14 = 89;
      break L38;
     }
     HEAP32[i20 >> 2] = _atol(HEAP32[i1 >> 2] | 0) | 0;
     _aa_remove(i28, i3, i4);
     i35 = i28 + -1 | 0;
     i36 = i29;
     break;
    }
    if ((_strcmp(i6, 526504) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     if ((HEAP32[i3 >> 2] | 0) == (i28 | 0)) {
      i14 = 93;
      break L38;
     }
     HEAP32[i15 >> 2] = _atol(HEAP32[i1 >> 2] | 0) | 0;
     _aa_remove(i28, i3, i4);
     i35 = i28 + -1 | 0;
     i36 = i29;
     break;
    }
    if ((_strcmp(i6, 526520) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     if ((HEAP32[i3 >> 2] | 0) == (i28 | 0)) {
      i14 = 97;
      break L38;
     }
     HEAP32[i17 >> 2] = _atol(HEAP32[i1 >> 2] | 0) | 0;
     _aa_remove(i28, i3, i4);
     i35 = i28 + -1 | 0;
     i36 = i29;
     break;
    }
    if ((_strcmp(i6, 526536) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     if ((HEAP32[i3 >> 2] | 0) == (i28 | 0)) {
      i14 = 101;
      break L38;
     }
     HEAP32[i16 >> 2] = _atol(HEAP32[i1 >> 2] | 0) | 0;
     _aa_remove(i28, i3, i4);
     i35 = i28 + -1 | 0;
     i36 = i29;
     break;
    }
    if ((_strcmp(i6, 526568) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     if ((HEAP32[i3 >> 2] | 0) == (i28 | 0)) {
      i14 = 105;
      break L38;
     }
     HEAP32[i12 >> 2] = _atol(HEAP32[i1 >> 2] | 0) | 0;
     _aa_remove(i28, i3, i4);
     i35 = i28 + -1 | 0;
     i36 = i29;
     break;
    }
    if ((_strcmp(i6, 526584) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     if ((HEAP32[i3 >> 2] | 0) == (i28 | 0)) {
      i14 = 109;
      break L38;
     }
     HEAP32[i19 >> 2] = _atol(HEAP32[i1 >> 2] | 0) | 0;
     _aa_remove(i28, i3, i4);
     i35 = i28 + -1 | 0;
     i36 = i29;
     break;
    }
    if ((_strcmp(i6, 526600) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     if ((HEAP32[i3 >> 2] | 0) == (i28 | 0)) {
      i14 = 113;
      break L38;
     }
     HEAP32[i24 >> 2] = _atol(HEAP32[i1 >> 2] | 0) | 0;
     _aa_remove(i28, i3, i4);
     i35 = i28 + -1 | 0;
     i36 = i29;
     break;
    }
    if ((_strcmp(i6, 526616) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     if ((HEAP32[i3 >> 2] | 0) == (i28 | 0)) {
      i14 = 117;
      break L38;
     }
     HEAPF32[i25 >> 2] = +_atof(HEAP32[i1 >> 2] | 0);
     _aa_remove(i28, i3, i4);
     i35 = i28 + -1 | 0;
     i36 = i29;
     break;
    }
    if ((_strcmp(i6, 526648) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     if ((HEAP32[i3 >> 2] | 0) == (i28 | 0)) {
      i14 = 121;
      break L38;
     }
     HEAPF64[i26 >> 3] = +_atof(HEAP32[i1 >> 2] | 0);
     _aa_remove(i28, i3, i4);
     i35 = i28 + -1 | 0;
     i36 = i29;
     break;
    }
    if ((_strcmp(i6, 526680) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     if ((HEAP32[i3 >> 2] | 0) == (i28 | 0)) {
      i14 = 125;
      break L38;
     }
     HEAPF64[i27 >> 3] = +_atof(HEAP32[i1 >> 2] | 0);
     _aa_remove(i28, i3, i4);
     i35 = i28 + -1 | 0;
     i36 = i29;
     break;
    }
    if ((_strcmp(i6, 526696) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     if ((HEAP32[i3 >> 2] | 0) == (i28 | 0)) {
      i14 = 129;
      break L38;
     }
     _aa_recommendhi(526824, HEAP32[i1 >> 2] | 0);
     _aa_remove(i28, i3, i4);
     i35 = i28 + -1 | 0;
     i36 = i29;
     break;
    }
    if ((_strcmp(i6, 526728) | 0) == 0) {
     _aa_remove(i28, i3, i4);
     if ((HEAP32[i3 >> 2] | 0) == (i28 | 0)) {
      i14 = 133;
      break L38;
     }
     _aa_recommendhi(526808, HEAP32[i1 >> 2] | 0);
     _aa_remove(i28, i3, i4);
     i35 = i28 + -1 | 0;
     i36 = i29;
     break;
    }
    if ((_strcmp(i6, 526744) | 0) != 0) {
     i35 = i28;
     i36 = i29;
     break;
    }
    _aa_remove(i28, i3, i4);
    if ((HEAP32[i3 >> 2] | 0) == (i28 | 0)) {
     i14 = 137;
     break L38;
    }
    _aa_recommendhi(526816, HEAP32[i1 >> 2] | 0);
    _aa_remove(i28, i3, i4);
    i35 = i28 + -1 | 0;
    i36 = i29;
   }
  } while (0);
  i28 = i35 + 1 | 0;
  if ((i28 | 0) >= (HEAP32[i3 >> 2] | 0)) {
   i23 = 1;
   i14 = 140;
   break;
  } else {
   i29 = i36;
  }
 }
 switch (i14 | 0) {
 case 29:
  {
   _fwrite(526064, 19, 1, HEAP32[_stderr >> 2] | 0) | 0;
   i23 = 0;
   STACKTOP = i5;
   return i23 | 0;
  }
 case 35:
  {
   _fwrite(526064, 19, 1, HEAP32[_stderr >> 2] | 0) | 0;
   i23 = 0;
   STACKTOP = i5;
   return i23 | 0;
  }
 case 73:
  {
   _fwrite(526336, 32, 1, HEAP32[_stderr >> 2] | 0) | 0;
   i23 = 0;
   STACKTOP = i5;
   return i23 | 0;
  }
 case 77:
  {
   _fwrite(526384, 29, 1, HEAP32[_stderr >> 2] | 0) | 0;
   i23 = 0;
   STACKTOP = i5;
   return i23 | 0;
  }
 case 81:
  {
   _fwrite(526432, 31, 1, HEAP32[_stderr >> 2] | 0) | 0;
   i23 = 0;
   STACKTOP = i5;
   return i23 | 0;
  }
 case 85:
  {
   _fwrite(526472, 15, 1, HEAP32[_stderr >> 2] | 0) | 0;
   i23 = 0;
   STACKTOP = i5;
   return i23 | 0;
  }
 case 89:
  {
   _fwrite(526472, 15, 1, HEAP32[_stderr >> 2] | 0) | 0;
   i23 = 0;
   STACKTOP = i5;
   return i23 | 0;
  }
 case 93:
  {
   _fwrite(526472, 15, 1, HEAP32[_stderr >> 2] | 0) | 0;
   i23 = 0;
   STACKTOP = i5;
   return i23 | 0;
  }
 case 97:
  {
   _fwrite(526472, 15, 1, HEAP32[_stderr >> 2] | 0) | 0;
   i23 = 0;
   STACKTOP = i5;
   return i23 | 0;
  }
 case 101:
  {
   _fwrite(526544, 16, 1, HEAP32[_stderr >> 2] | 0) | 0;
   i23 = 0;
   STACKTOP = i5;
   return i23 | 0;
  }
 case 105:
  {
   _fwrite(526544, 16, 1, HEAP32[_stderr >> 2] | 0) | 0;
   i23 = 0;
   STACKTOP = i5;
   return i23 | 0;
  }
 case 109:
  {
   _fwrite(526544, 16, 1, HEAP32[_stderr >> 2] | 0) | 0;
   i23 = 0;
   STACKTOP = i5;
   return i23 | 0;
  }
 case 113:
  {
   _fwrite(526544, 16, 1, HEAP32[_stderr >> 2] | 0) | 0;
   i23 = 0;
   STACKTOP = i5;
   return i23 | 0;
  }
 case 117:
  {
   _fwrite(526624, 21, 1, HEAP32[_stderr >> 2] | 0) | 0;
   i23 = 0;
   STACKTOP = i5;
   return i23 | 0;
  }
 case 121:
  {
   _fwrite(526656, 22, 1, HEAP32[_stderr >> 2] | 0) | 0;
   i23 = 0;
   STACKTOP = i5;
   return i23 | 0;
  }
 case 125:
  {
   _fwrite(526656, 22, 1, HEAP32[_stderr >> 2] | 0) | 0;
   i23 = 0;
   STACKTOP = i5;
   return i23 | 0;
  }
 case 129:
  {
   _fwrite(526704, 21, 1, HEAP32[_stderr >> 2] | 0) | 0;
   i23 = 0;
   STACKTOP = i5;
   return i23 | 0;
  }
 case 133:
  {
   _fwrite(526704, 21, 1, HEAP32[_stderr >> 2] | 0) | 0;
   i23 = 0;
   STACKTOP = i5;
   return i23 | 0;
  }
 case 137:
  {
   _fwrite(526704, 21, 1, HEAP32[_stderr >> 2] | 0) | 0;
   i23 = 0;
   STACKTOP = i5;
   return i23 | 0;
  }
 case 140:
  {
   STACKTOP = i5;
   return i23 | 0;
  }
 }
 return 0;
}
function _do_fractal__async_cb148(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, d41 = 0.0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 i6 = HEAP32[i1 + 4 >> 2] | 0;
 i7 = HEAP32[i1 + 8 >> 2] | 0;
 i8 = HEAP32[i1 + 12 >> 2] | 0;
 i9 = HEAP32[i1 + 20 >> 2] | 0;
 i10 = HEAP32[i1 + 24 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i4 >> 2] = i9;
 HEAP32[i3 >> 2] = i10;
 i10 = HEAP32[i5 >> 2] | 0;
 i9 = HEAP32[i4 >> 2] | 0;
 i1 = (HEAP32[i3 >> 2] | 0) + 4 | 0;
 i11 = HEAP32[71600] | 0;
 if (i1 >>> 0 < i8 >>> 0 ? (HEAP32[i3 >> 2] = i1, HEAP32[i5 >> 2] = i10, (HEAP32[i11 + 140 >> 2] | 0) == 0) : 0) {
  i10 = HEAP32[HEAP32[i3 >> 2] >> 2] | 0;
  i1 = i11 + 64 | 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  if ((i9 | 0) < ((HEAP32[i11 + 128 >> 2] | 0) + -2 | 0) ? (HEAP32[i5 >> 2] | 0) < ((HEAP32[i11 + 132 >> 2] | 0) + -2 | 0) : 0) {
   HEAP32[i11 + 116 >> 2] = 1;
  }
  i1 = HEAP32[i11 + 28 >> 2] | 0;
  if ((i1 | 0) != 0) {
   i12 = _emscripten_realloc_async_context(32) | 0;
   FUNCTION_TABLE_v[i1 & 63]();
   if (___async) {
    HEAP32[i12 >> 2] = 215;
    i13 = i12 + 4 | 0;
    HEAP32[i13 >> 2] = i10;
    i14 = i12 + 8 | 0;
    HEAP32[i14 >> 2] = i7;
    i15 = i12 + 12 | 0;
    HEAP32[i15 >> 2] = i6;
    i16 = i12 + 16 | 0;
    HEAP32[i16 >> 2] = i9;
    i17 = i12 + 20 | 0;
    i18 = HEAP32[i5 >> 2] | 0;
    HEAP32[i17 >> 2] = i18;
    i19 = i12 + 24 | 0;
    i20 = HEAP32[i3 >> 2] | 0;
    HEAP32[i19 >> 2] = i20;
    i21 = i12 + 28 | 0;
    HEAP32[i21 >> 2] = i8;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   ___async_unwind = 0;
   HEAP32[i12 >> 2] = 215;
   i13 = i12 + 4 | 0;
   HEAP32[i13 >> 2] = i10;
   i14 = i12 + 8 | 0;
   HEAP32[i14 >> 2] = i7;
   i15 = i12 + 12 | 0;
   HEAP32[i15 >> 2] = i6;
   i16 = i12 + 16 | 0;
   HEAP32[i16 >> 2] = i9;
   i17 = i12 + 20 | 0;
   i18 = HEAP32[i5 >> 2] | 0;
   HEAP32[i17 >> 2] = i18;
   i19 = i12 + 24 | 0;
   i20 = HEAP32[i3 >> 2] | 0;
   HEAP32[i19 >> 2] = i20;
   i21 = i12 + 28 | 0;
   HEAP32[i21 >> 2] = i8;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  i21 = HEAP32[i11 + 52 >> 2] | 0;
  i12 = HEAP32[i11 + 36 >> 2] | 0;
  if (i10 >>> 0 >= i21 >>> 0 & i10 >>> 0 < i7 >>> 0) {
   HEAP32[i4 >> 2] = i9 + -1;
   i20 = _emscripten_realloc_async_context(28) | 0;
   _calccolumn(i12 + ((i10 - i21 | 0) / 40 | 0) | 0, i10);
   if (___async) {
    HEAP32[i20 >> 2] = 216;
    i22 = i20 + 4 | 0;
    HEAP32[i22 >> 2] = i6;
    i23 = i20 + 8 | 0;
    HEAP32[i23 >> 2] = i7;
    i24 = i20 + 12 | 0;
    HEAP32[i24 >> 2] = i8;
    i25 = i20 + 16 | 0;
    i26 = HEAP32[i5 >> 2] | 0;
    HEAP32[i25 >> 2] = i26;
    i27 = i20 + 20 | 0;
    i28 = HEAP32[i4 >> 2] | 0;
    HEAP32[i27 >> 2] = i28;
    i29 = i20 + 24 | 0;
    i30 = HEAP32[i3 >> 2] | 0;
    HEAP32[i29 >> 2] = i30;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   ___async_unwind = 0;
   HEAP32[i20 >> 2] = 216;
   i22 = i20 + 4 | 0;
   HEAP32[i22 >> 2] = i6;
   i23 = i20 + 8 | 0;
   HEAP32[i23 >> 2] = i7;
   i24 = i20 + 12 | 0;
   HEAP32[i24 >> 2] = i8;
   i25 = i20 + 16 | 0;
   i26 = HEAP32[i5 >> 2] | 0;
   HEAP32[i25 >> 2] = i26;
   i27 = i20 + 20 | 0;
   i28 = HEAP32[i4 >> 2] | 0;
   HEAP32[i27 >> 2] = i28;
   i29 = i20 + 24 | 0;
   i30 = HEAP32[i3 >> 2] | 0;
   HEAP32[i29 >> 2] = i30;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  } else {
   i30 = i12 + (Math_imul(HEAP32[i11 + 136 >> 2] | 0, (i10 - (HEAP32[i11 + 56 >> 2] | 0) | 0) / 40 | 0) | 0) | 0;
   i12 = (HEAP32[i5 >> 2] | 0) + -1 | 0;
   i5 = _emscripten_realloc_async_context(28) | 0;
   _calcline(i30, i10);
   if (___async) {
    HEAP32[i5 >> 2] = 217;
    i31 = i5 + 4 | 0;
    HEAP32[i31 >> 2] = i6;
    i32 = i5 + 8 | 0;
    HEAP32[i32 >> 2] = i7;
    i33 = i5 + 12 | 0;
    HEAP32[i33 >> 2] = i8;
    i34 = i5 + 16 | 0;
    HEAP32[i34 >> 2] = i12;
    i35 = i5 + 20 | 0;
    HEAP32[i35 >> 2] = i9;
    i36 = i5 + 24 | 0;
    i37 = HEAP32[i3 >> 2] | 0;
    HEAP32[i36 >> 2] = i37;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   ___async_unwind = 0;
   HEAP32[i5 >> 2] = 217;
   i31 = i5 + 4 | 0;
   HEAP32[i31 >> 2] = i6;
   i32 = i5 + 8 | 0;
   HEAP32[i32 >> 2] = i7;
   i33 = i5 + 12 | 0;
   HEAP32[i33 >> 2] = i8;
   i34 = i5 + 16 | 0;
   HEAP32[i34 >> 2] = i12;
   i35 = i5 + 20 | 0;
   HEAP32[i35 >> 2] = i9;
   i36 = i5 + 24 | 0;
   i37 = HEAP32[i3 >> 2] | 0;
   HEAP32[i36 >> 2] = i37;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
 }
 i37 = HEAP32[i11 + 28 >> 2] | 0;
 if ((i37 | 0) != 0) {
  i11 = _emscripten_realloc_async_context(8) | 0;
  FUNCTION_TABLE_v[i37 & 63]();
  if (___async) {
   HEAP32[i11 >> 2] = 218;
   i38 = i11 + 4 | 0;
   HEAP32[i38 >> 2] = i6;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i11 >> 2] = 218;
  i38 = i11 + 4 | 0;
  HEAP32[i38 >> 2] = i6;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 _free(i6);
 i6 = HEAP32[71600] | 0;
 HEAP32[i6 + 64 >> 2] = 0;
 HEAP32[i6 + 68 >> 2] = 0;
 HEAP32[i6 + 72 >> 2] = 286552;
 i6 = HEAP32[71600] | 0;
 HEAP32[i6 + 112 >> 2] = 0;
 i38 = HEAP32[i6 + 28 >> 2] | 0;
 if ((i38 | 0) != 0) {
  i6 = _emscripten_realloc_async_context(4) | 0;
  FUNCTION_TABLE_v[i38 & 63]();
  if (___async) {
   HEAP32[i6 >> 2] = 219;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i6 >> 2] = 219;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 _dosymetry();
 i6 = HEAP32[71600] | 0;
 L43 : do {
  if ((HEAP32[i6 + 140 >> 2] | 0) != 0) {
   HEAP32[i6 + 72 >> 2] = 286640;
   i38 = HEAP32[71600] | 0;
   i11 = HEAP32[i38 + 56 >> 2] | 0;
   i37 = HEAP32[i38 + 132 >> 2] | 0;
   i36 = i11 + (i37 * 40 | 0) | 0;
   do {
    if ((i37 | 0) > 0) {
     i3 = i11;
     L46 : while (1) {
      i5 = i3 + 32 | 0;
      L48 : do {
       if ((HEAP32[i5 >> 2] | 0) != 0) {
        i9 = HEAP32[71600] | 0;
        HEAP32[i9 + 120 >> 2] = 1;
        i35 = i3;
        do {
         i12 = i35;
         i35 = i35 + 40 | 0;
         i39 = i35 >>> 0 < i36 >>> 0;
        } while ((HEAP32[i12 + 72 >> 2] | 0) != 0 & i39);
        i12 = i3 + -40 | 0;
        if ((HEAP32[i5 >> 2] | 0) != 0 & i3 >>> 0 < i36 >>> 0) {
         i34 = i39 ^ 1;
         i8 = i9;
         i33 = i5;
         i7 = i3;
         while (1) {
          i32 = HEAP32[i8 + 56 >> 2] | 0;
          i31 = i12 >>> 0 < i32 >>> 0;
          if (i31 | i34) {
           i40 = i31 ? i35 : i12;
          } else {
           d41 = +HEAPF64[i7 >> 3];
           i40 = d41 - +HEAPF64[i12 >> 3] < +HEAPF64[i35 >> 3] - d41 ? i12 : i35;
          }
          if (i40 >>> 0 >= i36 >>> 0 | (HEAP32[i40 + 32 >> 2] | 0) != 0 | i40 >>> 0 < i32 >>> 0) {
           i42 = 37;
           break L46;
          }
          i31 = HEAP32[i8 + 36 >> 2] | 0;
          i10 = HEAP32[i8 + 136 >> 2] | 0;
          i30 = i32;
          i32 = i31 + (Math_imul((i7 - i30 | 0) / 40 | 0, i10) | 0) | 0;
          i29 = i31 + (Math_imul((i40 - i30 | 0) / 40 | 0, i10) | 0) | 0;
          _memcpy(i32 | 0, i29 | 0, HEAP32[i8 + 128 >> 2] | 0) | 0;
          HEAP32[i33 >> 2] = 0;
          HEAPF64[i7 >> 3] = +HEAPF64[i40 >> 3];
          i29 = i7 + 40 | 0;
          i32 = i7 + 72 | 0;
          if (!((HEAP32[i32 >> 2] | 0) != 0 & i29 >>> 0 < i36 >>> 0)) {
           i43 = i29;
           break L48;
          }
          i8 = HEAP32[71600] | 0;
          i33 = i32;
          i7 = i29;
         }
        } else {
         i43 = i3;
        }
       } else {
        i43 = i3;
       }
      } while (0);
      i3 = i43 + 40 | 0;
      if (!(i3 >>> 0 < i36 >>> 0)) {
       i42 = 41;
       break;
      }
     }
     if ((i42 | 0) == 37) {
      _puts(289864) | 0;
      _init_tables(HEAP32[71600] | 0);
      break L43;
     } else if ((i42 | 0) == 41) {
      i3 = HEAP32[71600] | 0;
      i44 = i3;
      i45 = HEAP32[i3 + 132 >> 2] | 0;
      break;
     }
    } else {
     i44 = i38;
     i45 = i37;
    }
   } while (0);
   i37 = HEAP32[i44 + 36 >> 2] | 0;
   i38 = i37 + (Math_imul(HEAP32[i44 + 136 >> 2] | 0, i45) | 0) | 0;
   i36 = HEAP32[i44 + 52 >> 2] | 0;
   i11 = HEAP32[i44 + 128 >> 2] | 0;
   i3 = i36 + (i11 * 40 | 0) | 0;
   if ((i11 | 0) > 0) {
    i11 = i44;
    i5 = 0;
    i7 = i36;
    i36 = i37;
    i37 = 0;
    L66 : while (1) {
     i33 = i7 + 32 | 0;
     do {
      if ((HEAP32[i33 >> 2] | 0) != 0) {
       HEAP32[i11 + 120 >> 2] = 1;
       i8 = i7;
       while (1) {
        i46 = i8 >>> 0 < i3 >>> 0;
        if ((HEAP32[i8 + 32 >> 2] | 0) != 0 & i46) {
         i8 = i8 + 40 | 0;
        } else {
         break;
        }
       }
       i35 = i7 + -40 | 0;
       if ((HEAP32[i33 >> 2] | 0) != 0 & i7 >>> 0 < i3 >>> 0) {
        i12 = i46 ^ 1;
        i47 = i11;
        i34 = i33;
        i9 = i5;
        i29 = 0;
        i32 = i7;
        i10 = i36;
        i30 = i37;
        while (1) {
         i31 = HEAP32[i47 + 52 >> 2] | 0;
         i20 = i35 >>> 0 < i31 >>> 0;
         if (i20 | i12) {
          i48 = i20 ? i8 : i35;
         } else {
          d41 = +HEAPF64[i32 >> 3];
          i48 = d41 - +HEAPF64[i35 >> 3] < +HEAPF64[i8 >> 3] - d41 ? i35 : i8;
         }
         if (i48 >>> 0 >= i3 >>> 0 | (HEAP32[i48 + 32 >> 2] | 0) != 0 | i48 >>> 0 < i31 >>> 0) {
          break L66;
         }
         if ((i48 | 0) == (i29 | 0)) {
          i49 = i47;
          i50 = i9 + 1 | 0;
          i51 = i29;
          i52 = i10;
          i53 = i30;
         } else {
          L82 : do {
           if ((i29 | 0) != 0) {
            if ((i9 | 0) != 1) {
             if (i10 >>> 0 < i38 >>> 0) {
              i54 = i10;
              i55 = i30;
             } else {
              i56 = i47;
              break;
             }
             while (1) {
              _memset(i54 | 0, HEAP8[i55 >> 0] | 0, i9 | 0) | 0;
              i31 = HEAP32[71600] | 0;
              i20 = HEAP32[i31 + 136 >> 2] | 0;
              i54 = i54 + i20 | 0;
              if (!(i54 >>> 0 < i38 >>> 0)) {
               i56 = i31;
               break L82;
              } else {
               i55 = i55 + i20 | 0;
              }
             }
            }
            i20 = HEAP32[i47 + 136 >> 2] | 0;
            if (i10 >>> 0 < i38 >>> 0) {
             i31 = i10;
             i28 = i30;
             while (1) {
              HEAP8[i31 >> 0] = HEAP8[i28 >> 0] | 0;
              i31 = i31 + i20 | 0;
              if (!(i31 >>> 0 < i38 >>> 0)) {
               break;
              } else {
               i28 = i28 + i20 | 0;
              }
             }
             i56 = HEAP32[71600] | 0;
            } else {
             i56 = i47;
            }
           } else {
            i56 = i47;
           }
          } while (0);
          i20 = HEAP32[i56 + 36 >> 2] | 0;
          i28 = HEAP32[i56 + 52 >> 2] | 0;
          i49 = i56;
          i50 = 1;
          i51 = i48;
          i52 = i20 + ((i32 - i28 | 0) / 40 | 0) | 0;
          i53 = i20 + ((i48 - i28 | 0) / 40 | 0) | 0;
         }
         HEAP32[i34 >> 2] = 0;
         HEAPF64[i32 >> 3] = +HEAPF64[i48 >> 3];
         i28 = i32;
         i32 = i32 + 40 | 0;
         i34 = i28 + 72 | 0;
         if (!((HEAP32[i34 >> 2] | 0) != 0 & i32 >>> 0 < i3 >>> 0)) {
          break;
         } else {
          i47 = i49;
          i9 = i50;
          i29 = i51;
          i10 = i52;
          i30 = i53;
         }
        }
        if ((i51 | 0) != 0) {
         i30 = i52 >>> 0 < i38 >>> 0;
         if ((i50 | 0) == 1) {
          if (i30) {
           i57 = i52;
           i58 = i53;
          } else {
           i59 = i49;
           i60 = 1;
           i61 = i32;
           i62 = i52;
           i63 = i53;
           break;
          }
          while (1) {
           HEAP8[i57 >> 0] = HEAP8[i58 >> 0] | 0;
           i10 = HEAP32[71600] | 0;
           i29 = HEAP32[i10 + 136 >> 2] | 0;
           i9 = i57 + i29 | 0;
           i34 = i58 + i29 | 0;
           if (i9 >>> 0 < i38 >>> 0) {
            i57 = i9;
            i58 = i34;
           } else {
            i59 = i10;
            i60 = 1;
            i61 = i32;
            i62 = i9;
            i63 = i34;
            break;
           }
          }
         } else {
          if (i30) {
           i64 = i52;
           i65 = i53;
          } else {
           i59 = i49;
           i60 = i50;
           i61 = i32;
           i62 = i52;
           i63 = i53;
           break;
          }
          while (1) {
           _memset(i64 | 0, HEAP8[i65 >> 0] | 0, i50 | 0) | 0;
           i34 = HEAP32[71600] | 0;
           i9 = HEAP32[i34 + 136 >> 2] | 0;
           i10 = i64 + i9 | 0;
           i29 = i65 + i9 | 0;
           if (i10 >>> 0 < i38 >>> 0) {
            i64 = i10;
            i65 = i29;
           } else {
            i59 = i34;
            i60 = i50;
            i61 = i32;
            i62 = i10;
            i63 = i29;
            break;
           }
          }
         }
        } else {
         i59 = i49;
         i60 = i50;
         i61 = i32;
         i62 = i52;
         i63 = i53;
        }
       } else {
        i59 = i11;
        i60 = i5;
        i61 = i7;
        i62 = i36;
        i63 = i37;
       }
      } else {
       i59 = i11;
       i60 = i5;
       i61 = i7;
       i62 = i36;
       i63 = i37;
      }
     } while (0);
     i7 = i61 + 40 | 0;
     if (!(i7 >>> 0 < i3 >>> 0)) {
      break L43;
     } else {
      i11 = i59;
      i5 = i60;
      i36 = i62;
      i37 = i63;
     }
    }
    _init_tables(i47);
    _puts(289864) | 0;
   }
  }
 } while (0);
 i47 = HEAP32[71600] | 0;
 i63 = HEAP32[i47 + 28 >> 2] | 0;
 if ((i63 | 0) != 0) {
  i62 = _emscripten_realloc_async_context(4) | 0;
  FUNCTION_TABLE_v[i63 & 63]();
  if (___async) {
   HEAP32[i62 >> 2] = 226;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i62 >> 2] = 226;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i62 = HEAP32[i47 + 52 >> 2] | 0;
 i63 = HEAP32[i47 + 128 >> 2] | 0;
 i60 = i62 + (i63 * 40 | 0) | 0;
 if ((i63 | 0) > 0) {
  i63 = HEAP32[i47 + 16 >> 2] | 0;
  i59 = i62;
  while (1) {
   HEAPF64[i63 >> 3] = +HEAPF64[i59 >> 3];
   i59 = i59 + 40 | 0;
   if (!(i59 >>> 0 < i60 >>> 0)) {
    break;
   } else {
    i63 = i63 + 8 | 0;
   }
  }
 }
 i63 = HEAP32[i47 + 56 >> 2] | 0;
 i60 = HEAP32[i47 + 132 >> 2] | 0;
 i59 = i63 + (i60 * 40 | 0) | 0;
 if ((i60 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i60 = HEAP32[i47 + 20 >> 2] | 0;
 i47 = i63;
 while (1) {
  HEAPF64[i60 >> 3] = +HEAPF64[i47 >> 3];
  i47 = i47 + 40 | 0;
  if (!(i47 >>> 0 < i59 >>> 0)) {
   break;
  } else {
   i60 = i60 + 8 | 0;
  }
 }
 STACKTOP = i2;
 return;
}
function _do_fractal__async_cb150(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, d41 = 0.0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 i6 = HEAP32[i1 + 4 >> 2] | 0;
 i7 = HEAP32[i1 + 8 >> 2] | 0;
 i8 = HEAP32[i1 + 12 >> 2] | 0;
 i9 = HEAP32[i1 + 20 >> 2] | 0;
 i10 = HEAP32[i1 + 24 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i4 >> 2] = i9;
 HEAP32[i3 >> 2] = i10;
 i10 = HEAP32[i5 >> 2] | 0;
 i9 = HEAP32[i4 >> 2] | 0;
 i1 = (HEAP32[i3 >> 2] | 0) + 4 | 0;
 i11 = HEAP32[71600] | 0;
 if (i1 >>> 0 < i8 >>> 0 ? (HEAP32[i3 >> 2] = i1, HEAP32[i4 >> 2] = i9, (HEAP32[i11 + 140 >> 2] | 0) == 0) : 0) {
  i9 = HEAP32[HEAP32[i3 >> 2] >> 2] | 0;
  i1 = i11 + 64 | 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  if ((HEAP32[i4 >> 2] | 0) < ((HEAP32[i11 + 128 >> 2] | 0) + -2 | 0) ? (i10 | 0) < ((HEAP32[i11 + 132 >> 2] | 0) + -2 | 0) : 0) {
   HEAP32[i11 + 116 >> 2] = 1;
  }
  i1 = HEAP32[i11 + 28 >> 2] | 0;
  if ((i1 | 0) != 0) {
   i12 = _emscripten_realloc_async_context(32) | 0;
   FUNCTION_TABLE_v[i1 & 63]();
   if (___async) {
    HEAP32[i12 >> 2] = 215;
    i13 = i12 + 4 | 0;
    HEAP32[i13 >> 2] = i9;
    i14 = i12 + 8 | 0;
    HEAP32[i14 >> 2] = i7;
    i15 = i12 + 12 | 0;
    HEAP32[i15 >> 2] = i6;
    i16 = i12 + 16 | 0;
    i17 = HEAP32[i4 >> 2] | 0;
    HEAP32[i16 >> 2] = i17;
    i18 = i12 + 20 | 0;
    HEAP32[i18 >> 2] = i10;
    i19 = i12 + 24 | 0;
    i20 = HEAP32[i3 >> 2] | 0;
    HEAP32[i19 >> 2] = i20;
    i21 = i12 + 28 | 0;
    HEAP32[i21 >> 2] = i8;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   ___async_unwind = 0;
   HEAP32[i12 >> 2] = 215;
   i13 = i12 + 4 | 0;
   HEAP32[i13 >> 2] = i9;
   i14 = i12 + 8 | 0;
   HEAP32[i14 >> 2] = i7;
   i15 = i12 + 12 | 0;
   HEAP32[i15 >> 2] = i6;
   i16 = i12 + 16 | 0;
   i17 = HEAP32[i4 >> 2] | 0;
   HEAP32[i16 >> 2] = i17;
   i18 = i12 + 20 | 0;
   HEAP32[i18 >> 2] = i10;
   i19 = i12 + 24 | 0;
   i20 = HEAP32[i3 >> 2] | 0;
   HEAP32[i19 >> 2] = i20;
   i21 = i12 + 28 | 0;
   HEAP32[i21 >> 2] = i8;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  i21 = HEAP32[i11 + 52 >> 2] | 0;
  i12 = HEAP32[i11 + 36 >> 2] | 0;
  if (i9 >>> 0 >= i21 >>> 0 & i9 >>> 0 < i7 >>> 0) {
   i20 = (HEAP32[i4 >> 2] | 0) + -1 | 0;
   i19 = _emscripten_realloc_async_context(28) | 0;
   _calccolumn(i12 + ((i9 - i21 | 0) / 40 | 0) | 0, i9);
   if (___async) {
    HEAP32[i19 >> 2] = 216;
    i22 = i19 + 4 | 0;
    HEAP32[i22 >> 2] = i6;
    i23 = i19 + 8 | 0;
    HEAP32[i23 >> 2] = i7;
    i24 = i19 + 12 | 0;
    HEAP32[i24 >> 2] = i8;
    i25 = i19 + 16 | 0;
    HEAP32[i25 >> 2] = i10;
    i26 = i19 + 20 | 0;
    HEAP32[i26 >> 2] = i20;
    i27 = i19 + 24 | 0;
    i28 = HEAP32[i3 >> 2] | 0;
    HEAP32[i27 >> 2] = i28;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   ___async_unwind = 0;
   HEAP32[i19 >> 2] = 216;
   i22 = i19 + 4 | 0;
   HEAP32[i22 >> 2] = i6;
   i23 = i19 + 8 | 0;
   HEAP32[i23 >> 2] = i7;
   i24 = i19 + 12 | 0;
   HEAP32[i24 >> 2] = i8;
   i25 = i19 + 16 | 0;
   HEAP32[i25 >> 2] = i10;
   i26 = i19 + 20 | 0;
   HEAP32[i26 >> 2] = i20;
   i27 = i19 + 24 | 0;
   i28 = HEAP32[i3 >> 2] | 0;
   HEAP32[i27 >> 2] = i28;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  } else {
   i28 = i12 + (Math_imul(HEAP32[i11 + 136 >> 2] | 0, (i9 - (HEAP32[i11 + 56 >> 2] | 0) | 0) / 40 | 0) | 0) | 0;
   HEAP32[i5 >> 2] = i10 + -1;
   i10 = _emscripten_realloc_async_context(28) | 0;
   _calcline(i28, i9);
   if (___async) {
    HEAP32[i10 >> 2] = 217;
    i29 = i10 + 4 | 0;
    HEAP32[i29 >> 2] = i6;
    i30 = i10 + 8 | 0;
    HEAP32[i30 >> 2] = i7;
    i31 = i10 + 12 | 0;
    HEAP32[i31 >> 2] = i8;
    i32 = i10 + 16 | 0;
    i33 = HEAP32[i5 >> 2] | 0;
    HEAP32[i32 >> 2] = i33;
    i34 = i10 + 20 | 0;
    i35 = HEAP32[i4 >> 2] | 0;
    HEAP32[i34 >> 2] = i35;
    i36 = i10 + 24 | 0;
    i37 = HEAP32[i3 >> 2] | 0;
    HEAP32[i36 >> 2] = i37;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   ___async_unwind = 0;
   HEAP32[i10 >> 2] = 217;
   i29 = i10 + 4 | 0;
   HEAP32[i29 >> 2] = i6;
   i30 = i10 + 8 | 0;
   HEAP32[i30 >> 2] = i7;
   i31 = i10 + 12 | 0;
   HEAP32[i31 >> 2] = i8;
   i32 = i10 + 16 | 0;
   i33 = HEAP32[i5 >> 2] | 0;
   HEAP32[i32 >> 2] = i33;
   i34 = i10 + 20 | 0;
   i35 = HEAP32[i4 >> 2] | 0;
   HEAP32[i34 >> 2] = i35;
   i36 = i10 + 24 | 0;
   i37 = HEAP32[i3 >> 2] | 0;
   HEAP32[i36 >> 2] = i37;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
 }
 i37 = HEAP32[i11 + 28 >> 2] | 0;
 if ((i37 | 0) != 0) {
  i11 = _emscripten_realloc_async_context(8) | 0;
  FUNCTION_TABLE_v[i37 & 63]();
  if (___async) {
   HEAP32[i11 >> 2] = 218;
   i38 = i11 + 4 | 0;
   HEAP32[i38 >> 2] = i6;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i11 >> 2] = 218;
  i38 = i11 + 4 | 0;
  HEAP32[i38 >> 2] = i6;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 _free(i6);
 i6 = HEAP32[71600] | 0;
 HEAP32[i6 + 64 >> 2] = 0;
 HEAP32[i6 + 68 >> 2] = 0;
 HEAP32[i6 + 72 >> 2] = 286552;
 i6 = HEAP32[71600] | 0;
 HEAP32[i6 + 112 >> 2] = 0;
 i38 = HEAP32[i6 + 28 >> 2] | 0;
 if ((i38 | 0) != 0) {
  i6 = _emscripten_realloc_async_context(4) | 0;
  FUNCTION_TABLE_v[i38 & 63]();
  if (___async) {
   HEAP32[i6 >> 2] = 219;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i6 >> 2] = 219;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 _dosymetry();
 i6 = HEAP32[71600] | 0;
 L43 : do {
  if ((HEAP32[i6 + 140 >> 2] | 0) != 0) {
   HEAP32[i6 + 72 >> 2] = 286640;
   i38 = HEAP32[71600] | 0;
   i11 = HEAP32[i38 + 56 >> 2] | 0;
   i37 = HEAP32[i38 + 132 >> 2] | 0;
   i36 = i11 + (i37 * 40 | 0) | 0;
   do {
    if ((i37 | 0) > 0) {
     i3 = i11;
     L46 : while (1) {
      i10 = i3 + 32 | 0;
      L48 : do {
       if ((HEAP32[i10 >> 2] | 0) != 0) {
        i35 = HEAP32[71600] | 0;
        HEAP32[i35 + 120 >> 2] = 1;
        i34 = i3;
        do {
         i4 = i34;
         i34 = i34 + 40 | 0;
         i39 = i34 >>> 0 < i36 >>> 0;
        } while ((HEAP32[i4 + 72 >> 2] | 0) != 0 & i39);
        i4 = i3 + -40 | 0;
        if ((HEAP32[i10 >> 2] | 0) != 0 & i3 >>> 0 < i36 >>> 0) {
         i33 = i39 ^ 1;
         i32 = i35;
         i5 = i10;
         i8 = i3;
         while (1) {
          i31 = HEAP32[i32 + 56 >> 2] | 0;
          i7 = i4 >>> 0 < i31 >>> 0;
          if (i7 | i33) {
           i40 = i7 ? i34 : i4;
          } else {
           d41 = +HEAPF64[i8 >> 3];
           i40 = d41 - +HEAPF64[i4 >> 3] < +HEAPF64[i34 >> 3] - d41 ? i4 : i34;
          }
          if (i40 >>> 0 >= i36 >>> 0 | (HEAP32[i40 + 32 >> 2] | 0) != 0 | i40 >>> 0 < i31 >>> 0) {
           i42 = 37;
           break L46;
          }
          i7 = HEAP32[i32 + 36 >> 2] | 0;
          i30 = HEAP32[i32 + 136 >> 2] | 0;
          i29 = i31;
          i31 = i7 + (Math_imul((i8 - i29 | 0) / 40 | 0, i30) | 0) | 0;
          i9 = i7 + (Math_imul((i40 - i29 | 0) / 40 | 0, i30) | 0) | 0;
          _memcpy(i31 | 0, i9 | 0, HEAP32[i32 + 128 >> 2] | 0) | 0;
          HEAP32[i5 >> 2] = 0;
          HEAPF64[i8 >> 3] = +HEAPF64[i40 >> 3];
          i9 = i8 + 40 | 0;
          i31 = i8 + 72 | 0;
          if (!((HEAP32[i31 >> 2] | 0) != 0 & i9 >>> 0 < i36 >>> 0)) {
           i43 = i9;
           break L48;
          }
          i32 = HEAP32[71600] | 0;
          i5 = i31;
          i8 = i9;
         }
        } else {
         i43 = i3;
        }
       } else {
        i43 = i3;
       }
      } while (0);
      i3 = i43 + 40 | 0;
      if (!(i3 >>> 0 < i36 >>> 0)) {
       i42 = 41;
       break;
      }
     }
     if ((i42 | 0) == 37) {
      _puts(289864) | 0;
      _init_tables(HEAP32[71600] | 0);
      break L43;
     } else if ((i42 | 0) == 41) {
      i3 = HEAP32[71600] | 0;
      i44 = i3;
      i45 = HEAP32[i3 + 132 >> 2] | 0;
      break;
     }
    } else {
     i44 = i38;
     i45 = i37;
    }
   } while (0);
   i37 = HEAP32[i44 + 36 >> 2] | 0;
   i38 = i37 + (Math_imul(HEAP32[i44 + 136 >> 2] | 0, i45) | 0) | 0;
   i36 = HEAP32[i44 + 52 >> 2] | 0;
   i11 = HEAP32[i44 + 128 >> 2] | 0;
   i3 = i36 + (i11 * 40 | 0) | 0;
   if ((i11 | 0) > 0) {
    i11 = i44;
    i10 = 0;
    i8 = i36;
    i36 = i37;
    i37 = 0;
    L66 : while (1) {
     i5 = i8 + 32 | 0;
     do {
      if ((HEAP32[i5 >> 2] | 0) != 0) {
       HEAP32[i11 + 120 >> 2] = 1;
       i32 = i8;
       while (1) {
        i46 = i32 >>> 0 < i3 >>> 0;
        if ((HEAP32[i32 + 32 >> 2] | 0) != 0 & i46) {
         i32 = i32 + 40 | 0;
        } else {
         break;
        }
       }
       i34 = i8 + -40 | 0;
       if ((HEAP32[i5 >> 2] | 0) != 0 & i8 >>> 0 < i3 >>> 0) {
        i4 = i46 ^ 1;
        i47 = i11;
        i33 = i5;
        i35 = i10;
        i9 = 0;
        i31 = i8;
        i30 = i36;
        i29 = i37;
        while (1) {
         i7 = HEAP32[i47 + 52 >> 2] | 0;
         i28 = i34 >>> 0 < i7 >>> 0;
         if (i28 | i4) {
          i48 = i28 ? i32 : i34;
         } else {
          d41 = +HEAPF64[i31 >> 3];
          i48 = d41 - +HEAPF64[i34 >> 3] < +HEAPF64[i32 >> 3] - d41 ? i34 : i32;
         }
         if (i48 >>> 0 >= i3 >>> 0 | (HEAP32[i48 + 32 >> 2] | 0) != 0 | i48 >>> 0 < i7 >>> 0) {
          break L66;
         }
         if ((i48 | 0) == (i9 | 0)) {
          i49 = i47;
          i50 = i35 + 1 | 0;
          i51 = i9;
          i52 = i30;
          i53 = i29;
         } else {
          L82 : do {
           if ((i9 | 0) != 0) {
            if ((i35 | 0) != 1) {
             if (i30 >>> 0 < i38 >>> 0) {
              i54 = i30;
              i55 = i29;
             } else {
              i56 = i47;
              break;
             }
             while (1) {
              _memset(i54 | 0, HEAP8[i55 >> 0] | 0, i35 | 0) | 0;
              i7 = HEAP32[71600] | 0;
              i28 = HEAP32[i7 + 136 >> 2] | 0;
              i54 = i54 + i28 | 0;
              if (!(i54 >>> 0 < i38 >>> 0)) {
               i56 = i7;
               break L82;
              } else {
               i55 = i55 + i28 | 0;
              }
             }
            }
            i28 = HEAP32[i47 + 136 >> 2] | 0;
            if (i30 >>> 0 < i38 >>> 0) {
             i7 = i30;
             i12 = i29;
             while (1) {
              HEAP8[i7 >> 0] = HEAP8[i12 >> 0] | 0;
              i7 = i7 + i28 | 0;
              if (!(i7 >>> 0 < i38 >>> 0)) {
               break;
              } else {
               i12 = i12 + i28 | 0;
              }
             }
             i56 = HEAP32[71600] | 0;
            } else {
             i56 = i47;
            }
           } else {
            i56 = i47;
           }
          } while (0);
          i28 = HEAP32[i56 + 36 >> 2] | 0;
          i12 = HEAP32[i56 + 52 >> 2] | 0;
          i49 = i56;
          i50 = 1;
          i51 = i48;
          i52 = i28 + ((i31 - i12 | 0) / 40 | 0) | 0;
          i53 = i28 + ((i48 - i12 | 0) / 40 | 0) | 0;
         }
         HEAP32[i33 >> 2] = 0;
         HEAPF64[i31 >> 3] = +HEAPF64[i48 >> 3];
         i12 = i31;
         i31 = i31 + 40 | 0;
         i33 = i12 + 72 | 0;
         if (!((HEAP32[i33 >> 2] | 0) != 0 & i31 >>> 0 < i3 >>> 0)) {
          break;
         } else {
          i47 = i49;
          i35 = i50;
          i9 = i51;
          i30 = i52;
          i29 = i53;
         }
        }
        if ((i51 | 0) != 0) {
         i29 = i52 >>> 0 < i38 >>> 0;
         if ((i50 | 0) == 1) {
          if (i29) {
           i57 = i52;
           i58 = i53;
          } else {
           i59 = i49;
           i60 = 1;
           i61 = i31;
           i62 = i52;
           i63 = i53;
           break;
          }
          while (1) {
           HEAP8[i57 >> 0] = HEAP8[i58 >> 0] | 0;
           i30 = HEAP32[71600] | 0;
           i9 = HEAP32[i30 + 136 >> 2] | 0;
           i35 = i57 + i9 | 0;
           i33 = i58 + i9 | 0;
           if (i35 >>> 0 < i38 >>> 0) {
            i57 = i35;
            i58 = i33;
           } else {
            i59 = i30;
            i60 = 1;
            i61 = i31;
            i62 = i35;
            i63 = i33;
            break;
           }
          }
         } else {
          if (i29) {
           i64 = i52;
           i65 = i53;
          } else {
           i59 = i49;
           i60 = i50;
           i61 = i31;
           i62 = i52;
           i63 = i53;
           break;
          }
          while (1) {
           _memset(i64 | 0, HEAP8[i65 >> 0] | 0, i50 | 0) | 0;
           i33 = HEAP32[71600] | 0;
           i35 = HEAP32[i33 + 136 >> 2] | 0;
           i30 = i64 + i35 | 0;
           i9 = i65 + i35 | 0;
           if (i30 >>> 0 < i38 >>> 0) {
            i64 = i30;
            i65 = i9;
           } else {
            i59 = i33;
            i60 = i50;
            i61 = i31;
            i62 = i30;
            i63 = i9;
            break;
           }
          }
         }
        } else {
         i59 = i49;
         i60 = i50;
         i61 = i31;
         i62 = i52;
         i63 = i53;
        }
       } else {
        i59 = i11;
        i60 = i10;
        i61 = i8;
        i62 = i36;
        i63 = i37;
       }
      } else {
       i59 = i11;
       i60 = i10;
       i61 = i8;
       i62 = i36;
       i63 = i37;
      }
     } while (0);
     i8 = i61 + 40 | 0;
     if (!(i8 >>> 0 < i3 >>> 0)) {
      break L43;
     } else {
      i11 = i59;
      i10 = i60;
      i36 = i62;
      i37 = i63;
     }
    }
    _init_tables(i47);
    _puts(289864) | 0;
   }
  }
 } while (0);
 i47 = HEAP32[71600] | 0;
 i63 = HEAP32[i47 + 28 >> 2] | 0;
 if ((i63 | 0) != 0) {
  i62 = _emscripten_realloc_async_context(4) | 0;
  FUNCTION_TABLE_v[i63 & 63]();
  if (___async) {
   HEAP32[i62 >> 2] = 226;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i62 >> 2] = 226;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i62 = HEAP32[i47 + 52 >> 2] | 0;
 i63 = HEAP32[i47 + 128 >> 2] | 0;
 i60 = i62 + (i63 * 40 | 0) | 0;
 if ((i63 | 0) > 0) {
  i63 = HEAP32[i47 + 16 >> 2] | 0;
  i59 = i62;
  while (1) {
   HEAPF64[i63 >> 3] = +HEAPF64[i59 >> 3];
   i59 = i59 + 40 | 0;
   if (!(i59 >>> 0 < i60 >>> 0)) {
    break;
   } else {
    i63 = i63 + 8 | 0;
   }
  }
 }
 i63 = HEAP32[i47 + 56 >> 2] | 0;
 i60 = HEAP32[i47 + 132 >> 2] | 0;
 i59 = i63 + (i60 * 40 | 0) | 0;
 if ((i60 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i60 = HEAP32[i47 + 20 >> 2] | 0;
 i47 = i63;
 while (1) {
  HEAPF64[i60 >> 3] = +HEAPF64[i47 >> 3];
  i47 = i47 + 40 | 0;
  if (!(i47 >>> 0 < i59 >>> 0)) {
   break;
  } else {
   i60 = i60 + 8 | 0;
  }
 }
 STACKTOP = i2;
 return;
}
function _disp3d() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12940] | 0;
 if ((i2 | 0) > 0) {
  i3 = HEAP32[12942] | 0;
  i4 = HEAP32[12944] | 0;
  i5 = HEAP32[12946] | 0;
  i6 = HEAP32[12948] | 0;
  i7 = HEAP32[12950] | 0;
  i8 = HEAP32[22676] | 0;
  i9 = HEAP32[22678] | 0;
  i10 = HEAP32[51808 + (i7 << 2) >> 2] | 0;
  i11 = HEAP32[53256 + (i7 << 2) >> 2] | 0;
  i7 = HEAP32[51808 + (i8 << 2) >> 2] | 0;
  i12 = HEAP32[53256 + (i8 << 2) >> 2] | 0;
  i8 = HEAP32[51808 + (i9 << 2) >> 2] | 0;
  i13 = HEAP32[53256 + (i9 << 2) >> 2] | 0;
  i9 = 0;
  do {
   i14 = 0;
   do {
    i15 = i4 + (HEAP32[i3 + (i9 * 72 | 0) + (i14 * 24 | 0) >> 2] | 0) | 0;
    i16 = i5 + (HEAP32[i3 + (i9 * 72 | 0) + (i14 * 24 | 0) + 4 >> 2] | 0) | 0;
    i17 = i6 + (HEAP32[i3 + (i9 * 72 | 0) + (i14 * 24 | 0) + 8 >> 2] | 0) | 0;
    i18 = (Math_imul(i10, i17) | 0) - (Math_imul(i11, i15) | 0) >> 16;
    i19 = (Math_imul(i10, i15) | 0) + (Math_imul(i11, i17) | 0) >> 16;
    i17 = (Math_imul(i7, i16) | 0) - (Math_imul(i19, i12) | 0) >> 16;
    i15 = (Math_imul(i12, i16) | 0) + (Math_imul(i19, i7) | 0) >> 16;
    HEAP32[54704 + (i9 * 72 | 0) + (i14 * 24 | 0) + 8 >> 2] = i15;
    i19 = (Math_imul(i17, i8) | 0) - (Math_imul(i13, i18) | 0) >> 16;
    HEAP32[54704 + (i9 * 72 | 0) + (i14 * 24 | 0) >> 2] = (Math_imul(i13, i17) | 0) + (Math_imul(i18, i8) | 0) >> 16;
    HEAP32[54704 + (i9 * 72 | 0) + (i14 * 24 | 0) + 4 >> 2] = i19;
    i19 = i5 + (HEAP32[i3 + (i9 * 72 | 0) + (i14 * 24 | 0) + 16 >> 2] | 0) | 0;
    i18 = (Math_imul(i10, i6 + (HEAP32[i3 + (i9 * 72 | 0) + (i14 * 24 | 0) + 20 >> 2] | 0) | 0) | 0) - (Math_imul(i11, i4 + (HEAP32[i3 + (i9 * 72 | 0) + (i14 * 24 | 0) + 12 >> 2] | 0) | 0) | 0) >> 16;
    i17 = (Math_imul(i7, i19) | 0) - (Math_imul(i12, i15) | 0) >> 16;
    HEAP32[54704 + (i9 * 72 | 0) + (i14 * 24 | 0) + 20 >> 2] = (Math_imul(i12, i19) | 0) + (Math_imul(i15, i7) | 0) >> 16;
    i15 = (Math_imul(i17, i8) | 0) - (Math_imul(i13, i18) | 0) >> 16;
    HEAP32[54704 + (i9 * 72 | 0) + (i14 * 24 | 0) + 12 >> 2] = (Math_imul(i13, i17) | 0) + (Math_imul(i18, i8) | 0) >> 16;
    HEAP32[54704 + (i9 * 72 | 0) + (i14 * 24 | 0) + 16 >> 2] = i15;
    i14 = i14 + 1 | 0;
   } while ((i14 | 0) != 3);
   i9 = i9 + 1 | 0;
  } while ((i9 | 0) < (i2 | 0));
 }
 i2 = HEAP32[12936] | 0;
 _memset(HEAP32[12938] | 0, 85, Math_imul(HEAP32[i2 + 152 >> 2] << 2, HEAP32[i2 + 156 >> 2] | 0) | 0) | 0;
 i2 = HEAP32[12936] | 0;
 _memset(HEAP32[i2 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i2 + 156 >> 2] | 0, HEAP32[i2 + 152 >> 2] | 0) | 0) | 0;
 i2 = HEAP32[12940] | 0;
 if ((i2 | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 i9 = HEAP32[12936] | 0;
 i8 = HEAP32[i9 + 152 >> 2] | 0;
 d20 = +HEAPF32[226];
 d21 = +((i8 | 0) / 2 | 0 | 0);
 i13 = HEAP32[i9 + 156 >> 2] | 0;
 d22 = +(HEAP32[i9 + 48 >> 2] | 0);
 d23 = +(HEAP32[i9 + 52 >> 2] | 0);
 d24 = +((i13 | 0) / 2 | 0 | 0);
 i9 = 0;
 do {
  i7 = 0;
  do {
   i12 = HEAP32[54704 + (i9 * 72 | 0) + (i7 * 24 | 0) + 8 >> 2] | 0;
   i3 = i12 + 256 | 0;
   HEAP32[90736 + (i9 * 72 | 0) + (i7 * 24 | 0) >> 2] = ~~(d21 + d20 * +(Math_imul((HEAP32[54704 + (i9 * 72 | 0) + (i7 * 24 | 0) >> 2] << 8 | 0) / (i3 | 0) | 0, i8) | 0) / 320.0);
   HEAP32[90736 + (i9 * 72 | 0) + (i7 * 24 | 0) + 4 >> 2] = ~~(d24 + d22 * d20 * +(Math_imul((HEAP32[54704 + (i9 * 72 | 0) + (i7 * 24 | 0) + 4 >> 2] << 8 | 0) / (i3 | 0) | 0, i13) | 0) / d23 / 320.0);
   HEAP32[90736 + (i9 * 72 | 0) + (i7 * 24 | 0) + 8 >> 2] = i12 << 16;
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != 3);
  i9 = i9 + 1 | 0;
 } while ((i9 | 0) != (i2 | 0));
 i25 = 0;
 do {
  i2 = HEAP32[90736 + (i25 * 72 | 0) >> 2] | 0;
  i9 = HEAP32[90764 + (i25 * 72 | 0) >> 2] | 0;
  i13 = HEAP32[90740 + (i25 * 72 | 0) >> 2] | 0;
  i8 = Math_imul(i9 - i13 | 0, (HEAP32[90784 + (i25 * 72 | 0) >> 2] | 0) - i2 | 0) | 0;
  i7 = HEAP32[90788 + (i25 * 72 | 0) >> 2] | 0;
  if ((i8 - (Math_imul(i7 - i13 | 0, (HEAP32[90760 + (i25 * 72 | 0) >> 2] | 0) - i2 | 0) | 0) | 0) < 1) {
   i2 = (i13 | 0) > (i9 | 0);
   i8 = (HEAP32[90736 + (i25 * 72 | 0) + ((i2 & 1) * 24 | 0) + 4 >> 2] | 0) > (i7 | 0) ? 2 : i2 & 1;
   i2 = (i13 | 0) < (i9 | 0);
   i9 = (HEAP32[90736 + (i25 * 72 | 0) + ((i2 & 1) * 24 | 0) + 4 >> 2] | 0) < (i7 | 0) ? 2 : i2 & 1;
   i2 = i8;
   do {
    i2 = i2 << 24 >> 24 == 2 ? 0 : i2 + 1 << 24 >> 24;
    i26 = i2 & 255;
   } while (i2 << 24 >> 24 == i8 << 24 >> 24 ? 1 : i2 << 24 >> 24 == i9 << 24 >> 24);
   i2 = i9 & 255;
   i7 = i8 & 255;
   i13 = 90736 + (i25 * 72 | 0) + (i2 * 24 | 0) + 4 | 0;
   i12 = HEAP32[i13 >> 2] | 0;
   i3 = HEAP32[90736 + (i25 * 72 | 0) + (i7 * 24 | 0) + 4 >> 2] | 0;
   i4 = i12 - i3 | 0;
   i11 = 90736 + (i25 * 72 | 0) + (i26 * 24 | 0) | 0;
   i6 = 90736 + (i25 * 72 | 0) + (i26 * 24 | 0) + 4 | 0;
   i10 = HEAP32[i6 >> 2] | 0;
   i5 = i10 - i3 | 0;
   i14 = i12 - i10 | 0;
   if ((i12 | 0) != (i3 | 0)) {
    i15 = 90736 + (i25 * 72 | 0) + (i2 * 24 | 0) | 0;
    i18 = HEAP32[90736 + (i25 * 72 | 0) + (i7 * 24 | 0) >> 2] | 0;
    i17 = ((HEAP32[i15 >> 2] | 0) - i18 << 16 | 0) / (i4 | 0) | 0;
    i19 = i18 << 16;
    i16 = 54704 + (i25 * 72 | 0) + (i2 * 24 | 0) + 12 | 0;
    i27 = HEAP32[54704 + (i25 * 72 | 0) + (i7 * 24 | 0) + 12 >> 2] | 0;
    i28 = ((HEAP32[i16 >> 2] | 0) - i27 | 0) / (i4 | 0) | 0;
    i29 = 54704 + (i25 * 72 | 0) + (i2 * 24 | 0) + 16 | 0;
    i30 = HEAP32[54704 + (i25 * 72 | 0) + (i7 * 24 | 0) + 16 >> 2] | 0;
    i31 = ((HEAP32[i29 >> 2] | 0) - i30 | 0) / (i4 | 0) | 0;
    i32 = 90736 + (i25 * 72 | 0) + (i2 * 24 | 0) + 8 | 0;
    i2 = HEAP32[90736 + (i25 * 72 | 0) + (i7 * 24 | 0) + 8 >> 2] | 0;
    i7 = ((HEAP32[i32 >> 2] | 0) - i2 | 0) / (i4 | 0) | 0;
    if ((i10 | 0) != (i3 | 0)) {
     i4 = ((HEAP32[i11 >> 2] | 0) - i18 << 16 | 0) / (i5 | 0) | 0;
     i18 = ((HEAP32[54704 + (i25 * 72 | 0) + (i26 * 24 | 0) + 12 >> 2] | 0) - i27 | 0) / (i5 | 0) | 0;
     i33 = ((HEAP32[54704 + (i25 * 72 | 0) + (i26 * 24 | 0) + 16 >> 2] | 0) - i30 | 0) / (i5 | 0) | 0;
     i34 = ((HEAP32[90736 + (i25 * 72 | 0) + (i26 * 24 | 0) + 8 >> 2] | 0) - i2 | 0) / (i5 | 0) | 0;
     if ((i3 | 0) > (i10 | 0)) {
      i35 = i10;
      i36 = i27;
      i37 = i30;
      i38 = i2;
      i39 = i19;
     } else {
      i5 = i3;
      i40 = i27;
      i41 = i30;
      i42 = i2;
      i43 = i27;
      i44 = i30;
      i45 = i2;
      i46 = i19;
      i47 = i19;
      while (1) {
       i48 = i46 >> 16;
       i49 = i47 >> 16;
       if ((((i48 | 0) > (i49 | 0) ? (i50 = HEAP32[12936] | 0, i51 = HEAP32[i50 + 152 >> 2] | 0, i52 = Math_imul(i51, i5) | 0, i53 = (HEAP32[12938] | 0) + (i52 + i49 << 2) | 0, (i51 | 0) > (i49 | 0) & ((((i5 | 0) < 0 ? 1 : (HEAP32[i50 + 156 >> 2] | 0) <= (i5 | 0)) | (i48 | 0) < 0) ^ 1)) : 0) ? (i54 = (i49 | 0) < 0 ? 0 : i49, i55 = (i51 | 0) > (i48 | 0) ? i48 : i51 + -1 | 0, i51 = i55 - i54 | 0, (i55 | 0) != (i54 | 0)) : 0) ? (i56 = (i40 - i43 | 0) / (i51 | 0) | 0, i57 = (i41 - i44 | 0) / (i51 | 0) | 0, i58 = (i42 - i45 | 0) / (i51 | 0) | 0, i51 = HEAP32[i50 + 160 >> 2] | 0, i50 = i52 + i54 | 0, i54 = i55 + i52 | 0, i52 = i51 + i54 | 0, (i50 | 0) <= (i54 | 0)) : 0) {
        i54 = i43;
        i55 = i44;
        i59 = i45;
        i60 = i51 + i50 | 0;
        i50 = i53;
        while (1) {
         i53 = i59 >> 8;
         if ((i53 - (HEAP32[i50 >> 2] | 0) | 0) < 500) {
          HEAP8[i60 >> 0] = HEAP8[(HEAP32[22680] | 0) + ((((i54 | 0) > -1 ? i54 : 0 - i54 | 0) >>> 7) + 64 + (((i55 | 0) > -1 ? i55 : 0 - i55 | 0) + 8192 & 16256) & 16383) >> 0] | 0;
          HEAP32[i50 >> 2] = i53;
         }
         i60 = i60 + 1 | 0;
         if (i60 >>> 0 > i52 >>> 0) {
          break;
         } else {
          i54 = i54 + i56 | 0;
          i55 = i55 + i57 | 0;
          i59 = i59 + i58 | 0;
          i50 = i50 + 4 | 0;
         }
        }
       }
       if ((((i48 | 0) < (i49 | 0) ? (i50 = HEAP32[12936] | 0, i58 = HEAP32[i50 + 152 >> 2] | 0, i59 = Math_imul(i58, i5) | 0, i57 = (HEAP32[12938] | 0) + (i59 + i48 << 2) | 0, (i58 | 0) > (i48 | 0) & ((((i5 | 0) < 0 ? 1 : (HEAP32[i50 + 156 >> 2] | 0) <= (i5 | 0)) | (i49 | 0) < 0) ^ 1)) : 0) ? (i55 = (i48 | 0) < 0 ? 0 : i48, i56 = (i58 | 0) > (i49 | 0) ? i49 : i58 + -1 | 0, i58 = i56 - i55 | 0, (i56 | 0) != (i55 | 0)) : 0) ? (i54 = (i43 - i40 | 0) / (i58 | 0) | 0, i52 = (i44 - i41 | 0) / (i58 | 0) | 0, i60 = (i45 - i42 | 0) / (i58 | 0) | 0, i58 = HEAP32[i50 + 160 >> 2] | 0, i50 = i59 + i55 | 0, i55 = i56 + i59 | 0, i59 = i58 + i55 | 0, (i50 | 0) <= (i55 | 0)) : 0) {
        i55 = i40;
        i56 = i41;
        i53 = i42;
        i51 = i58 + i50 | 0;
        i50 = i57;
        while (1) {
         i57 = i53 >> 8;
         if ((i57 - (HEAP32[i50 >> 2] | 0) | 0) < 500) {
          HEAP8[i51 >> 0] = HEAP8[(HEAP32[22680] | 0) + ((((i55 | 0) > -1 ? i55 : 0 - i55 | 0) >>> 7) + 64 + (((i56 | 0) > -1 ? i56 : 0 - i56 | 0) + 8192 & 16256) & 16383) >> 0] | 0;
          HEAP32[i50 >> 2] = i57;
         }
         i51 = i51 + 1 | 0;
         if (i51 >>> 0 > i59 >>> 0) {
          break;
         } else {
          i55 = i55 + i54 | 0;
          i56 = i56 + i52 | 0;
          i53 = i53 + i60 | 0;
          i50 = i50 + 4 | 0;
         }
        }
       }
       i50 = i46 + i17 | 0;
       i60 = i40 + i28 | 0;
       i53 = i41 + i31 | 0;
       i52 = i42 + i7 | 0;
       i56 = HEAP32[i6 >> 2] | 0;
       if ((i5 | 0) < (i56 | 0)) {
        i5 = i5 + 1 | 0;
        i40 = i60;
        i41 = i53;
        i42 = i52;
        i43 = i43 + i18 | 0;
        i44 = i44 + i33 | 0;
        i45 = i45 + i34 | 0;
        i46 = i50;
        i47 = i47 + i4 | 0;
       } else {
        i35 = i56;
        i36 = i60;
        i37 = i53;
        i38 = i52;
        i39 = i50;
        break;
       }
      }
     }
    } else {
     i35 = i3;
     i36 = i27;
     i37 = i30;
     i38 = i2;
     i39 = i19;
    }
    if ((i12 | 0) != (i10 | 0) ? (i4 = HEAP32[i11 >> 2] | 0, i47 = ((HEAP32[i15 >> 2] | 0) - i4 << 16 | 0) / (i14 | 0) | 0, i46 = HEAP32[54704 + (i25 * 72 | 0) + (i26 * 24 | 0) + 12 >> 2] | 0, i34 = ((HEAP32[i16 >> 2] | 0) - i46 | 0) / (i14 | 0) | 0, i45 = HEAP32[54704 + (i25 * 72 | 0) + (i26 * 24 | 0) + 16 >> 2] | 0, i33 = ((HEAP32[i29 >> 2] | 0) - i45 | 0) / (i14 | 0) | 0, i44 = HEAP32[90736 + (i25 * 72 | 0) + (i26 * 24 | 0) + 8 >> 2] | 0, i18 = ((HEAP32[i32 >> 2] | 0) - i44 | 0) / (i14 | 0) | 0, (i35 | 0) < (HEAP32[i13 >> 2] | 0)) : 0) {
     i43 = i35;
     i42 = i36;
     i41 = i37;
     i40 = i38;
     i5 = i46;
     i46 = i45;
     i45 = i44;
     i44 = i39;
     i6 = i4 << 16;
     while (1) {
      i43 = i43 + 1 | 0;
      i4 = i44 >> 16;
      i8 = i6 >> 16;
      if ((((i4 | 0) > (i8 | 0) ? (i9 = HEAP32[12936] | 0, i50 = HEAP32[i9 + 152 >> 2] | 0, i52 = Math_imul(i50, i43) | 0, i53 = (HEAP32[12938] | 0) + (i52 + i8 << 2) | 0, (i50 | 0) > (i8 | 0) & ((((i43 | 0) < 0 ? 1 : (HEAP32[i9 + 156 >> 2] | 0) <= (i43 | 0)) | (i4 | 0) < 0) ^ 1)) : 0) ? (i60 = (i8 | 0) < 0 ? 0 : i8, i56 = (i50 | 0) > (i4 | 0) ? i4 : i50 + -1 | 0, i50 = i56 - i60 | 0, (i56 | 0) != (i60 | 0)) : 0) ? (i54 = (i42 - i5 | 0) / (i50 | 0) | 0, i55 = (i41 - i46 | 0) / (i50 | 0) | 0, i59 = (i40 - i45 | 0) / (i50 | 0) | 0, i50 = HEAP32[i9 + 160 >> 2] | 0, i9 = i52 + i60 | 0, i60 = i56 + i52 | 0, i52 = i50 + i60 | 0, (i9 | 0) <= (i60 | 0)) : 0) {
       i60 = i5;
       i56 = i46;
       i51 = i45;
       i49 = i50 + i9 | 0;
       i9 = i53;
       while (1) {
        i53 = i51 >> 8;
        if ((i53 - (HEAP32[i9 >> 2] | 0) | 0) < 500) {
         HEAP8[i49 >> 0] = HEAP8[(HEAP32[22680] | 0) + ((((i60 | 0) > -1 ? i60 : 0 - i60 | 0) >>> 7) + 64 + (((i56 | 0) > -1 ? i56 : 0 - i56 | 0) + 8192 & 16256) & 16383) >> 0] | 0;
         HEAP32[i9 >> 2] = i53;
        }
        i49 = i49 + 1 | 0;
        if (i49 >>> 0 > i52 >>> 0) {
         break;
        } else {
         i60 = i60 + i54 | 0;
         i56 = i56 + i55 | 0;
         i51 = i51 + i59 | 0;
         i9 = i9 + 4 | 0;
        }
       }
      }
      if ((((i4 | 0) < (i8 | 0) ? (i9 = HEAP32[12936] | 0, i59 = HEAP32[i9 + 152 >> 2] | 0, i51 = Math_imul(i59, i43) | 0, i55 = (HEAP32[12938] | 0) + (i51 + i4 << 2) | 0, (i59 | 0) > (i4 | 0) & ((((i43 | 0) < 0 ? 1 : (HEAP32[i9 + 156 >> 2] | 0) <= (i43 | 0)) | (i8 | 0) < 0) ^ 1)) : 0) ? (i56 = (i4 | 0) < 0 ? 0 : i4, i54 = (i59 | 0) > (i8 | 0) ? i8 : i59 + -1 | 0, i59 = i54 - i56 | 0, (i54 | 0) != (i56 | 0)) : 0) ? (i60 = (i5 - i42 | 0) / (i59 | 0) | 0, i52 = (i46 - i41 | 0) / (i59 | 0) | 0, i49 = (i45 - i40 | 0) / (i59 | 0) | 0, i59 = HEAP32[i9 + 160 >> 2] | 0, i9 = i51 + i56 | 0, i56 = i54 + i51 | 0, i51 = i59 + i56 | 0, (i9 | 0) <= (i56 | 0)) : 0) {
       i56 = i42;
       i54 = i41;
       i53 = i40;
       i50 = i59 + i9 | 0;
       i9 = i55;
       while (1) {
        i55 = i53 >> 8;
        if ((i55 - (HEAP32[i9 >> 2] | 0) | 0) < 500) {
         HEAP8[i50 >> 0] = HEAP8[(HEAP32[22680] | 0) + ((((i56 | 0) > -1 ? i56 : 0 - i56 | 0) >>> 7) + 64 + (((i54 | 0) > -1 ? i54 : 0 - i54 | 0) + 8192 & 16256) & 16383) >> 0] | 0;
         HEAP32[i9 >> 2] = i55;
        }
        i50 = i50 + 1 | 0;
        if (i50 >>> 0 > i51 >>> 0) {
         break;
        } else {
         i56 = i56 + i60 | 0;
         i54 = i54 + i52 | 0;
         i53 = i53 + i49 | 0;
         i9 = i9 + 4 | 0;
        }
       }
      }
      if ((i43 | 0) >= (HEAP32[i13 >> 2] | 0)) {
       break;
      } else {
       i42 = i42 + i28 | 0;
       i41 = i41 + i31 | 0;
       i40 = i40 + i7 | 0;
       i5 = i5 + i34 | 0;
       i46 = i46 + i33 | 0;
       i45 = i45 + i18 | 0;
       i44 = i44 + i17 | 0;
       i6 = i6 + i47 | 0;
      }
     }
    }
   }
  }
  i25 = i25 + 1 | 0;
 } while (i25 >>> 0 < (HEAP32[12940] | 0) >>> 0);
 STACKTOP = i1;
 return;
}
function _credits2() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 _memset(HEAP32[i2 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i2 + 156 >> 2] | 0, HEAP32[i2 + 152 >> 2] | 0) | 0) | 0;
 i2 = HEAP32[12936] | 0;
 _centerprint((HEAP32[i2 + 152 >> 2] | 0) / 2 | 0, (HEAP32[i2 + 156 >> 2] | 0) / 3 | 0, 3.0, 128, 523424, 0);
 i2 = HEAP32[12936] | 0;
 _centerprint((HEAP32[i2 + 152 >> 2] | 0) / 2 | 0, (HEAP32[i2 + 156 >> 2] << 1 | 0) / 3 | 0, 3.0, 128, 523432, 0);
 HEAP32[34] = 30;
 HEAP32[(HEAP32[22682] | 0) + 20 >> 2] = 50;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 1, 5e6);
 if (___async) {
  HEAP32[i2 >> 2] = 239;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[(HEAP32[22682] | 0) + 20 >> 2] = 0;
 HEAP32[34] = 31;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 1, 25e5);
 if (___async) {
  HEAP32[i2 >> 2] = 240;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[34] = 0;
 i2 = HEAP32[12936] | 0;
 _memset(HEAP32[i2 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i2 + 156 >> 2] | 0, HEAP32[i2 + 152 >> 2] | 0) | 0) | 0;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _draw();
 if (___async) {
  HEAP32[i2 >> 2] = 241;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 _load_song(523440) | 0;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _bbupdate() | 0;
 if (___async) {
  HEAP32[i2 >> 2] = 242;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 i2 = HEAP32[68188] | 0;
 HEAP32[68196] = i2;
 HEAP32[68194] = i2;
 _play();
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _bbwait(1);
 if (___async) {
  HEAP32[i2 >> 2] = 243;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 i2 = HEAP32[12936] | 0;
 i3 = i2;
 i4 = ((HEAP32[i2 + 56 >> 2] | 0) / 2 | 0) + -2 | 0;
 i5 = ((HEAP32[i2 + 60 >> 2] | 0) + -6 | 0) / 2 | 0;
 i2 = 0;
 while (1) {
  _aa_puts(i3, i4, i5, 2, 523448);
  if ((i2 | 0) != 0) {
   i6 = HEAP32[12936] | 0;
   _aa_puts(i6, ((HEAP32[i6 + 56 >> 2] | 0) / 2 | 0) + -2 | 0, i2 + -1 + (((HEAP32[i6 + 60 >> 2] | 0) + -6 | 0) / 2 | 0) | 0, 0, 523448);
  }
  i7 = _emscripten_alloc_async_context(8) | 0;
  HEAP32[___async_cur_frame + 4 >> 2] = i1;
  _bbflushwait(1e5);
  if (___async) {
   i8 = 15;
   break;
  }
  _emscripten_free_async_context(i7 | 0);
  i6 = i2 + 1 | 0;
  i3 = HEAP32[12936] | 0;
  i4 = ((HEAP32[i3 + 56 >> 2] | 0) / 2 | 0) + -2 | 0;
  i9 = ((HEAP32[i3 + 60 >> 2] | 0) + -6 | 0) / 2 | 0;
  if ((i6 | 0) == 6) {
   break;
  } else {
   i5 = i9 + i6 | 0;
   i2 = i6;
  }
 }
 if ((i8 | 0) == 15) {
  HEAP32[i7 >> 2] = 244;
  HEAP32[i7 + 4 >> 2] = i2;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _aa_puts(i3, i4, i9 + 5 | 0, 0, 523448);
 i9 = HEAP32[12936] | 0;
 i4 = HEAP32[i9 + 56 >> 2] | 0;
 do {
  if (!((i4 + 1 | 0) >>> 0 < 3)) {
   i3 = (i4 | 0) / 2 | 0;
   while (1) {
    _display8();
    _displaya(i3);
    i10 = _emscripten_alloc_async_context(8) | 0;
    HEAP32[___async_cur_frame + 4 >> 2] = i1;
    _bbflushwait(1e4);
    if (___async) {
     i8 = 21;
     break;
    }
    _emscripten_free_async_context(i10 | 0);
    i2 = i3 + -1 | 0;
    if ((i2 | 0) == 0) {
     i8 = 19;
     break;
    } else {
     i3 = i2;
    }
   }
   if ((i8 | 0) == 19) {
    i11 = HEAP32[12936] | 0;
    i12 = 0;
    break;
   } else if ((i8 | 0) == 21) {
    HEAP32[i10 >> 2] = 245;
    HEAP32[i10 + 4 >> 2] = i3;
    i1 = STACKTOP;
    STACKTOP = i1;
    return;
   }
  } else {
   i11 = i9;
   i12 = 0;
  }
 } while (0);
 while (1) {
  _memset(HEAP32[i11 + 164 >> 2] | 0, 32, Math_imul(HEAP32[i11 + 60 >> 2] | 0, HEAP32[i11 + 56 >> 2] | 0) | 0) | 0;
  i9 = HEAP32[12936] | 0;
  _memset(HEAP32[i9 + 168 >> 2] | 0, 0, Math_imul(HEAP32[i9 + 60 >> 2] | 0, HEAP32[i9 + 56 >> 2] | 0) | 0) | 0;
  _displaya(~~(+Math_sin(+(+(i12 | 0) * 3.141592653589793 / 100.0)) * 10.0));
  _display8();
  i13 = _emscripten_alloc_async_context(8) | 0;
  HEAP32[___async_cur_frame + 4 >> 2] = i1;
  _bbflushwait(1e4);
  if (___async) {
   i8 = 24;
   break;
  }
  _emscripten_free_async_context(i13 | 0);
  i9 = i12 + 1 | 0;
  i11 = HEAP32[12936] | 0;
  if ((i9 | 0) == 100) {
   break;
  } else {
   i12 = i9;
  }
 }
 if ((i8 | 0) == 24) {
  HEAP32[i13 >> 2] = 246;
  HEAP32[i13 + 4 >> 2] = i12;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _aa_puts(i11, ((HEAP32[i11 + 56 >> 2] | 0) / 2 | 0) + -9 | 0, (((HEAP32[i11 + 60 >> 2] | 0) + -6 | 0) / 2 | 0) + 3 | 0, 1, 523456);
 i11 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _bbflushwait(1e5);
 if (___async) {
  HEAP32[i11 >> 2] = 247;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i11 | 0);
 i11 = HEAP32[12936] | 0;
 _aa_puts(i11, ((HEAP32[i11 + 56 >> 2] | 0) / 2 | 0) + -9 | 0, (((HEAP32[i11 + 60 >> 2] | 0) + -6 | 0) / 2 | 0) + 3 | 0, 0, 523456);
 i11 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _bbflushwait(1e5);
 if (___async) {
  HEAP32[i11 >> 2] = 248;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i11 | 0);
 i11 = HEAP32[12936] | 0;
 _aa_puts(i11, ((HEAP32[i11 + 56 >> 2] | 0) / 2 | 0) + -9 | 0, (((HEAP32[i11 + 60 >> 2] | 0) + -6 | 0) / 2 | 0) + 3 | 0, 2, 523456);
 i11 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _bbflushwait(1e5);
 if (___async) {
  HEAP32[i11 >> 2] = 249;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i11 | 0);
 i11 = HEAP32[12936] | 0;
 _aa_puts(i11, ((HEAP32[i11 + 56 >> 2] | 0) / 2 | 0) + -9 | 0, (((HEAP32[i11 + 60 >> 2] | 0) + -6 | 0) / 2 | 0) + 3 | 0, 0, 523456);
 i11 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _bbflushwait(1e5);
 if (___async) {
  HEAP32[i11 >> 2] = 250;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i11 | 0);
 i11 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _bbwait(1e6);
 if (___async) {
  HEAP32[i11 >> 2] = 251;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i11 | 0);
 i11 = HEAP32[12936] | 0;
 i12 = HEAP32[i11 + 60 >> 2] | 0;
 i13 = i12 + -6 | 0;
 L54 : do {
  if ((i13 | 0) > 3) {
   i9 = i11;
   i10 = i12;
   i4 = (i13 | 0) / 2 | 0;
   while (1) {
    _memset(HEAP32[i9 + 164 >> 2] | 0, 32, Math_imul(i10, HEAP32[i9 + 56 >> 2] | 0) | 0) | 0;
    i2 = HEAP32[12936] | 0;
    _memset(HEAP32[i2 + 168 >> 2] | 0, 0, Math_imul(HEAP32[i2 + 60 >> 2] | 0, HEAP32[i2 + 56 >> 2] | 0) | 0) | 0;
    _displogo(i4);
    i14 = _emscripten_alloc_async_context(8) | 0;
    HEAP32[___async_cur_frame + 4 >> 2] = i1;
    _bbflushwait(3e4);
    if (___async) {
     break;
    }
    _emscripten_free_async_context(i14 | 0);
    i2 = i4 + -1 | 0;
    i7 = HEAP32[12936] | 0;
    if ((i2 | 0) <= 1) {
     i15 = i7;
     break L54;
    }
    i9 = i7;
    i10 = HEAP32[i7 + 60 >> 2] | 0;
    i4 = i2;
   }
   HEAP32[i14 >> 2] = 252;
   HEAP32[i14 + 4 >> 2] = i4;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  } else {
   i15 = i11;
  }
 } while (0);
 HEAP32[130870] = _malloc(Math_imul(HEAP32[i15 + 156 >> 2] | 0, HEAP32[i15 + 152 >> 2] | 0) | 0) | 0;
 HEAP32[130872] = _malloc(Math_imul(HEAP32[i15 + 156 >> 2] | 0, HEAP32[i15 + 152 >> 2] | 0) | 0) | 0;
 HEAP32[(HEAP32[22682] | 0) + 12 >> 2] = 0;
 i11 = HEAP32[i15 + 56 >> 2] | 0;
 if ((HEAP32[68184] | 0) == 0) {
  i16 = i11;
 } else {
  i16 = (i11 | 0) / 2 | 0;
 }
 _format(i16);
 i16 = 0;
 i11 = -1;
 L65 : while (1) {
  if ((i16 | 0) != (i11 | 0)) {
   i15 = HEAP32[12936] | 0;
   _backconvert(0, 9, HEAP32[i15 + 56 >> 2] | 0, HEAP32[i15 + 60 >> 2] | 0);
   i15 = HEAP32[12936] | 0;
   i14 = HEAP32[i15 + 152 >> 2] | 0;
   _memcpy(HEAP32[130870] | 0, (HEAP32[i15 + 160 >> 2] | 0) + (i14 * 18 | 0) | 0, Math_imul((HEAP32[i15 + 156 >> 2] | 0) + -18 | 0, i14) | 0) | 0;
   _displaytext(i16);
   i14 = HEAP32[12936] | 0;
   _backconvert(0, 9, HEAP32[i14 + 56 >> 2] | 0, HEAP32[i14 + 60 >> 2] | 0);
   i14 = HEAP32[12936] | 0;
   i15 = HEAP32[i14 + 152 >> 2] | 0;
   _memcpy(HEAP32[130872] | 0, (HEAP32[i14 + 160 >> 2] | 0) + (i15 * 18 | 0) | 0, Math_imul((HEAP32[i14 + 156 >> 2] | 0) + -18 | 0, i15) | 0) | 0;
   HEAP32[(HEAP32[22682] | 0) + 12 >> 2] = 0;
   i17 = _emscripten_alloc_async_context(8) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _timestuff(0, 0, 32, 1e6);
   if (___async) {
    i8 = 47;
    break;
   }
   _emscripten_free_async_context(i17 | 0);
   _displaytext(i16);
   _aa_flush(HEAP32[12936] | 0);
  }
  L70 : while (1) {
   i15 = HEAP32[12936] | 0;
   i18 = _emscripten_alloc_async_context(8) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   i14 = _aa_getkey(i15, 1) | 0;
   if (___async) {
    i8 = 50;
    break L65;
   }
   _emscripten_free_async_context(i18 | 0);
   switch (i14 | 0) {
   case 300:
   case 304:
   case 75:
   case 66:
   case 107:
   case 98:
    {
     i8 = 61;
     break L70;
     break;
    }
   case 305:
   case 81:
   case 113:
    {
     i8 = 63;
     break L65;
     break;
    }
   case 51:
    {
     i8 = 58;
     break L70;
     break;
    }
   case 74:
   case 106:
   case 32:
   case 70:
   case 102:
   case 302:
   case 301:
    {
     i8 = 62;
     break L70;
     break;
    }
   case 49:
    {
     i8 = 52;
     break L70;
     break;
    }
   case 50:
    {
     i8 = 55;
     break L70;
     break;
    }
   default:
    {}
   }
  }
  if ((i8 | 0) == 52) {
   i8 = 0;
   _load_song(523496) | 0;
   i19 = _emscripten_alloc_async_context(8) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _bbupdate() | 0;
   if (___async) {
    i8 = 53;
    break;
   }
   _emscripten_free_async_context(i19 | 0);
   _play();
   i20 = i16;
  } else if ((i8 | 0) == 55) {
   i8 = 0;
   _load_song(523504) | 0;
   i21 = _emscripten_alloc_async_context(8) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _bbupdate() | 0;
   if (___async) {
    i8 = 56;
    break;
   }
   _emscripten_free_async_context(i21 | 0);
   _play();
   i20 = i16;
  } else if ((i8 | 0) == 58) {
   i8 = 0;
   _load_song(523440) | 0;
   i22 = _emscripten_alloc_async_context(8) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _bbupdate() | 0;
   if (___async) {
    i8 = 59;
    break;
   }
   _emscripten_free_async_context(i22 | 0);
   _play();
   i20 = i16;
  } else if ((i8 | 0) == 61) {
   i8 = 0;
   i4 = i16 - (Math_imul((HEAP32[68184] | 0) + 1 | 0, ((HEAP32[(HEAP32[12936] | 0) + 60 >> 2] | 0) + -9 | 0) / 2 | 0) | 0) | 0;
   i20 = (i4 | 0) < 0 ? 0 : i4;
  } else if ((i8 | 0) == 62) {
   i8 = 0;
   i4 = (Math_imul((HEAP32[68184] | 0) + 1 | 0, ((HEAP32[(HEAP32[12936] | 0) + 60 >> 2] | 0) + -9 | 0) / 2 | 0) | 0) + i16 | 0;
   i14 = HEAP32[41716] | 0;
   i20 = (i4 | 0) > (i14 | 0) ? i14 : i4;
  }
  i23 = _emscripten_alloc_async_context(12) | 0;
  HEAP32[___async_cur_frame + 4 >> 2] = i1;
  _bbupdate() | 0;
  if (___async) {
   i8 = 69;
   break;
  }
  _emscripten_free_async_context(i23 | 0);
  i4 = HEAP32[68188] | 0;
  HEAP32[68196] = i4;
  HEAP32[68194] = i4;
  i4 = i16;
  i16 = i20;
  i11 = i4;
 }
 if ((i8 | 0) == 47) {
  HEAP32[i17 >> 2] = 253;
  HEAP32[i17 + 4 >> 2] = i16;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else if ((i8 | 0) == 50) {
  HEAP32[i18 >> 2] = 254;
  HEAP32[i18 + 4 >> 2] = i16;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else if ((i8 | 0) == 53) {
  HEAP32[i19 >> 2] = 255;
  HEAP32[i19 + 4 >> 2] = i16;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else if ((i8 | 0) == 56) {
  HEAP32[i21 >> 2] = 256;
  HEAP32[i21 + 4 >> 2] = i16;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else if ((i8 | 0) == 59) {
  HEAP32[i22 >> 2] = 257;
  HEAP32[i22 + 4 >> 2] = i16;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else if ((i8 | 0) == 63) {
  HEAP32[68190] = 0;
  i22 = HEAP32[12936] | 0;
  _backconvert(0, 0, HEAP32[i22 + 56 >> 2] | 0, HEAP32[i22 + 60 >> 2] | 0);
  i22 = _emscripten_alloc_async_context(4) | 0;
  HEAP32[___async_cur_frame + 4 >> 2] = i1;
  _bbupdate() | 0;
  if (___async) {
   HEAP32[i22 >> 2] = 258;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  }
  _emscripten_free_async_context(i22 | 0);
  i22 = HEAP32[68188] | 0;
  HEAP32[68196] = i22;
  HEAP32[68194] = i22;
  HEAP32[34] = 33;
  i22 = _emscripten_alloc_async_context(4) | 0;
  HEAP32[___async_cur_frame + 4 >> 2] = i1;
  _timestuff(0, 0, 1, 1e6);
  if (___async) {
   HEAP32[i22 >> 2] = 259;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  } else {
   _emscripten_free_async_context(i22 | 0);
   i22 = HEAP32[12936] | 0;
   _memset(HEAP32[i22 + 164 >> 2] | 0, 32, Math_imul(HEAP32[i22 + 60 >> 2] | 0, HEAP32[i22 + 56 >> 2] | 0) | 0) | 0;
   i22 = HEAP32[12936] | 0;
   _memset(HEAP32[i22 + 168 >> 2] | 0, 0, Math_imul(HEAP32[i22 + 60 >> 2] | 0, HEAP32[i22 + 56 >> 2] | 0) | 0) | 0;
   HEAP32[34] = 0;
   _aa_flush(HEAP32[12936] | 0);
   _free(HEAP32[130870] | 0);
   _free(HEAP32[130872] | 0);
   STACKTOP = i1;
   return;
  }
 } else if ((i8 | 0) == 69) {
  HEAP32[i23 >> 2] = 260;
  HEAP32[i23 + 4 >> 2] = i20;
  HEAP32[i23 + 8 >> 2] = i16;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
}
function _free(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i3 = i1 + -8 | 0;
 i4 = HEAP32[557736 >> 2] | 0;
 if (i3 >>> 0 < i4 >>> 0) {
  _abort();
 }
 i5 = HEAP32[i1 + -4 >> 2] | 0;
 i6 = i5 & 3;
 if ((i6 | 0) == 1) {
  _abort();
 }
 i7 = i5 & -8;
 i8 = i1 + (i7 + -8) | 0;
 do {
  if ((i5 & 1 | 0) == 0) {
   i9 = HEAP32[i3 >> 2] | 0;
   if ((i6 | 0) == 0) {
    STACKTOP = i2;
    return;
   }
   i10 = -8 - i9 | 0;
   i11 = i1 + i10 | 0;
   i12 = i9 + i7 | 0;
   if (i11 >>> 0 < i4 >>> 0) {
    _abort();
   }
   if ((i11 | 0) == (HEAP32[557740 >> 2] | 0)) {
    i13 = i1 + (i7 + -4) | 0;
    if ((HEAP32[i13 >> 2] & 3 | 0) != 3) {
     i14 = i11;
     i15 = i12;
     break;
    }
    HEAP32[557728 >> 2] = i12;
    HEAP32[i13 >> 2] = HEAP32[i13 >> 2] & -2;
    HEAP32[i1 + (i10 + 4) >> 2] = i12 | 1;
    HEAP32[i8 >> 2] = i12;
    STACKTOP = i2;
    return;
   }
   i13 = i9 >>> 3;
   if (i9 >>> 0 < 256) {
    i9 = HEAP32[i1 + (i10 + 8) >> 2] | 0;
    i16 = HEAP32[i1 + (i10 + 12) >> 2] | 0;
    i17 = 557760 + (i13 << 1 << 2) | 0;
    if ((i9 | 0) != (i17 | 0)) {
     if (i9 >>> 0 < i4 >>> 0) {
      _abort();
     }
     if ((HEAP32[i9 + 12 >> 2] | 0) != (i11 | 0)) {
      _abort();
     }
    }
    if ((i16 | 0) == (i9 | 0)) {
     HEAP32[139430] = HEAP32[139430] & ~(1 << i13);
     i14 = i11;
     i15 = i12;
     break;
    }
    if ((i16 | 0) != (i17 | 0)) {
     if (i16 >>> 0 < i4 >>> 0) {
      _abort();
     }
     i17 = i16 + 8 | 0;
     if ((HEAP32[i17 >> 2] | 0) == (i11 | 0)) {
      i18 = i17;
     } else {
      _abort();
     }
    } else {
     i18 = i16 + 8 | 0;
    }
    HEAP32[i9 + 12 >> 2] = i16;
    HEAP32[i18 >> 2] = i9;
    i14 = i11;
    i15 = i12;
    break;
   }
   i9 = HEAP32[i1 + (i10 + 24) >> 2] | 0;
   i16 = HEAP32[i1 + (i10 + 12) >> 2] | 0;
   do {
    if ((i16 | 0) == (i11 | 0)) {
     i17 = i1 + (i10 + 20) | 0;
     i13 = HEAP32[i17 >> 2] | 0;
     if ((i13 | 0) == 0) {
      i19 = i1 + (i10 + 16) | 0;
      i20 = HEAP32[i19 >> 2] | 0;
      if ((i20 | 0) == 0) {
       i21 = 0;
       break;
      } else {
       i22 = i20;
       i23 = i19;
      }
     } else {
      i22 = i13;
      i23 = i17;
     }
     while (1) {
      i17 = i22 + 20 | 0;
      i13 = HEAP32[i17 >> 2] | 0;
      if ((i13 | 0) != 0) {
       i22 = i13;
       i23 = i17;
       continue;
      }
      i17 = i22 + 16 | 0;
      i13 = HEAP32[i17 >> 2] | 0;
      if ((i13 | 0) == 0) {
       break;
      } else {
       i22 = i13;
       i23 = i17;
      }
     }
     if (i23 >>> 0 < i4 >>> 0) {
      _abort();
     } else {
      HEAP32[i23 >> 2] = 0;
      i21 = i22;
      break;
     }
    } else {
     i17 = HEAP32[i1 + (i10 + 8) >> 2] | 0;
     if (i17 >>> 0 < i4 >>> 0) {
      _abort();
     }
     i13 = i17 + 12 | 0;
     if ((HEAP32[i13 >> 2] | 0) != (i11 | 0)) {
      _abort();
     }
     i19 = i16 + 8 | 0;
     if ((HEAP32[i19 >> 2] | 0) == (i11 | 0)) {
      HEAP32[i13 >> 2] = i16;
      HEAP32[i19 >> 2] = i17;
      i21 = i16;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   if ((i9 | 0) != 0) {
    i16 = HEAP32[i1 + (i10 + 28) >> 2] | 0;
    i17 = 558024 + (i16 << 2) | 0;
    if ((i11 | 0) == (HEAP32[i17 >> 2] | 0)) {
     HEAP32[i17 >> 2] = i21;
     if ((i21 | 0) == 0) {
      HEAP32[557724 >> 2] = HEAP32[557724 >> 2] & ~(1 << i16);
      i14 = i11;
      i15 = i12;
      break;
     }
    } else {
     if (i9 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
      _abort();
     }
     i16 = i9 + 16 | 0;
     if ((HEAP32[i16 >> 2] | 0) == (i11 | 0)) {
      HEAP32[i16 >> 2] = i21;
     } else {
      HEAP32[i9 + 20 >> 2] = i21;
     }
     if ((i21 | 0) == 0) {
      i14 = i11;
      i15 = i12;
      break;
     }
    }
    if (i21 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
     _abort();
    }
    HEAP32[i21 + 24 >> 2] = i9;
    i16 = HEAP32[i1 + (i10 + 16) >> 2] | 0;
    do {
     if ((i16 | 0) != 0) {
      if (i16 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
       _abort();
      } else {
       HEAP32[i21 + 16 >> 2] = i16;
       HEAP32[i16 + 24 >> 2] = i21;
       break;
      }
     }
    } while (0);
    i16 = HEAP32[i1 + (i10 + 20) >> 2] | 0;
    if ((i16 | 0) != 0) {
     if (i16 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
      _abort();
     } else {
      HEAP32[i21 + 20 >> 2] = i16;
      HEAP32[i16 + 24 >> 2] = i21;
      i14 = i11;
      i15 = i12;
      break;
     }
    } else {
     i14 = i11;
     i15 = i12;
    }
   } else {
    i14 = i11;
    i15 = i12;
   }
  } else {
   i14 = i3;
   i15 = i7;
  }
 } while (0);
 if (!(i14 >>> 0 < i8 >>> 0)) {
  _abort();
 }
 i3 = i1 + (i7 + -4) | 0;
 i21 = HEAP32[i3 >> 2] | 0;
 if ((i21 & 1 | 0) == 0) {
  _abort();
 }
 if ((i21 & 2 | 0) == 0) {
  if ((i8 | 0) == (HEAP32[557744 >> 2] | 0)) {
   i4 = (HEAP32[557732 >> 2] | 0) + i15 | 0;
   HEAP32[557732 >> 2] = i4;
   HEAP32[557744 >> 2] = i14;
   HEAP32[i14 + 4 >> 2] = i4 | 1;
   if ((i14 | 0) != (HEAP32[557740 >> 2] | 0)) {
    STACKTOP = i2;
    return;
   }
   HEAP32[557740 >> 2] = 0;
   HEAP32[557728 >> 2] = 0;
   STACKTOP = i2;
   return;
  }
  if ((i8 | 0) == (HEAP32[557740 >> 2] | 0)) {
   i4 = (HEAP32[557728 >> 2] | 0) + i15 | 0;
   HEAP32[557728 >> 2] = i4;
   HEAP32[557740 >> 2] = i14;
   HEAP32[i14 + 4 >> 2] = i4 | 1;
   HEAP32[i14 + i4 >> 2] = i4;
   STACKTOP = i2;
   return;
  }
  i4 = (i21 & -8) + i15 | 0;
  i22 = i21 >>> 3;
  do {
   if (!(i21 >>> 0 < 256)) {
    i23 = HEAP32[i1 + (i7 + 16) >> 2] | 0;
    i18 = HEAP32[i1 + (i7 | 4) >> 2] | 0;
    do {
     if ((i18 | 0) == (i8 | 0)) {
      i6 = i1 + (i7 + 12) | 0;
      i5 = HEAP32[i6 >> 2] | 0;
      if ((i5 | 0) == 0) {
       i16 = i1 + (i7 + 8) | 0;
       i9 = HEAP32[i16 >> 2] | 0;
       if ((i9 | 0) == 0) {
        i24 = 0;
        break;
       } else {
        i25 = i9;
        i26 = i16;
       }
      } else {
       i25 = i5;
       i26 = i6;
      }
      while (1) {
       i6 = i25 + 20 | 0;
       i5 = HEAP32[i6 >> 2] | 0;
       if ((i5 | 0) != 0) {
        i25 = i5;
        i26 = i6;
        continue;
       }
       i6 = i25 + 16 | 0;
       i5 = HEAP32[i6 >> 2] | 0;
       if ((i5 | 0) == 0) {
        break;
       } else {
        i25 = i5;
        i26 = i6;
       }
      }
      if (i26 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
       _abort();
      } else {
       HEAP32[i26 >> 2] = 0;
       i24 = i25;
       break;
      }
     } else {
      i6 = HEAP32[i1 + i7 >> 2] | 0;
      if (i6 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
       _abort();
      }
      i5 = i6 + 12 | 0;
      if ((HEAP32[i5 >> 2] | 0) != (i8 | 0)) {
       _abort();
      }
      i16 = i18 + 8 | 0;
      if ((HEAP32[i16 >> 2] | 0) == (i8 | 0)) {
       HEAP32[i5 >> 2] = i18;
       HEAP32[i16 >> 2] = i6;
       i24 = i18;
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    if ((i23 | 0) != 0) {
     i18 = HEAP32[i1 + (i7 + 20) >> 2] | 0;
     i12 = 558024 + (i18 << 2) | 0;
     if ((i8 | 0) == (HEAP32[i12 >> 2] | 0)) {
      HEAP32[i12 >> 2] = i24;
      if ((i24 | 0) == 0) {
       HEAP32[557724 >> 2] = HEAP32[557724 >> 2] & ~(1 << i18);
       break;
      }
     } else {
      if (i23 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
       _abort();
      }
      i18 = i23 + 16 | 0;
      if ((HEAP32[i18 >> 2] | 0) == (i8 | 0)) {
       HEAP32[i18 >> 2] = i24;
      } else {
       HEAP32[i23 + 20 >> 2] = i24;
      }
      if ((i24 | 0) == 0) {
       break;
      }
     }
     if (i24 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
      _abort();
     }
     HEAP32[i24 + 24 >> 2] = i23;
     i18 = HEAP32[i1 + (i7 + 8) >> 2] | 0;
     do {
      if ((i18 | 0) != 0) {
       if (i18 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
        _abort();
       } else {
        HEAP32[i24 + 16 >> 2] = i18;
        HEAP32[i18 + 24 >> 2] = i24;
        break;
       }
      }
     } while (0);
     i18 = HEAP32[i1 + (i7 + 12) >> 2] | 0;
     if ((i18 | 0) != 0) {
      if (i18 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
       _abort();
      } else {
       HEAP32[i24 + 20 >> 2] = i18;
       HEAP32[i18 + 24 >> 2] = i24;
       break;
      }
     }
    }
   } else {
    i18 = HEAP32[i1 + i7 >> 2] | 0;
    i23 = HEAP32[i1 + (i7 | 4) >> 2] | 0;
    i12 = 557760 + (i22 << 1 << 2) | 0;
    if ((i18 | 0) != (i12 | 0)) {
     if (i18 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
      _abort();
     }
     if ((HEAP32[i18 + 12 >> 2] | 0) != (i8 | 0)) {
      _abort();
     }
    }
    if ((i23 | 0) == (i18 | 0)) {
     HEAP32[139430] = HEAP32[139430] & ~(1 << i22);
     break;
    }
    if ((i23 | 0) != (i12 | 0)) {
     if (i23 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
      _abort();
     }
     i12 = i23 + 8 | 0;
     if ((HEAP32[i12 >> 2] | 0) == (i8 | 0)) {
      i27 = i12;
     } else {
      _abort();
     }
    } else {
     i27 = i23 + 8 | 0;
    }
    HEAP32[i18 + 12 >> 2] = i23;
    HEAP32[i27 >> 2] = i18;
   }
  } while (0);
  HEAP32[i14 + 4 >> 2] = i4 | 1;
  HEAP32[i14 + i4 >> 2] = i4;
  if ((i14 | 0) == (HEAP32[557740 >> 2] | 0)) {
   HEAP32[557728 >> 2] = i4;
   STACKTOP = i2;
   return;
  } else {
   i28 = i4;
  }
 } else {
  HEAP32[i3 >> 2] = i21 & -2;
  HEAP32[i14 + 4 >> 2] = i15 | 1;
  HEAP32[i14 + i15 >> 2] = i15;
  i28 = i15;
 }
 i15 = i28 >>> 3;
 if (i28 >>> 0 < 256) {
  i21 = i15 << 1;
  i3 = 557760 + (i21 << 2) | 0;
  i4 = HEAP32[139430] | 0;
  i27 = 1 << i15;
  if ((i4 & i27 | 0) != 0) {
   i15 = 557760 + (i21 + 2 << 2) | 0;
   i8 = HEAP32[i15 >> 2] | 0;
   if (i8 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
    _abort();
   } else {
    i29 = i15;
    i30 = i8;
   }
  } else {
   HEAP32[139430] = i4 | i27;
   i29 = 557760 + (i21 + 2 << 2) | 0;
   i30 = i3;
  }
  HEAP32[i29 >> 2] = i14;
  HEAP32[i30 + 12 >> 2] = i14;
  HEAP32[i14 + 8 >> 2] = i30;
  HEAP32[i14 + 12 >> 2] = i3;
  STACKTOP = i2;
  return;
 }
 i3 = i28 >>> 8;
 if ((i3 | 0) != 0) {
  if (i28 >>> 0 > 16777215) {
   i31 = 31;
  } else {
   i30 = (i3 + 1048320 | 0) >>> 16 & 8;
   i29 = i3 << i30;
   i3 = (i29 + 520192 | 0) >>> 16 & 4;
   i21 = i29 << i3;
   i29 = (i21 + 245760 | 0) >>> 16 & 2;
   i27 = 14 - (i3 | i30 | i29) + (i21 << i29 >>> 15) | 0;
   i31 = i28 >>> (i27 + 7 | 0) & 1 | i27 << 1;
  }
 } else {
  i31 = 0;
 }
 i27 = 558024 + (i31 << 2) | 0;
 HEAP32[i14 + 28 >> 2] = i31;
 HEAP32[i14 + 20 >> 2] = 0;
 HEAP32[i14 + 16 >> 2] = 0;
 i29 = HEAP32[557724 >> 2] | 0;
 i21 = 1 << i31;
 L199 : do {
  if ((i29 & i21 | 0) != 0) {
   i30 = HEAP32[i27 >> 2] | 0;
   if ((i31 | 0) == 31) {
    i32 = 0;
   } else {
    i32 = 25 - (i31 >>> 1) | 0;
   }
   L204 : do {
    if ((HEAP32[i30 + 4 >> 2] & -8 | 0) != (i28 | 0)) {
     i3 = i28 << i32;
     i4 = i30;
     while (1) {
      i33 = i4 + (i3 >>> 31 << 2) + 16 | 0;
      i8 = HEAP32[i33 >> 2] | 0;
      if ((i8 | 0) == 0) {
       break;
      }
      if ((HEAP32[i8 + 4 >> 2] & -8 | 0) == (i28 | 0)) {
       i34 = i8;
       break L204;
      } else {
       i3 = i3 << 1;
       i4 = i8;
      }
     }
     if (i33 >>> 0 < (HEAP32[557736 >> 2] | 0) >>> 0) {
      _abort();
     } else {
      HEAP32[i33 >> 2] = i14;
      HEAP32[i14 + 24 >> 2] = i4;
      HEAP32[i14 + 12 >> 2] = i14;
      HEAP32[i14 + 8 >> 2] = i14;
      break L199;
     }
    } else {
     i34 = i30;
    }
   } while (0);
   i30 = i34 + 8 | 0;
   i3 = HEAP32[i30 >> 2] | 0;
   i8 = HEAP32[557736 >> 2] | 0;
   if (i34 >>> 0 < i8 >>> 0) {
    _abort();
   }
   if (i3 >>> 0 < i8 >>> 0) {
    _abort();
   } else {
    HEAP32[i3 + 12 >> 2] = i14;
    HEAP32[i30 >> 2] = i14;
    HEAP32[i14 + 8 >> 2] = i3;
    HEAP32[i14 + 12 >> 2] = i34;
    HEAP32[i14 + 24 >> 2] = 0;
    break;
   }
  } else {
   HEAP32[557724 >> 2] = i29 | i21;
   HEAP32[i27 >> 2] = i14;
   HEAP32[i14 + 24 >> 2] = i27;
   HEAP32[i14 + 12 >> 2] = i14;
   HEAP32[i14 + 8 >> 2] = i14;
  }
 } while (0);
 i14 = (HEAP32[557752 >> 2] | 0) + -1 | 0;
 HEAP32[557752 >> 2] = i14;
 if ((i14 | 0) == 0) {
  i35 = 558176 | 0;
 } else {
  STACKTOP = i2;
  return;
 }
 while (1) {
  i14 = HEAP32[i35 >> 2] | 0;
  if ((i14 | 0) == 0) {
   break;
  } else {
   i35 = i14 + 8 | 0;
  }
 }
 HEAP32[557752 >> 2] = -1;
 STACKTOP = i2;
 return;
}
function _calccolumn(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, d22 = 0.0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, d33 = 0.0, i34 = 0, i35 = 0, i36 = 0, d37 = 0.0, d38 = 0.0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0;
 i3 = STACKTOP;
 i4 = HEAP32[71600] | 0;
 i5 = HEAP32[i4 + 108 >> 2] | 0;
 i6 = i2 + ((1 - i5 | 0) * 40 | 0) | 0;
 i7 = HEAP32[i4 + 52 >> 2] | 0;
 i8 = i7 >>> 0 > i6 >>> 0 ? i7 : i6;
 i6 = i2 + -40 | 0;
 L1 : do {
  if (i8 >>> 0 > i6 >>> 0) {
   i9 = 1;
   i10 = i2;
   i11 = i6;
  } else {
   i12 = 1;
   i13 = i2;
   i14 = i6;
   while (1) {
    i15 = i12 + 1 | 0;
    if ((HEAP32[i13 + -8 >> 2] | 0) == 0) {
     i9 = i12;
     i10 = i13;
     i11 = i14;
     break L1;
    }
    i16 = i14 + -40 | 0;
    if (i8 >>> 0 > i16 >>> 0) {
     i9 = i15;
     i10 = i14;
     i11 = i16;
     break;
    } else {
     i17 = i14;
     i12 = i15;
     i14 = i16;
     i13 = i17;
    }
   }
  }
 } while (0);
 i8 = i2 + (i5 * 40 | 0) | 0;
 i6 = i7 + ((HEAP32[i4 + 128 >> 2] | 0) * 40 | 0) | 0;
 i13 = i6 >>> 0 < i8 >>> 0 ? i6 : i8;
 i8 = i2 + 40 | 0;
 L6 : do {
  if (i13 >>> 0 > i8 >>> 0) {
   i14 = 1;
   i12 = i2;
   i17 = i8;
   while (1) {
    i16 = i14 + 1 | 0;
    if ((HEAP32[i12 + 72 >> 2] | 0) == 0) {
     i18 = i14;
     i19 = i12;
     i20 = i17;
     break L6;
    }
    i15 = i17 + 40 | 0;
    if (i13 >>> 0 > i15 >>> 0) {
     i21 = i17;
     i14 = i16;
     i17 = i15;
     i12 = i21;
    } else {
     i18 = i16;
     i19 = i17;
     i20 = i15;
     break;
    }
   }
  } else {
   i18 = 1;
   i19 = i2;
   i20 = i8;
  }
 } while (0);
 d22 = +HEAPF64[i2 >> 3];
 if ((!(i20 >>> 0 >= i6 >>> 0 | i11 >>> 0 < i7 >>> 0) ? (HEAP32[i19 + 72 >> 2] | 0) == 0 : 0) ? (HEAP32[i10 + -8 >> 2] | 0) == 0 : 0) {
  i10 = 0 - i9 | 0;
  i19 = i4;
  i7 = 0;
  L15 : while (1) {
   i11 = HEAP32[i19 + 56 >> 2] | 0;
   i6 = HEAP32[i19 + 132 >> 2] | 0;
   i23 = i11 + (i6 * 40 | 0) | 0;
   if ((i7 | 0) < (i6 | 0)) {
    i6 = HEAP32[i19 + 136 >> 2] | 0;
    i24 = (i7 | 0) == 0;
    i20 = i19;
    i8 = i6;
    i13 = 0;
    i17 = i5;
    i25 = i11 + (i7 * 40 | 0) | 0;
    i26 = i1 + (Math_imul(i6, i7) | 0) | 0;
    while (1) {
     i6 = i17 + 2 | 0;
     if ((HEAP32[i25 + 32 >> 2] | 0) == 0) {
      if ((i13 | 0) < 1) {
       i11 = i25 + 40 | 0;
       L25 : do {
        if (i11 >>> 0 < i23 >>> 0) {
         i12 = 1;
         i14 = i11;
         i15 = i25;
         while (1) {
          i16 = i12 + 1 | 0;
          if ((HEAP32[i15 + 72 >> 2] | 0) == 0) {
           i27 = i12;
           i28 = i14;
           break L25;
          }
          i21 = i14 + 40 | 0;
          if (i21 >>> 0 < i23 >>> 0) {
           i29 = i14;
           i12 = i16;
           i14 = i21;
           i15 = i29;
          } else {
           i27 = i16;
           i28 = i21;
           break;
          }
         }
        } else {
         i27 = 1;
         i28 = i11;
        }
       } while (0);
       if ((i28 | 0) == (i23 | 0)) {
        i30 = HEAP32[i20 + 128 >> 2] << 1;
       } else {
        i30 = i27;
       }
      } else {
       i30 = i13;
      }
      do {
       if ((((((i6 | 0) < (i5 | 0) & (i30 | 0) < (i5 | 0) ? (i11 = HEAP8[i26 + i10 >> 0] | 0, i15 = i26 + i18 | 0, i11 << 24 >> 24 == (HEAP8[i15 >> 0] | 0)) : 0) ? (i14 = Math_imul(i8, i30) | 0, (HEAP8[i26 + (i14 - i9) >> 0] | 0) == i11 << 24 >> 24) : 0) ? (i12 = Math_imul(i8, i6) | 0, (HEAP8[i26 + (i10 - i12) >> 0] | 0) == i11 << 24 >> 24) : 0) ? i11 << 24 >> 24 == (HEAP8[i26 + (i14 + i18) >> 0] | 0) : 0) ? i11 << 24 >> 24 == (HEAP8[i26 + (i18 - i12) >> 0] | 0) : 0) {
        if (i24) {
         i31 = i15;
         break;
        }
        if ((HEAP32[i25 + 72 >> 2] | 0) == 0 ? !((HEAP8[i26 + i8 >> 0] | 0) == i11 << 24 >> 24) : 0) {
         i32 = 52;
         break;
        }
        if ((HEAP32[i25 + -8 >> 2] | 0) != 0) {
         i31 = i15;
         break;
        }
        if ((HEAP8[i26 + (0 - i8) >> 0] | 0) == i11 << 24 >> 24) {
         i31 = i15;
        } else {
         i32 = 52;
        }
       } else {
        i32 = 52;
       }
      } while (0);
      do {
       if ((i32 | 0) == 52) {
        i32 = 0;
        d33 = +HEAPF64[i25 >> 3];
        i15 = HEAP32[i20 + 60 >> 2] | 0;
        do {
         if ((HEAP32[i20 + 92 >> 2] | 0) != 0) {
          i11 = HEAP32[i15 + 4 >> 2] | 0;
          if ((HEAP32[i15 + 292 >> 2] | 0) == 0) {
           i34 = _emscripten_alloc_async_context(64) | 0;
           HEAP32[___async_cur_frame + 4 >> 2] = i3;
           i12 = FUNCTION_TABLE_idddd[i11 & 3](d22, d33, d22, d33) | 0;
           if (___async) {
            i32 = 58;
            break L15;
           }
           _emscripten_free_async_context(i34 | 0);
           i35 = i12;
           break;
          } else {
           i36 = _emscripten_alloc_async_context(64) | 0;
           HEAP32[___async_cur_frame + 4 >> 2] = i3;
           i12 = FUNCTION_TABLE_idddd[i11 & 3](0.0, 0.0, d22, d33) | 0;
           if (___async) {
            i32 = 55;
            break L15;
           }
           _emscripten_free_async_context(i36 | 0);
           i35 = i12;
           break;
          }
         } else {
          i12 = HEAP32[i15 + 4 >> 2] | 0;
          d37 = +HEAPF64[i20 >> 3];
          d38 = +HEAPF64[i20 + 8 >> 3];
          i39 = _emscripten_alloc_async_context(64) | 0;
          HEAP32[___async_cur_frame + 4 >> 2] = i3;
          i11 = FUNCTION_TABLE_idddd[i12 & 3](d22, d33, d37, d38) | 0;
          if (___async) {
           i32 = 61;
           break L15;
          }
          _emscripten_free_async_context(i39 | 0);
          i35 = i11;
         }
        } while (0);
        if ((i35 | 0) == 2147483647) {
         i31 = (HEAP32[71600] | 0) + 144 | 0;
         break;
        }
        if ((i35 | 0) < 0) {
         i15 = HEAP32[71600] | 0;
         i11 = HEAP32[i15 + 124 >> 2] | 0;
         i12 = i11 + -1 | 0;
         i40 = i11;
         i41 = i15;
         i42 = (Math_imul(((0 - i35 | 0) / (i12 | 0) | 0) + 1 | 0, i12) | 0) + i35 | 0;
        } else {
         i12 = HEAP32[71600] | 0;
         i40 = HEAP32[i12 + 124 >> 2] | 0;
         i41 = i12;
         i42 = i35;
        }
        i31 = i41 + (((i42 | 0) % (i40 + -1 | 0) | 0) + 1) + 144 | 0;
       }
      } while (0);
      HEAP8[i26 >> 0] = HEAP8[i31 >> 0] | 0;
      i12 = HEAP32[71600] | 0;
      i43 = HEAP32[i12 + 136 >> 2] | 0;
      i44 = i12;
      i45 = i30;
      i46 = 0;
     } else {
      i43 = i8;
      i44 = i20;
      i45 = i13;
      i46 = i6;
     }
     i12 = i25 + 80 | 0;
     if (i12 >>> 0 < i23 >>> 0) {
      i20 = i44;
      i8 = i43;
      i13 = i45 + -2 | 0;
      i17 = (HEAP32[i25 + 72 >> 2] | 0) == 0 ? -1 : i46;
      i25 = i12;
      i26 = i26 + (i43 << 1) | 0;
     } else {
      i47 = i44;
      break;
     }
    }
   } else {
    i47 = i19;
   }
   i17 = i7 + 1 | 0;
   if ((i17 | 0) == 2) {
    i32 = 72;
    break;
   } else {
    i19 = i47;
    i7 = i17;
   }
  }
  if ((i32 | 0) == 55) {
   HEAP32[i36 >> 2] = 236;
   HEAP32[i36 + 4 >> 2] = i18;
   HEAP32[i36 + 8 >> 2] = i10;
   HEAP32[i36 + 12 >> 2] = i2;
   HEAP32[i36 + 16 >> 2] = i30;
   HEAP32[i36 + 20 >> 2] = i26;
   HEAP32[i36 + 24 >> 2] = i25;
   HEAP32[i36 + 28 >> 2] = i23;
   HEAP32[i36 + 32 >> 2] = i7;
   HEAP32[i36 + 36 >> 2] = i9;
   HEAP32[i36 + 40 >> 2] = i5;
   HEAPF64[i36 + 48 >> 3] = d22;
   HEAP32[i36 + 56 >> 2] = i1;
   HEAP8[i36 + 60 >> 0] = i24 & 1;
   i3 = STACKTOP;
   STACKTOP = i3;
   return;
  } else if ((i32 | 0) == 58) {
   HEAP32[i34 >> 2] = 237;
   HEAP32[i34 + 4 >> 2] = i18;
   HEAP32[i34 + 8 >> 2] = i10;
   HEAP32[i34 + 12 >> 2] = i2;
   HEAP32[i34 + 16 >> 2] = i30;
   HEAP32[i34 + 20 >> 2] = i26;
   HEAP32[i34 + 24 >> 2] = i25;
   HEAP32[i34 + 28 >> 2] = i23;
   HEAP32[i34 + 32 >> 2] = i7;
   HEAP32[i34 + 36 >> 2] = i9;
   HEAP32[i34 + 40 >> 2] = i5;
   HEAPF64[i34 + 48 >> 3] = d22;
   HEAP32[i34 + 56 >> 2] = i1;
   HEAP8[i34 + 60 >> 0] = i24 & 1;
   i3 = STACKTOP;
   STACKTOP = i3;
   return;
  } else if ((i32 | 0) == 61) {
   HEAP32[i39 >> 2] = 238;
   HEAP32[i39 + 4 >> 2] = i18;
   HEAP32[i39 + 8 >> 2] = i10;
   HEAP32[i39 + 12 >> 2] = i2;
   HEAP32[i39 + 16 >> 2] = i30;
   HEAP32[i39 + 20 >> 2] = i26;
   HEAP32[i39 + 24 >> 2] = i25;
   HEAP32[i39 + 28 >> 2] = i23;
   HEAP32[i39 + 32 >> 2] = i7;
   HEAP32[i39 + 36 >> 2] = i9;
   HEAP32[i39 + 40 >> 2] = i5;
   HEAPF64[i39 + 48 >> 3] = d22;
   HEAP32[i39 + 56 >> 2] = i1;
   HEAP8[i39 + 60 >> 0] = i24 & 1;
   i3 = STACKTOP;
   STACKTOP = i3;
   return;
  } else if ((i32 | 0) == 72) {
   i48 = i2 + 20 | 0;
   HEAP32[i48 >> 2] = 0;
   i49 = i2 + 32 | 0;
   HEAP32[i49 >> 2] = 0;
   STACKTOP = i3;
   return;
  }
 }
 i24 = HEAP32[i4 + 56 >> 2] | 0;
 i39 = HEAP32[i4 + 132 >> 2] | 0;
 i5 = i24 + (i39 * 40 | 0) | 0;
 if ((i39 | 0) > 0) {
  i50 = i4;
  i51 = i24;
  i52 = i1;
 } else {
  i48 = i2 + 20 | 0;
  HEAP32[i48 >> 2] = 0;
  i49 = i2 + 32 | 0;
  HEAP32[i49 >> 2] = 0;
  STACKTOP = i3;
  return;
 }
 L74 : while (1) {
  if ((HEAP32[i51 + 32 >> 2] | 0) == 0) {
   d33 = +HEAPF64[i51 >> 3];
   i24 = HEAP32[i50 + 60 >> 2] | 0;
   do {
    if ((HEAP32[i50 + 92 >> 2] | 0) != 0) {
     i4 = HEAP32[i24 + 4 >> 2] | 0;
     if ((HEAP32[i24 + 292 >> 2] | 0) == 0) {
      i53 = _emscripten_alloc_async_context(40) | 0;
      HEAP32[___async_cur_frame + 4 >> 2] = i3;
      i39 = FUNCTION_TABLE_idddd[i4 & 3](d22, d33, d22, d33) | 0;
      if (___async) {
       i32 = 19;
       break L74;
      }
      _emscripten_free_async_context(i53 | 0);
      i54 = i39;
      break;
     } else {
      i55 = _emscripten_alloc_async_context(40) | 0;
      HEAP32[___async_cur_frame + 4 >> 2] = i3;
      i39 = FUNCTION_TABLE_idddd[i4 & 3](0.0, 0.0, d22, d33) | 0;
      if (___async) {
       i32 = 16;
       break L74;
      }
      _emscripten_free_async_context(i55 | 0);
      i54 = i39;
      break;
     }
    } else {
     i39 = HEAP32[i24 + 4 >> 2] | 0;
     d38 = +HEAPF64[i50 >> 3];
     d37 = +HEAPF64[i50 + 8 >> 3];
     i56 = _emscripten_alloc_async_context(40) | 0;
     HEAP32[___async_cur_frame + 4 >> 2] = i3;
     i4 = FUNCTION_TABLE_idddd[i39 & 3](d22, d33, d38, d37) | 0;
     if (___async) {
      i32 = 22;
      break L74;
     }
     _emscripten_free_async_context(i56 | 0);
     i54 = i4;
    }
   } while (0);
   if ((i54 | 0) == 2147483647) {
    i57 = (HEAP32[71600] | 0) + 144 | 0;
   } else {
    if ((i54 | 0) < 0) {
     i24 = HEAP32[71600] | 0;
     i4 = HEAP32[i24 + 124 >> 2] | 0;
     i39 = i4 + -1 | 0;
     i58 = i4;
     i59 = i24;
     i60 = (Math_imul(((0 - i54 | 0) / (i39 | 0) | 0) + 1 | 0, i39) | 0) + i54 | 0;
    } else {
     i39 = HEAP32[71600] | 0;
     i58 = HEAP32[i39 + 124 >> 2] | 0;
     i59 = i39;
     i60 = i54;
    }
    i57 = i59 + (((i60 | 0) % (i58 + -1 | 0) | 0) + 1) + 144 | 0;
   }
   HEAP8[i52 >> 0] = HEAP8[i57 >> 0] | 0;
   i61 = HEAP32[71600] | 0;
  } else {
   i61 = i50;
  }
  i39 = i51 + 40 | 0;
  if (i39 >>> 0 < i5 >>> 0) {
   i50 = i61;
   i51 = i39;
   i52 = i52 + (HEAP32[i61 + 136 >> 2] | 0) | 0;
  } else {
   i32 = 72;
   break;
  }
 }
 if ((i32 | 0) == 16) {
  HEAP32[i55 >> 2] = 233;
  HEAPF64[i55 + 8 >> 3] = d22;
  HEAP32[i55 + 16 >> 2] = i2;
  HEAP32[i55 + 20 >> 2] = i1;
  HEAP32[i55 + 24 >> 2] = i52;
  HEAP32[i55 + 28 >> 2] = i51;
  HEAP32[i55 + 32 >> 2] = i5;
  i3 = STACKTOP;
  STACKTOP = i3;
  return;
 } else if ((i32 | 0) == 19) {
  HEAP32[i53 >> 2] = 234;
  HEAPF64[i53 + 8 >> 3] = d22;
  HEAP32[i53 + 16 >> 2] = i2;
  HEAP32[i53 + 20 >> 2] = i1;
  HEAP32[i53 + 24 >> 2] = i52;
  HEAP32[i53 + 28 >> 2] = i51;
  HEAP32[i53 + 32 >> 2] = i5;
  i3 = STACKTOP;
  STACKTOP = i3;
  return;
 } else if ((i32 | 0) == 22) {
  HEAP32[i56 >> 2] = 235;
  HEAPF64[i56 + 8 >> 3] = d22;
  HEAP32[i56 + 16 >> 2] = i2;
  HEAP32[i56 + 20 >> 2] = i1;
  HEAP32[i56 + 24 >> 2] = i52;
  HEAP32[i56 + 28 >> 2] = i51;
  HEAP32[i56 + 32 >> 2] = i5;
  i3 = STACKTOP;
  STACKTOP = i3;
  return;
 } else if ((i32 | 0) == 72) {
  i48 = i2 + 20 | 0;
  HEAP32[i48 >> 2] = 0;
  i49 = i2 + 32 | 0;
  HEAP32[i49 >> 2] = 0;
  STACKTOP = i3;
  return;
 }
}
function _calccolumn__async_cb134(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, d19 = 0.0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, d37 = 0.0, d38 = 0.0, d39 = 0.0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 20 | 0;
 i4 = i2 + 24 | 0;
 i5 = i2 + 16 | 0;
 i6 = i2 + 12 | 0;
 i7 = i2 + 8 | 0;
 i8 = i2 + 4 | 0;
 i9 = i2;
 i10 = HEAP32[i1 + 4 >> 2] | 0;
 i11 = HEAP32[i1 + 8 >> 2] | 0;
 i12 = HEAP32[i1 + 12 >> 2] | 0;
 i13 = HEAP32[i1 + 20 >> 2] | 0;
 i14 = HEAP32[i1 + 24 >> 2] | 0;
 i15 = HEAP32[i1 + 28 >> 2] | 0;
 i16 = HEAP32[i1 + 32 >> 2] | 0;
 i17 = HEAP32[i1 + 36 >> 2] | 0;
 i18 = HEAP32[i1 + 40 >> 2] | 0;
 d19 = +HEAPF64[i1 + 48 >> 3];
 i20 = HEAP32[i1 + 56 >> 2] | 0;
 i21 = HEAP8[i1 + 60 >> 0] & 1;
 HEAP32[i9 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i8 >> 2] = i13;
 HEAP32[i7 >> 2] = i14;
 HEAP32[i6 >> 2] = i15;
 HEAP32[i5 >> 2] = i16;
 HEAP8[i4 >> 0] = i21 & 1;
 HEAP32[i3 >> 2] = HEAP32[___async_retval >> 2];
 i21 = HEAP32[i3 >> 2] | 0;
 if ((i21 | 0) == 2147483647) {
  i22 = (HEAP32[71600] | 0) + 144 | 0;
 } else {
  if ((i21 | 0) < 0) {
   i16 = HEAP32[71600] | 0;
   i15 = HEAP32[i16 + 124 >> 2] | 0;
   i14 = i15 + -1 | 0;
   i23 = i15;
   i24 = i16;
   i25 = (Math_imul(((0 - i21 | 0) / (i14 | 0) | 0) + 1 | 0, i14) | 0) + i21 | 0;
  } else {
   i14 = HEAP32[71600] | 0;
   i23 = HEAP32[i14 + 124 >> 2] | 0;
   i24 = i14;
   i25 = i21;
  }
  i22 = i24 + (((i25 | 0) % (i23 + -1 | 0) | 0) + 1) + 144 | 0;
 }
 L10 : while (1) {
  HEAP8[HEAP32[i8 >> 2] >> 0] = HEAP8[i22 >> 0] | 0;
  i23 = HEAP32[71600] | 0;
  i25 = HEAP32[i23 + 136 >> 2] | 0;
  i24 = i23;
  i23 = HEAP32[i9 >> 2] | 0;
  i21 = 0;
  while (1) {
   i14 = (HEAP32[i7 >> 2] | 0) + 80 | 0;
   if (i14 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
    i26 = i24;
    i27 = i25;
    i28 = i23 + -2 | 0;
    i29 = (HEAP32[(HEAP32[i7 >> 2] | 0) + 72 >> 2] | 0) == 0 ? -1 : i21;
    i30 = i14;
    i31 = (HEAP32[i8 >> 2] | 0) + (i25 << 1) | 0;
   } else {
    i14 = i24;
    do {
     i16 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
     if ((i16 | 0) == 2) {
      i32 = 43;
      break L10;
     }
     HEAP32[i5 >> 2] = i16;
     i33 = HEAP32[i14 + 56 >> 2] | 0;
     i16 = HEAP32[i14 + 132 >> 2] | 0;
     HEAP32[i6 >> 2] = i33 + (i16 * 40 | 0);
    } while ((HEAP32[i5 >> 2] | 0) >= (i16 | 0));
    i16 = HEAP32[i14 + 136 >> 2] | 0;
    i15 = Math_imul(i16, HEAP32[i5 >> 2] | 0) | 0;
    i13 = i33 + ((HEAP32[i5 >> 2] | 0) * 40 | 0) | 0;
    HEAP8[i4 >> 0] = (HEAP32[i5 >> 2] | 0) == 0 & 1;
    i26 = i14;
    i27 = i16;
    i28 = 0;
    i29 = i18;
    i30 = i13;
    i31 = i20 + i15 | 0;
   }
   HEAP32[i7 >> 2] = i30;
   HEAP32[i8 >> 2] = i31;
   i21 = i29 + 2 | 0;
   if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2] | 0) == 0) {
    break;
   } else {
    i25 = i27;
    i24 = i26;
    i23 = i28;
   }
  }
  if ((i28 | 0) < 1) {
   i23 = (HEAP32[i7 >> 2] | 0) + 40 | 0;
   L23 : do {
    if (i23 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
     i24 = 1;
     i25 = i23;
     i15 = HEAP32[i7 >> 2] | 0;
     while (1) {
      i13 = i24 + 1 | 0;
      if ((HEAP32[i15 + 72 >> 2] | 0) == 0) {
       i34 = i24;
       i35 = i25;
       break L23;
      }
      i16 = i25 + 40 | 0;
      if (i16 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
       i1 = i25;
       i24 = i13;
       i25 = i16;
       i15 = i1;
      } else {
       i34 = i13;
       i35 = i16;
       break;
      }
     }
    } else {
     i34 = 1;
     i35 = i23;
    }
   } while (0);
   if ((i35 | 0) == (HEAP32[i6 >> 2] | 0)) {
    i36 = HEAP32[i26 + 128 >> 2] << 1;
   } else {
    i36 = i34;
   }
  } else {
   i36 = i28;
  }
  HEAP32[i9 >> 2] = i36;
  if (!((i21 | 0) < (i18 | 0) ? (HEAP32[i9 >> 2] | 0) < (i18 | 0) : 0)) {
   break;
  }
  i23 = HEAP8[(HEAP32[i8 >> 2] | 0) + i11 >> 0] | 0;
  i15 = i22;
  i22 = (HEAP32[i8 >> 2] | 0) + i10 | 0;
  if (!(i23 << 24 >> 24 == (HEAP8[i22 >> 0] | 0))) {
   break;
  }
  i15 = Math_imul(i27, HEAP32[i9 >> 2] | 0) | 0;
  if (!((HEAP8[(HEAP32[i8 >> 2] | 0) + (i15 - i17) >> 0] | 0) == i23 << 24 >> 24)) {
   break;
  }
  i25 = Math_imul(i27, i21) | 0;
  if (!((HEAP8[(HEAP32[i8 >> 2] | 0) + (i11 - i25) >> 0] | 0) == i23 << 24 >> 24)) {
   break;
  }
  if (!(i23 << 24 >> 24 == (HEAP8[(HEAP32[i8 >> 2] | 0) + (i15 + i10) >> 0] | 0))) {
   break;
  }
  if (!(i23 << 24 >> 24 == (HEAP8[(HEAP32[i8 >> 2] | 0) + (i10 - i25) >> 0] | 0))) {
   break;
  }
  if (HEAP8[i4 >> 0] & 1) {
   i22 = i22;
   continue;
  }
  if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 72 >> 2] | 0) == 0 ? !((HEAP8[(HEAP32[i8 >> 2] | 0) + i27 >> 0] | 0) == i23 << 24 >> 24) : 0) {
   break;
  }
  if ((HEAP32[(HEAP32[i7 >> 2] | 0) + -8 >> 2] | 0) != 0) {
   i22 = i22;
   continue;
  }
  if (!((HEAP8[(HEAP32[i8 >> 2] | 0) + (0 - i27) >> 0] | 0) == i23 << 24 >> 24)) {
   break;
  }
 }
 if ((i32 | 0) == 43) {
  HEAP32[i12 + 20 >> 2] = 0;
  HEAP32[i12 + 32 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 d37 = +HEAPF64[HEAP32[i7 >> 2] >> 3];
 i32 = HEAP32[i26 + 60 >> 2] | 0;
 if ((HEAP32[i26 + 92 >> 2] | 0) == 0) {
  i27 = HEAP32[i32 + 4 >> 2] | 0;
  d38 = +HEAPF64[i26 >> 3];
  d39 = +HEAPF64[i26 + 8 >> 3];
  i26 = _emscripten_realloc_async_context(64) | 0;
  HEAP32[i3 >> 2] = FUNCTION_TABLE_idddd[i27 & 3](d19, d37, d38, d39) | 0;
  if (___async) {
   HEAP32[i26 >> 2] = 238;
   i40 = i26 + 4 | 0;
   HEAP32[i40 >> 2] = i10;
   i41 = i26 + 8 | 0;
   HEAP32[i41 >> 2] = i11;
   i42 = i26 + 12 | 0;
   HEAP32[i42 >> 2] = i12;
   i43 = i26 + 16 | 0;
   i44 = HEAP32[i9 >> 2] | 0;
   HEAP32[i43 >> 2] = i44;
   i45 = i26 + 20 | 0;
   i46 = HEAP32[i8 >> 2] | 0;
   HEAP32[i45 >> 2] = i46;
   i47 = i26 + 24 | 0;
   i48 = HEAP32[i7 >> 2] | 0;
   HEAP32[i47 >> 2] = i48;
   i49 = i26 + 28 | 0;
   i50 = HEAP32[i6 >> 2] | 0;
   HEAP32[i49 >> 2] = i50;
   i51 = i26 + 32 | 0;
   i52 = HEAP32[i5 >> 2] | 0;
   HEAP32[i51 >> 2] = i52;
   i53 = i26 + 36 | 0;
   HEAP32[i53 >> 2] = i17;
   i54 = i26 + 40 | 0;
   HEAP32[i54 >> 2] = i18;
   i55 = i26 + 48 | 0;
   HEAPF64[i55 >> 3] = d19;
   i56 = i26 + 56 | 0;
   HEAP32[i56 >> 2] = i20;
   i57 = i26 + 60 | 0;
   i58 = HEAP8[i4 >> 0] | 0;
   i59 = i58 & 1;
   i60 = i59 & 1;
   HEAP8[i57 >> 0] = i60;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = HEAP32[i3 >> 2];
  ___async_unwind = 0;
  HEAP32[i26 >> 2] = 238;
  i40 = i26 + 4 | 0;
  HEAP32[i40 >> 2] = i10;
  i41 = i26 + 8 | 0;
  HEAP32[i41 >> 2] = i11;
  i42 = i26 + 12 | 0;
  HEAP32[i42 >> 2] = i12;
  i43 = i26 + 16 | 0;
  i44 = HEAP32[i9 >> 2] | 0;
  HEAP32[i43 >> 2] = i44;
  i45 = i26 + 20 | 0;
  i46 = HEAP32[i8 >> 2] | 0;
  HEAP32[i45 >> 2] = i46;
  i47 = i26 + 24 | 0;
  i48 = HEAP32[i7 >> 2] | 0;
  HEAP32[i47 >> 2] = i48;
  i49 = i26 + 28 | 0;
  i50 = HEAP32[i6 >> 2] | 0;
  HEAP32[i49 >> 2] = i50;
  i51 = i26 + 32 | 0;
  i52 = HEAP32[i5 >> 2] | 0;
  HEAP32[i51 >> 2] = i52;
  i53 = i26 + 36 | 0;
  HEAP32[i53 >> 2] = i17;
  i54 = i26 + 40 | 0;
  HEAP32[i54 >> 2] = i18;
  i55 = i26 + 48 | 0;
  HEAPF64[i55 >> 3] = d19;
  i56 = i26 + 56 | 0;
  HEAP32[i56 >> 2] = i20;
  i57 = i26 + 60 | 0;
  i58 = HEAP8[i4 >> 0] | 0;
  i59 = i58 & 1;
  i60 = i59 & 1;
  HEAP8[i57 >> 0] = i60;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i60 = HEAP32[i32 + 4 >> 2] | 0;
 if ((HEAP32[i32 + 292 >> 2] | 0) == 0) {
  i32 = _emscripten_realloc_async_context(64) | 0;
  i57 = FUNCTION_TABLE_idddd[i60 & 3](d19, d37, d19, d37) | 0;
  if (___async) {
   HEAP32[i32 >> 2] = 237;
   i61 = i32 + 4 | 0;
   HEAP32[i61 >> 2] = i10;
   i62 = i32 + 8 | 0;
   HEAP32[i62 >> 2] = i11;
   i63 = i32 + 12 | 0;
   HEAP32[i63 >> 2] = i12;
   i64 = i32 + 16 | 0;
   i65 = HEAP32[i9 >> 2] | 0;
   HEAP32[i64 >> 2] = i65;
   i66 = i32 + 20 | 0;
   i67 = HEAP32[i8 >> 2] | 0;
   HEAP32[i66 >> 2] = i67;
   i68 = i32 + 24 | 0;
   i69 = HEAP32[i7 >> 2] | 0;
   HEAP32[i68 >> 2] = i69;
   i70 = i32 + 28 | 0;
   i71 = HEAP32[i6 >> 2] | 0;
   HEAP32[i70 >> 2] = i71;
   i72 = i32 + 32 | 0;
   i73 = HEAP32[i5 >> 2] | 0;
   HEAP32[i72 >> 2] = i73;
   i74 = i32 + 36 | 0;
   HEAP32[i74 >> 2] = i17;
   i75 = i32 + 40 | 0;
   HEAP32[i75 >> 2] = i18;
   i76 = i32 + 48 | 0;
   HEAPF64[i76 >> 3] = d19;
   i77 = i32 + 56 | 0;
   HEAP32[i77 >> 2] = i20;
   i78 = i32 + 60 | 0;
   i79 = HEAP8[i4 >> 0] | 0;
   i80 = i79 & 1;
   i81 = i80 & 1;
   HEAP8[i78 >> 0] = i81;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i57;
  ___async_unwind = 0;
  HEAP32[i32 >> 2] = 237;
  i61 = i32 + 4 | 0;
  HEAP32[i61 >> 2] = i10;
  i62 = i32 + 8 | 0;
  HEAP32[i62 >> 2] = i11;
  i63 = i32 + 12 | 0;
  HEAP32[i63 >> 2] = i12;
  i64 = i32 + 16 | 0;
  i65 = HEAP32[i9 >> 2] | 0;
  HEAP32[i64 >> 2] = i65;
  i66 = i32 + 20 | 0;
  i67 = HEAP32[i8 >> 2] | 0;
  HEAP32[i66 >> 2] = i67;
  i68 = i32 + 24 | 0;
  i69 = HEAP32[i7 >> 2] | 0;
  HEAP32[i68 >> 2] = i69;
  i70 = i32 + 28 | 0;
  i71 = HEAP32[i6 >> 2] | 0;
  HEAP32[i70 >> 2] = i71;
  i72 = i32 + 32 | 0;
  i73 = HEAP32[i5 >> 2] | 0;
  HEAP32[i72 >> 2] = i73;
  i74 = i32 + 36 | 0;
  HEAP32[i74 >> 2] = i17;
  i75 = i32 + 40 | 0;
  HEAP32[i75 >> 2] = i18;
  i76 = i32 + 48 | 0;
  HEAPF64[i76 >> 3] = d19;
  i77 = i32 + 56 | 0;
  HEAP32[i77 >> 2] = i20;
  i78 = i32 + 60 | 0;
  i79 = HEAP8[i4 >> 0] | 0;
  i80 = i79 & 1;
  i81 = i80 & 1;
  HEAP8[i78 >> 0] = i81;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  i81 = _emscripten_realloc_async_context(64) | 0;
  i78 = FUNCTION_TABLE_idddd[i60 & 3](0.0, 0.0, d19, d37) | 0;
  if (___async) {
   HEAP32[i81 >> 2] = 236;
   i82 = i81 + 4 | 0;
   HEAP32[i82 >> 2] = i10;
   i83 = i81 + 8 | 0;
   HEAP32[i83 >> 2] = i11;
   i84 = i81 + 12 | 0;
   HEAP32[i84 >> 2] = i12;
   i85 = i81 + 16 | 0;
   i86 = HEAP32[i9 >> 2] | 0;
   HEAP32[i85 >> 2] = i86;
   i87 = i81 + 20 | 0;
   i88 = HEAP32[i8 >> 2] | 0;
   HEAP32[i87 >> 2] = i88;
   i89 = i81 + 24 | 0;
   i90 = HEAP32[i7 >> 2] | 0;
   HEAP32[i89 >> 2] = i90;
   i91 = i81 + 28 | 0;
   i92 = HEAP32[i6 >> 2] | 0;
   HEAP32[i91 >> 2] = i92;
   i93 = i81 + 32 | 0;
   i94 = HEAP32[i5 >> 2] | 0;
   HEAP32[i93 >> 2] = i94;
   i95 = i81 + 36 | 0;
   HEAP32[i95 >> 2] = i17;
   i96 = i81 + 40 | 0;
   HEAP32[i96 >> 2] = i18;
   i97 = i81 + 48 | 0;
   HEAPF64[i97 >> 3] = d19;
   i98 = i81 + 56 | 0;
   HEAP32[i98 >> 2] = i20;
   i99 = i81 + 60 | 0;
   i100 = HEAP8[i4 >> 0] | 0;
   i101 = i100 & 1;
   i102 = i101 & 1;
   HEAP8[i99 >> 0] = i102;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i78;
  ___async_unwind = 0;
  HEAP32[i81 >> 2] = 236;
  i82 = i81 + 4 | 0;
  HEAP32[i82 >> 2] = i10;
  i83 = i81 + 8 | 0;
  HEAP32[i83 >> 2] = i11;
  i84 = i81 + 12 | 0;
  HEAP32[i84 >> 2] = i12;
  i85 = i81 + 16 | 0;
  i86 = HEAP32[i9 >> 2] | 0;
  HEAP32[i85 >> 2] = i86;
  i87 = i81 + 20 | 0;
  i88 = HEAP32[i8 >> 2] | 0;
  HEAP32[i87 >> 2] = i88;
  i89 = i81 + 24 | 0;
  i90 = HEAP32[i7 >> 2] | 0;
  HEAP32[i89 >> 2] = i90;
  i91 = i81 + 28 | 0;
  i92 = HEAP32[i6 >> 2] | 0;
  HEAP32[i91 >> 2] = i92;
  i93 = i81 + 32 | 0;
  i94 = HEAP32[i5 >> 2] | 0;
  HEAP32[i93 >> 2] = i94;
  i95 = i81 + 36 | 0;
  HEAP32[i95 >> 2] = i17;
  i96 = i81 + 40 | 0;
  HEAP32[i96 >> 2] = i18;
  i97 = i81 + 48 | 0;
  HEAPF64[i97 >> 3] = d19;
  i98 = i81 + 56 | 0;
  HEAP32[i98 >> 2] = i20;
  i99 = i81 + 60 | 0;
  i100 = HEAP8[i4 >> 0] | 0;
  i101 = i100 & 1;
  i102 = i101 & 1;
  HEAP8[i99 >> 0] = i102;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
}
function _calccolumn__async_cb133(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, d19 = 0.0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, d37 = 0.0, d38 = 0.0, d39 = 0.0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 20 | 0;
 i4 = i2 + 24 | 0;
 i5 = i2 + 16 | 0;
 i6 = i2 + 12 | 0;
 i7 = i2 + 8 | 0;
 i8 = i2 + 4 | 0;
 i9 = i2;
 i10 = HEAP32[i1 + 4 >> 2] | 0;
 i11 = HEAP32[i1 + 8 >> 2] | 0;
 i12 = HEAP32[i1 + 12 >> 2] | 0;
 i13 = HEAP32[i1 + 20 >> 2] | 0;
 i14 = HEAP32[i1 + 24 >> 2] | 0;
 i15 = HEAP32[i1 + 28 >> 2] | 0;
 i16 = HEAP32[i1 + 32 >> 2] | 0;
 i17 = HEAP32[i1 + 36 >> 2] | 0;
 i18 = HEAP32[i1 + 40 >> 2] | 0;
 d19 = +HEAPF64[i1 + 48 >> 3];
 i20 = HEAP32[i1 + 56 >> 2] | 0;
 i21 = HEAP8[i1 + 60 >> 0] & 1;
 HEAP32[i9 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i8 >> 2] = i13;
 HEAP32[i7 >> 2] = i14;
 HEAP32[i6 >> 2] = i15;
 HEAP32[i5 >> 2] = i16;
 HEAP8[i4 >> 0] = i21 & 1;
 HEAP32[i3 >> 2] = HEAP32[___async_retval >> 2];
 i21 = HEAP32[i3 >> 2] | 0;
 if ((i21 | 0) == 2147483647) {
  i22 = (HEAP32[71600] | 0) + 144 | 0;
 } else {
  if ((i21 | 0) < 0) {
   i16 = HEAP32[71600] | 0;
   i15 = HEAP32[i16 + 124 >> 2] | 0;
   i14 = i15 + -1 | 0;
   i23 = i15;
   i24 = i16;
   i25 = (Math_imul(((0 - i21 | 0) / (i14 | 0) | 0) + 1 | 0, i14) | 0) + i21 | 0;
  } else {
   i14 = HEAP32[71600] | 0;
   i23 = HEAP32[i14 + 124 >> 2] | 0;
   i24 = i14;
   i25 = i21;
  }
  i22 = i24 + (((i25 | 0) % (i23 + -1 | 0) | 0) + 1) + 144 | 0;
 }
 L10 : while (1) {
  HEAP8[HEAP32[i8 >> 2] >> 0] = HEAP8[i22 >> 0] | 0;
  i23 = HEAP32[71600] | 0;
  i25 = HEAP32[i23 + 136 >> 2] | 0;
  i24 = i23;
  i23 = HEAP32[i9 >> 2] | 0;
  i21 = 0;
  while (1) {
   i14 = (HEAP32[i7 >> 2] | 0) + 80 | 0;
   if (i14 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
    i26 = i24;
    i27 = i25;
    i28 = i23 + -2 | 0;
    i29 = (HEAP32[(HEAP32[i7 >> 2] | 0) + 72 >> 2] | 0) == 0 ? -1 : i21;
    i30 = i14;
    i31 = (HEAP32[i8 >> 2] | 0) + (i25 << 1) | 0;
   } else {
    i14 = i24;
    do {
     i16 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
     if ((i16 | 0) == 2) {
      i32 = 43;
      break L10;
     }
     HEAP32[i5 >> 2] = i16;
     i33 = HEAP32[i14 + 56 >> 2] | 0;
     i16 = HEAP32[i14 + 132 >> 2] | 0;
     HEAP32[i6 >> 2] = i33 + (i16 * 40 | 0);
    } while ((HEAP32[i5 >> 2] | 0) >= (i16 | 0));
    i16 = HEAP32[i14 + 136 >> 2] | 0;
    i15 = Math_imul(i16, HEAP32[i5 >> 2] | 0) | 0;
    i13 = i33 + ((HEAP32[i5 >> 2] | 0) * 40 | 0) | 0;
    HEAP8[i4 >> 0] = (HEAP32[i5 >> 2] | 0) == 0 & 1;
    i26 = i14;
    i27 = i16;
    i28 = 0;
    i29 = i18;
    i30 = i13;
    i31 = i20 + i15 | 0;
   }
   HEAP32[i7 >> 2] = i30;
   HEAP32[i8 >> 2] = i31;
   i21 = i29 + 2 | 0;
   if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2] | 0) == 0) {
    break;
   } else {
    i25 = i27;
    i24 = i26;
    i23 = i28;
   }
  }
  if ((i28 | 0) < 1) {
   i23 = (HEAP32[i7 >> 2] | 0) + 40 | 0;
   L23 : do {
    if (i23 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
     i24 = 1;
     i25 = i23;
     i15 = HEAP32[i7 >> 2] | 0;
     while (1) {
      i13 = i24 + 1 | 0;
      if ((HEAP32[i15 + 72 >> 2] | 0) == 0) {
       i34 = i24;
       i35 = i25;
       break L23;
      }
      i16 = i25 + 40 | 0;
      if (i16 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
       i1 = i25;
       i24 = i13;
       i25 = i16;
       i15 = i1;
      } else {
       i34 = i13;
       i35 = i16;
       break;
      }
     }
    } else {
     i34 = 1;
     i35 = i23;
    }
   } while (0);
   if ((i35 | 0) == (HEAP32[i6 >> 2] | 0)) {
    i36 = HEAP32[i26 + 128 >> 2] << 1;
   } else {
    i36 = i34;
   }
  } else {
   i36 = i28;
  }
  HEAP32[i9 >> 2] = i36;
  if (!((i21 | 0) < (i18 | 0) ? (HEAP32[i9 >> 2] | 0) < (i18 | 0) : 0)) {
   break;
  }
  i23 = HEAP8[(HEAP32[i8 >> 2] | 0) + i11 >> 0] | 0;
  i15 = i22;
  i22 = (HEAP32[i8 >> 2] | 0) + i10 | 0;
  if (!(i23 << 24 >> 24 == (HEAP8[i22 >> 0] | 0))) {
   break;
  }
  i15 = Math_imul(i27, HEAP32[i9 >> 2] | 0) | 0;
  if (!((HEAP8[(HEAP32[i8 >> 2] | 0) + (i15 - i17) >> 0] | 0) == i23 << 24 >> 24)) {
   break;
  }
  i25 = Math_imul(i27, i21) | 0;
  if (!((HEAP8[(HEAP32[i8 >> 2] | 0) + (i11 - i25) >> 0] | 0) == i23 << 24 >> 24)) {
   break;
  }
  if (!(i23 << 24 >> 24 == (HEAP8[(HEAP32[i8 >> 2] | 0) + (i15 + i10) >> 0] | 0))) {
   break;
  }
  if (!(i23 << 24 >> 24 == (HEAP8[(HEAP32[i8 >> 2] | 0) + (i10 - i25) >> 0] | 0))) {
   break;
  }
  if (HEAP8[i4 >> 0] & 1) {
   i22 = i22;
   continue;
  }
  if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 72 >> 2] | 0) == 0 ? !((HEAP8[(HEAP32[i8 >> 2] | 0) + i27 >> 0] | 0) == i23 << 24 >> 24) : 0) {
   break;
  }
  if ((HEAP32[(HEAP32[i7 >> 2] | 0) + -8 >> 2] | 0) != 0) {
   i22 = i22;
   continue;
  }
  if (!((HEAP8[(HEAP32[i8 >> 2] | 0) + (0 - i27) >> 0] | 0) == i23 << 24 >> 24)) {
   break;
  }
 }
 if ((i32 | 0) == 43) {
  HEAP32[i12 + 20 >> 2] = 0;
  HEAP32[i12 + 32 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 d37 = +HEAPF64[HEAP32[i7 >> 2] >> 3];
 i32 = HEAP32[i26 + 60 >> 2] | 0;
 if ((HEAP32[i26 + 92 >> 2] | 0) == 0) {
  i27 = HEAP32[i32 + 4 >> 2] | 0;
  d38 = +HEAPF64[i26 >> 3];
  d39 = +HEAPF64[i26 + 8 >> 3];
  i26 = _emscripten_realloc_async_context(64) | 0;
  i22 = FUNCTION_TABLE_idddd[i27 & 3](d19, d37, d38, d39) | 0;
  if (___async) {
   HEAP32[i26 >> 2] = 238;
   i40 = i26 + 4 | 0;
   HEAP32[i40 >> 2] = i10;
   i41 = i26 + 8 | 0;
   HEAP32[i41 >> 2] = i11;
   i42 = i26 + 12 | 0;
   HEAP32[i42 >> 2] = i12;
   i43 = i26 + 16 | 0;
   i44 = HEAP32[i9 >> 2] | 0;
   HEAP32[i43 >> 2] = i44;
   i45 = i26 + 20 | 0;
   i46 = HEAP32[i8 >> 2] | 0;
   HEAP32[i45 >> 2] = i46;
   i47 = i26 + 24 | 0;
   i48 = HEAP32[i7 >> 2] | 0;
   HEAP32[i47 >> 2] = i48;
   i49 = i26 + 28 | 0;
   i50 = HEAP32[i6 >> 2] | 0;
   HEAP32[i49 >> 2] = i50;
   i51 = i26 + 32 | 0;
   i52 = HEAP32[i5 >> 2] | 0;
   HEAP32[i51 >> 2] = i52;
   i53 = i26 + 36 | 0;
   HEAP32[i53 >> 2] = i17;
   i54 = i26 + 40 | 0;
   HEAP32[i54 >> 2] = i18;
   i55 = i26 + 48 | 0;
   HEAPF64[i55 >> 3] = d19;
   i56 = i26 + 56 | 0;
   HEAP32[i56 >> 2] = i20;
   i57 = i26 + 60 | 0;
   i58 = HEAP8[i4 >> 0] | 0;
   i59 = i58 & 1;
   i60 = i59 & 1;
   HEAP8[i57 >> 0] = i60;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i22;
  ___async_unwind = 0;
  HEAP32[i26 >> 2] = 238;
  i40 = i26 + 4 | 0;
  HEAP32[i40 >> 2] = i10;
  i41 = i26 + 8 | 0;
  HEAP32[i41 >> 2] = i11;
  i42 = i26 + 12 | 0;
  HEAP32[i42 >> 2] = i12;
  i43 = i26 + 16 | 0;
  i44 = HEAP32[i9 >> 2] | 0;
  HEAP32[i43 >> 2] = i44;
  i45 = i26 + 20 | 0;
  i46 = HEAP32[i8 >> 2] | 0;
  HEAP32[i45 >> 2] = i46;
  i47 = i26 + 24 | 0;
  i48 = HEAP32[i7 >> 2] | 0;
  HEAP32[i47 >> 2] = i48;
  i49 = i26 + 28 | 0;
  i50 = HEAP32[i6 >> 2] | 0;
  HEAP32[i49 >> 2] = i50;
  i51 = i26 + 32 | 0;
  i52 = HEAP32[i5 >> 2] | 0;
  HEAP32[i51 >> 2] = i52;
  i53 = i26 + 36 | 0;
  HEAP32[i53 >> 2] = i17;
  i54 = i26 + 40 | 0;
  HEAP32[i54 >> 2] = i18;
  i55 = i26 + 48 | 0;
  HEAPF64[i55 >> 3] = d19;
  i56 = i26 + 56 | 0;
  HEAP32[i56 >> 2] = i20;
  i57 = i26 + 60 | 0;
  i58 = HEAP8[i4 >> 0] | 0;
  i59 = i58 & 1;
  i60 = i59 & 1;
  HEAP8[i57 >> 0] = i60;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i60 = HEAP32[i32 + 4 >> 2] | 0;
 if ((HEAP32[i32 + 292 >> 2] | 0) == 0) {
  i32 = _emscripten_realloc_async_context(64) | 0;
  HEAP32[i3 >> 2] = FUNCTION_TABLE_idddd[i60 & 3](d19, d37, d19, d37) | 0;
  if (___async) {
   HEAP32[i32 >> 2] = 237;
   i61 = i32 + 4 | 0;
   HEAP32[i61 >> 2] = i10;
   i62 = i32 + 8 | 0;
   HEAP32[i62 >> 2] = i11;
   i63 = i32 + 12 | 0;
   HEAP32[i63 >> 2] = i12;
   i64 = i32 + 16 | 0;
   i65 = HEAP32[i9 >> 2] | 0;
   HEAP32[i64 >> 2] = i65;
   i66 = i32 + 20 | 0;
   i67 = HEAP32[i8 >> 2] | 0;
   HEAP32[i66 >> 2] = i67;
   i68 = i32 + 24 | 0;
   i69 = HEAP32[i7 >> 2] | 0;
   HEAP32[i68 >> 2] = i69;
   i70 = i32 + 28 | 0;
   i71 = HEAP32[i6 >> 2] | 0;
   HEAP32[i70 >> 2] = i71;
   i72 = i32 + 32 | 0;
   i73 = HEAP32[i5 >> 2] | 0;
   HEAP32[i72 >> 2] = i73;
   i74 = i32 + 36 | 0;
   HEAP32[i74 >> 2] = i17;
   i75 = i32 + 40 | 0;
   HEAP32[i75 >> 2] = i18;
   i76 = i32 + 48 | 0;
   HEAPF64[i76 >> 3] = d19;
   i77 = i32 + 56 | 0;
   HEAP32[i77 >> 2] = i20;
   i78 = i32 + 60 | 0;
   i79 = HEAP8[i4 >> 0] | 0;
   i80 = i79 & 1;
   i81 = i80 & 1;
   HEAP8[i78 >> 0] = i81;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = HEAP32[i3 >> 2];
  ___async_unwind = 0;
  HEAP32[i32 >> 2] = 237;
  i61 = i32 + 4 | 0;
  HEAP32[i61 >> 2] = i10;
  i62 = i32 + 8 | 0;
  HEAP32[i62 >> 2] = i11;
  i63 = i32 + 12 | 0;
  HEAP32[i63 >> 2] = i12;
  i64 = i32 + 16 | 0;
  i65 = HEAP32[i9 >> 2] | 0;
  HEAP32[i64 >> 2] = i65;
  i66 = i32 + 20 | 0;
  i67 = HEAP32[i8 >> 2] | 0;
  HEAP32[i66 >> 2] = i67;
  i68 = i32 + 24 | 0;
  i69 = HEAP32[i7 >> 2] | 0;
  HEAP32[i68 >> 2] = i69;
  i70 = i32 + 28 | 0;
  i71 = HEAP32[i6 >> 2] | 0;
  HEAP32[i70 >> 2] = i71;
  i72 = i32 + 32 | 0;
  i73 = HEAP32[i5 >> 2] | 0;
  HEAP32[i72 >> 2] = i73;
  i74 = i32 + 36 | 0;
  HEAP32[i74 >> 2] = i17;
  i75 = i32 + 40 | 0;
  HEAP32[i75 >> 2] = i18;
  i76 = i32 + 48 | 0;
  HEAPF64[i76 >> 3] = d19;
  i77 = i32 + 56 | 0;
  HEAP32[i77 >> 2] = i20;
  i78 = i32 + 60 | 0;
  i79 = HEAP8[i4 >> 0] | 0;
  i80 = i79 & 1;
  i81 = i80 & 1;
  HEAP8[i78 >> 0] = i81;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  i81 = _emscripten_realloc_async_context(64) | 0;
  i78 = FUNCTION_TABLE_idddd[i60 & 3](0.0, 0.0, d19, d37) | 0;
  if (___async) {
   HEAP32[i81 >> 2] = 236;
   i82 = i81 + 4 | 0;
   HEAP32[i82 >> 2] = i10;
   i83 = i81 + 8 | 0;
   HEAP32[i83 >> 2] = i11;
   i84 = i81 + 12 | 0;
   HEAP32[i84 >> 2] = i12;
   i85 = i81 + 16 | 0;
   i86 = HEAP32[i9 >> 2] | 0;
   HEAP32[i85 >> 2] = i86;
   i87 = i81 + 20 | 0;
   i88 = HEAP32[i8 >> 2] | 0;
   HEAP32[i87 >> 2] = i88;
   i89 = i81 + 24 | 0;
   i90 = HEAP32[i7 >> 2] | 0;
   HEAP32[i89 >> 2] = i90;
   i91 = i81 + 28 | 0;
   i92 = HEAP32[i6 >> 2] | 0;
   HEAP32[i91 >> 2] = i92;
   i93 = i81 + 32 | 0;
   i94 = HEAP32[i5 >> 2] | 0;
   HEAP32[i93 >> 2] = i94;
   i95 = i81 + 36 | 0;
   HEAP32[i95 >> 2] = i17;
   i96 = i81 + 40 | 0;
   HEAP32[i96 >> 2] = i18;
   i97 = i81 + 48 | 0;
   HEAPF64[i97 >> 3] = d19;
   i98 = i81 + 56 | 0;
   HEAP32[i98 >> 2] = i20;
   i99 = i81 + 60 | 0;
   i100 = HEAP8[i4 >> 0] | 0;
   i101 = i100 & 1;
   i102 = i101 & 1;
   HEAP8[i99 >> 0] = i102;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i78;
  ___async_unwind = 0;
  HEAP32[i81 >> 2] = 236;
  i82 = i81 + 4 | 0;
  HEAP32[i82 >> 2] = i10;
  i83 = i81 + 8 | 0;
  HEAP32[i83 >> 2] = i11;
  i84 = i81 + 12 | 0;
  HEAP32[i84 >> 2] = i12;
  i85 = i81 + 16 | 0;
  i86 = HEAP32[i9 >> 2] | 0;
  HEAP32[i85 >> 2] = i86;
  i87 = i81 + 20 | 0;
  i88 = HEAP32[i8 >> 2] | 0;
  HEAP32[i87 >> 2] = i88;
  i89 = i81 + 24 | 0;
  i90 = HEAP32[i7 >> 2] | 0;
  HEAP32[i89 >> 2] = i90;
  i91 = i81 + 28 | 0;
  i92 = HEAP32[i6 >> 2] | 0;
  HEAP32[i91 >> 2] = i92;
  i93 = i81 + 32 | 0;
  i94 = HEAP32[i5 >> 2] | 0;
  HEAP32[i93 >> 2] = i94;
  i95 = i81 + 36 | 0;
  HEAP32[i95 >> 2] = i17;
  i96 = i81 + 40 | 0;
  HEAP32[i96 >> 2] = i18;
  i97 = i81 + 48 | 0;
  HEAPF64[i97 >> 3] = d19;
  i98 = i81 + 56 | 0;
  HEAP32[i98 >> 2] = i20;
  i99 = i81 + 60 | 0;
  i100 = HEAP8[i4 >> 0] | 0;
  i101 = i100 & 1;
  i102 = i101 & 1;
  HEAP8[i99 >> 0] = i102;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
}
function _calccolumn__async_cb132(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, d19 = 0.0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, d37 = 0.0, d38 = 0.0, d39 = 0.0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 20 | 0;
 i4 = i2 + 24 | 0;
 i5 = i2 + 16 | 0;
 i6 = i2 + 12 | 0;
 i7 = i2 + 8 | 0;
 i8 = i2 + 4 | 0;
 i9 = i2;
 i10 = HEAP32[i1 + 4 >> 2] | 0;
 i11 = HEAP32[i1 + 8 >> 2] | 0;
 i12 = HEAP32[i1 + 12 >> 2] | 0;
 i13 = HEAP32[i1 + 20 >> 2] | 0;
 i14 = HEAP32[i1 + 24 >> 2] | 0;
 i15 = HEAP32[i1 + 28 >> 2] | 0;
 i16 = HEAP32[i1 + 32 >> 2] | 0;
 i17 = HEAP32[i1 + 36 >> 2] | 0;
 i18 = HEAP32[i1 + 40 >> 2] | 0;
 d19 = +HEAPF64[i1 + 48 >> 3];
 i20 = HEAP32[i1 + 56 >> 2] | 0;
 i21 = HEAP8[i1 + 60 >> 0] & 1;
 HEAP32[i9 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i8 >> 2] = i13;
 HEAP32[i7 >> 2] = i14;
 HEAP32[i6 >> 2] = i15;
 HEAP32[i5 >> 2] = i16;
 HEAP8[i4 >> 0] = i21 & 1;
 HEAP32[i3 >> 2] = HEAP32[___async_retval >> 2];
 i21 = HEAP32[i3 >> 2] | 0;
 if ((i21 | 0) == 2147483647) {
  i22 = (HEAP32[71600] | 0) + 144 | 0;
 } else {
  if ((i21 | 0) < 0) {
   i16 = HEAP32[71600] | 0;
   i15 = HEAP32[i16 + 124 >> 2] | 0;
   i14 = i15 + -1 | 0;
   i23 = i15;
   i24 = i16;
   i25 = (Math_imul(((0 - i21 | 0) / (i14 | 0) | 0) + 1 | 0, i14) | 0) + i21 | 0;
  } else {
   i14 = HEAP32[71600] | 0;
   i23 = HEAP32[i14 + 124 >> 2] | 0;
   i24 = i14;
   i25 = i21;
  }
  i22 = i24 + (((i25 | 0) % (i23 + -1 | 0) | 0) + 1) + 144 | 0;
 }
 L10 : while (1) {
  HEAP8[HEAP32[i8 >> 2] >> 0] = HEAP8[i22 >> 0] | 0;
  i23 = HEAP32[71600] | 0;
  i25 = HEAP32[i23 + 136 >> 2] | 0;
  i24 = i23;
  i23 = HEAP32[i9 >> 2] | 0;
  i21 = 0;
  while (1) {
   i14 = (HEAP32[i7 >> 2] | 0) + 80 | 0;
   if (i14 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
    i26 = i24;
    i27 = i25;
    i28 = i23 + -2 | 0;
    i29 = (HEAP32[(HEAP32[i7 >> 2] | 0) + 72 >> 2] | 0) == 0 ? -1 : i21;
    i30 = i14;
    i31 = (HEAP32[i8 >> 2] | 0) + (i25 << 1) | 0;
   } else {
    i14 = i24;
    do {
     i16 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
     if ((i16 | 0) == 2) {
      i32 = 43;
      break L10;
     }
     HEAP32[i5 >> 2] = i16;
     i33 = HEAP32[i14 + 56 >> 2] | 0;
     i16 = HEAP32[i14 + 132 >> 2] | 0;
     HEAP32[i6 >> 2] = i33 + (i16 * 40 | 0);
    } while ((HEAP32[i5 >> 2] | 0) >= (i16 | 0));
    i16 = HEAP32[i14 + 136 >> 2] | 0;
    i15 = Math_imul(i16, HEAP32[i5 >> 2] | 0) | 0;
    i13 = i33 + ((HEAP32[i5 >> 2] | 0) * 40 | 0) | 0;
    HEAP8[i4 >> 0] = (HEAP32[i5 >> 2] | 0) == 0 & 1;
    i26 = i14;
    i27 = i16;
    i28 = 0;
    i29 = i18;
    i30 = i13;
    i31 = i20 + i15 | 0;
   }
   HEAP32[i7 >> 2] = i30;
   HEAP32[i8 >> 2] = i31;
   i21 = i29 + 2 | 0;
   if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2] | 0) == 0) {
    break;
   } else {
    i25 = i27;
    i24 = i26;
    i23 = i28;
   }
  }
  if ((i28 | 0) < 1) {
   i23 = (HEAP32[i7 >> 2] | 0) + 40 | 0;
   L23 : do {
    if (i23 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
     i24 = 1;
     i25 = i23;
     i15 = HEAP32[i7 >> 2] | 0;
     while (1) {
      i13 = i24 + 1 | 0;
      if ((HEAP32[i15 + 72 >> 2] | 0) == 0) {
       i34 = i24;
       i35 = i25;
       break L23;
      }
      i16 = i25 + 40 | 0;
      if (i16 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
       i1 = i25;
       i24 = i13;
       i25 = i16;
       i15 = i1;
      } else {
       i34 = i13;
       i35 = i16;
       break;
      }
     }
    } else {
     i34 = 1;
     i35 = i23;
    }
   } while (0);
   if ((i35 | 0) == (HEAP32[i6 >> 2] | 0)) {
    i36 = HEAP32[i26 + 128 >> 2] << 1;
   } else {
    i36 = i34;
   }
  } else {
   i36 = i28;
  }
  HEAP32[i9 >> 2] = i36;
  if (!((i21 | 0) < (i18 | 0) ? (HEAP32[i9 >> 2] | 0) < (i18 | 0) : 0)) {
   break;
  }
  i23 = HEAP8[(HEAP32[i8 >> 2] | 0) + i11 >> 0] | 0;
  i15 = i22;
  i22 = (HEAP32[i8 >> 2] | 0) + i10 | 0;
  if (!(i23 << 24 >> 24 == (HEAP8[i22 >> 0] | 0))) {
   break;
  }
  i15 = Math_imul(i27, HEAP32[i9 >> 2] | 0) | 0;
  if (!((HEAP8[(HEAP32[i8 >> 2] | 0) + (i15 - i17) >> 0] | 0) == i23 << 24 >> 24)) {
   break;
  }
  i25 = Math_imul(i27, i21) | 0;
  if (!((HEAP8[(HEAP32[i8 >> 2] | 0) + (i11 - i25) >> 0] | 0) == i23 << 24 >> 24)) {
   break;
  }
  if (!(i23 << 24 >> 24 == (HEAP8[(HEAP32[i8 >> 2] | 0) + (i15 + i10) >> 0] | 0))) {
   break;
  }
  if (!(i23 << 24 >> 24 == (HEAP8[(HEAP32[i8 >> 2] | 0) + (i10 - i25) >> 0] | 0))) {
   break;
  }
  if (HEAP8[i4 >> 0] & 1) {
   i22 = i22;
   continue;
  }
  if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 72 >> 2] | 0) == 0 ? !((HEAP8[(HEAP32[i8 >> 2] | 0) + i27 >> 0] | 0) == i23 << 24 >> 24) : 0) {
   break;
  }
  if ((HEAP32[(HEAP32[i7 >> 2] | 0) + -8 >> 2] | 0) != 0) {
   i22 = i22;
   continue;
  }
  if (!((HEAP8[(HEAP32[i8 >> 2] | 0) + (0 - i27) >> 0] | 0) == i23 << 24 >> 24)) {
   break;
  }
 }
 if ((i32 | 0) == 43) {
  HEAP32[i12 + 20 >> 2] = 0;
  HEAP32[i12 + 32 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 d37 = +HEAPF64[HEAP32[i7 >> 2] >> 3];
 i32 = HEAP32[i26 + 60 >> 2] | 0;
 if ((HEAP32[i26 + 92 >> 2] | 0) == 0) {
  i27 = HEAP32[i32 + 4 >> 2] | 0;
  d38 = +HEAPF64[i26 >> 3];
  d39 = +HEAPF64[i26 + 8 >> 3];
  i26 = _emscripten_realloc_async_context(64) | 0;
  i22 = FUNCTION_TABLE_idddd[i27 & 3](d19, d37, d38, d39) | 0;
  if (___async) {
   HEAP32[i26 >> 2] = 238;
   i40 = i26 + 4 | 0;
   HEAP32[i40 >> 2] = i10;
   i41 = i26 + 8 | 0;
   HEAP32[i41 >> 2] = i11;
   i42 = i26 + 12 | 0;
   HEAP32[i42 >> 2] = i12;
   i43 = i26 + 16 | 0;
   i44 = HEAP32[i9 >> 2] | 0;
   HEAP32[i43 >> 2] = i44;
   i45 = i26 + 20 | 0;
   i46 = HEAP32[i8 >> 2] | 0;
   HEAP32[i45 >> 2] = i46;
   i47 = i26 + 24 | 0;
   i48 = HEAP32[i7 >> 2] | 0;
   HEAP32[i47 >> 2] = i48;
   i49 = i26 + 28 | 0;
   i50 = HEAP32[i6 >> 2] | 0;
   HEAP32[i49 >> 2] = i50;
   i51 = i26 + 32 | 0;
   i52 = HEAP32[i5 >> 2] | 0;
   HEAP32[i51 >> 2] = i52;
   i53 = i26 + 36 | 0;
   HEAP32[i53 >> 2] = i17;
   i54 = i26 + 40 | 0;
   HEAP32[i54 >> 2] = i18;
   i55 = i26 + 48 | 0;
   HEAPF64[i55 >> 3] = d19;
   i56 = i26 + 56 | 0;
   HEAP32[i56 >> 2] = i20;
   i57 = i26 + 60 | 0;
   i58 = HEAP8[i4 >> 0] | 0;
   i59 = i58 & 1;
   i60 = i59 & 1;
   HEAP8[i57 >> 0] = i60;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i22;
  ___async_unwind = 0;
  HEAP32[i26 >> 2] = 238;
  i40 = i26 + 4 | 0;
  HEAP32[i40 >> 2] = i10;
  i41 = i26 + 8 | 0;
  HEAP32[i41 >> 2] = i11;
  i42 = i26 + 12 | 0;
  HEAP32[i42 >> 2] = i12;
  i43 = i26 + 16 | 0;
  i44 = HEAP32[i9 >> 2] | 0;
  HEAP32[i43 >> 2] = i44;
  i45 = i26 + 20 | 0;
  i46 = HEAP32[i8 >> 2] | 0;
  HEAP32[i45 >> 2] = i46;
  i47 = i26 + 24 | 0;
  i48 = HEAP32[i7 >> 2] | 0;
  HEAP32[i47 >> 2] = i48;
  i49 = i26 + 28 | 0;
  i50 = HEAP32[i6 >> 2] | 0;
  HEAP32[i49 >> 2] = i50;
  i51 = i26 + 32 | 0;
  i52 = HEAP32[i5 >> 2] | 0;
  HEAP32[i51 >> 2] = i52;
  i53 = i26 + 36 | 0;
  HEAP32[i53 >> 2] = i17;
  i54 = i26 + 40 | 0;
  HEAP32[i54 >> 2] = i18;
  i55 = i26 + 48 | 0;
  HEAPF64[i55 >> 3] = d19;
  i56 = i26 + 56 | 0;
  HEAP32[i56 >> 2] = i20;
  i57 = i26 + 60 | 0;
  i58 = HEAP8[i4 >> 0] | 0;
  i59 = i58 & 1;
  i60 = i59 & 1;
  HEAP8[i57 >> 0] = i60;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i60 = HEAP32[i32 + 4 >> 2] | 0;
 if ((HEAP32[i32 + 292 >> 2] | 0) == 0) {
  i32 = _emscripten_realloc_async_context(64) | 0;
  i57 = FUNCTION_TABLE_idddd[i60 & 3](d19, d37, d19, d37) | 0;
  if (___async) {
   HEAP32[i32 >> 2] = 237;
   i61 = i32 + 4 | 0;
   HEAP32[i61 >> 2] = i10;
   i62 = i32 + 8 | 0;
   HEAP32[i62 >> 2] = i11;
   i63 = i32 + 12 | 0;
   HEAP32[i63 >> 2] = i12;
   i64 = i32 + 16 | 0;
   i65 = HEAP32[i9 >> 2] | 0;
   HEAP32[i64 >> 2] = i65;
   i66 = i32 + 20 | 0;
   i67 = HEAP32[i8 >> 2] | 0;
   HEAP32[i66 >> 2] = i67;
   i68 = i32 + 24 | 0;
   i69 = HEAP32[i7 >> 2] | 0;
   HEAP32[i68 >> 2] = i69;
   i70 = i32 + 28 | 0;
   i71 = HEAP32[i6 >> 2] | 0;
   HEAP32[i70 >> 2] = i71;
   i72 = i32 + 32 | 0;
   i73 = HEAP32[i5 >> 2] | 0;
   HEAP32[i72 >> 2] = i73;
   i74 = i32 + 36 | 0;
   HEAP32[i74 >> 2] = i17;
   i75 = i32 + 40 | 0;
   HEAP32[i75 >> 2] = i18;
   i76 = i32 + 48 | 0;
   HEAPF64[i76 >> 3] = d19;
   i77 = i32 + 56 | 0;
   HEAP32[i77 >> 2] = i20;
   i78 = i32 + 60 | 0;
   i79 = HEAP8[i4 >> 0] | 0;
   i80 = i79 & 1;
   i81 = i80 & 1;
   HEAP8[i78 >> 0] = i81;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i57;
  ___async_unwind = 0;
  HEAP32[i32 >> 2] = 237;
  i61 = i32 + 4 | 0;
  HEAP32[i61 >> 2] = i10;
  i62 = i32 + 8 | 0;
  HEAP32[i62 >> 2] = i11;
  i63 = i32 + 12 | 0;
  HEAP32[i63 >> 2] = i12;
  i64 = i32 + 16 | 0;
  i65 = HEAP32[i9 >> 2] | 0;
  HEAP32[i64 >> 2] = i65;
  i66 = i32 + 20 | 0;
  i67 = HEAP32[i8 >> 2] | 0;
  HEAP32[i66 >> 2] = i67;
  i68 = i32 + 24 | 0;
  i69 = HEAP32[i7 >> 2] | 0;
  HEAP32[i68 >> 2] = i69;
  i70 = i32 + 28 | 0;
  i71 = HEAP32[i6 >> 2] | 0;
  HEAP32[i70 >> 2] = i71;
  i72 = i32 + 32 | 0;
  i73 = HEAP32[i5 >> 2] | 0;
  HEAP32[i72 >> 2] = i73;
  i74 = i32 + 36 | 0;
  HEAP32[i74 >> 2] = i17;
  i75 = i32 + 40 | 0;
  HEAP32[i75 >> 2] = i18;
  i76 = i32 + 48 | 0;
  HEAPF64[i76 >> 3] = d19;
  i77 = i32 + 56 | 0;
  HEAP32[i77 >> 2] = i20;
  i78 = i32 + 60 | 0;
  i79 = HEAP8[i4 >> 0] | 0;
  i80 = i79 & 1;
  i81 = i80 & 1;
  HEAP8[i78 >> 0] = i81;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  i81 = _emscripten_realloc_async_context(64) | 0;
  HEAP32[i3 >> 2] = FUNCTION_TABLE_idddd[i60 & 3](0.0, 0.0, d19, d37) | 0;
  if (___async) {
   HEAP32[i81 >> 2] = 236;
   i82 = i81 + 4 | 0;
   HEAP32[i82 >> 2] = i10;
   i83 = i81 + 8 | 0;
   HEAP32[i83 >> 2] = i11;
   i84 = i81 + 12 | 0;
   HEAP32[i84 >> 2] = i12;
   i85 = i81 + 16 | 0;
   i86 = HEAP32[i9 >> 2] | 0;
   HEAP32[i85 >> 2] = i86;
   i87 = i81 + 20 | 0;
   i88 = HEAP32[i8 >> 2] | 0;
   HEAP32[i87 >> 2] = i88;
   i89 = i81 + 24 | 0;
   i90 = HEAP32[i7 >> 2] | 0;
   HEAP32[i89 >> 2] = i90;
   i91 = i81 + 28 | 0;
   i92 = HEAP32[i6 >> 2] | 0;
   HEAP32[i91 >> 2] = i92;
   i93 = i81 + 32 | 0;
   i94 = HEAP32[i5 >> 2] | 0;
   HEAP32[i93 >> 2] = i94;
   i95 = i81 + 36 | 0;
   HEAP32[i95 >> 2] = i17;
   i96 = i81 + 40 | 0;
   HEAP32[i96 >> 2] = i18;
   i97 = i81 + 48 | 0;
   HEAPF64[i97 >> 3] = d19;
   i98 = i81 + 56 | 0;
   HEAP32[i98 >> 2] = i20;
   i99 = i81 + 60 | 0;
   i100 = HEAP8[i4 >> 0] | 0;
   i101 = i100 & 1;
   i102 = i101 & 1;
   HEAP8[i99 >> 0] = i102;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = HEAP32[i3 >> 2];
  ___async_unwind = 0;
  HEAP32[i81 >> 2] = 236;
  i82 = i81 + 4 | 0;
  HEAP32[i82 >> 2] = i10;
  i83 = i81 + 8 | 0;
  HEAP32[i83 >> 2] = i11;
  i84 = i81 + 12 | 0;
  HEAP32[i84 >> 2] = i12;
  i85 = i81 + 16 | 0;
  i86 = HEAP32[i9 >> 2] | 0;
  HEAP32[i85 >> 2] = i86;
  i87 = i81 + 20 | 0;
  i88 = HEAP32[i8 >> 2] | 0;
  HEAP32[i87 >> 2] = i88;
  i89 = i81 + 24 | 0;
  i90 = HEAP32[i7 >> 2] | 0;
  HEAP32[i89 >> 2] = i90;
  i91 = i81 + 28 | 0;
  i92 = HEAP32[i6 >> 2] | 0;
  HEAP32[i91 >> 2] = i92;
  i93 = i81 + 32 | 0;
  i94 = HEAP32[i5 >> 2] | 0;
  HEAP32[i93 >> 2] = i94;
  i95 = i81 + 36 | 0;
  HEAP32[i95 >> 2] = i17;
  i96 = i81 + 40 | 0;
  HEAP32[i96 >> 2] = i18;
  i97 = i81 + 48 | 0;
  HEAPF64[i97 >> 3] = d19;
  i98 = i81 + 56 | 0;
  HEAP32[i98 >> 2] = i20;
  i99 = i81 + 60 | 0;
  i100 = HEAP8[i4 >> 0] | 0;
  i101 = i100 & 1;
  i102 = i101 & 1;
  HEAP8[i99 >> 0] = i102;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
}
function _calcline(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, d32 = 0.0, i33 = 0, i34 = 0, i35 = 0, d36 = 0.0, d37 = 0.0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0;
 i3 = STACKTOP;
 i4 = HEAP32[71600] | 0;
 i5 = HEAP32[i4 + 108 >> 2] | 0;
 d6 = +HEAPF64[i2 >> 3];
 i7 = i2 + (~i5 * 40 | 0) | 0;
 i8 = HEAP32[i4 + 56 >> 2] | 0;
 i9 = i8 >>> 0 > i7 >>> 0 ? i8 : i7;
 i7 = i2 + -40 | 0;
 L1 : do {
  if (i9 >>> 0 > i7 >>> 0) {
   i10 = 1;
   i11 = i2;
   i12 = i7;
  } else {
   i13 = 1;
   i14 = i2;
   i15 = i7;
   while (1) {
    i16 = i13 + 1 | 0;
    if ((HEAP32[i14 + -8 >> 2] | 0) == 0) {
     i10 = i13;
     i11 = i14;
     i12 = i15;
     break L1;
    }
    i17 = i15 + -40 | 0;
    if (i9 >>> 0 > i17 >>> 0) {
     i10 = i16;
     i11 = i15;
     i12 = i17;
     break;
    } else {
     i18 = i15;
     i13 = i16;
     i15 = i17;
     i14 = i18;
    }
   }
  }
 } while (0);
 i9 = i2 + (i5 * 40 | 0) | 0;
 i7 = i8 + ((HEAP32[i4 + 132 >> 2] | 0) * 40 | 0) | 0;
 i14 = i7 >>> 0 < i9 >>> 0 ? i7 : i9;
 i9 = i2 + 40 | 0;
 L6 : do {
  if (i14 >>> 0 > i9 >>> 0) {
   i15 = 1;
   i13 = i2;
   i18 = i9;
   while (1) {
    i17 = i15 + 1 | 0;
    if ((HEAP32[i13 + 72 >> 2] | 0) == 0) {
     i19 = i15;
     i20 = i13;
     i21 = i18;
     break L6;
    }
    i16 = i18 + 40 | 0;
    if (i14 >>> 0 > i16 >>> 0) {
     i22 = i18;
     i15 = i17;
     i18 = i16;
     i13 = i22;
    } else {
     i19 = i17;
     i20 = i18;
     i21 = i16;
     break;
    }
   }
  } else {
   i19 = 1;
   i20 = i2;
   i21 = i9;
  }
 } while (0);
 i9 = HEAP32[i4 + 136 >> 2] | 0;
 i14 = Math_imul(i9, i10) | 0;
 i10 = Math_imul(i9, i19) | 0;
 if ((!((i21 | 0) == (i7 | 0) | i12 >>> 0 < i8 >>> 0) ? (HEAP32[i20 + 72 >> 2] | 0) == 0 : 0) ? (HEAP32[i11 + -8 >> 2] | 0) == 0 : 0) {
  i11 = 0 - i14 | 0;
  i20 = i4;
  i8 = 0;
  L15 : while (1) {
   i12 = HEAP32[i20 + 52 >> 2] | 0;
   i7 = HEAP32[i20 + 128 >> 2] | 0;
   i23 = i12 + (i7 * 40 | 0) | 0;
   if ((i8 | 0) < (i7 | 0)) {
    i24 = (i8 | 0) == 0;
    i7 = 0;
    i21 = i5;
    i25 = i12 + (i8 * 40 | 0) | 0;
    i26 = i1 + i8 | 0;
    while (1) {
     i12 = i21 + 2 | 0;
     if ((HEAP32[i25 + 32 >> 2] | 0) == 0) {
      if ((i7 | 0) < 1) {
       i19 = i25 + 40 | 0;
       L25 : do {
        if (i19 >>> 0 < i23 >>> 0) {
         i9 = 1;
         i18 = i25;
         i13 = i19;
         while (1) {
          i15 = i9 + 1 | 0;
          if ((HEAP32[i18 + 72 >> 2] | 0) == 0) {
           i27 = i9;
           i28 = i13;
           break L25;
          }
          i16 = i13 + 40 | 0;
          if (i16 >>> 0 < i23 >>> 0) {
           i17 = i13;
           i9 = i15;
           i13 = i16;
           i18 = i17;
          } else {
           i27 = i15;
           i28 = i16;
           break;
          }
         }
        } else {
         i27 = 1;
         i28 = i19;
        }
       } while (0);
       i29 = (i28 | 0) == (i23 | 0) ? 2147483647 : i27;
      } else {
       i29 = i7;
      }
      do {
       if ((((((i29 | 0) < (i5 | 0) & (i12 | 0) < (i5 | 0) ? (i19 = HEAP8[i26 + i11 >> 0] | 0, i18 = i26 + i10 | 0, i19 << 24 >> 24 == (HEAP8[i18 >> 0] | 0)) : 0) ? (HEAP8[i26 + (i29 - i14) >> 0] | 0) == i19 << 24 >> 24 : 0) ? (HEAP8[i26 + (i11 - i12) >> 0] | 0) == i19 << 24 >> 24 : 0) ? i19 << 24 >> 24 == (HEAP8[i26 + (i10 - i12) >> 0] | 0) : 0) ? i19 << 24 >> 24 == (HEAP8[i26 + (i29 + i10) >> 0] | 0) : 0) {
        if (i24) {
         i30 = i18;
         break;
        }
        if ((HEAP32[i25 + -8 >> 2] | 0) == 0 ? !((HEAP8[i26 + -1 >> 0] | 0) == i19 << 24 >> 24) : 0) {
         i31 = 51;
         break;
        }
        if ((HEAP32[i25 + 72 >> 2] | 0) != 0) {
         i30 = i18;
         break;
        }
        if ((HEAP8[i26 + 1 >> 0] | 0) == i19 << 24 >> 24) {
         i30 = i18;
        } else {
         i31 = 51;
        }
       } else {
        i31 = 51;
       }
      } while (0);
      do {
       if ((i31 | 0) == 51) {
        i31 = 0;
        d32 = +HEAPF64[i25 >> 3];
        i18 = HEAP32[71600] | 0;
        i19 = HEAP32[i18 + 60 >> 2] | 0;
        do {
         if ((HEAP32[i18 + 92 >> 2] | 0) != 0) {
          i13 = HEAP32[i19 + 4 >> 2] | 0;
          if ((HEAP32[i19 + 292 >> 2] | 0) == 0) {
           i33 = _emscripten_alloc_async_context(64) | 0;
           HEAP32[___async_cur_frame + 4 >> 2] = i3;
           i9 = FUNCTION_TABLE_idddd[i13 & 3](d32, d6, d32, d6) | 0;
           if (___async) {
            i31 = 57;
            break L15;
           }
           _emscripten_free_async_context(i33 | 0);
           i34 = i9;
           break;
          } else {
           i35 = _emscripten_alloc_async_context(64) | 0;
           HEAP32[___async_cur_frame + 4 >> 2] = i3;
           i9 = FUNCTION_TABLE_idddd[i13 & 3](0.0, 0.0, d32, d6) | 0;
           if (___async) {
            i31 = 54;
            break L15;
           }
           _emscripten_free_async_context(i35 | 0);
           i34 = i9;
           break;
          }
         } else {
          i9 = HEAP32[i19 + 4 >> 2] | 0;
          d36 = +HEAPF64[i18 >> 3];
          d37 = +HEAPF64[i18 + 8 >> 3];
          i38 = _emscripten_alloc_async_context(64) | 0;
          HEAP32[___async_cur_frame + 4 >> 2] = i3;
          i13 = FUNCTION_TABLE_idddd[i9 & 3](d32, d6, d36, d37) | 0;
          if (___async) {
           i31 = 60;
           break L15;
          }
          _emscripten_free_async_context(i38 | 0);
          i34 = i13;
         }
        } while (0);
        if ((i34 | 0) == 2147483647) {
         i30 = (HEAP32[71600] | 0) + 144 | 0;
         break;
        }
        if ((i34 | 0) < 0) {
         i18 = HEAP32[71600] | 0;
         i19 = HEAP32[i18 + 124 >> 2] | 0;
         i13 = i19 + -1 | 0;
         i39 = i19;
         i40 = i18;
         i41 = (Math_imul(((0 - i34 | 0) / (i13 | 0) | 0) + 1 | 0, i13) | 0) + i34 | 0;
        } else {
         i13 = HEAP32[71600] | 0;
         i39 = HEAP32[i13 + 124 >> 2] | 0;
         i40 = i13;
         i41 = i34;
        }
        i30 = i40 + (((i41 | 0) % (i39 + -1 | 0) | 0) + 1) + 144 | 0;
       }
      } while (0);
      HEAP8[i26 >> 0] = HEAP8[i30 >> 0] | 0;
      i42 = i29;
      i43 = 0;
     } else {
      i42 = i7;
      i43 = i12;
     }
     i13 = i25 + 80 | 0;
     if (i13 >>> 0 < i23 >>> 0) {
      i7 = i42 + -2 | 0;
      i21 = (HEAP32[i25 + 72 >> 2] | 0) == 0 ? -1 : i43;
      i25 = i13;
      i26 = i26 + 2 | 0;
     } else {
      break;
     }
    }
   }
   i21 = i8 + 1 | 0;
   if ((i21 | 0) == 2) {
    i31 = 72;
    break;
   }
   i20 = HEAP32[71600] | 0;
   i8 = i21;
  }
  if ((i31 | 0) == 54) {
   HEAP32[i35 >> 2] = 230;
   HEAP32[i35 + 4 >> 2] = i2;
   HEAP32[i35 + 8 >> 2] = i10;
   HEAP32[i35 + 12 >> 2] = i11;
   HEAP32[i35 + 16 >> 2] = i14;
   HEAP8[i35 + 20 >> 0] = i24 & 1;
   HEAP32[i35 + 24 >> 2] = i5;
   HEAP32[i35 + 28 >> 2] = i23;
   HEAPF64[i35 + 32 >> 3] = d6;
   HEAP32[i35 + 40 >> 2] = i1;
   HEAP32[i35 + 44 >> 2] = i26;
   HEAP32[i35 + 48 >> 2] = i29;
   HEAP32[i35 + 52 >> 2] = i25;
   HEAP32[i35 + 56 >> 2] = i8;
   i3 = STACKTOP;
   STACKTOP = i3;
   return;
  } else if ((i31 | 0) == 57) {
   HEAP32[i33 >> 2] = 231;
   HEAP32[i33 + 4 >> 2] = i2;
   HEAP32[i33 + 8 >> 2] = i10;
   HEAP32[i33 + 12 >> 2] = i11;
   HEAP32[i33 + 16 >> 2] = i14;
   HEAP8[i33 + 20 >> 0] = i24 & 1;
   HEAP32[i33 + 24 >> 2] = i5;
   HEAP32[i33 + 28 >> 2] = i23;
   HEAPF64[i33 + 32 >> 3] = d6;
   HEAP32[i33 + 40 >> 2] = i1;
   HEAP32[i33 + 44 >> 2] = i26;
   HEAP32[i33 + 48 >> 2] = i29;
   HEAP32[i33 + 52 >> 2] = i25;
   HEAP32[i33 + 56 >> 2] = i8;
   i3 = STACKTOP;
   STACKTOP = i3;
   return;
  } else if ((i31 | 0) == 60) {
   HEAP32[i38 >> 2] = 232;
   HEAP32[i38 + 4 >> 2] = i2;
   HEAP32[i38 + 8 >> 2] = i10;
   HEAP32[i38 + 12 >> 2] = i11;
   HEAP32[i38 + 16 >> 2] = i14;
   HEAP8[i38 + 20 >> 0] = i24 & 1;
   HEAP32[i38 + 24 >> 2] = i5;
   HEAP32[i38 + 28 >> 2] = i23;
   HEAPF64[i38 + 32 >> 3] = d6;
   HEAP32[i38 + 40 >> 2] = i1;
   HEAP32[i38 + 44 >> 2] = i8;
   HEAP32[i38 + 48 >> 2] = i26;
   HEAP32[i38 + 52 >> 2] = i29;
   HEAP32[i38 + 56 >> 2] = i25;
   i3 = STACKTOP;
   STACKTOP = i3;
   return;
  } else if ((i31 | 0) == 72) {
   i44 = i2 + 20 | 0;
   HEAP32[i44 >> 2] = 2;
   i45 = i2 + 32 | 0;
   HEAP32[i45 >> 2] = 0;
   STACKTOP = i3;
   return;
  }
 }
 i25 = HEAP32[i4 + 52 >> 2] | 0;
 i38 = HEAP32[i4 + 128 >> 2] | 0;
 i4 = i25 + (i38 * 40 | 0) | 0;
 if ((i38 | 0) > 0) {
  i46 = i25;
  i47 = i1;
 } else {
  i44 = i2 + 20 | 0;
  HEAP32[i44 >> 2] = 2;
  i45 = i2 + 32 | 0;
  HEAP32[i45 >> 2] = 0;
  STACKTOP = i3;
  return;
 }
 L74 : while (1) {
  if ((HEAP32[i46 + 32 >> 2] | 0) == 0) {
   d32 = +HEAPF64[i46 >> 3];
   i25 = HEAP32[71600] | 0;
   i38 = HEAP32[i25 + 60 >> 2] | 0;
   do {
    if ((HEAP32[i25 + 92 >> 2] | 0) != 0) {
     i29 = HEAP32[i38 + 4 >> 2] | 0;
     if ((HEAP32[i38 + 292 >> 2] | 0) == 0) {
      i48 = _emscripten_alloc_async_context(32) | 0;
      HEAP32[___async_cur_frame + 4 >> 2] = i3;
      i26 = FUNCTION_TABLE_idddd[i29 & 3](d32, d6, d32, d6) | 0;
      if (___async) {
       i31 = 19;
       break L74;
      }
      _emscripten_free_async_context(i48 | 0);
      i49 = i26;
      break;
     } else {
      i50 = _emscripten_alloc_async_context(32) | 0;
      HEAP32[___async_cur_frame + 4 >> 2] = i3;
      i26 = FUNCTION_TABLE_idddd[i29 & 3](0.0, 0.0, d32, d6) | 0;
      if (___async) {
       i31 = 16;
       break L74;
      }
      _emscripten_free_async_context(i50 | 0);
      i49 = i26;
      break;
     }
    } else {
     i26 = HEAP32[i38 + 4 >> 2] | 0;
     d37 = +HEAPF64[i25 >> 3];
     d36 = +HEAPF64[i25 + 8 >> 3];
     i51 = _emscripten_alloc_async_context(32) | 0;
     HEAP32[___async_cur_frame + 4 >> 2] = i3;
     i29 = FUNCTION_TABLE_idddd[i26 & 3](d32, d6, d37, d36) | 0;
     if (___async) {
      i31 = 22;
      break L74;
     }
     _emscripten_free_async_context(i51 | 0);
     i49 = i29;
    }
   } while (0);
   if ((i49 | 0) == 2147483647) {
    i52 = (HEAP32[71600] | 0) + 144 | 0;
   } else {
    if ((i49 | 0) < 0) {
     i25 = HEAP32[71600] | 0;
     i38 = HEAP32[i25 + 124 >> 2] | 0;
     i29 = i38 + -1 | 0;
     i53 = i25;
     i54 = i38;
     i55 = (Math_imul(((0 - i49 | 0) / (i29 | 0) | 0) + 1 | 0, i29) | 0) + i49 | 0;
    } else {
     i29 = HEAP32[71600] | 0;
     i53 = i29;
     i54 = HEAP32[i29 + 124 >> 2] | 0;
     i55 = i49;
    }
    i52 = i53 + (((i55 | 0) % (i54 + -1 | 0) | 0) + 1) + 144 | 0;
   }
   HEAP8[i47 >> 0] = HEAP8[i52 >> 0] | 0;
  }
  i29 = i46 + 40 | 0;
  if (i29 >>> 0 < i4 >>> 0) {
   i46 = i29;
   i47 = i47 + 1 | 0;
  } else {
   i31 = 72;
   break;
  }
 }
 if ((i31 | 0) == 16) {
  HEAP32[i50 >> 2] = 227;
  HEAP32[i50 + 4 >> 2] = i2;
  HEAPF64[i50 + 8 >> 3] = d6;
  HEAP32[i50 + 16 >> 2] = i1;
  HEAP32[i50 + 20 >> 2] = i47;
  HEAP32[i50 + 24 >> 2] = i46;
  HEAP32[i50 + 28 >> 2] = i4;
  i3 = STACKTOP;
  STACKTOP = i3;
  return;
 } else if ((i31 | 0) == 19) {
  HEAP32[i48 >> 2] = 228;
  HEAP32[i48 + 4 >> 2] = i2;
  HEAPF64[i48 + 8 >> 3] = d6;
  HEAP32[i48 + 16 >> 2] = i1;
  HEAP32[i48 + 20 >> 2] = i4;
  HEAP32[i48 + 24 >> 2] = i47;
  HEAP32[i48 + 28 >> 2] = i46;
  i3 = STACKTOP;
  STACKTOP = i3;
  return;
 } else if ((i31 | 0) == 22) {
  HEAP32[i51 >> 2] = 229;
  HEAP32[i51 + 4 >> 2] = i2;
  HEAPF64[i51 + 8 >> 3] = d6;
  HEAP32[i51 + 16 >> 2] = i1;
  HEAP32[i51 + 20 >> 2] = i4;
  HEAP32[i51 + 24 >> 2] = i47;
  HEAP32[i51 + 28 >> 2] = i46;
  i3 = STACKTOP;
  STACKTOP = i3;
  return;
 } else if ((i31 | 0) == 72) {
  i44 = i2 + 20 | 0;
  HEAP32[i44 >> 2] = 2;
  i45 = i2 + 32 | 0;
  HEAP32[i45 >> 2] = 0;
  STACKTOP = i3;
  return;
 }
}
function _calcline__async_cb215(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, d16 = 0.0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, d35 = 0.0, d36 = 0.0, d37 = 0.0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 20 | 0;
 i4 = i2 + 16 | 0;
 i5 = i2 + 12 | 0;
 i6 = i2 + 8 | 0;
 i7 = i2 + 4 | 0;
 i8 = i2;
 i9 = i2 + 24 | 0;
 i10 = HEAP32[i1 + 4 >> 2] | 0;
 i11 = HEAP32[i1 + 8 >> 2] | 0;
 i12 = HEAP32[i1 + 12 >> 2] | 0;
 i13 = HEAP32[i1 + 16 >> 2] | 0;
 i14 = HEAP32[i1 + 24 >> 2] | 0;
 i15 = HEAP32[i1 + 28 >> 2] | 0;
 d16 = +HEAPF64[i1 + 32 >> 3];
 i17 = HEAP32[i1 + 40 >> 2] | 0;
 i18 = HEAP32[i1 + 44 >> 2] | 0;
 i19 = HEAP32[i1 + 48 >> 2] | 0;
 i20 = HEAP32[i1 + 52 >> 2] | 0;
 i21 = HEAP32[i1 + 56 >> 2] | 0;
 HEAP8[i9 >> 0] = HEAP8[i1 + 20 >> 0] & 1;
 HEAP32[i8 >> 2] = i15;
 HEAP32[i7 >> 2] = i18;
 HEAP32[i6 >> 2] = i19;
 HEAP32[i5 >> 2] = i20;
 HEAP32[i4 >> 2] = i21;
 HEAP32[i3 >> 2] = HEAP32[___async_retval >> 2];
 i21 = HEAP32[i3 >> 2] | 0;
 if ((i21 | 0) == 2147483647) {
  i22 = (HEAP32[71600] | 0) + 144 | 0;
 } else {
  if ((i21 | 0) < 0) {
   i20 = HEAP32[71600] | 0;
   i19 = HEAP32[i20 + 124 >> 2] | 0;
   i18 = i19 + -1 | 0;
   i23 = i19;
   i24 = i20;
   i25 = (Math_imul(((0 - i21 | 0) / (i18 | 0) | 0) + 1 | 0, i18) | 0) + i21 | 0;
  } else {
   i18 = HEAP32[71600] | 0;
   i23 = HEAP32[i18 + 124 >> 2] | 0;
   i24 = i18;
   i25 = i21;
  }
  i22 = i24 + (((i25 | 0) % (i23 + -1 | 0) | 0) + 1) + 144 | 0;
 }
 L10 : while (1) {
  HEAP8[HEAP32[i6 >> 2] >> 0] = HEAP8[i22 >> 0] | 0;
  i23 = HEAP32[i5 >> 2] | 0;
  i25 = 0;
  while (1) {
   i24 = (HEAP32[i4 >> 2] | 0) + 80 | 0;
   if (i24 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
    i26 = i23 + -2 | 0;
    i27 = (HEAP32[(HEAP32[i4 >> 2] | 0) + 72 >> 2] | 0) == 0 ? -1 : i25;
    i28 = i24;
    i29 = (HEAP32[i6 >> 2] | 0) + 2 | 0;
   } else {
    do {
     i24 = (HEAP32[i7 >> 2] | 0) + 1 | 0;
     if ((i24 | 0) == 2) {
      i30 = 43;
      break L10;
     }
     i21 = HEAP32[71600] | 0;
     HEAP32[i7 >> 2] = i24;
     i31 = HEAP32[i21 + 52 >> 2] | 0;
     i24 = HEAP32[i21 + 128 >> 2] | 0;
     HEAP32[i8 >> 2] = i31 + (i24 * 40 | 0);
    } while ((HEAP32[i7 >> 2] | 0) >= (i24 | 0));
    i24 = i31 + ((HEAP32[i7 >> 2] | 0) * 40 | 0) | 0;
    i21 = i17 + (HEAP32[i7 >> 2] | 0) | 0;
    HEAP8[i9 >> 0] = (HEAP32[i7 >> 2] | 0) == 0 & 1;
    i26 = 0;
    i27 = i14;
    i28 = i24;
    i29 = i21;
   }
   HEAP32[i4 >> 2] = i28;
   HEAP32[i6 >> 2] = i29;
   i25 = i27 + 2 | 0;
   if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0) == 0) {
    break;
   } else {
    i23 = i26;
   }
  }
  if ((i26 | 0) < 1) {
   i23 = (HEAP32[i4 >> 2] | 0) + 40 | 0;
   L24 : do {
    if (i23 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
     i21 = 1;
     i24 = HEAP32[i4 >> 2] | 0;
     i18 = i23;
     while (1) {
      i20 = i21 + 1 | 0;
      if ((HEAP32[i24 + 72 >> 2] | 0) == 0) {
       i32 = i21;
       i33 = i18;
       break L24;
      }
      i19 = i18 + 40 | 0;
      if (i19 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
       i15 = i18;
       i21 = i20;
       i18 = i19;
       i24 = i15;
      } else {
       i32 = i20;
       i33 = i19;
       break;
      }
     }
    } else {
     i32 = 1;
     i33 = i23;
    }
   } while (0);
   i34 = (i33 | 0) == (HEAP32[i8 >> 2] | 0) ? 2147483647 : i32;
  } else {
   i34 = i26;
  }
  HEAP32[i5 >> 2] = i34;
  if (!((i25 | 0) < (i14 | 0) ? (HEAP32[i5 >> 2] | 0) < (i14 | 0) : 0)) {
   break;
  }
  i23 = HEAP8[(HEAP32[i6 >> 2] | 0) + i12 >> 0] | 0;
  i24 = i22;
  i22 = (HEAP32[i6 >> 2] | 0) + i11 | 0;
  if (!(i23 << 24 >> 24 == (HEAP8[i22 >> 0] | 0))) {
   break;
  }
  if (!((HEAP8[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i5 >> 2] | 0) - i13) >> 0] | 0) == i23 << 24 >> 24)) {
   break;
  }
  if (!((HEAP8[(HEAP32[i6 >> 2] | 0) + (i12 - i25) >> 0] | 0) == i23 << 24 >> 24)) {
   break;
  }
  if (!(i23 << 24 >> 24 == (HEAP8[(HEAP32[i6 >> 2] | 0) + (i11 - i25) >> 0] | 0))) {
   break;
  }
  if (!(i23 << 24 >> 24 == (HEAP8[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i5 >> 2] | 0) + i11) >> 0] | 0))) {
   break;
  }
  if (HEAP8[i9 >> 0] & 1) {
   i22 = i22;
   continue;
  }
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + -8 >> 2] | 0) == 0 ? !((HEAP8[(HEAP32[i6 >> 2] | 0) + -1 >> 0] | 0) == i23 << 24 >> 24) : 0) {
   break;
  }
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 72 >> 2] | 0) != 0) {
   i22 = i22;
   continue;
  }
  if (!((HEAP8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0) == i23 << 24 >> 24)) {
   break;
  }
 }
 if ((i30 | 0) == 43) {
  HEAP32[i10 + 20 >> 2] = 2;
  HEAP32[i10 + 32 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 d35 = +HEAPF64[HEAP32[i4 >> 2] >> 3];
 i30 = HEAP32[71600] | 0;
 i22 = HEAP32[i30 + 60 >> 2] | 0;
 if ((HEAP32[i30 + 92 >> 2] | 0) == 0) {
  i34 = HEAP32[i22 + 4 >> 2] | 0;
  d36 = +HEAPF64[i30 >> 3];
  d37 = +HEAPF64[i30 + 8 >> 3];
  i30 = _emscripten_realloc_async_context(64) | 0;
  HEAP32[i3 >> 2] = FUNCTION_TABLE_idddd[i34 & 3](d35, d16, d36, d37) | 0;
  if (___async) {
   HEAP32[i30 >> 2] = 232;
   i38 = i30 + 4 | 0;
   HEAP32[i38 >> 2] = i10;
   i39 = i30 + 8 | 0;
   HEAP32[i39 >> 2] = i11;
   i40 = i30 + 12 | 0;
   HEAP32[i40 >> 2] = i12;
   i41 = i30 + 16 | 0;
   HEAP32[i41 >> 2] = i13;
   i42 = i30 + 20 | 0;
   i43 = HEAP8[i9 >> 0] | 0;
   i44 = i43 & 1;
   i45 = i44 & 1;
   HEAP8[i42 >> 0] = i45;
   i46 = i30 + 24 | 0;
   HEAP32[i46 >> 2] = i14;
   i47 = i30 + 28 | 0;
   i48 = HEAP32[i8 >> 2] | 0;
   HEAP32[i47 >> 2] = i48;
   i49 = i30 + 32 | 0;
   HEAPF64[i49 >> 3] = d16;
   i50 = i30 + 40 | 0;
   HEAP32[i50 >> 2] = i17;
   i51 = i30 + 44 | 0;
   i52 = HEAP32[i7 >> 2] | 0;
   HEAP32[i51 >> 2] = i52;
   i53 = i30 + 48 | 0;
   i54 = HEAP32[i6 >> 2] | 0;
   HEAP32[i53 >> 2] = i54;
   i55 = i30 + 52 | 0;
   i56 = HEAP32[i5 >> 2] | 0;
   HEAP32[i55 >> 2] = i56;
   i57 = i30 + 56 | 0;
   i58 = HEAP32[i4 >> 2] | 0;
   HEAP32[i57 >> 2] = i58;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = HEAP32[i3 >> 2];
  ___async_unwind = 0;
  HEAP32[i30 >> 2] = 232;
  i38 = i30 + 4 | 0;
  HEAP32[i38 >> 2] = i10;
  i39 = i30 + 8 | 0;
  HEAP32[i39 >> 2] = i11;
  i40 = i30 + 12 | 0;
  HEAP32[i40 >> 2] = i12;
  i41 = i30 + 16 | 0;
  HEAP32[i41 >> 2] = i13;
  i42 = i30 + 20 | 0;
  i43 = HEAP8[i9 >> 0] | 0;
  i44 = i43 & 1;
  i45 = i44 & 1;
  HEAP8[i42 >> 0] = i45;
  i46 = i30 + 24 | 0;
  HEAP32[i46 >> 2] = i14;
  i47 = i30 + 28 | 0;
  i48 = HEAP32[i8 >> 2] | 0;
  HEAP32[i47 >> 2] = i48;
  i49 = i30 + 32 | 0;
  HEAPF64[i49 >> 3] = d16;
  i50 = i30 + 40 | 0;
  HEAP32[i50 >> 2] = i17;
  i51 = i30 + 44 | 0;
  i52 = HEAP32[i7 >> 2] | 0;
  HEAP32[i51 >> 2] = i52;
  i53 = i30 + 48 | 0;
  i54 = HEAP32[i6 >> 2] | 0;
  HEAP32[i53 >> 2] = i54;
  i55 = i30 + 52 | 0;
  i56 = HEAP32[i5 >> 2] | 0;
  HEAP32[i55 >> 2] = i56;
  i57 = i30 + 56 | 0;
  i58 = HEAP32[i4 >> 2] | 0;
  HEAP32[i57 >> 2] = i58;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i58 = HEAP32[i22 + 4 >> 2] | 0;
 if ((HEAP32[i22 + 292 >> 2] | 0) == 0) {
  i22 = _emscripten_realloc_async_context(64) | 0;
  i57 = FUNCTION_TABLE_idddd[i58 & 3](d35, d16, d35, d16) | 0;
  if (___async) {
   HEAP32[i22 >> 2] = 231;
   i59 = i22 + 4 | 0;
   HEAP32[i59 >> 2] = i10;
   i60 = i22 + 8 | 0;
   HEAP32[i60 >> 2] = i11;
   i61 = i22 + 12 | 0;
   HEAP32[i61 >> 2] = i12;
   i62 = i22 + 16 | 0;
   HEAP32[i62 >> 2] = i13;
   i63 = i22 + 20 | 0;
   i64 = HEAP8[i9 >> 0] | 0;
   i65 = i64 & 1;
   i66 = i65 & 1;
   HEAP8[i63 >> 0] = i66;
   i67 = i22 + 24 | 0;
   HEAP32[i67 >> 2] = i14;
   i68 = i22 + 28 | 0;
   i69 = HEAP32[i8 >> 2] | 0;
   HEAP32[i68 >> 2] = i69;
   i70 = i22 + 32 | 0;
   HEAPF64[i70 >> 3] = d16;
   i71 = i22 + 40 | 0;
   HEAP32[i71 >> 2] = i17;
   i72 = i22 + 44 | 0;
   i73 = HEAP32[i6 >> 2] | 0;
   HEAP32[i72 >> 2] = i73;
   i74 = i22 + 48 | 0;
   i75 = HEAP32[i5 >> 2] | 0;
   HEAP32[i74 >> 2] = i75;
   i76 = i22 + 52 | 0;
   i77 = HEAP32[i4 >> 2] | 0;
   HEAP32[i76 >> 2] = i77;
   i78 = i22 + 56 | 0;
   i79 = HEAP32[i7 >> 2] | 0;
   HEAP32[i78 >> 2] = i79;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i57;
  ___async_unwind = 0;
  HEAP32[i22 >> 2] = 231;
  i59 = i22 + 4 | 0;
  HEAP32[i59 >> 2] = i10;
  i60 = i22 + 8 | 0;
  HEAP32[i60 >> 2] = i11;
  i61 = i22 + 12 | 0;
  HEAP32[i61 >> 2] = i12;
  i62 = i22 + 16 | 0;
  HEAP32[i62 >> 2] = i13;
  i63 = i22 + 20 | 0;
  i64 = HEAP8[i9 >> 0] | 0;
  i65 = i64 & 1;
  i66 = i65 & 1;
  HEAP8[i63 >> 0] = i66;
  i67 = i22 + 24 | 0;
  HEAP32[i67 >> 2] = i14;
  i68 = i22 + 28 | 0;
  i69 = HEAP32[i8 >> 2] | 0;
  HEAP32[i68 >> 2] = i69;
  i70 = i22 + 32 | 0;
  HEAPF64[i70 >> 3] = d16;
  i71 = i22 + 40 | 0;
  HEAP32[i71 >> 2] = i17;
  i72 = i22 + 44 | 0;
  i73 = HEAP32[i6 >> 2] | 0;
  HEAP32[i72 >> 2] = i73;
  i74 = i22 + 48 | 0;
  i75 = HEAP32[i5 >> 2] | 0;
  HEAP32[i74 >> 2] = i75;
  i76 = i22 + 52 | 0;
  i77 = HEAP32[i4 >> 2] | 0;
  HEAP32[i76 >> 2] = i77;
  i78 = i22 + 56 | 0;
  i79 = HEAP32[i7 >> 2] | 0;
  HEAP32[i78 >> 2] = i79;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  i79 = _emscripten_realloc_async_context(64) | 0;
  i78 = FUNCTION_TABLE_idddd[i58 & 3](0.0, 0.0, d35, d16) | 0;
  if (___async) {
   HEAP32[i79 >> 2] = 230;
   i80 = i79 + 4 | 0;
   HEAP32[i80 >> 2] = i10;
   i81 = i79 + 8 | 0;
   HEAP32[i81 >> 2] = i11;
   i82 = i79 + 12 | 0;
   HEAP32[i82 >> 2] = i12;
   i83 = i79 + 16 | 0;
   HEAP32[i83 >> 2] = i13;
   i84 = i79 + 20 | 0;
   i85 = HEAP8[i9 >> 0] | 0;
   i86 = i85 & 1;
   i87 = i86 & 1;
   HEAP8[i84 >> 0] = i87;
   i88 = i79 + 24 | 0;
   HEAP32[i88 >> 2] = i14;
   i89 = i79 + 28 | 0;
   i90 = HEAP32[i8 >> 2] | 0;
   HEAP32[i89 >> 2] = i90;
   i91 = i79 + 32 | 0;
   HEAPF64[i91 >> 3] = d16;
   i92 = i79 + 40 | 0;
   HEAP32[i92 >> 2] = i17;
   i93 = i79 + 44 | 0;
   i94 = HEAP32[i6 >> 2] | 0;
   HEAP32[i93 >> 2] = i94;
   i95 = i79 + 48 | 0;
   i96 = HEAP32[i5 >> 2] | 0;
   HEAP32[i95 >> 2] = i96;
   i97 = i79 + 52 | 0;
   i98 = HEAP32[i4 >> 2] | 0;
   HEAP32[i97 >> 2] = i98;
   i99 = i79 + 56 | 0;
   i100 = HEAP32[i7 >> 2] | 0;
   HEAP32[i99 >> 2] = i100;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i78;
  ___async_unwind = 0;
  HEAP32[i79 >> 2] = 230;
  i80 = i79 + 4 | 0;
  HEAP32[i80 >> 2] = i10;
  i81 = i79 + 8 | 0;
  HEAP32[i81 >> 2] = i11;
  i82 = i79 + 12 | 0;
  HEAP32[i82 >> 2] = i12;
  i83 = i79 + 16 | 0;
  HEAP32[i83 >> 2] = i13;
  i84 = i79 + 20 | 0;
  i85 = HEAP8[i9 >> 0] | 0;
  i86 = i85 & 1;
  i87 = i86 & 1;
  HEAP8[i84 >> 0] = i87;
  i88 = i79 + 24 | 0;
  HEAP32[i88 >> 2] = i14;
  i89 = i79 + 28 | 0;
  i90 = HEAP32[i8 >> 2] | 0;
  HEAP32[i89 >> 2] = i90;
  i91 = i79 + 32 | 0;
  HEAPF64[i91 >> 3] = d16;
  i92 = i79 + 40 | 0;
  HEAP32[i92 >> 2] = i17;
  i93 = i79 + 44 | 0;
  i94 = HEAP32[i6 >> 2] | 0;
  HEAP32[i93 >> 2] = i94;
  i95 = i79 + 48 | 0;
  i96 = HEAP32[i5 >> 2] | 0;
  HEAP32[i95 >> 2] = i96;
  i97 = i79 + 52 | 0;
  i98 = HEAP32[i4 >> 2] | 0;
  HEAP32[i97 >> 2] = i98;
  i99 = i79 + 56 | 0;
  i100 = HEAP32[i7 >> 2] | 0;
  HEAP32[i99 >> 2] = i100;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
}
function _calcline__async_cb214(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, d16 = 0.0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, d35 = 0.0, d36 = 0.0, d37 = 0.0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 20 | 0;
 i4 = i2 + 16 | 0;
 i5 = i2 + 12 | 0;
 i6 = i2 + 8 | 0;
 i7 = i2 + 4 | 0;
 i8 = i2;
 i9 = i2 + 24 | 0;
 i10 = HEAP32[i1 + 4 >> 2] | 0;
 i11 = HEAP32[i1 + 8 >> 2] | 0;
 i12 = HEAP32[i1 + 12 >> 2] | 0;
 i13 = HEAP32[i1 + 16 >> 2] | 0;
 i14 = HEAP32[i1 + 24 >> 2] | 0;
 i15 = HEAP32[i1 + 28 >> 2] | 0;
 d16 = +HEAPF64[i1 + 32 >> 3];
 i17 = HEAP32[i1 + 40 >> 2] | 0;
 i18 = HEAP32[i1 + 44 >> 2] | 0;
 i19 = HEAP32[i1 + 48 >> 2] | 0;
 i20 = HEAP32[i1 + 52 >> 2] | 0;
 i21 = HEAP32[i1 + 56 >> 2] | 0;
 HEAP8[i9 >> 0] = HEAP8[i1 + 20 >> 0] & 1;
 HEAP32[i8 >> 2] = i15;
 HEAP32[i7 >> 2] = i18;
 HEAP32[i6 >> 2] = i19;
 HEAP32[i5 >> 2] = i20;
 HEAP32[i4 >> 2] = i21;
 HEAP32[i3 >> 2] = HEAP32[___async_retval >> 2];
 i21 = HEAP32[i3 >> 2] | 0;
 if ((i21 | 0) == 2147483647) {
  i22 = (HEAP32[71600] | 0) + 144 | 0;
 } else {
  if ((i21 | 0) < 0) {
   i20 = HEAP32[71600] | 0;
   i19 = HEAP32[i20 + 124 >> 2] | 0;
   i18 = i19 + -1 | 0;
   i23 = i19;
   i24 = i20;
   i25 = (Math_imul(((0 - i21 | 0) / (i18 | 0) | 0) + 1 | 0, i18) | 0) + i21 | 0;
  } else {
   i18 = HEAP32[71600] | 0;
   i23 = HEAP32[i18 + 124 >> 2] | 0;
   i24 = i18;
   i25 = i21;
  }
  i22 = i24 + (((i25 | 0) % (i23 + -1 | 0) | 0) + 1) + 144 | 0;
 }
 L10 : while (1) {
  HEAP8[HEAP32[i7 >> 2] >> 0] = HEAP8[i22 >> 0] | 0;
  i23 = HEAP32[i6 >> 2] | 0;
  i25 = 0;
  while (1) {
   i24 = (HEAP32[i5 >> 2] | 0) + 80 | 0;
   if (i24 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
    i26 = i23 + -2 | 0;
    i27 = (HEAP32[(HEAP32[i5 >> 2] | 0) + 72 >> 2] | 0) == 0 ? -1 : i25;
    i28 = i24;
    i29 = (HEAP32[i7 >> 2] | 0) + 2 | 0;
   } else {
    do {
     i24 = (HEAP32[i4 >> 2] | 0) + 1 | 0;
     if ((i24 | 0) == 2) {
      i30 = 43;
      break L10;
     }
     i21 = HEAP32[71600] | 0;
     HEAP32[i4 >> 2] = i24;
     i31 = HEAP32[i21 + 52 >> 2] | 0;
     i24 = HEAP32[i21 + 128 >> 2] | 0;
     HEAP32[i8 >> 2] = i31 + (i24 * 40 | 0);
    } while ((HEAP32[i4 >> 2] | 0) >= (i24 | 0));
    i24 = i31 + ((HEAP32[i4 >> 2] | 0) * 40 | 0) | 0;
    i21 = i17 + (HEAP32[i4 >> 2] | 0) | 0;
    HEAP8[i9 >> 0] = (HEAP32[i4 >> 2] | 0) == 0 & 1;
    i26 = 0;
    i27 = i14;
    i28 = i24;
    i29 = i21;
   }
   HEAP32[i5 >> 2] = i28;
   HEAP32[i7 >> 2] = i29;
   i25 = i27 + 2 | 0;
   if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2] | 0) == 0) {
    break;
   } else {
    i23 = i26;
   }
  }
  if ((i26 | 0) < 1) {
   i23 = (HEAP32[i5 >> 2] | 0) + 40 | 0;
   L24 : do {
    if (i23 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
     i21 = 1;
     i24 = HEAP32[i5 >> 2] | 0;
     i18 = i23;
     while (1) {
      i20 = i21 + 1 | 0;
      if ((HEAP32[i24 + 72 >> 2] | 0) == 0) {
       i32 = i21;
       i33 = i18;
       break L24;
      }
      i19 = i18 + 40 | 0;
      if (i19 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
       i15 = i18;
       i21 = i20;
       i18 = i19;
       i24 = i15;
      } else {
       i32 = i20;
       i33 = i19;
       break;
      }
     }
    } else {
     i32 = 1;
     i33 = i23;
    }
   } while (0);
   i34 = (i33 | 0) == (HEAP32[i8 >> 2] | 0) ? 2147483647 : i32;
  } else {
   i34 = i26;
  }
  HEAP32[i6 >> 2] = i34;
  if (!((i25 | 0) < (i14 | 0) ? (HEAP32[i6 >> 2] | 0) < (i14 | 0) : 0)) {
   break;
  }
  i23 = HEAP8[(HEAP32[i7 >> 2] | 0) + i12 >> 0] | 0;
  i24 = i22;
  i22 = (HEAP32[i7 >> 2] | 0) + i11 | 0;
  if (!(i23 << 24 >> 24 == (HEAP8[i22 >> 0] | 0))) {
   break;
  }
  if (!((HEAP8[(HEAP32[i7 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) - i13) >> 0] | 0) == i23 << 24 >> 24)) {
   break;
  }
  if (!((HEAP8[(HEAP32[i7 >> 2] | 0) + (i12 - i25) >> 0] | 0) == i23 << 24 >> 24)) {
   break;
  }
  if (!(i23 << 24 >> 24 == (HEAP8[(HEAP32[i7 >> 2] | 0) + (i11 - i25) >> 0] | 0))) {
   break;
  }
  if (!(i23 << 24 >> 24 == (HEAP8[(HEAP32[i7 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) + i11) >> 0] | 0))) {
   break;
  }
  if (HEAP8[i9 >> 0] & 1) {
   i22 = i22;
   continue;
  }
  if ((HEAP32[(HEAP32[i5 >> 2] | 0) + -8 >> 2] | 0) == 0 ? !((HEAP8[(HEAP32[i7 >> 2] | 0) + -1 >> 0] | 0) == i23 << 24 >> 24) : 0) {
   break;
  }
  if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 72 >> 2] | 0) != 0) {
   i22 = i22;
   continue;
  }
  if (!((HEAP8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0) == i23 << 24 >> 24)) {
   break;
  }
 }
 if ((i30 | 0) == 43) {
  HEAP32[i10 + 20 >> 2] = 2;
  HEAP32[i10 + 32 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 d35 = +HEAPF64[HEAP32[i5 >> 2] >> 3];
 i30 = HEAP32[71600] | 0;
 i22 = HEAP32[i30 + 60 >> 2] | 0;
 if ((HEAP32[i30 + 92 >> 2] | 0) == 0) {
  i34 = HEAP32[i22 + 4 >> 2] | 0;
  d36 = +HEAPF64[i30 >> 3];
  d37 = +HEAPF64[i30 + 8 >> 3];
  i30 = _emscripten_realloc_async_context(64) | 0;
  i26 = FUNCTION_TABLE_idddd[i34 & 3](d35, d16, d36, d37) | 0;
  if (___async) {
   HEAP32[i30 >> 2] = 232;
   i38 = i30 + 4 | 0;
   HEAP32[i38 >> 2] = i10;
   i39 = i30 + 8 | 0;
   HEAP32[i39 >> 2] = i11;
   i40 = i30 + 12 | 0;
   HEAP32[i40 >> 2] = i12;
   i41 = i30 + 16 | 0;
   HEAP32[i41 >> 2] = i13;
   i42 = i30 + 20 | 0;
   i43 = HEAP8[i9 >> 0] | 0;
   i44 = i43 & 1;
   i45 = i44 & 1;
   HEAP8[i42 >> 0] = i45;
   i46 = i30 + 24 | 0;
   HEAP32[i46 >> 2] = i14;
   i47 = i30 + 28 | 0;
   i48 = HEAP32[i8 >> 2] | 0;
   HEAP32[i47 >> 2] = i48;
   i49 = i30 + 32 | 0;
   HEAPF64[i49 >> 3] = d16;
   i50 = i30 + 40 | 0;
   HEAP32[i50 >> 2] = i17;
   i51 = i30 + 44 | 0;
   i52 = HEAP32[i4 >> 2] | 0;
   HEAP32[i51 >> 2] = i52;
   i53 = i30 + 48 | 0;
   i54 = HEAP32[i7 >> 2] | 0;
   HEAP32[i53 >> 2] = i54;
   i55 = i30 + 52 | 0;
   i56 = HEAP32[i6 >> 2] | 0;
   HEAP32[i55 >> 2] = i56;
   i57 = i30 + 56 | 0;
   i58 = HEAP32[i5 >> 2] | 0;
   HEAP32[i57 >> 2] = i58;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i26;
  ___async_unwind = 0;
  HEAP32[i30 >> 2] = 232;
  i38 = i30 + 4 | 0;
  HEAP32[i38 >> 2] = i10;
  i39 = i30 + 8 | 0;
  HEAP32[i39 >> 2] = i11;
  i40 = i30 + 12 | 0;
  HEAP32[i40 >> 2] = i12;
  i41 = i30 + 16 | 0;
  HEAP32[i41 >> 2] = i13;
  i42 = i30 + 20 | 0;
  i43 = HEAP8[i9 >> 0] | 0;
  i44 = i43 & 1;
  i45 = i44 & 1;
  HEAP8[i42 >> 0] = i45;
  i46 = i30 + 24 | 0;
  HEAP32[i46 >> 2] = i14;
  i47 = i30 + 28 | 0;
  i48 = HEAP32[i8 >> 2] | 0;
  HEAP32[i47 >> 2] = i48;
  i49 = i30 + 32 | 0;
  HEAPF64[i49 >> 3] = d16;
  i50 = i30 + 40 | 0;
  HEAP32[i50 >> 2] = i17;
  i51 = i30 + 44 | 0;
  i52 = HEAP32[i4 >> 2] | 0;
  HEAP32[i51 >> 2] = i52;
  i53 = i30 + 48 | 0;
  i54 = HEAP32[i7 >> 2] | 0;
  HEAP32[i53 >> 2] = i54;
  i55 = i30 + 52 | 0;
  i56 = HEAP32[i6 >> 2] | 0;
  HEAP32[i55 >> 2] = i56;
  i57 = i30 + 56 | 0;
  i58 = HEAP32[i5 >> 2] | 0;
  HEAP32[i57 >> 2] = i58;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i58 = HEAP32[i22 + 4 >> 2] | 0;
 if ((HEAP32[i22 + 292 >> 2] | 0) == 0) {
  i22 = _emscripten_realloc_async_context(64) | 0;
  HEAP32[i3 >> 2] = FUNCTION_TABLE_idddd[i58 & 3](d35, d16, d35, d16) | 0;
  if (___async) {
   HEAP32[i22 >> 2] = 231;
   i59 = i22 + 4 | 0;
   HEAP32[i59 >> 2] = i10;
   i60 = i22 + 8 | 0;
   HEAP32[i60 >> 2] = i11;
   i61 = i22 + 12 | 0;
   HEAP32[i61 >> 2] = i12;
   i62 = i22 + 16 | 0;
   HEAP32[i62 >> 2] = i13;
   i63 = i22 + 20 | 0;
   i64 = HEAP8[i9 >> 0] | 0;
   i65 = i64 & 1;
   i66 = i65 & 1;
   HEAP8[i63 >> 0] = i66;
   i67 = i22 + 24 | 0;
   HEAP32[i67 >> 2] = i14;
   i68 = i22 + 28 | 0;
   i69 = HEAP32[i8 >> 2] | 0;
   HEAP32[i68 >> 2] = i69;
   i70 = i22 + 32 | 0;
   HEAPF64[i70 >> 3] = d16;
   i71 = i22 + 40 | 0;
   HEAP32[i71 >> 2] = i17;
   i72 = i22 + 44 | 0;
   i73 = HEAP32[i7 >> 2] | 0;
   HEAP32[i72 >> 2] = i73;
   i74 = i22 + 48 | 0;
   i75 = HEAP32[i6 >> 2] | 0;
   HEAP32[i74 >> 2] = i75;
   i76 = i22 + 52 | 0;
   i77 = HEAP32[i5 >> 2] | 0;
   HEAP32[i76 >> 2] = i77;
   i78 = i22 + 56 | 0;
   i79 = HEAP32[i4 >> 2] | 0;
   HEAP32[i78 >> 2] = i79;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = HEAP32[i3 >> 2];
  ___async_unwind = 0;
  HEAP32[i22 >> 2] = 231;
  i59 = i22 + 4 | 0;
  HEAP32[i59 >> 2] = i10;
  i60 = i22 + 8 | 0;
  HEAP32[i60 >> 2] = i11;
  i61 = i22 + 12 | 0;
  HEAP32[i61 >> 2] = i12;
  i62 = i22 + 16 | 0;
  HEAP32[i62 >> 2] = i13;
  i63 = i22 + 20 | 0;
  i64 = HEAP8[i9 >> 0] | 0;
  i65 = i64 & 1;
  i66 = i65 & 1;
  HEAP8[i63 >> 0] = i66;
  i67 = i22 + 24 | 0;
  HEAP32[i67 >> 2] = i14;
  i68 = i22 + 28 | 0;
  i69 = HEAP32[i8 >> 2] | 0;
  HEAP32[i68 >> 2] = i69;
  i70 = i22 + 32 | 0;
  HEAPF64[i70 >> 3] = d16;
  i71 = i22 + 40 | 0;
  HEAP32[i71 >> 2] = i17;
  i72 = i22 + 44 | 0;
  i73 = HEAP32[i7 >> 2] | 0;
  HEAP32[i72 >> 2] = i73;
  i74 = i22 + 48 | 0;
  i75 = HEAP32[i6 >> 2] | 0;
  HEAP32[i74 >> 2] = i75;
  i76 = i22 + 52 | 0;
  i77 = HEAP32[i5 >> 2] | 0;
  HEAP32[i76 >> 2] = i77;
  i78 = i22 + 56 | 0;
  i79 = HEAP32[i4 >> 2] | 0;
  HEAP32[i78 >> 2] = i79;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  i79 = _emscripten_realloc_async_context(64) | 0;
  i78 = FUNCTION_TABLE_idddd[i58 & 3](0.0, 0.0, d35, d16) | 0;
  if (___async) {
   HEAP32[i79 >> 2] = 230;
   i80 = i79 + 4 | 0;
   HEAP32[i80 >> 2] = i10;
   i81 = i79 + 8 | 0;
   HEAP32[i81 >> 2] = i11;
   i82 = i79 + 12 | 0;
   HEAP32[i82 >> 2] = i12;
   i83 = i79 + 16 | 0;
   HEAP32[i83 >> 2] = i13;
   i84 = i79 + 20 | 0;
   i85 = HEAP8[i9 >> 0] | 0;
   i86 = i85 & 1;
   i87 = i86 & 1;
   HEAP8[i84 >> 0] = i87;
   i88 = i79 + 24 | 0;
   HEAP32[i88 >> 2] = i14;
   i89 = i79 + 28 | 0;
   i90 = HEAP32[i8 >> 2] | 0;
   HEAP32[i89 >> 2] = i90;
   i91 = i79 + 32 | 0;
   HEAPF64[i91 >> 3] = d16;
   i92 = i79 + 40 | 0;
   HEAP32[i92 >> 2] = i17;
   i93 = i79 + 44 | 0;
   i94 = HEAP32[i7 >> 2] | 0;
   HEAP32[i93 >> 2] = i94;
   i95 = i79 + 48 | 0;
   i96 = HEAP32[i6 >> 2] | 0;
   HEAP32[i95 >> 2] = i96;
   i97 = i79 + 52 | 0;
   i98 = HEAP32[i5 >> 2] | 0;
   HEAP32[i97 >> 2] = i98;
   i99 = i79 + 56 | 0;
   i100 = HEAP32[i4 >> 2] | 0;
   HEAP32[i99 >> 2] = i100;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i78;
  ___async_unwind = 0;
  HEAP32[i79 >> 2] = 230;
  i80 = i79 + 4 | 0;
  HEAP32[i80 >> 2] = i10;
  i81 = i79 + 8 | 0;
  HEAP32[i81 >> 2] = i11;
  i82 = i79 + 12 | 0;
  HEAP32[i82 >> 2] = i12;
  i83 = i79 + 16 | 0;
  HEAP32[i83 >> 2] = i13;
  i84 = i79 + 20 | 0;
  i85 = HEAP8[i9 >> 0] | 0;
  i86 = i85 & 1;
  i87 = i86 & 1;
  HEAP8[i84 >> 0] = i87;
  i88 = i79 + 24 | 0;
  HEAP32[i88 >> 2] = i14;
  i89 = i79 + 28 | 0;
  i90 = HEAP32[i8 >> 2] | 0;
  HEAP32[i89 >> 2] = i90;
  i91 = i79 + 32 | 0;
  HEAPF64[i91 >> 3] = d16;
  i92 = i79 + 40 | 0;
  HEAP32[i92 >> 2] = i17;
  i93 = i79 + 44 | 0;
  i94 = HEAP32[i7 >> 2] | 0;
  HEAP32[i93 >> 2] = i94;
  i95 = i79 + 48 | 0;
  i96 = HEAP32[i6 >> 2] | 0;
  HEAP32[i95 >> 2] = i96;
  i97 = i79 + 52 | 0;
  i98 = HEAP32[i5 >> 2] | 0;
  HEAP32[i97 >> 2] = i98;
  i99 = i79 + 56 | 0;
  i100 = HEAP32[i4 >> 2] | 0;
  HEAP32[i99 >> 2] = i100;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
}
function _calcline__async_cb213(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, d16 = 0.0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, d35 = 0.0, d36 = 0.0, d37 = 0.0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 20 | 0;
 i4 = i2 + 16 | 0;
 i5 = i2 + 12 | 0;
 i6 = i2 + 8 | 0;
 i7 = i2 + 4 | 0;
 i8 = i2;
 i9 = i2 + 24 | 0;
 i10 = HEAP32[i1 + 4 >> 2] | 0;
 i11 = HEAP32[i1 + 8 >> 2] | 0;
 i12 = HEAP32[i1 + 12 >> 2] | 0;
 i13 = HEAP32[i1 + 16 >> 2] | 0;
 i14 = HEAP32[i1 + 24 >> 2] | 0;
 i15 = HEAP32[i1 + 28 >> 2] | 0;
 d16 = +HEAPF64[i1 + 32 >> 3];
 i17 = HEAP32[i1 + 40 >> 2] | 0;
 i18 = HEAP32[i1 + 44 >> 2] | 0;
 i19 = HEAP32[i1 + 48 >> 2] | 0;
 i20 = HEAP32[i1 + 52 >> 2] | 0;
 i21 = HEAP32[i1 + 56 >> 2] | 0;
 HEAP8[i9 >> 0] = HEAP8[i1 + 20 >> 0] & 1;
 HEAP32[i8 >> 2] = i15;
 HEAP32[i7 >> 2] = i18;
 HEAP32[i6 >> 2] = i19;
 HEAP32[i5 >> 2] = i20;
 HEAP32[i4 >> 2] = i21;
 HEAP32[i3 >> 2] = HEAP32[___async_retval >> 2];
 i21 = HEAP32[i3 >> 2] | 0;
 if ((i21 | 0) == 2147483647) {
  i22 = (HEAP32[71600] | 0) + 144 | 0;
 } else {
  if ((i21 | 0) < 0) {
   i20 = HEAP32[71600] | 0;
   i19 = HEAP32[i20 + 124 >> 2] | 0;
   i18 = i19 + -1 | 0;
   i23 = i19;
   i24 = i20;
   i25 = (Math_imul(((0 - i21 | 0) / (i18 | 0) | 0) + 1 | 0, i18) | 0) + i21 | 0;
  } else {
   i18 = HEAP32[71600] | 0;
   i23 = HEAP32[i18 + 124 >> 2] | 0;
   i24 = i18;
   i25 = i21;
  }
  i22 = i24 + (((i25 | 0) % (i23 + -1 | 0) | 0) + 1) + 144 | 0;
 }
 L10 : while (1) {
  HEAP8[HEAP32[i7 >> 2] >> 0] = HEAP8[i22 >> 0] | 0;
  i23 = HEAP32[i6 >> 2] | 0;
  i25 = 0;
  while (1) {
   i24 = (HEAP32[i5 >> 2] | 0) + 80 | 0;
   if (i24 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
    i26 = i23 + -2 | 0;
    i27 = (HEAP32[(HEAP32[i5 >> 2] | 0) + 72 >> 2] | 0) == 0 ? -1 : i25;
    i28 = i24;
    i29 = (HEAP32[i7 >> 2] | 0) + 2 | 0;
   } else {
    do {
     i24 = (HEAP32[i4 >> 2] | 0) + 1 | 0;
     if ((i24 | 0) == 2) {
      i30 = 43;
      break L10;
     }
     i21 = HEAP32[71600] | 0;
     HEAP32[i4 >> 2] = i24;
     i31 = HEAP32[i21 + 52 >> 2] | 0;
     i24 = HEAP32[i21 + 128 >> 2] | 0;
     HEAP32[i8 >> 2] = i31 + (i24 * 40 | 0);
    } while ((HEAP32[i4 >> 2] | 0) >= (i24 | 0));
    i24 = i31 + ((HEAP32[i4 >> 2] | 0) * 40 | 0) | 0;
    i21 = i17 + (HEAP32[i4 >> 2] | 0) | 0;
    HEAP8[i9 >> 0] = (HEAP32[i4 >> 2] | 0) == 0 & 1;
    i26 = 0;
    i27 = i14;
    i28 = i24;
    i29 = i21;
   }
   HEAP32[i5 >> 2] = i28;
   HEAP32[i7 >> 2] = i29;
   i25 = i27 + 2 | 0;
   if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2] | 0) == 0) {
    break;
   } else {
    i23 = i26;
   }
  }
  if ((i26 | 0) < 1) {
   i23 = (HEAP32[i5 >> 2] | 0) + 40 | 0;
   L24 : do {
    if (i23 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
     i21 = 1;
     i24 = HEAP32[i5 >> 2] | 0;
     i18 = i23;
     while (1) {
      i20 = i21 + 1 | 0;
      if ((HEAP32[i24 + 72 >> 2] | 0) == 0) {
       i32 = i21;
       i33 = i18;
       break L24;
      }
      i19 = i18 + 40 | 0;
      if (i19 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
       i15 = i18;
       i21 = i20;
       i18 = i19;
       i24 = i15;
      } else {
       i32 = i20;
       i33 = i19;
       break;
      }
     }
    } else {
     i32 = 1;
     i33 = i23;
    }
   } while (0);
   i34 = (i33 | 0) == (HEAP32[i8 >> 2] | 0) ? 2147483647 : i32;
  } else {
   i34 = i26;
  }
  HEAP32[i6 >> 2] = i34;
  if (!((i25 | 0) < (i14 | 0) ? (HEAP32[i6 >> 2] | 0) < (i14 | 0) : 0)) {
   break;
  }
  i23 = HEAP8[(HEAP32[i7 >> 2] | 0) + i12 >> 0] | 0;
  i24 = i22;
  i22 = (HEAP32[i7 >> 2] | 0) + i11 | 0;
  if (!(i23 << 24 >> 24 == (HEAP8[i22 >> 0] | 0))) {
   break;
  }
  if (!((HEAP8[(HEAP32[i7 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) - i13) >> 0] | 0) == i23 << 24 >> 24)) {
   break;
  }
  if (!((HEAP8[(HEAP32[i7 >> 2] | 0) + (i12 - i25) >> 0] | 0) == i23 << 24 >> 24)) {
   break;
  }
  if (!(i23 << 24 >> 24 == (HEAP8[(HEAP32[i7 >> 2] | 0) + (i11 - i25) >> 0] | 0))) {
   break;
  }
  if (!(i23 << 24 >> 24 == (HEAP8[(HEAP32[i7 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) + i11) >> 0] | 0))) {
   break;
  }
  if (HEAP8[i9 >> 0] & 1) {
   i22 = i22;
   continue;
  }
  if ((HEAP32[(HEAP32[i5 >> 2] | 0) + -8 >> 2] | 0) == 0 ? !((HEAP8[(HEAP32[i7 >> 2] | 0) + -1 >> 0] | 0) == i23 << 24 >> 24) : 0) {
   break;
  }
  if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 72 >> 2] | 0) != 0) {
   i22 = i22;
   continue;
  }
  if (!((HEAP8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0) == i23 << 24 >> 24)) {
   break;
  }
 }
 if ((i30 | 0) == 43) {
  HEAP32[i10 + 20 >> 2] = 2;
  HEAP32[i10 + 32 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 d35 = +HEAPF64[HEAP32[i5 >> 2] >> 3];
 i30 = HEAP32[71600] | 0;
 i22 = HEAP32[i30 + 60 >> 2] | 0;
 if ((HEAP32[i30 + 92 >> 2] | 0) == 0) {
  i34 = HEAP32[i22 + 4 >> 2] | 0;
  d36 = +HEAPF64[i30 >> 3];
  d37 = +HEAPF64[i30 + 8 >> 3];
  i30 = _emscripten_realloc_async_context(64) | 0;
  i26 = FUNCTION_TABLE_idddd[i34 & 3](d35, d16, d36, d37) | 0;
  if (___async) {
   HEAP32[i30 >> 2] = 232;
   i38 = i30 + 4 | 0;
   HEAP32[i38 >> 2] = i10;
   i39 = i30 + 8 | 0;
   HEAP32[i39 >> 2] = i11;
   i40 = i30 + 12 | 0;
   HEAP32[i40 >> 2] = i12;
   i41 = i30 + 16 | 0;
   HEAP32[i41 >> 2] = i13;
   i42 = i30 + 20 | 0;
   i43 = HEAP8[i9 >> 0] | 0;
   i44 = i43 & 1;
   i45 = i44 & 1;
   HEAP8[i42 >> 0] = i45;
   i46 = i30 + 24 | 0;
   HEAP32[i46 >> 2] = i14;
   i47 = i30 + 28 | 0;
   i48 = HEAP32[i8 >> 2] | 0;
   HEAP32[i47 >> 2] = i48;
   i49 = i30 + 32 | 0;
   HEAPF64[i49 >> 3] = d16;
   i50 = i30 + 40 | 0;
   HEAP32[i50 >> 2] = i17;
   i51 = i30 + 44 | 0;
   i52 = HEAP32[i4 >> 2] | 0;
   HEAP32[i51 >> 2] = i52;
   i53 = i30 + 48 | 0;
   i54 = HEAP32[i7 >> 2] | 0;
   HEAP32[i53 >> 2] = i54;
   i55 = i30 + 52 | 0;
   i56 = HEAP32[i6 >> 2] | 0;
   HEAP32[i55 >> 2] = i56;
   i57 = i30 + 56 | 0;
   i58 = HEAP32[i5 >> 2] | 0;
   HEAP32[i57 >> 2] = i58;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i26;
  ___async_unwind = 0;
  HEAP32[i30 >> 2] = 232;
  i38 = i30 + 4 | 0;
  HEAP32[i38 >> 2] = i10;
  i39 = i30 + 8 | 0;
  HEAP32[i39 >> 2] = i11;
  i40 = i30 + 12 | 0;
  HEAP32[i40 >> 2] = i12;
  i41 = i30 + 16 | 0;
  HEAP32[i41 >> 2] = i13;
  i42 = i30 + 20 | 0;
  i43 = HEAP8[i9 >> 0] | 0;
  i44 = i43 & 1;
  i45 = i44 & 1;
  HEAP8[i42 >> 0] = i45;
  i46 = i30 + 24 | 0;
  HEAP32[i46 >> 2] = i14;
  i47 = i30 + 28 | 0;
  i48 = HEAP32[i8 >> 2] | 0;
  HEAP32[i47 >> 2] = i48;
  i49 = i30 + 32 | 0;
  HEAPF64[i49 >> 3] = d16;
  i50 = i30 + 40 | 0;
  HEAP32[i50 >> 2] = i17;
  i51 = i30 + 44 | 0;
  i52 = HEAP32[i4 >> 2] | 0;
  HEAP32[i51 >> 2] = i52;
  i53 = i30 + 48 | 0;
  i54 = HEAP32[i7 >> 2] | 0;
  HEAP32[i53 >> 2] = i54;
  i55 = i30 + 52 | 0;
  i56 = HEAP32[i6 >> 2] | 0;
  HEAP32[i55 >> 2] = i56;
  i57 = i30 + 56 | 0;
  i58 = HEAP32[i5 >> 2] | 0;
  HEAP32[i57 >> 2] = i58;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i58 = HEAP32[i22 + 4 >> 2] | 0;
 if ((HEAP32[i22 + 292 >> 2] | 0) == 0) {
  i22 = _emscripten_realloc_async_context(64) | 0;
  i57 = FUNCTION_TABLE_idddd[i58 & 3](d35, d16, d35, d16) | 0;
  if (___async) {
   HEAP32[i22 >> 2] = 231;
   i59 = i22 + 4 | 0;
   HEAP32[i59 >> 2] = i10;
   i60 = i22 + 8 | 0;
   HEAP32[i60 >> 2] = i11;
   i61 = i22 + 12 | 0;
   HEAP32[i61 >> 2] = i12;
   i62 = i22 + 16 | 0;
   HEAP32[i62 >> 2] = i13;
   i63 = i22 + 20 | 0;
   i64 = HEAP8[i9 >> 0] | 0;
   i65 = i64 & 1;
   i66 = i65 & 1;
   HEAP8[i63 >> 0] = i66;
   i67 = i22 + 24 | 0;
   HEAP32[i67 >> 2] = i14;
   i68 = i22 + 28 | 0;
   i69 = HEAP32[i8 >> 2] | 0;
   HEAP32[i68 >> 2] = i69;
   i70 = i22 + 32 | 0;
   HEAPF64[i70 >> 3] = d16;
   i71 = i22 + 40 | 0;
   HEAP32[i71 >> 2] = i17;
   i72 = i22 + 44 | 0;
   i73 = HEAP32[i7 >> 2] | 0;
   HEAP32[i72 >> 2] = i73;
   i74 = i22 + 48 | 0;
   i75 = HEAP32[i6 >> 2] | 0;
   HEAP32[i74 >> 2] = i75;
   i76 = i22 + 52 | 0;
   i77 = HEAP32[i5 >> 2] | 0;
   HEAP32[i76 >> 2] = i77;
   i78 = i22 + 56 | 0;
   i79 = HEAP32[i4 >> 2] | 0;
   HEAP32[i78 >> 2] = i79;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i57;
  ___async_unwind = 0;
  HEAP32[i22 >> 2] = 231;
  i59 = i22 + 4 | 0;
  HEAP32[i59 >> 2] = i10;
  i60 = i22 + 8 | 0;
  HEAP32[i60 >> 2] = i11;
  i61 = i22 + 12 | 0;
  HEAP32[i61 >> 2] = i12;
  i62 = i22 + 16 | 0;
  HEAP32[i62 >> 2] = i13;
  i63 = i22 + 20 | 0;
  i64 = HEAP8[i9 >> 0] | 0;
  i65 = i64 & 1;
  i66 = i65 & 1;
  HEAP8[i63 >> 0] = i66;
  i67 = i22 + 24 | 0;
  HEAP32[i67 >> 2] = i14;
  i68 = i22 + 28 | 0;
  i69 = HEAP32[i8 >> 2] | 0;
  HEAP32[i68 >> 2] = i69;
  i70 = i22 + 32 | 0;
  HEAPF64[i70 >> 3] = d16;
  i71 = i22 + 40 | 0;
  HEAP32[i71 >> 2] = i17;
  i72 = i22 + 44 | 0;
  i73 = HEAP32[i7 >> 2] | 0;
  HEAP32[i72 >> 2] = i73;
  i74 = i22 + 48 | 0;
  i75 = HEAP32[i6 >> 2] | 0;
  HEAP32[i74 >> 2] = i75;
  i76 = i22 + 52 | 0;
  i77 = HEAP32[i5 >> 2] | 0;
  HEAP32[i76 >> 2] = i77;
  i78 = i22 + 56 | 0;
  i79 = HEAP32[i4 >> 2] | 0;
  HEAP32[i78 >> 2] = i79;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  i79 = _emscripten_realloc_async_context(64) | 0;
  HEAP32[i3 >> 2] = FUNCTION_TABLE_idddd[i58 & 3](0.0, 0.0, d35, d16) | 0;
  if (___async) {
   HEAP32[i79 >> 2] = 230;
   i80 = i79 + 4 | 0;
   HEAP32[i80 >> 2] = i10;
   i81 = i79 + 8 | 0;
   HEAP32[i81 >> 2] = i11;
   i82 = i79 + 12 | 0;
   HEAP32[i82 >> 2] = i12;
   i83 = i79 + 16 | 0;
   HEAP32[i83 >> 2] = i13;
   i84 = i79 + 20 | 0;
   i85 = HEAP8[i9 >> 0] | 0;
   i86 = i85 & 1;
   i87 = i86 & 1;
   HEAP8[i84 >> 0] = i87;
   i88 = i79 + 24 | 0;
   HEAP32[i88 >> 2] = i14;
   i89 = i79 + 28 | 0;
   i90 = HEAP32[i8 >> 2] | 0;
   HEAP32[i89 >> 2] = i90;
   i91 = i79 + 32 | 0;
   HEAPF64[i91 >> 3] = d16;
   i92 = i79 + 40 | 0;
   HEAP32[i92 >> 2] = i17;
   i93 = i79 + 44 | 0;
   i94 = HEAP32[i7 >> 2] | 0;
   HEAP32[i93 >> 2] = i94;
   i95 = i79 + 48 | 0;
   i96 = HEAP32[i6 >> 2] | 0;
   HEAP32[i95 >> 2] = i96;
   i97 = i79 + 52 | 0;
   i98 = HEAP32[i5 >> 2] | 0;
   HEAP32[i97 >> 2] = i98;
   i99 = i79 + 56 | 0;
   i100 = HEAP32[i4 >> 2] | 0;
   HEAP32[i99 >> 2] = i100;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = HEAP32[i3 >> 2];
  ___async_unwind = 0;
  HEAP32[i79 >> 2] = 230;
  i80 = i79 + 4 | 0;
  HEAP32[i80 >> 2] = i10;
  i81 = i79 + 8 | 0;
  HEAP32[i81 >> 2] = i11;
  i82 = i79 + 12 | 0;
  HEAP32[i82 >> 2] = i12;
  i83 = i79 + 16 | 0;
  HEAP32[i83 >> 2] = i13;
  i84 = i79 + 20 | 0;
  i85 = HEAP8[i9 >> 0] | 0;
  i86 = i85 & 1;
  i87 = i86 & 1;
  HEAP8[i84 >> 0] = i87;
  i88 = i79 + 24 | 0;
  HEAP32[i88 >> 2] = i14;
  i89 = i79 + 28 | 0;
  i90 = HEAP32[i8 >> 2] | 0;
  HEAP32[i89 >> 2] = i90;
  i91 = i79 + 32 | 0;
  HEAPF64[i91 >> 3] = d16;
  i92 = i79 + 40 | 0;
  HEAP32[i92 >> 2] = i17;
  i93 = i79 + 44 | 0;
  i94 = HEAP32[i7 >> 2] | 0;
  HEAP32[i93 >> 2] = i94;
  i95 = i79 + 48 | 0;
  i96 = HEAP32[i6 >> 2] | 0;
  HEAP32[i95 >> 2] = i96;
  i97 = i79 + 52 | 0;
  i98 = HEAP32[i5 >> 2] | 0;
  HEAP32[i97 >> 2] = i98;
  i99 = i79 + 56 | 0;
  i100 = HEAP32[i4 >> 2] | 0;
  HEAP32[i99 >> 2] = i100;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
}
function _aa_flush(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i3 = i2;
 i4 = HEAP32[i1 >> 2] | 0;
 do {
  if (((((HEAP32[i4 + 24 >> 2] | 0) != 0 ? (i5 = HEAP32[i1 + 152 >> 2] | 0, i6 = HEAP32[i1 + 156 >> 2] | 0, i7 = i1 + 208 | 0, i8 = HEAP32[i7 >> 2] | 0, (i6 | i5 | 0) >= 0) : 0) ? (i9 = i1 + 56 | 0, i10 = HEAP32[i9 >> 2] | 0, (i10 | 0) >= 0) : 0) ? (i11 = HEAP32[i1 + 60 >> 2] | 0, (i11 | 0) >= 0) : 0) ? (i12 = (i10 | 0) > (i5 | 0) ? i5 : i10, (((i11 | 0) > (i6 | 0) ? i6 : i11) | 0) > 0) : 0) {
   i5 = (i12 | 0) > 0;
   i13 = i1 + 184 | 0;
   i14 = i1 + 188 | 0;
   i15 = i1 + 168 | 0;
   i16 = (i8 | 0) == 0;
   i8 = i1 + 8 | 0;
   i17 = i1 + 164 | 0;
   i18 = ~i11;
   i11 = ~i6;
   i6 = ~((i18 | 0) > (i11 | 0) ? i18 : i11);
   i11 = i4;
   i18 = i10;
   i10 = 0;
   i19 = 0;
   L7 : while (1) {
    i20 = HEAP32[i11 + 28 >> 2] | 0;
    i21 = _emscripten_alloc_async_context(76) | 0;
    HEAP32[___async_cur_frame + 4 >> 2] = i2;
    FUNCTION_TABLE_viii[i20 & 3](i1, 0, i19);
    if (___async) {
     i22 = 8;
     break;
    }
    _emscripten_free_async_context(i21 | 0);
    if (i5) {
     i20 = i10;
     i23 = Math_imul(i19, i18) | 0;
     i24 = 0;
     while (1) {
      i25 = HEAP32[i15 >> 2] | 0;
      i26 = HEAP8[i25 + i23 >> 0] | 0;
      i27 = i26 & 255;
      L14 : do {
       if ((i24 | 0) < (i12 | 0)) {
        i28 = HEAP32[i17 >> 2] | 0;
        i29 = 0;
        i30 = i23;
        i31 = i24;
        while (1) {
         HEAP8[i3 + i29 >> 0] = HEAP8[i28 + i30 >> 0] | 0;
         i32 = i30 + 1 | 0;
         i33 = i29 + 1 | 0;
         i34 = i31 + 1 | 0;
         if (!((i33 | 0) < 79 & (i34 | 0) < (i12 | 0))) {
          i35 = i33;
          i36 = i32;
          i37 = i34;
          break L14;
         }
         if ((HEAP8[i25 + i32 >> 0] | 0) == i26 << 24 >> 24) {
          i29 = i33;
          i30 = i32;
          i31 = i34;
         } else {
          i35 = i33;
          i36 = i32;
          i37 = i34;
          break;
         }
        }
       } else {
        i35 = 0;
        i36 = i23;
        i37 = i24;
       }
      } while (0);
      HEAP8[i3 + i35 >> 0] = 0;
      if (!((i20 | 0) != 0 | i16)) {
       i26 = HEAP32[i8 >> 2] | 0;
       if ((i26 | 0) != 0 ? (HEAP32[i26 + 8 >> 2] & 8 | 0) != 0 : 0) {
        if ((HEAP32[i7 >> 2] | 0) != 0 ? (HEAP32[i7 >> 2] = 0, i25 = HEAP32[i26 + 24 >> 2] | 0, (i25 | 0) != 0) : 0) {
         i38 = _emscripten_alloc_async_context(80) | 0;
         HEAP32[___async_cur_frame + 4 >> 2] = i2;
         FUNCTION_TABLE_vii[i25 & 3](i1, 0);
         if (___async) {
          i22 = 21;
          break L7;
         }
         _emscripten_free_async_context(i38 | 0);
         i39 = 1;
        } else {
         i39 = 1;
        }
       } else {
        i39 = 0;
       }
      } else {
       i39 = i20;
      }
      i25 = HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] | 0;
      i40 = _emscripten_alloc_async_context(80) | 0;
      HEAP32[___async_cur_frame + 4 >> 2] = i2;
      FUNCTION_TABLE_vii[i25 & 3](i1, i27);
      if (___async) {
       i22 = 24;
       break L7;
      }
      _emscripten_free_async_context(i40 | 0);
      i25 = HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] | 0;
      i41 = _emscripten_alloc_async_context(80) | 0;
      HEAP32[___async_cur_frame + 4 >> 2] = i2;
      FUNCTION_TABLE_vii[i25 & 3](i1, i3);
      if (___async) {
       i22 = 26;
       break L7;
      }
      _emscripten_free_async_context(i41 | 0);
      if ((i37 | 0) < (i12 | 0)) {
       i20 = i39;
       i23 = i36;
       i24 = i37;
      } else {
       i42 = i39;
       break;
      }
     }
    } else {
     i42 = i10;
    }
    i24 = HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] | 0;
    i23 = HEAP32[i13 >> 2] | 0;
    i20 = HEAP32[i14 >> 2] | 0;
    i43 = _emscripten_alloc_async_context(72) | 0;
    HEAP32[___async_cur_frame + 4 >> 2] = i2;
    FUNCTION_TABLE_viii[i24 & 3](i1, i23, i20);
    if (___async) {
     i22 = 29;
     break;
    }
    _emscripten_free_async_context(i43 | 0);
    i20 = i19 + 1 | 0;
    if ((i20 | 0) == (i6 | 0)) {
     i22 = 32;
     break;
    }
    i11 = HEAP32[i1 >> 2] | 0;
    i18 = HEAP32[i9 >> 2] | 0;
    i10 = i42;
    i19 = i20;
   }
   if ((i22 | 0) == 8) {
    HEAP32[i21 >> 2] = 271;
    HEAP32[i21 + 4 >> 2] = i1;
    HEAP32[i21 + 8 >> 2] = i7;
    HEAP32[i21 + 12 >> 2] = i19;
    HEAP32[i21 + 16 >> 2] = i6;
    HEAP32[i21 + 20 >> 2] = i10;
    HEAP32[i21 + 24 >> 2] = i1;
    HEAP32[i21 + 28 >> 2] = i13;
    HEAP32[i21 + 32 >> 2] = i14;
    HEAP32[i21 + 36 >> 2] = i17;
    HEAP32[i21 + 40 >> 2] = i3;
    HEAP32[i21 + 44 >> 2] = i12;
    HEAP8[i21 + 48 >> 0] = i16 & 1;
    HEAP32[i21 + 52 >> 2] = i8;
    HEAP32[i21 + 56 >> 2] = i18;
    HEAP32[i21 + 60 >> 2] = i15;
    HEAP8[i21 + 64 >> 0] = i5 & 1;
    HEAP32[i21 + 68 >> 2] = i9;
    HEAP32[i21 + 72 >> 2] = i3;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   } else if ((i22 | 0) == 21) {
    HEAP32[i38 >> 2] = 272;
    HEAP32[i38 + 4 >> 2] = i1;
    HEAP32[i38 + 8 >> 2] = i7;
    HEAP32[i38 + 12 >> 2] = i19;
    HEAP32[i38 + 16 >> 2] = i6;
    HEAP32[i38 + 20 >> 2] = i1;
    HEAP32[i38 + 24 >> 2] = i13;
    HEAP32[i38 + 28 >> 2] = i14;
    HEAP32[i38 + 32 >> 2] = i27;
    HEAP32[i38 + 36 >> 2] = i17;
    HEAP32[i38 + 40 >> 2] = i3;
    HEAP32[i38 + 44 >> 2] = i12;
    HEAP8[i38 + 48 >> 0] = i16 & 1;
    HEAP32[i38 + 52 >> 2] = i8;
    HEAP32[i38 + 56 >> 2] = i15;
    HEAP8[i38 + 60 >> 0] = i5 & 1;
    HEAP32[i38 + 64 >> 2] = i9;
    HEAP32[i38 + 68 >> 2] = i3;
    HEAP32[i38 + 72 >> 2] = i37;
    HEAP32[i38 + 76 >> 2] = i36;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   } else if ((i22 | 0) == 24) {
    HEAP32[i40 >> 2] = 273;
    HEAP32[i40 + 4 >> 2] = i1;
    HEAP32[i40 + 8 >> 2] = i7;
    HEAP32[i40 + 12 >> 2] = i19;
    HEAP32[i40 + 16 >> 2] = i6;
    HEAP32[i40 + 20 >> 2] = i39;
    HEAP32[i40 + 24 >> 2] = i1;
    HEAP32[i40 + 28 >> 2] = i13;
    HEAP32[i40 + 32 >> 2] = i14;
    HEAP32[i40 + 36 >> 2] = i17;
    HEAP32[i40 + 40 >> 2] = i3;
    HEAP32[i40 + 44 >> 2] = i12;
    HEAP8[i40 + 48 >> 0] = i16 & 1;
    HEAP32[i40 + 52 >> 2] = i8;
    HEAP32[i40 + 56 >> 2] = i15;
    HEAP8[i40 + 60 >> 0] = i5 & 1;
    HEAP32[i40 + 64 >> 2] = i9;
    HEAP32[i40 + 68 >> 2] = i3;
    HEAP32[i40 + 72 >> 2] = i37;
    HEAP32[i40 + 76 >> 2] = i36;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   } else if ((i22 | 0) == 26) {
    HEAP32[i41 >> 2] = 274;
    HEAP32[i41 + 4 >> 2] = i1;
    HEAP32[i41 + 8 >> 2] = i7;
    HEAP32[i41 + 12 >> 2] = i19;
    HEAP32[i41 + 16 >> 2] = i6;
    HEAP32[i41 + 20 >> 2] = i39;
    HEAP32[i41 + 24 >> 2] = i1;
    HEAP32[i41 + 28 >> 2] = i13;
    HEAP32[i41 + 32 >> 2] = i14;
    HEAP32[i41 + 36 >> 2] = i17;
    HEAP32[i41 + 40 >> 2] = i3;
    HEAP32[i41 + 44 >> 2] = i12;
    HEAP8[i41 + 48 >> 0] = i16 & 1;
    HEAP32[i41 + 52 >> 2] = i8;
    HEAP32[i41 + 56 >> 2] = i15;
    HEAP8[i41 + 60 >> 0] = i5 & 1;
    HEAP32[i41 + 64 >> 2] = i9;
    HEAP32[i41 + 68 >> 2] = i3;
    HEAP32[i41 + 72 >> 2] = i37;
    HEAP32[i41 + 76 >> 2] = i36;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   } else if ((i22 | 0) == 29) {
    HEAP32[i43 >> 2] = 275;
    HEAP32[i43 + 4 >> 2] = i7;
    HEAP32[i43 + 8 >> 2] = i1;
    HEAP32[i43 + 12 >> 2] = i19;
    HEAP32[i43 + 16 >> 2] = i6;
    HEAP32[i43 + 20 >> 2] = i1;
    HEAP32[i43 + 24 >> 2] = i13;
    HEAP32[i43 + 28 >> 2] = i14;
    HEAP32[i43 + 32 >> 2] = i17;
    HEAP32[i43 + 36 >> 2] = i3;
    HEAP32[i43 + 40 >> 2] = i12;
    HEAP8[i43 + 44 >> 0] = i16 & 1;
    HEAP32[i43 + 48 >> 2] = i8;
    HEAP32[i43 + 52 >> 2] = i15;
    HEAP8[i43 + 56 >> 0] = i5 & 1;
    HEAP32[i43 + 60 >> 2] = i9;
    HEAP32[i43 + 64 >> 2] = i3;
    HEAP32[i43 + 68 >> 2] = i42;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   } else if ((i22 | 0) == 32) {
    if ((i42 | 0) == 0 | i16) {
     break;
    }
    if ((HEAP32[i7 >> 2] | 0) != 0) {
     break;
    }
    HEAP32[i7 >> 2] = 1;
    i11 = HEAP32[i8 >> 2] | 0;
    if ((i11 | 0) == 0) {
     break;
    }
    i20 = HEAP32[i11 + 24 >> 2] | 0;
    if ((i20 | 0) == 0) {
     break;
    }
    i11 = _emscripten_alloc_async_context(12) | 0;
    HEAP32[___async_cur_frame + 4 >> 2] = i2;
    FUNCTION_TABLE_vii[i20 & 3](i1, 1);
    if (___async) {
     HEAP32[i11 >> 2] = 276;
     HEAP32[i11 + 4 >> 2] = i1;
     HEAP32[i11 + 8 >> 2] = i1;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    } else {
     _emscripten_free_async_context(i11 | 0);
     break;
    }
   }
  }
 } while (0);
 i42 = HEAP32[i1 >> 2] | 0;
 i22 = HEAP32[i42 + 32 >> 2] | 0;
 if ((i22 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i43 = i1 + 208 | 0;
 if ((HEAP32[i43 >> 2] | 0) == 0) {
  i3 = _emscripten_alloc_async_context(4) | 0;
  HEAP32[___async_cur_frame + 4 >> 2] = i2;
  FUNCTION_TABLE_vi[i22 & 511](i1);
  if (___async) {
   HEAP32[i3 >> 2] = 280;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  _emscripten_free_async_context(i3 | 0);
  STACKTOP = i2;
  return;
 }
 i3 = i1 + 8 | 0;
 i22 = HEAP32[i3 >> 2] | 0;
 do {
  if (((i22 | 0) != 0 ? (HEAP32[i22 + 8 >> 2] & 8 | 0) != 0 : 0) ? (HEAP32[i43 >> 2] = 0, i36 = HEAP32[i22 + 24 >> 2] | 0, (i36 | 0) != 0) : 0) {
   i41 = _emscripten_alloc_async_context(20) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i2;
   FUNCTION_TABLE_vii[i36 & 3](i1, 0);
   if (___async) {
    HEAP32[i41 >> 2] = 277;
    HEAP32[i41 + 4 >> 2] = i1;
    HEAP32[i41 + 8 >> 2] = i1;
    HEAP32[i41 + 12 >> 2] = i3;
    HEAP32[i41 + 16 >> 2] = i43;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   } else {
    _emscripten_free_async_context(i41 | 0);
    i44 = HEAP32[i1 >> 2] | 0;
    break;
   }
  } else {
   i44 = i42;
  }
 } while (0);
 i42 = HEAP32[i44 + 32 >> 2] | 0;
 i44 = _emscripten_alloc_async_context(16) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i2;
 FUNCTION_TABLE_vi[i42 & 511](i1);
 if (___async) {
  HEAP32[i44 >> 2] = 278;
  HEAP32[i44 + 4 >> 2] = i3;
  HEAP32[i44 + 8 >> 2] = i43;
  HEAP32[i44 + 12 >> 2] = i1;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 _emscripten_free_async_context(i44 | 0);
 i44 = HEAP32[i3 >> 2] | 0;
 if ((i44 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i44 + 8 >> 2] & 8 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i43 >> 2] | 0) != 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i43 >> 2] = 1;
 i43 = HEAP32[i44 + 24 >> 2] | 0;
 if ((i43 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i44 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i2;
 FUNCTION_TABLE_vii[i43 & 3](i1, 1);
 if (___async) {
  HEAP32[i44 >> 2] = 279;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 _emscripten_free_async_context(i44 | 0);
 STACKTOP = i2;
 return;
}
function _scene6() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, d15 = 0.0, d16 = 0.0, i17 = 0, d18 = 0.0, i19 = 0, i20 = 0, d21 = 0.0, d22 = 0.0, i23 = 0, d24 = 0.0, i25 = 0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, i32 = 0, i33 = 0, d34 = 0.0, d35 = 0.0, i36 = 0, d37 = 0.0, i38 = 0, i39 = 0;
 i1 = STACKTOP;
 HEAP32[68722] = 0;
 HEAP32[68724] = 2;
 HEAP32[68726] = 0;
 HEAP32[68728] = 0;
 HEAPF64[34365] = .008;
 HEAPF64[34366] = 0.0;
 HEAP32[68720] = 0;
 HEAP32[68734] = _tl_create_timer() | 0;
 _signal(8, 1) | 0;
 i2 = HEAP32[12936] | 0;
 i3 = HEAP32[i2 + 152 >> 2] | 0;
 i4 = HEAP32[i2 + 156 >> 2] | 0;
 i5 = HEAP32[i2 + 160 >> 2] | 0;
 i6 = _malloc(Math_imul(i4, i3) | 0) | 0;
 HEAP32[68196] = (HEAP32[68194] | 0) + 2515e4;
 HEAP32[HEAP32[22682] >> 2] = -255;
 i7 = _make_context(i3, i4, i3, 0, 1, 22, 23, i5, i6, +(HEAP32[i2 + 48 >> 2] | 0), +(HEAP32[i2 + 52 >> 2] | 0)) | 0;
 HEAP32[68736] = i7;
 if ((i7 | 0) == 0) {
  _exit(-1);
 }
 _set_formula(i7, 0);
 i7 = 0;
 do {
  HEAP8[(HEAP32[68736] | 0) + i7 + 144 >> 0] = ((i7 << 3 | 0) % 255 | 0) + 1;
  i7 = i7 + 1 | 0;
 } while ((i7 | 0) != 255);
 HEAP8[(HEAP32[68736] | 0) + 144 >> 0] = 0;
 i7 = HEAP32[68736] | 0;
 HEAP32[i7 + 124 >> 2] = 255;
 HEAP32[68720] = 2;
 HEAP32[i7 + 80 >> 2] = 150;
 HEAP32[68724] = (HEAP32[68724] | 0) + -1;
 HEAP32[i7 + 108 >> 2] = 8;
 HEAP32[i7 + 88 >> 2] = 0;
 HEAP32[i7 + 84 >> 2] = 0;
 HEAP32[i7 + 100 >> 2] = 0;
 i7 = _emscripten_alloc_async_context(12) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _ui_do_fractal(2);
 if (___async) {
  HEAP32[i7 >> 2] = 185;
  HEAP32[i7 + 4 >> 2] = i5;
  HEAP32[i7 + 8 >> 2] = i6;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i7 | 0);
 _clean_autopilot();
 HEAP32[68728] = HEAP32[68728] ^ 1;
 d8 = +HEAPF64[34365] * 5.0;
 HEAPF64[34365] = d8;
 HEAPF64[34366] = -d8;
 i7 = HEAP32[12] | 0;
 i2 = _emscripten_alloc_async_context(12) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _tl_process_group(i7) | 0;
 if (___async) {
  HEAP32[i2 >> 2] = 186;
  HEAP32[i2 + 4 >> 2] = i5;
  HEAP32[i2 + 8 >> 2] = i6;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 i2 = _emscripten_alloc_async_context(12) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _bbupdate() | 0;
 if (___async) {
  HEAP32[i2 >> 2] = 187;
  HEAP32[i2 + 4 >> 2] = i5;
  HEAP32[i2 + 8 >> 2] = i6;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 _tl_reset_timer(HEAP32[68734] | 0);
 i2 = HEAP32[68188] | 0;
 i7 = HEAP32[68196] | 0;
 L16 : do {
  if ((i2 | 0) < (i7 | 0) & (HEAP32[68190] | 0) == 0) {
   i3 = i2;
   L17 : while (1) {
    i4 = HEAP32[68194] | 0;
    if ((i3 | 0) < (i4 + 2e5 | 0)) {
     i9 = HEAP32[22682] | 0;
     HEAP32[i9 >> 2] = 255 - (((i3 - i4 | 0) * 255 | 0) / 2e5 | 0);
     i10 = i9;
    } else {
     i9 = HEAP32[22682] | 0;
     HEAP32[i9 >> 2] = 0;
     i10 = i9;
    }
    i9 = HEAP32[68188] | 0;
    i4 = HEAP32[68196] | 0;
    if ((i9 | 0) > (i4 + -1e6 | 0)) {
     HEAP32[i10 >> 2] = (((i4 - i9 | 0) * 255 | 0) / 1e6 | 0) + -255;
    }
    if ((HEAP32[68722] | 0) == 0 ? (HEAP32[(HEAP32[68736] | 0) + 120 >> 2] | 0) != 0 : 0) {
     i11 = _emscripten_alloc_async_context(12) | 0;
     HEAP32[___async_cur_frame + 4 >> 2] = i1;
     _ui_do_fractal(1);
     if (___async) {
      i12 = 19;
      break;
     }
     _emscripten_free_async_context(i11 | 0);
    }
    HEAP32[68722] = 0;
    i9 = HEAP32[68720] | 0;
    if ((i9 | 0) != 0) {
     HEAPF64[34413] = 1.0;
    }
    if ((HEAP32[68728] | 0) == 0) {
     i13 = i9;
     i14 = 0;
     d15 = 0.0;
     d16 = 0.0;
    } else {
     d8 = +HEAPF64[34413] + +HEAPF64[34409];
     HEAPF64[34409] = d8;
     if (d8 > 1.0) {
      do {
       _do_autopilot(HEAP32[68736] | 0, 275312, 275320, 275328, 24);
       d8 = +HEAPF64[34409] + -1.0;
       HEAPF64[34409] = d8;
      } while (d8 > 1.0);
      i17 = HEAP32[68720] | 0;
     } else {
      i17 = i9;
     }
     i13 = i17;
     i14 = HEAP32[68832] | 0;
     d15 = +(HEAP32[68828] | 0);
     d16 = +(HEAP32[68830] | 0);
    }
    if ((i13 | 0) == 0) {
     d8 = +HEAPF64[34413];
     if (d8 == 0.0) {
      HEAPF64[34413] = .001;
      d18 = .001;
     } else {
      d18 = d8;
     }
    } else {
     HEAPF64[34413] = 1.0;
     d18 = 1.0;
    }
    do {
     if ((i14 | 0) > 0) {
      if ((i14 | 0) == 512) {
       i4 = HEAP32[68736] | 0;
       i19 = i4 + 1192 | 0;
       d8 = +HEAPF64[i19 >> 3];
       i20 = i4 + 1184 | 0;
       d21 = +HEAPF64[i20 >> 3];
       d22 = d8 + d15 * ((d21 - d8) / +(HEAP32[i4 + 128 >> 2] | 0));
       i23 = i4 + 1208 | 0;
       d24 = +HEAPF64[i23 >> 3];
       i25 = i4 + 1200 | 0;
       d26 = +HEAPF64[i25 >> 3];
       d27 = d24 + d16 * ((d26 - d24) / +(HEAP32[i4 + 132 >> 2] | 0));
       if ((HEAP32[68824] | 0) != 0 ? (d28 = +HEAPF64[34410], d28 != d22 | +HEAPF64[34411] != d27) : 0) {
        d29 = d8 - (d22 - d28);
        HEAPF64[i19 >> 3] = d29;
        d28 = d21 - (d22 - +HEAPF64[34410]);
        HEAPF64[i20 >> 3] = d28;
        HEAPF64[i23 >> 3] = d24 - (d27 - +HEAPF64[34411]);
        HEAPF64[i25 >> 3] = d26 - (d27 - +HEAPF64[34411]);
        if (+HEAPF64[34366] != 0.0) {
         d30 = d29;
         d31 = d28;
         i32 = i4;
        } else {
         i33 = _emscripten_alloc_async_context(32) | 0;
         HEAP32[___async_cur_frame + 4 >> 2] = i1;
         _ui_do_fractal(1);
         if (___async) {
          i12 = 40;
          break L17;
         }
         _emscripten_free_async_context(i33 | 0);
         HEAP32[68720] = 2;
         i25 = HEAP32[68736] | 0;
         d30 = +HEAPF64[i25 + 1192 >> 3];
         d31 = +HEAPF64[i25 + 1184 >> 3];
         i32 = i25;
        }
       } else {
        d30 = d8;
        d31 = d21;
        i32 = i4;
       }
       HEAP32[68824] = 1;
       HEAPF64[34410] = d30 + d15 * ((d31 - d30) / +(HEAP32[i32 + 128 >> 2] | 0));
       d21 = +HEAPF64[i32 + 1208 >> 3];
       HEAPF64[34411] = d21 + d16 * ((+HEAPF64[i32 + 1200 >> 3] - d21) / +(HEAP32[i32 + 132 >> 2] | 0));
       i12 = 44;
       break;
      } else if ((i14 | 0) == 1024) {
       d34 = d18 * .0012 + +HEAPF64[34366];
      } else if ((i14 | 0) == 256) {
       d34 = +HEAPF64[34366] - d18 * .0012;
      } else {
       i12 = 44;
       break;
      }
      HEAPF64[34366] = d34;
      HEAP32[68824] = 0;
      d35 = d34;
      i36 = 1;
     } else {
      i12 = 44;
     }
    } while (0);
    do {
     if ((i12 | 0) == 44) {
      i12 = 0;
      if ((i14 & 512 | 0) == 0) {
       HEAP32[68824] = 0;
      }
      d21 = +HEAPF64[34366];
      if (d21 > 0.0) {
       d8 = +HEAPF64[34413] * 6.0e-4;
       if (d21 < d8) {
        HEAPF64[34366] = 0.0;
        d35 = 0.0;
        i36 = 0;
        break;
       } else {
        d28 = d21 - d8;
        HEAPF64[34366] = d28;
        d35 = d28;
        i36 = 0;
        break;
       }
      }
      if (d21 < 0.0) {
       d28 = +HEAPF64[34413];
       if (d21 > d28 * -6.0e-4) {
        HEAPF64[34366] = 0.0;
        d35 = 0.0;
        i36 = 0;
        break;
       } else {
        d8 = d21 + d28 * 6.0e-4;
        HEAPF64[34366] = d8;
        d35 = d8;
        i36 = 0;
        break;
       }
      } else {
       d35 = d21;
       i36 = 0;
      }
     }
    } while (0);
    d21 = +HEAPF64[34365];
    if (!(d35 > d21)) {
     d8 = -d21;
     if (d35 < d8) {
      HEAPF64[34366] = d8;
      d37 = d8;
     } else {
      d37 = d35;
     }
    } else {
     HEAPF64[34366] = d21;
     d37 = d21;
    }
    if (d37 != 0.0) {
     i9 = HEAP32[68736] | 0;
     i4 = i9 + 1192 | 0;
     d21 = +HEAPF64[i4 >> 3];
     i25 = i9 + 1184 | 0;
     d8 = +HEAPF64[i25 >> 3];
     d28 = d21 + d15 * ((d8 - d21) / +(HEAP32[i9 + 128 >> 2] | 0));
     i23 = i9 + 1208 | 0;
     d29 = +HEAPF64[i23 >> 3];
     i20 = i9 + 1200 | 0;
     d27 = +HEAPF64[i20 >> 3];
     d26 = d29 + d16 * ((d27 - d29) / +(HEAP32[i9 + 132 >> 2] | 0));
     d24 = +Math_pow(+(d37 + 1.0), +(+HEAPF64[34413]));
     HEAPF64[i25 >> 3] = d28 + (d8 - d28) * d24;
     HEAPF64[i4 >> 3] = d28 + (d21 - d28) * d24;
     HEAPF64[i20 >> 3] = d26 + d24 * (d27 - d26);
     HEAPF64[i23 >> 3] = d26 + d24 * (d29 - d26);
     i38 = _emscripten_alloc_async_context(12) | 0;
     HEAP32[___async_cur_frame + 4 >> 2] = i1;
     _ui_do_fractal(1);
     if (___async) {
      i12 = 60;
      break;
     }
     _emscripten_free_async_context(i38 | 0);
     i23 = HEAP32[68720] | 0;
     if ((i23 | 0) != 0) {
      HEAP32[68720] = i23 + -1;
     }
    } else {
     if ((i36 | 0) == 0) {
      HEAP32[68720] = 2;
     }
    }
    i3 = HEAP32[68188] | 0;
    i23 = HEAP32[68196] | 0;
    if (!((i3 | 0) < (i23 | 0) & (HEAP32[68190] | 0) == 0)) {
     i39 = i23;
     break L16;
    }
   }
   if ((i12 | 0) == 19) {
    HEAP32[i11 >> 2] = 188;
    HEAP32[i11 + 4 >> 2] = i5;
    HEAP32[i11 + 8 >> 2] = i6;
    i1 = STACKTOP;
    STACKTOP = i1;
    return;
   } else if ((i12 | 0) == 40) {
    HEAP32[i33 >> 2] = 189;
    HEAP32[i33 + 4 >> 2] = i14;
    HEAPF64[i33 + 8 >> 3] = d15;
    HEAPF64[i33 + 16 >> 3] = d16;
    HEAP32[i33 + 24 >> 2] = i5;
    HEAP32[i33 + 28 >> 2] = i6;
    i1 = STACKTOP;
    STACKTOP = i1;
    return;
   } else if ((i12 | 0) == 60) {
    HEAP32[i38 >> 2] = 190;
    HEAP32[i38 + 4 >> 2] = i5;
    HEAP32[i38 + 8 >> 2] = i6;
    i1 = STACKTOP;
    STACKTOP = i1;
    return;
   }
  } else {
   i39 = i7;
  }
 } while (0);
 HEAP32[68194] = i39;
 HEAP32[(HEAP32[12936] | 0) + 160 >> 2] = i5;
 _free(i6);
 _tl_free_timer(HEAP32[68734] | 0);
 i6 = HEAP32[22682] | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 20 >> 2] = 0;
 _initlepic();
 HEAP32[34] = 25;
 i6 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(-60, 157, 1, 2e6);
 if (___async) {
  HEAP32[i6 >> 2] = 191;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i6 | 0);
 HEAP32[34] = 26;
 i6 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(60, 0, 1, 3e6);
 if (___async) {
  HEAP32[i6 >> 2] = 192;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else {
  _emscripten_free_async_context(i6 | 0);
  STACKTOP = i1;
  return;
 }
}
function _do_fractal__async_cb140(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, d20 = 0.0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0;
 i2 = STACKTOP;
 _free(HEAP32[i1 + 4 >> 2] | 0);
 i1 = HEAP32[71600] | 0;
 HEAP32[i1 + 64 >> 2] = 0;
 HEAP32[i1 + 68 >> 2] = 0;
 HEAP32[i1 + 72 >> 2] = 286552;
 i1 = HEAP32[71600] | 0;
 HEAP32[i1 + 112 >> 2] = 0;
 i3 = HEAP32[i1 + 28 >> 2] | 0;
 if ((i3 | 0) != 0) {
  i1 = _emscripten_realloc_async_context(4) | 0;
  FUNCTION_TABLE_v[i3 & 63]();
  if (___async) {
   HEAP32[i1 >> 2] = 219;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i1 >> 2] = 219;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 _dosymetry();
 i1 = HEAP32[71600] | 0;
 L10 : do {
  if ((HEAP32[i1 + 140 >> 2] | 0) != 0) {
   HEAP32[i1 + 72 >> 2] = 286640;
   i3 = HEAP32[71600] | 0;
   i4 = HEAP32[i3 + 56 >> 2] | 0;
   i5 = HEAP32[i3 + 132 >> 2] | 0;
   i6 = i4 + (i5 * 40 | 0) | 0;
   do {
    if ((i5 | 0) > 0) {
     i7 = i4;
     L13 : while (1) {
      i8 = i7 + 32 | 0;
      L15 : do {
       if ((HEAP32[i8 >> 2] | 0) != 0) {
        i9 = HEAP32[71600] | 0;
        HEAP32[i9 + 120 >> 2] = 1;
        i10 = i7;
        do {
         i11 = i10;
         i10 = i10 + 40 | 0;
         i12 = i10 >>> 0 < i6 >>> 0;
        } while ((HEAP32[i11 + 72 >> 2] | 0) != 0 & i12);
        i11 = i7 + -40 | 0;
        if ((HEAP32[i8 >> 2] | 0) != 0 & i7 >>> 0 < i6 >>> 0) {
         i13 = i12 ^ 1;
         i14 = i9;
         i15 = i8;
         i16 = i7;
         while (1) {
          i17 = HEAP32[i14 + 56 >> 2] | 0;
          i18 = i11 >>> 0 < i17 >>> 0;
          if (i18 | i13) {
           i19 = i18 ? i10 : i11;
          } else {
           d20 = +HEAPF64[i16 >> 3];
           i19 = d20 - +HEAPF64[i11 >> 3] < +HEAPF64[i10 >> 3] - d20 ? i11 : i10;
          }
          if (i19 >>> 0 >= i6 >>> 0 | (HEAP32[i19 + 32 >> 2] | 0) != 0 | i19 >>> 0 < i17 >>> 0) {
           i21 = 17;
           break L13;
          }
          i18 = HEAP32[i14 + 36 >> 2] | 0;
          i22 = HEAP32[i14 + 136 >> 2] | 0;
          i23 = i17;
          i17 = i18 + (Math_imul((i16 - i23 | 0) / 40 | 0, i22) | 0) | 0;
          i24 = i18 + (Math_imul((i19 - i23 | 0) / 40 | 0, i22) | 0) | 0;
          _memcpy(i17 | 0, i24 | 0, HEAP32[i14 + 128 >> 2] | 0) | 0;
          HEAP32[i15 >> 2] = 0;
          HEAPF64[i16 >> 3] = +HEAPF64[i19 >> 3];
          i24 = i16 + 40 | 0;
          i17 = i16 + 72 | 0;
          if (!((HEAP32[i17 >> 2] | 0) != 0 & i24 >>> 0 < i6 >>> 0)) {
           i25 = i24;
           break L15;
          }
          i14 = HEAP32[71600] | 0;
          i15 = i17;
          i16 = i24;
         }
        } else {
         i25 = i7;
        }
       } else {
        i25 = i7;
       }
      } while (0);
      i7 = i25 + 40 | 0;
      if (!(i7 >>> 0 < i6 >>> 0)) {
       i21 = 21;
       break;
      }
     }
     if ((i21 | 0) == 17) {
      _puts(289864) | 0;
      _init_tables(HEAP32[71600] | 0);
      break L10;
     } else if ((i21 | 0) == 21) {
      i7 = HEAP32[71600] | 0;
      i26 = i7;
      i27 = HEAP32[i7 + 132 >> 2] | 0;
      break;
     }
    } else {
     i26 = i3;
     i27 = i5;
    }
   } while (0);
   i5 = HEAP32[i26 + 36 >> 2] | 0;
   i3 = i5 + (Math_imul(HEAP32[i26 + 136 >> 2] | 0, i27) | 0) | 0;
   i6 = HEAP32[i26 + 52 >> 2] | 0;
   i4 = HEAP32[i26 + 128 >> 2] | 0;
   i7 = i6 + (i4 * 40 | 0) | 0;
   if ((i4 | 0) > 0) {
    i4 = i26;
    i8 = 0;
    i16 = i6;
    i6 = i5;
    i5 = 0;
    L33 : while (1) {
     i15 = i16 + 32 | 0;
     do {
      if ((HEAP32[i15 >> 2] | 0) != 0) {
       HEAP32[i4 + 120 >> 2] = 1;
       i14 = i16;
       while (1) {
        i28 = i14 >>> 0 < i7 >>> 0;
        if ((HEAP32[i14 + 32 >> 2] | 0) != 0 & i28) {
         i14 = i14 + 40 | 0;
        } else {
         break;
        }
       }
       i10 = i16 + -40 | 0;
       if ((HEAP32[i15 >> 2] | 0) != 0 & i16 >>> 0 < i7 >>> 0) {
        i11 = i28 ^ 1;
        i29 = i4;
        i13 = i15;
        i9 = i8;
        i24 = 0;
        i17 = i16;
        i22 = i6;
        i23 = i5;
        while (1) {
         i18 = HEAP32[i29 + 52 >> 2] | 0;
         i30 = i10 >>> 0 < i18 >>> 0;
         if (i30 | i11) {
          i31 = i30 ? i14 : i10;
         } else {
          d20 = +HEAPF64[i17 >> 3];
          i31 = d20 - +HEAPF64[i10 >> 3] < +HEAPF64[i14 >> 3] - d20 ? i10 : i14;
         }
         if (i31 >>> 0 >= i7 >>> 0 | (HEAP32[i31 + 32 >> 2] | 0) != 0 | i31 >>> 0 < i18 >>> 0) {
          break L33;
         }
         if ((i31 | 0) == (i24 | 0)) {
          i32 = i29;
          i33 = i9 + 1 | 0;
          i34 = i24;
          i35 = i22;
          i36 = i23;
         } else {
          L50 : do {
           if ((i24 | 0) != 0) {
            if ((i9 | 0) != 1) {
             if (i22 >>> 0 < i3 >>> 0) {
              i37 = i22;
              i38 = i23;
             } else {
              i39 = i29;
              break;
             }
             while (1) {
              _memset(i37 | 0, HEAP8[i38 >> 0] | 0, i9 | 0) | 0;
              i18 = HEAP32[71600] | 0;
              i30 = HEAP32[i18 + 136 >> 2] | 0;
              i37 = i37 + i30 | 0;
              if (!(i37 >>> 0 < i3 >>> 0)) {
               i39 = i18;
               break L50;
              } else {
               i38 = i38 + i30 | 0;
              }
             }
            }
            i30 = HEAP32[i29 + 136 >> 2] | 0;
            if (i22 >>> 0 < i3 >>> 0) {
             i18 = i22;
             i40 = i23;
             while (1) {
              HEAP8[i18 >> 0] = HEAP8[i40 >> 0] | 0;
              i18 = i18 + i30 | 0;
              if (!(i18 >>> 0 < i3 >>> 0)) {
               break;
              } else {
               i40 = i40 + i30 | 0;
              }
             }
             i39 = HEAP32[71600] | 0;
            } else {
             i39 = i29;
            }
           } else {
            i39 = i29;
           }
          } while (0);
          i30 = HEAP32[i39 + 36 >> 2] | 0;
          i40 = HEAP32[i39 + 52 >> 2] | 0;
          i32 = i39;
          i33 = 1;
          i34 = i31;
          i35 = i30 + ((i17 - i40 | 0) / 40 | 0) | 0;
          i36 = i30 + ((i31 - i40 | 0) / 40 | 0) | 0;
         }
         HEAP32[i13 >> 2] = 0;
         HEAPF64[i17 >> 3] = +HEAPF64[i31 >> 3];
         i40 = i17;
         i17 = i17 + 40 | 0;
         i13 = i40 + 72 | 0;
         if (!((HEAP32[i13 >> 2] | 0) != 0 & i17 >>> 0 < i7 >>> 0)) {
          break;
         } else {
          i29 = i32;
          i9 = i33;
          i24 = i34;
          i22 = i35;
          i23 = i36;
         }
        }
        if ((i34 | 0) != 0) {
         i23 = i35 >>> 0 < i3 >>> 0;
         if ((i33 | 0) == 1) {
          if (i23) {
           i41 = i35;
           i42 = i36;
          } else {
           i43 = i32;
           i44 = 1;
           i45 = i17;
           i46 = i35;
           i47 = i36;
           break;
          }
          while (1) {
           HEAP8[i41 >> 0] = HEAP8[i42 >> 0] | 0;
           i22 = HEAP32[71600] | 0;
           i24 = HEAP32[i22 + 136 >> 2] | 0;
           i9 = i41 + i24 | 0;
           i13 = i42 + i24 | 0;
           if (i9 >>> 0 < i3 >>> 0) {
            i41 = i9;
            i42 = i13;
           } else {
            i43 = i22;
            i44 = 1;
            i45 = i17;
            i46 = i9;
            i47 = i13;
            break;
           }
          }
         } else {
          if (i23) {
           i48 = i35;
           i49 = i36;
          } else {
           i43 = i32;
           i44 = i33;
           i45 = i17;
           i46 = i35;
           i47 = i36;
           break;
          }
          while (1) {
           _memset(i48 | 0, HEAP8[i49 >> 0] | 0, i33 | 0) | 0;
           i13 = HEAP32[71600] | 0;
           i9 = HEAP32[i13 + 136 >> 2] | 0;
           i22 = i48 + i9 | 0;
           i24 = i49 + i9 | 0;
           if (i22 >>> 0 < i3 >>> 0) {
            i48 = i22;
            i49 = i24;
           } else {
            i43 = i13;
            i44 = i33;
            i45 = i17;
            i46 = i22;
            i47 = i24;
            break;
           }
          }
         }
        } else {
         i43 = i32;
         i44 = i33;
         i45 = i17;
         i46 = i35;
         i47 = i36;
        }
       } else {
        i43 = i4;
        i44 = i8;
        i45 = i16;
        i46 = i6;
        i47 = i5;
       }
      } else {
       i43 = i4;
       i44 = i8;
       i45 = i16;
       i46 = i6;
       i47 = i5;
      }
     } while (0);
     i16 = i45 + 40 | 0;
     if (!(i16 >>> 0 < i7 >>> 0)) {
      break L10;
     } else {
      i4 = i43;
      i8 = i44;
      i6 = i46;
      i5 = i47;
     }
    }
    _init_tables(i29);
    _puts(289864) | 0;
   }
  }
 } while (0);
 i29 = HEAP32[71600] | 0;
 i47 = HEAP32[i29 + 28 >> 2] | 0;
 if ((i47 | 0) != 0) {
  i46 = _emscripten_realloc_async_context(4) | 0;
  FUNCTION_TABLE_v[i47 & 63]();
  if (___async) {
   HEAP32[i46 >> 2] = 226;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i46 >> 2] = 226;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i46 = HEAP32[i29 + 52 >> 2] | 0;
 i47 = HEAP32[i29 + 128 >> 2] | 0;
 i44 = i46 + (i47 * 40 | 0) | 0;
 if ((i47 | 0) > 0) {
  i47 = HEAP32[i29 + 16 >> 2] | 0;
  i43 = i46;
  while (1) {
   HEAPF64[i47 >> 3] = +HEAPF64[i43 >> 3];
   i43 = i43 + 40 | 0;
   if (!(i43 >>> 0 < i44 >>> 0)) {
    break;
   } else {
    i47 = i47 + 8 | 0;
   }
  }
 }
 i47 = HEAP32[i29 + 56 >> 2] | 0;
 i44 = HEAP32[i29 + 132 >> 2] | 0;
 i43 = i47 + (i44 * 40 | 0) | 0;
 if ((i44 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i44 = HEAP32[i29 + 20 >> 2] | 0;
 i29 = i47;
 while (1) {
  HEAPF64[i44 >> 3] = +HEAPF64[i29 >> 3];
  i29 = i29 + 40 | 0;
  if (!(i29 >>> 0 < i43 >>> 0)) {
   break;
  } else {
   i44 = i44 + 8 | 0;
  }
 }
 STACKTOP = i2;
 return;
}
function _aa_mktable(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 16 >> 2] | 0;
 i4 = HEAP32[i1 + 20 >> 2] | 0;
 i5 = _malloc(131072) | 0;
 i6 = _calloc(1, 25620) | 0;
 HEAP32[131504] = i6;
 i7 = _calloc(1, 131072) | 0;
 i8 = _calloc(1, 512) | 0;
 _memset(i7 | 0, 0, 131072) | 0;
 i9 = 0;
 do {
  HEAP16[i5 + (i9 << 1) >> 1] = i9;
  i9 = i9 + 1 | 0;
 } while ((i9 | 0) != 65536);
 ___aa_calcparams(i3, i6, i4, +HEAPF64[i1 + 64 >> 3], +HEAPF64[i1 + 72 >> 3]);
 i6 = (i4 & 256 | 0) == 0;
 i3 = (i4 & 128 | 0) == 0;
 i9 = -1;
 i10 = 0;
 i11 = -1;
 while (1) {
  i12 = i10 & 255;
  if (!((_isgraph(i12) | 0) != 0 | (i12 | 0) == 32) ? (i12 >>> 0 < 161 | i6) & (i3 | (i12 | 0) == 0) : 0) {
   i13 = i9;
   i14 = i11;
  } else {
   i15 = 6;
  }
  do {
   if ((i15 | 0) == 6) {
    i15 = 0;
    if ((1 << (i10 >> 8) & i4 | 0) != 0) {
     i12 = HEAP32[131504] | 0;
     i16 = HEAP32[i12 + (i10 * 20 | 0) >> 2] | 0;
     i17 = HEAP32[i12 + (i10 * 20 | 0) + 4 >> 2] | 0;
     i18 = HEAP32[i12 + (i10 * 20 | 0) + 8 >> 2] | 0;
     i19 = HEAP32[i12 + (i10 * 20 | 0) + 12 >> 2] | 0;
     i20 = i16 >> 4;
     i21 = i17 >> 4;
     i22 = i18 >> 4;
     i23 = i19 >> 4;
     i24 = i22 << 4;
     i25 = (i21 << 8) + (i20 << 12) + i24 + i23 | 0;
     i26 = i7 + (i25 << 1) | 0;
     i27 = HEAP16[i26 >> 1] | 0;
     if (!(i27 << 16 >> 16 == 0) ? (i28 = i21 * 17 | 0, i29 = i24 + i22 | 0, i22 = i23 * 17 | 0, i23 = i29 + ((i21 + i20 | 0) * 17 | 0) + i22 | 0, i21 = (Math_imul(i20, -17) | 0) + i16 | 0, i16 = i17 - i28 | 0, i17 = i18 - i29 | 0, i18 = i19 - i22 | 0, i19 = (Math_imul(i16, i16) | 0) + (Math_imul(i21, i21) | 0) + (Math_imul(i18, i18) | 0) + (Math_imul(i17, i17) | 0) << 1, i17 = (HEAP32[i12 + (i10 * 20 | 0) + 16 >> 2] | 0) - i23 | 0, i18 = (Math_imul(i17, i17) | 0) + i19 | 0, i19 = i27 & 65535, i27 = (HEAP32[i12 + (i19 * 20 | 0) >> 2] | 0) - i18 | 0, i17 = Math_imul(i27, i27) | 0, i27 = (HEAP32[i12 + (i19 * 20 | 0) + 4 >> 2] | 0) - i28 | 0, i21 = Math_imul(i27, i27) | 0, i27 = (HEAP32[i12 + (i19 * 20 | 0) + 8 >> 2] | 0) - i29 | 0, i29 = Math_imul(i27, i27) | 0, i27 = (HEAP32[i12 + (i19 * 20 | 0) + 12 >> 2] | 0) - i22 | 0, i22 = i17 + i21 + i29 + (Math_imul(i27, i27) | 0) << 1, i27 = (HEAP32[i12 + (i19 * 20 | 0) + 16 >> 2] | 0) - i23 | 0, i23 = i22 + (Math_imul(i27, i27) | 0) | 0, (i18 | 0) >= (i23 | 0)) : 0) {
      if ((i23 | 0) != (i28 | 0)) {
       i13 = i9;
       i14 = i11;
       break;
      }
      if ((HEAP32[526024 + (((i10 | 0) / 256 | 0) << 2) >> 2] | 0) <= (HEAP32[526024 + (i19 >>> 8 << 2) >> 2] | 0)) {
       i13 = i9;
       i14 = i11;
       break;
      }
     }
     HEAP16[i26 >> 1] = i10;
     if (!((i11 | 0) == (i25 | 0) ? 1 : (HEAPU16[i5 + (i25 << 1) >> 1] | 0 | 0) != (i25 | 0))) {
      if ((i11 | 0) == -1) {
       i13 = i25;
       i14 = i25;
      } else {
       HEAP16[i5 + (i11 << 1) >> 1] = i25;
       i13 = i9;
       i14 = i25;
      }
     } else {
      i13 = i9;
      i14 = i11;
     }
    } else {
     i13 = i9;
     i14 = i11;
    }
   }
  } while (0);
  i10 = i10 + 1 | 0;
  if ((i10 | 0) == 1280) {
   i30 = 0;
   break;
  } else {
   i9 = i13;
   i11 = i14;
  }
 }
 do {
  i11 = i30 << 2;
  i9 = i8 + (i30 << 1) | 0;
  i10 = 0;
  i25 = 2147483647;
  while (1) {
   i26 = i10 & 255;
   if (!((_isgraph(i26) | 0) != 0 | (i26 | 0) == 32) ? (i26 >>> 0 < 161 | i6) & (i3 | (i26 | 0) == 0) : 0) {
    i31 = i25;
   } else {
    i15 = 18;
   }
   do {
    if ((i15 | 0) == 18) {
     i15 = 0;
     if ((1 << (i10 >> 8) & i4 | 0) != 0 ? (i26 = HEAP32[131504] | 0, i19 = (HEAP32[i26 + (i10 * 20 | 0) >> 2] | 0) - i30 | 0, i28 = Math_imul(i19, i19) | 0, i19 = (HEAP32[i26 + (i10 * 20 | 0) + 4 >> 2] | 0) - i30 | 0, i23 = Math_imul(i19, i19) | 0, i19 = (HEAP32[i26 + (i10 * 20 | 0) + 8 >> 2] | 0) - i30 | 0, i18 = Math_imul(i19, i19) | 0, i19 = (HEAP32[i26 + (i10 * 20 | 0) + 12 >> 2] | 0) - i30 | 0, i27 = Math_imul(i19, i19) | 0, i19 = (HEAP32[i26 + (i10 * 20 | 0) + 16 >> 2] | 0) - i11 | 0, i26 = i23 + i28 + i18 + i27 + (Math_imul(i19 << 1, i19) | 0) | 0, (i26 | 0) <= (i25 | 0)) : 0) {
      if ((i26 | 0) == (i25 | 0) ? (HEAP32[526024 + (((i10 | 0) / 256 | 0) << 2) >> 2] | 0) <= (HEAP32[526024 + ((HEAPU16[i9 >> 1] | 0) >>> 8 << 2) >> 2] | 0) : 0) {
       i31 = i25;
       break;
      }
      HEAP16[i9 >> 1] = i10;
      i31 = i26;
     } else {
      i31 = i25;
     }
    }
   } while (0);
   i10 = i10 + 1 | 0;
   if ((i10 | 0) == 1280) {
    break;
   } else {
    i25 = i31;
   }
  }
  i30 = i30 + 1 | 0;
 } while ((i30 | 0) != 256);
 if ((i14 | 0) == -1) {
  i32 = i1 + 172 | 0;
  HEAP32[i32 >> 2] = i7;
  i33 = i1 + 176 | 0;
  HEAP32[i33 >> 2] = i8;
  i34 = HEAP32[131504] | 0;
  i35 = i1 + 180 | 0;
  HEAP32[i35 >> 2] = i34;
  _free(i5);
  STACKTOP = i2;
  return i7 | 0;
 }
 i30 = HEAP32[131504] | 0;
 i31 = i13;
 i13 = i14;
 while (1) {
  HEAP16[i5 + (i13 << 1) >> 1] = i13;
  if ((i31 | 0) == -1) {
   i15 = 45;
   break;
  } else {
   i36 = -1;
   i37 = i31;
   i38 = -1;
  }
  while (1) {
   i14 = HEAP16[i7 + (i37 << 1) >> 1] | 0;
   i4 = i37 >> 12;
   i3 = i37 >>> 8 & 15;
   i6 = i37 >>> 4 & 15;
   i25 = i37 & 15;
   i10 = i14 & 65535;
   i9 = i30 + (i10 * 20 | 0) | 0;
   i11 = i30 + (i10 * 20 | 0) + 4 | 0;
   i26 = i30 + (i10 * 20 | 0) + 8 | 0;
   i19 = i30 + (i10 * 20 | 0) + 12 | 0;
   i27 = i30 + (i10 * 20 | 0) + 16 | 0;
   i10 = 0;
   i18 = i36;
   i28 = i38;
   while (1) {
    i23 = i18;
    i22 = -1;
    i12 = i28;
    while (1) {
     if ((i10 | 0) == 2) {
      i29 = i22 + i6 | 0;
      if (i29 >>> 0 > 15) {
       i39 = i23;
       i40 = i12;
      } else {
       i41 = i4;
       i42 = i3;
       i43 = i29;
       i44 = i25;
       i15 = 35;
      }
     } else if ((i10 | 0) == 0) {
      i29 = i22 + i4 | 0;
      if (i29 >>> 0 > 15) {
       i39 = i23;
       i40 = i12;
      } else {
       i41 = i29;
       i42 = i3;
       i43 = i6;
       i44 = i25;
       i15 = 35;
      }
     } else if ((i10 | 0) == 1) {
      i29 = i22 + i3 | 0;
      if (i29 >>> 0 > 15) {
       i39 = i23;
       i40 = i12;
      } else {
       i41 = i4;
       i42 = i29;
       i43 = i6;
       i44 = i25;
       i15 = 35;
      }
     } else if ((i10 | 0) == 3) {
      i29 = i22 + i25 | 0;
      if (i29 >>> 0 > 15) {
       i39 = i23;
       i40 = i12;
      } else {
       i41 = i4;
       i42 = i3;
       i43 = i6;
       i44 = i29;
       i15 = 35;
      }
     } else {
      i41 = i4;
      i42 = i3;
      i43 = i6;
      i44 = i25;
      i15 = 35;
     }
     do {
      if ((i15 | 0) == 35) {
       i15 = 0;
       i29 = i43 << 4;
       i21 = i29 + i44 + (i42 << 8) + (i41 << 12) | 0;
       i17 = i7 + (i21 << 1) | 0;
       i16 = HEAP16[i17 >> 1] | 0;
       i20 = i16 & 65535;
       if (!((i21 | 0) == (i13 | 0) ? 1 : i16 << 16 >> 16 == i14 << 16 >> 16)) {
        if (!(i16 << 16 >> 16 == 0) ? (i16 = i41 * 17 | 0, i24 = i42 * 17 | 0, i45 = i29 + i43 | 0, i29 = i44 * 17 | 0, i46 = i45 + i29 + ((i41 + i42 | 0) * 17 | 0) | 0, i47 = i16 - (HEAP32[i9 >> 2] | 0) | 0, i48 = Math_imul(i47, i47) | 0, i47 = i24 - (HEAP32[i11 >> 2] | 0) | 0, i49 = Math_imul(i47, i47) | 0, i47 = i45 - (HEAP32[i26 >> 2] | 0) | 0, i50 = Math_imul(i47, i47) | 0, i47 = i29 - (HEAP32[i19 >> 2] | 0) | 0, i51 = i49 + i48 + i50 + (Math_imul(i47, i47) | 0) << 1, i47 = i46 - (HEAP32[i27 >> 2] | 0) | 0, i50 = i51 + (Math_imul(i47, i47) | 0) | 0, i47 = i16 - (HEAP32[i30 + (i20 * 20 | 0) >> 2] | 0) | 0, i16 = Math_imul(i47, i47) | 0, i47 = i24 - (HEAP32[i30 + (i20 * 20 | 0) + 4 >> 2] | 0) | 0, i24 = Math_imul(i47, i47) | 0, i47 = i45 - (HEAP32[i30 + (i20 * 20 | 0) + 8 >> 2] | 0) | 0, i45 = Math_imul(i47, i47) | 0, i47 = i29 - (HEAP32[i30 + (i20 * 20 | 0) + 12 >> 2] | 0) | 0, i29 = i24 + i16 + i45 + (Math_imul(i47, i47) | 0) << 1, i47 = i46 - (HEAP32[i30 + (i20 * 20 | 0) + 16 >> 2] | 0) | 0, (i50 | 0) >= (i29 + (Math_imul(i47, i47) | 0) | 0)) : 0) {
         i39 = i23;
         i40 = i12;
         break;
        }
        HEAP16[i17 >> 1] = i14;
        if (!((i12 | 0) == (i21 | 0) ? 1 : (HEAPU16[i5 + (i21 << 1) >> 1] | 0 | 0) != (i21 | 0))) {
         if ((i12 | 0) == -1) {
          i39 = i21;
          i40 = i21;
         } else {
          HEAP16[i5 + (i12 << 1) >> 1] = i21;
          i39 = i23;
          i40 = i21;
         }
        } else {
         i39 = i23;
         i40 = i12;
        }
       } else {
        i39 = i23;
        i40 = i12;
       }
      }
     } while (0);
     if ((i22 | 0) < 0) {
      i23 = i39;
      i22 = i22 + 2 | 0;
      i12 = i40;
     } else {
      break;
     }
    }
    i10 = i10 + 1 | 0;
    if ((i10 | 0) == 4) {
     break;
    } else {
     i18 = i39;
     i28 = i40;
    }
   }
   i28 = i5 + (i37 << 1) | 0;
   i18 = i37;
   i37 = HEAPU16[i28 >> 1] | 0;
   HEAP16[i28 >> 1] = i18;
   if ((i37 | 0) == (i18 | 0)) {
    break;
   } else {
    i36 = i39;
    i38 = i40;
   }
  }
  if ((i40 | 0) == -1) {
   i15 = 45;
   break;
  } else {
   i31 = i39;
   i13 = i40;
  }
 }
 if ((i15 | 0) == 45) {
  i32 = i1 + 172 | 0;
  HEAP32[i32 >> 2] = i7;
  i33 = i1 + 176 | 0;
  HEAP32[i33 >> 2] = i8;
  i34 = HEAP32[131504] | 0;
  i35 = i1 + 180 | 0;
  HEAP32[i35 >> 2] = i34;
  _free(i5);
  STACKTOP = i2;
  return i7 | 0;
 }
 return 0;
}
function _do_fractal__async_cb141(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, d20 = 0.0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0;
 i1 = STACKTOP;
 _dosymetry();
 i2 = HEAP32[71600] | 0;
 L3 : do {
  if ((HEAP32[i2 + 140 >> 2] | 0) != 0) {
   HEAP32[i2 + 72 >> 2] = 286640;
   i3 = HEAP32[71600] | 0;
   i4 = HEAP32[i3 + 56 >> 2] | 0;
   i5 = HEAP32[i3 + 132 >> 2] | 0;
   i6 = i4 + (i5 * 40 | 0) | 0;
   do {
    if ((i5 | 0) > 0) {
     i7 = i4;
     L6 : while (1) {
      i8 = i7 + 32 | 0;
      L8 : do {
       if ((HEAP32[i8 >> 2] | 0) != 0) {
        i9 = HEAP32[71600] | 0;
        HEAP32[i9 + 120 >> 2] = 1;
        i10 = i7;
        do {
         i11 = i10;
         i10 = i10 + 40 | 0;
         i12 = i10 >>> 0 < i6 >>> 0;
        } while ((HEAP32[i11 + 72 >> 2] | 0) != 0 & i12);
        i11 = i7 + -40 | 0;
        if ((HEAP32[i8 >> 2] | 0) != 0 & i7 >>> 0 < i6 >>> 0) {
         i13 = i12 ^ 1;
         i14 = i9;
         i15 = i8;
         i16 = i7;
         while (1) {
          i17 = HEAP32[i14 + 56 >> 2] | 0;
          i18 = i11 >>> 0 < i17 >>> 0;
          if (i18 | i13) {
           i19 = i18 ? i10 : i11;
          } else {
           d20 = +HEAPF64[i16 >> 3];
           i19 = d20 - +HEAPF64[i11 >> 3] < +HEAPF64[i10 >> 3] - d20 ? i11 : i10;
          }
          if (i19 >>> 0 >= i6 >>> 0 | (HEAP32[i19 + 32 >> 2] | 0) != 0 | i19 >>> 0 < i17 >>> 0) {
           i21 = 13;
           break L6;
          }
          i18 = HEAP32[i14 + 36 >> 2] | 0;
          i22 = HEAP32[i14 + 136 >> 2] | 0;
          i23 = i17;
          i17 = i18 + (Math_imul((i16 - i23 | 0) / 40 | 0, i22) | 0) | 0;
          i24 = i18 + (Math_imul((i19 - i23 | 0) / 40 | 0, i22) | 0) | 0;
          _memcpy(i17 | 0, i24 | 0, HEAP32[i14 + 128 >> 2] | 0) | 0;
          HEAP32[i15 >> 2] = 0;
          HEAPF64[i16 >> 3] = +HEAPF64[i19 >> 3];
          i24 = i16 + 40 | 0;
          i17 = i16 + 72 | 0;
          if (!((HEAP32[i17 >> 2] | 0) != 0 & i24 >>> 0 < i6 >>> 0)) {
           i25 = i24;
           break L8;
          }
          i14 = HEAP32[71600] | 0;
          i15 = i17;
          i16 = i24;
         }
        } else {
         i25 = i7;
        }
       } else {
        i25 = i7;
       }
      } while (0);
      i7 = i25 + 40 | 0;
      if (!(i7 >>> 0 < i6 >>> 0)) {
       i21 = 17;
       break;
      }
     }
     if ((i21 | 0) == 13) {
      _puts(289864) | 0;
      _init_tables(HEAP32[71600] | 0);
      break L3;
     } else if ((i21 | 0) == 17) {
      i7 = HEAP32[71600] | 0;
      i26 = i7;
      i27 = HEAP32[i7 + 132 >> 2] | 0;
      break;
     }
    } else {
     i26 = i3;
     i27 = i5;
    }
   } while (0);
   i5 = HEAP32[i26 + 36 >> 2] | 0;
   i3 = i5 + (Math_imul(HEAP32[i26 + 136 >> 2] | 0, i27) | 0) | 0;
   i6 = HEAP32[i26 + 52 >> 2] | 0;
   i4 = HEAP32[i26 + 128 >> 2] | 0;
   i7 = i6 + (i4 * 40 | 0) | 0;
   if ((i4 | 0) > 0) {
    i4 = i26;
    i8 = 0;
    i16 = i6;
    i6 = i5;
    i5 = 0;
    L26 : while (1) {
     i15 = i16 + 32 | 0;
     do {
      if ((HEAP32[i15 >> 2] | 0) != 0) {
       HEAP32[i4 + 120 >> 2] = 1;
       i14 = i16;
       while (1) {
        i28 = i14 >>> 0 < i7 >>> 0;
        if ((HEAP32[i14 + 32 >> 2] | 0) != 0 & i28) {
         i14 = i14 + 40 | 0;
        } else {
         break;
        }
       }
       i10 = i16 + -40 | 0;
       if ((HEAP32[i15 >> 2] | 0) != 0 & i16 >>> 0 < i7 >>> 0) {
        i11 = i28 ^ 1;
        i13 = i15;
        i29 = i4;
        i9 = i8;
        i24 = 0;
        i17 = i16;
        i22 = i6;
        i23 = i5;
        while (1) {
         i18 = HEAP32[i29 + 52 >> 2] | 0;
         i30 = i10 >>> 0 < i18 >>> 0;
         if (i30 | i11) {
          i31 = i30 ? i14 : i10;
         } else {
          d20 = +HEAPF64[i17 >> 3];
          i31 = d20 - +HEAPF64[i10 >> 3] < +HEAPF64[i14 >> 3] - d20 ? i10 : i14;
         }
         if (i31 >>> 0 >= i7 >>> 0 | (HEAP32[i31 + 32 >> 2] | 0) != 0 | i31 >>> 0 < i18 >>> 0) {
          break L26;
         }
         if ((i31 | 0) == (i24 | 0)) {
          i32 = i29;
          i33 = i9 + 1 | 0;
          i34 = i24;
          i35 = i22;
          i36 = i23;
         } else {
          L42 : do {
           if ((i24 | 0) != 0) {
            if ((i9 | 0) != 1) {
             if (i22 >>> 0 < i3 >>> 0) {
              i37 = i22;
              i38 = i23;
             } else {
              i39 = i29;
              break;
             }
             while (1) {
              _memset(i37 | 0, HEAP8[i38 >> 0] | 0, i9 | 0) | 0;
              i18 = HEAP32[71600] | 0;
              i30 = HEAP32[i18 + 136 >> 2] | 0;
              i37 = i37 + i30 | 0;
              if (!(i37 >>> 0 < i3 >>> 0)) {
               i39 = i18;
               break L42;
              } else {
               i38 = i38 + i30 | 0;
              }
             }
            }
            i30 = HEAP32[i29 + 136 >> 2] | 0;
            if (i22 >>> 0 < i3 >>> 0) {
             i18 = i22;
             i40 = i23;
             while (1) {
              HEAP8[i18 >> 0] = HEAP8[i40 >> 0] | 0;
              i18 = i18 + i30 | 0;
              if (!(i18 >>> 0 < i3 >>> 0)) {
               break;
              } else {
               i40 = i40 + i30 | 0;
              }
             }
             i39 = HEAP32[71600] | 0;
            } else {
             i39 = i29;
            }
           } else {
            i39 = i29;
           }
          } while (0);
          i30 = HEAP32[i39 + 36 >> 2] | 0;
          i40 = HEAP32[i39 + 52 >> 2] | 0;
          i32 = i39;
          i33 = 1;
          i34 = i31;
          i35 = i30 + ((i17 - i40 | 0) / 40 | 0) | 0;
          i36 = i30 + ((i31 - i40 | 0) / 40 | 0) | 0;
         }
         HEAP32[i13 >> 2] = 0;
         HEAPF64[i17 >> 3] = +HEAPF64[i31 >> 3];
         i40 = i17;
         i17 = i17 + 40 | 0;
         i13 = i40 + 72 | 0;
         if (!((HEAP32[i13 >> 2] | 0) != 0 & i17 >>> 0 < i7 >>> 0)) {
          break;
         } else {
          i29 = i32;
          i9 = i33;
          i24 = i34;
          i22 = i35;
          i23 = i36;
         }
        }
        if ((i34 | 0) != 0) {
         i23 = i35 >>> 0 < i3 >>> 0;
         if ((i33 | 0) == 1) {
          if (i23) {
           i41 = i35;
           i42 = i36;
          } else {
           i43 = i32;
           i44 = 1;
           i45 = i17;
           i46 = i35;
           i47 = i36;
           break;
          }
          while (1) {
           HEAP8[i41 >> 0] = HEAP8[i42 >> 0] | 0;
           i22 = HEAP32[71600] | 0;
           i24 = HEAP32[i22 + 136 >> 2] | 0;
           i9 = i41 + i24 | 0;
           i13 = i42 + i24 | 0;
           if (i9 >>> 0 < i3 >>> 0) {
            i41 = i9;
            i42 = i13;
           } else {
            i43 = i22;
            i44 = 1;
            i45 = i17;
            i46 = i9;
            i47 = i13;
            break;
           }
          }
         } else {
          if (i23) {
           i48 = i35;
           i49 = i36;
          } else {
           i43 = i32;
           i44 = i33;
           i45 = i17;
           i46 = i35;
           i47 = i36;
           break;
          }
          while (1) {
           _memset(i48 | 0, HEAP8[i49 >> 0] | 0, i33 | 0) | 0;
           i13 = HEAP32[71600] | 0;
           i9 = HEAP32[i13 + 136 >> 2] | 0;
           i22 = i48 + i9 | 0;
           i24 = i49 + i9 | 0;
           if (i22 >>> 0 < i3 >>> 0) {
            i48 = i22;
            i49 = i24;
           } else {
            i43 = i13;
            i44 = i33;
            i45 = i17;
            i46 = i22;
            i47 = i24;
            break;
           }
          }
         }
        } else {
         i43 = i32;
         i44 = i33;
         i45 = i17;
         i46 = i35;
         i47 = i36;
        }
       } else {
        i43 = i4;
        i44 = i8;
        i45 = i16;
        i46 = i6;
        i47 = i5;
       }
      } else {
       i43 = i4;
       i44 = i8;
       i45 = i16;
       i46 = i6;
       i47 = i5;
      }
     } while (0);
     i16 = i45 + 40 | 0;
     if (!(i16 >>> 0 < i7 >>> 0)) {
      break L3;
     } else {
      i4 = i43;
      i8 = i44;
      i6 = i46;
      i5 = i47;
     }
    }
    _init_tables(i29);
    _puts(289864) | 0;
   }
  }
 } while (0);
 i29 = HEAP32[71600] | 0;
 i47 = HEAP32[i29 + 28 >> 2] | 0;
 if ((i47 | 0) != 0) {
  i46 = _emscripten_realloc_async_context(4) | 0;
  FUNCTION_TABLE_v[i47 & 63]();
  if (___async) {
   HEAP32[i46 >> 2] = 226;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i46 >> 2] = 226;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 i46 = HEAP32[i29 + 52 >> 2] | 0;
 i47 = HEAP32[i29 + 128 >> 2] | 0;
 i44 = i46 + (i47 * 40 | 0) | 0;
 if ((i47 | 0) > 0) {
  i47 = HEAP32[i29 + 16 >> 2] | 0;
  i43 = i46;
  while (1) {
   HEAPF64[i47 >> 3] = +HEAPF64[i43 >> 3];
   i43 = i43 + 40 | 0;
   if (!(i43 >>> 0 < i44 >>> 0)) {
    break;
   } else {
    i47 = i47 + 8 | 0;
   }
  }
 }
 i47 = HEAP32[i29 + 56 >> 2] | 0;
 i44 = HEAP32[i29 + 132 >> 2] | 0;
 i43 = i47 + (i44 * 40 | 0) | 0;
 if ((i44 | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i44 = HEAP32[i29 + 20 >> 2] | 0;
 i29 = i47;
 while (1) {
  HEAPF64[i44 >> 3] = +HEAPF64[i29 >> 3];
  i29 = i29 + 40 | 0;
  if (!(i29 >>> 0 < i43 >>> 0)) {
   break;
  } else {
   i44 = i44 + 8 | 0;
  }
 }
 STACKTOP = i1;
 return;
}
function _bb() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _aa_gotoxy(i2, 0, 0);
 if (___async) {
  HEAP32[i3 >> 2] = 131;
  i1 = STACKTOP;
  STACKTOP = i1;
  return 0;
 }
 _emscripten_free_async_context(i3 | 0);
 _introscreen();
 i3 = _aa_getrenderparams() | 0;
 HEAP32[22682] = i3;
 _aa_render(HEAP32[12936] | 0, i3, 0, 0, 1, 1);
 HEAP32[70] = _uncompressfont(532176) | 0;
 HEAP32[68186] = _tl_create_timer() | 0;
 _srand(_time(0) | 0);
 if ((HEAP32[68226] | 0) == 1) {
  i4 = 1;
 } else {
  HEAP32[68190] = 1;
  i5 = 5;
 }
 while (1) {
  if ((i5 | 0) == 5) {
   i5 = 0;
   i4 = HEAP32[68226] | 0;
  }
  if ((i4 | 0) == 2) {
   i5 = 36;
  } else if ((i4 | 0) != 3) {
   _load_song(272912) | 0;
   i6 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _bbupdate() | 0;
   if (___async) {
    i5 = 8;
    break;
   }
   _emscripten_free_async_context(i6 | 0);
   i3 = HEAP32[68188] | 0;
   HEAP32[68196] = i3;
   HEAP32[68194] = i3;
   i7 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _scene1();
   if (___async) {
    i5 = 10;
    break;
   }
   _emscripten_free_async_context(i7 | 0);
   i8 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _scene3();
   if (___async) {
    i5 = 12;
    break;
   }
   _emscripten_free_async_context(i8 | 0);
   if ((HEAP32[68192] | 0) != 0) {
    i5 = 68;
    break;
   }
   i9 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _vezen(303520, 317920, 331504, 348552);
   if (___async) {
    i5 = 15;
    break;
   }
   _emscripten_free_async_context(i9 | 0);
   i10 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _messager(272920);
   if (___async) {
    i5 = 17;
    break;
   }
   _emscripten_free_async_context(i10 | 0);
   i11 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _devezen2();
   if (___async) {
    i5 = 19;
    break;
   }
   _emscripten_free_async_context(i11 | 0);
   i12 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _scene4();
   if (___async) {
    i5 = 21;
    break;
   }
   _emscripten_free_async_context(i12 | 0);
   i13 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _scene2();
   if (___async) {
    i5 = 23;
    break;
   }
   _emscripten_free_async_context(i13 | 0);
   if ((HEAP32[68192] | 0) != 0) {
    i5 = 68;
    break;
   }
   i14 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _vezen(475568, 491336, 505592, 523320);
   if (___async) {
    i5 = 26;
    break;
   }
   _emscripten_free_async_context(i14 | 0);
   i15 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _messager(273328);
   if (___async) {
    i5 = 28;
    break;
   }
   _emscripten_free_async_context(i15 | 0);
   i16 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _devezen3();
   if (___async) {
    i5 = 30;
    break;
   }
   _emscripten_free_async_context(i16 | 0);
   i17 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _scene8();
   if (___async) {
    i5 = 32;
    break;
   }
   _emscripten_free_async_context(i17 | 0);
   i18 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _scene6();
   if (___async) {
    i5 = 34;
    break;
   }
   _emscripten_free_async_context(i18 | 0);
   i5 = 36;
  }
  if ((i5 | 0) == 36) {
   i5 = 0;
   if ((HEAP32[68192] | 0) != 0) {
    i5 = 68;
    break;
   }
   i19 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _vezen(416440, 431904, 448008, 462848);
   if (___async) {
    i5 = 38;
    break;
   }
   _emscripten_free_async_context(i19 | 0);
   i20 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _messager(273712);
   if (___async) {
    i5 = 40;
    break;
   }
   _emscripten_free_async_context(i20 | 0);
   i21 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _bbupdate() | 0;
   if (___async) {
    i5 = 42;
    break;
   }
   _emscripten_free_async_context(i21 | 0);
   i3 = HEAP32[68188] | 0;
   HEAP32[68196] = i3;
   HEAP32[68194] = i3;
   i22 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _devezen1();
   if (___async) {
    i5 = 44;
    break;
   }
   _emscripten_free_async_context(i22 | 0);
   if ((HEAP32[68192] | 0) != 0) {
    i5 = 68;
    break;
   }
   i23 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _scene7();
   if (___async) {
    i5 = 47;
    break;
   }
   _emscripten_free_async_context(i23 | 0);
   if ((HEAP32[68192] | 0) != 0) {
    i5 = 68;
    break;
   }
   i24 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _scene5();
   if (___async) {
    i5 = 50;
    break;
   }
   _emscripten_free_async_context(i24 | 0);
   if ((HEAP32[68192] | 0) != 0) {
    i5 = 68;
    break;
   }
   i25 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _scene10();
   if (___async) {
    i5 = 53;
    break;
   }
   _emscripten_free_async_context(i25 | 0);
   i26 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _vezen(361088, 376448, 390592, 404e3);
   if (___async) {
    i5 = 55;
    break;
   }
   _emscripten_free_async_context(i26 | 0);
   i27 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _messager(274136);
   if (___async) {
    i5 = 57;
    break;
   }
   _emscripten_free_async_context(i27 | 0);
   i28 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _devezen4();
   if (___async) {
    i5 = 59;
    break;
   }
   _emscripten_free_async_context(i28 | 0);
   if ((HEAP32[68192] | 0) != 0) {
    i5 = 68;
    break;
   }
   i29 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   _credits();
   if (___async) {
    i5 = 62;
    break;
   }
   _emscripten_free_async_context(i29 | 0);
   if ((HEAP32[68192] | 0) != 0) {
    i5 = 68;
    break;
   }
  }
  if ((HEAP32[68224] | 0) != 0) {
   i5 = 5;
   continue;
  }
  i30 = _emscripten_alloc_async_context(4) | 0;
  HEAP32[___async_cur_frame + 4 >> 2] = i1;
  _credits2();
  if (___async) {
   i5 = 66;
   break;
  }
  _emscripten_free_async_context(i30 | 0);
  if ((HEAP32[68224] | 0) == 0) {
   i5 = 68;
   break;
  } else {
   i5 = 5;
  }
 }
 switch (i5 | 0) {
 case 8:
  {
   HEAP32[i6 >> 2] = 132;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 10:
  {
   HEAP32[i7 >> 2] = 133;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 12:
  {
   HEAP32[i8 >> 2] = 134;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 15:
  {
   HEAP32[i9 >> 2] = 135;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 17:
  {
   HEAP32[i10 >> 2] = 136;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 19:
  {
   HEAP32[i11 >> 2] = 137;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 21:
  {
   HEAP32[i12 >> 2] = 138;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 23:
  {
   HEAP32[i13 >> 2] = 139;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 26:
  {
   HEAP32[i14 >> 2] = 140;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 28:
  {
   HEAP32[i15 >> 2] = 141;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 30:
  {
   HEAP32[i16 >> 2] = 142;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 32:
  {
   HEAP32[i17 >> 2] = 143;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 34:
  {
   HEAP32[i18 >> 2] = 144;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 38:
  {
   HEAP32[i19 >> 2] = 145;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 40:
  {
   HEAP32[i20 >> 2] = 146;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 42:
  {
   HEAP32[i21 >> 2] = 147;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 44:
  {
   HEAP32[i22 >> 2] = 148;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 47:
  {
   HEAP32[i23 >> 2] = 149;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 50:
  {
   HEAP32[i24 >> 2] = 150;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 53:
  {
   HEAP32[i25 >> 2] = 151;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 55:
  {
   HEAP32[i26 >> 2] = 152;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 57:
  {
   HEAP32[i27 >> 2] = 153;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 59:
  {
   HEAP32[i28 >> 2] = 154;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 62:
  {
   HEAP32[i29 >> 2] = 155;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 66:
  {
   HEAP32[i30 >> 2] = 156;
   i1 = STACKTOP;
   STACKTOP = i1;
   return 0;
  }
 case 68:
  {
   _aa_close(HEAP32[12936] | 0);
   STACKTOP = i1;
   return 0;
  }
 }
 return 0;
}
function _aa_renderpalette(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 i9 = i8 + 1024 | 0;
 i10 = i8;
 i11 = HEAP32[i1 + 152 >> 2] | 0;
 i12 = i3 + 8 | 0;
 i13 = +HEAPF32[i12 >> 2] != 1.0;
 i14 = HEAP32[i3 + 20 >> 2] | 0;
 i15 = HEAP32[i3 + 12 >> 2] | 0;
 if ((i7 | i6 | 0) < 0) {
  STACKTOP = i8;
  return;
 }
 i16 = i1 + 56 | 0;
 i17 = HEAP32[i16 >> 2] | 0;
 if ((i17 | 0) < (i4 | 0)) {
  STACKTOP = i8;
  return;
 }
 i18 = HEAP32[i1 + 60 >> 2] | 0;
 if ((i18 | 0) < (i5 | 0)) {
  STACKTOP = i8;
  return;
 }
 i19 = (i17 | 0) > (i6 | 0) ? i6 : i17;
 i20 = (i18 | 0) > (i7 | 0) ? i7 : i18;
 i21 = (i4 | 0) < 0 ? 0 : i4;
 i4 = (i5 | 0) < 0 ? 0 : i5;
 i5 = i1 + 172 | 0;
 if ((HEAP32[i5 >> 2] | 0) == 0) {
  _aa_mktable(i1) | 0;
 }
 if ((i15 | 0) == 2) {
  i22 = (i19 << 2) + 20 | 0;
  i23 = _calloc(1, i22) | 0;
  i24 = i23 + 12 | 0;
  HEAP32[i9 >> 2] = i24;
  i25 = _calloc(1, i22) | 0;
  i22 = i9 + 4 | 0;
  HEAP32[i22 >> 2] = i25;
  if ((i25 | 0) == 0) {
   _free(i24);
   i26 = 1;
  } else {
   i26 = (i23 | 0) == 0 ? 1 : 2;
  }
  HEAP32[i22 >> 2] = i25 + 12;
  i27 = i24;
  i28 = i26;
 } else {
  i27 = 0;
  i28 = i15;
 }
 i15 = HEAP32[i3 >> 2] | 0;
 i26 = HEAP32[i3 + 4 >> 2] | 0;
 i24 = (i26 | 0) == 0;
 i25 = (HEAP32[i3 + 16 >> 2] | 0) == 0;
 i3 = 256 - i26 | 0;
 i22 = 255 - (i26 << 1) | 0;
 i23 = 0;
 do {
  i29 = i15 + (HEAP32[i2 + (i23 << 2) >> 2] | 0) | 0;
  i30 = (i29 | 0) > 255 ? 255 : i29;
  i29 = (i30 | 0) < 0 ? 0 : i30;
  if (!i24) {
   if ((i29 | 0) >= (i26 | 0)) {
    if ((i29 | 0) > (i3 | 0)) {
     i31 = 255;
    } else {
     i31 = ((i29 - i26 | 0) * 255 | 0) / (i22 | 0) | 0;
    }
   } else {
    i31 = 0;
   }
  } else {
   i31 = i29;
  }
  if (i13) {
   i32 = ~~(+Math_pow(+(+(i31 | 0) / 255.0), +(+HEAPF32[i12 >> 2])) * 255.0 + .5);
  } else {
   i32 = i31;
  }
  i29 = i25 ? i32 : 255 - i32 | 0;
  if ((i29 | 0) > 255) {
   i33 = 255;
  } else {
   i33 = (i29 | 0) < 0 ? 0 : i29;
  }
  HEAP32[i10 + (i23 << 2) >> 2] = i33;
  i23 = i23 + 1 | 0;
 } while ((i23 | 0) != 256);
 if ((i14 | 0) == 0) {
  i34 = 0;
 } else {
  i34 = (i14 | 0) / 2 | 0;
 }
 i23 = i1 + 176 | 0;
 i33 = i1 + 180 | 0;
 i32 = HEAP32[(HEAP32[i33 >> 2] | 0) + ((HEAPU16[(HEAP32[i23 >> 2] | 0) + 510 >> 1] | 0) * 20 | 0) + 16 >> 2] | 0;
 if ((i4 | 0) < (i20 | 0)) {
  i20 = i11 << 1;
  i25 = (i21 | 0) < (i19 | 0);
  i31 = (i28 | 0) == 2;
  i12 = i19 + -1 | 0;
  i13 = (i12 | 0) > (i21 | 0);
  i22 = i19 + -2 | 0;
  i19 = i1 + 160 | 0;
  i26 = (i34 | 0) == 0;
  i3 = (i28 | 0) == 0;
  i24 = i1 + 168 | 0;
  i2 = i1 + 164 | 0;
  i1 = ~i17;
  i17 = ~i6;
  i6 = ~((i1 | 0) > (i17 | 0) ? i1 : i17);
  i17 = ~i18;
  i18 = ~i7;
  i7 = ~((i17 | 0) > (i18 | 0) ? i17 : i18);
  i18 = 0;
  i17 = i4;
  while (1) {
   if (i25) {
    i4 = i9 + (i18 << 2) | 0;
    i1 = i9 + ((i18 ^ 1) << 2) | 0;
    i15 = 0;
    i29 = Math_imul(i20, i17) | 0;
    i30 = Math_imul(HEAP32[i16 >> 2] | 0, i17) | 0;
    i35 = i21;
    while (1) {
     i36 = HEAP32[i19 >> 2] | 0;
     i37 = HEAP32[i10 + ((HEAPU8[i36 + i29 >> 0] | 0) << 2) >> 2] | 0;
     i38 = i29 + 1 | 0;
     i39 = HEAP32[i10 + ((HEAPU8[i36 + i38 >> 0] | 0) << 2) >> 2] | 0;
     i40 = HEAP32[i10 + ((HEAPU8[i36 + (i29 + i11) >> 0] | 0) << 2) >> 2] | 0;
     i41 = HEAP32[i10 + ((HEAPU8[i36 + (i38 + i11) >> 0] | 0) << 2) >> 2] | 0;
     if (!i26) {
      i38 = (Math_imul(HEAP32[131722] | 0, 1103515245) | 0) + 12345 | 0;
      HEAP32[131722] = i38;
      i36 = ((i38 | 0) % (i14 | 0) | 0) - i34 + i37 | 0;
      i42 = ((i38 >> 8 | 0) % (i14 | 0) | 0) - i34 + i39 | 0;
      i43 = ((i38 >> 16 | 0) % (i14 | 0) | 0) - i34 + i40 | 0;
      i44 = ((i38 >> 24 | 0) % (i14 | 0) | 0) - i34 + i41 | 0;
      if ((i42 | i36 | i43 | i44) >>> 0 > 255) {
       if ((i36 | 0) < 0) {
        i45 = 0;
       } else {
        i45 = (i36 | 0) > 255 ? 255 : i36;
       }
       if ((i42 | 0) < 0) {
        i46 = 0;
       } else {
        i46 = (i42 | 0) > 255 ? 255 : i42;
       }
       if ((i43 | 0) < 0) {
        i47 = 0;
       } else {
        i47 = (i43 | 0) > 255 ? 255 : i43;
       }
       if ((i44 | 0) < 0) {
        i48 = i45;
        i49 = i46;
        i50 = i47;
        i51 = 0;
       } else {
        i48 = i45;
        i49 = i46;
        i50 = i47;
        i51 = (i44 | 0) > 255 ? 255 : i44;
       }
      } else {
       i48 = i36;
       i49 = i42;
       i50 = i43;
       i51 = i44;
      }
     } else {
      i48 = i37;
      i49 = i39;
      i50 = i40;
      i51 = i41;
     }
     if ((i28 | 0) == 1) {
      i41 = i15 + 2 >> 2;
      i52 = i41;
      i53 = i48 + i41 | 0;
      i54 = i49 + i41 | 0;
      i55 = i50 + i41 | 0;
      i56 = i51 + i41 | 0;
     } else if ((i28 | 0) == 2 ? (i49 | i48 | i50 | i51 | 0) != 0 : 0) {
      i41 = HEAP32[i4 >> 2] | 0;
      i40 = i41 + (i35 + -2 << 2) | 0;
      HEAP32[i40 >> 2] = (HEAP32[i40 >> 2] | 0) + (i15 >> 4);
      i40 = i41 + (i35 + -1 << 2) | 0;
      HEAP32[i40 >> 2] = (HEAP32[i40 >> 2] | 0) + (i15 * 5 >> 4);
      HEAP32[i41 + (i35 << 2) >> 2] = i15 * 3 >> 4;
      i41 = (HEAP32[(HEAP32[i1 >> 2] | 0) + (i35 << 2) >> 2] | 0) + (i15 * 7 >> 4) | 0;
      i52 = i41;
      i53 = (i41 + 1 >> 2) + i48 | 0;
      i54 = (i41 >> 2) + i49 | 0;
      i55 = (i41 + 3 >> 2) + i50 | 0;
      i56 = (i41 + 2 >> 2) + i51 | 0;
     } else {
      i52 = i15;
      i53 = i48;
      i54 = i49;
      i55 = i50;
      i56 = i51;
     }
     i41 = i54 + i53 + i55 + i56 | 0;
     i40 = i41 >> 2;
     i39 = i53 - i40 | 0;
     i37 = (((i39 | 0) > -1 ? i39 : 0 - i39 | 0) | 0) < 13;
     do {
      if (i3) {
       if (((i37 ? (i39 = i54 - i40 | 0, (((i39 | 0) > -1 ? i39 : 0 - i39 | 0) | 0) < 13) : 0) ? (i39 = i55 - i40 | 0, (((i39 | 0) > -1 ? i39 : 0 - i39 | 0) | 0) < 13) : 0) ? (i39 = i56 - i40 | 0, (((i39 | 0) > -1 ? i39 : 0 - i39 | 0) | 0) < 13) : 0) {
        i57 = i52;
        i58 = HEAPU16[(HEAP32[i23 >> 2] | 0) + (i40 << 1) >> 1] | 0;
        break;
       }
       i57 = i52;
       i58 = HEAPU16[(HEAP32[i5 >> 2] | 0) + ((i54 >>> 4 << 12) + (i53 >>> 4 << 8) + (i55 >> 4) + (i56 & -16) << 1) >> 1] | 0;
      } else {
       if (((i37 ? (i39 = i54 - i40 | 0, (((i39 | 0) > -1 ? i39 : 0 - i39 | 0) | 0) < 13) : 0) ? (i39 = i55 - i40 | 0, (((i39 | 0) > -1 ? i39 : 0 - i39 | 0) | 0) < 13) : 0) ? (i39 = i56 - i40 | 0, (((i39 | 0) > -1 ? i39 : 0 - i39 | 0) | 0) < 13) : 0) {
        i39 = (i41 | 0) > 1023;
        i44 = i39 ? 255 : i40;
        i59 = (HEAP32[i23 >> 2] | 0) + (((i44 | 0) < 0 ? 0 : i44) << 1) | 0;
        i60 = i39 ? 1023 : i41;
       } else {
        do {
         if ((i54 | i53 | i55 | i56) >>> 0 > 255) {
          if ((i53 | 0) < 0) {
           i61 = 0;
          } else {
           i61 = (i53 | 0) > 255 ? 255 : i53;
          }
          if ((i54 | 0) < 0) {
           i62 = 0;
          } else {
           i62 = (i54 | 0) > 255 ? 255 : i54;
          }
          if ((i55 | 0) < 0) {
           i63 = 0;
          } else {
           i63 = (i55 | 0) > 255 ? 255 : i55;
          }
          if ((i56 | 0) < 0) {
           i64 = i61;
           i65 = i62;
           i66 = i63;
           i67 = 0;
           break;
          }
          i64 = i61;
          i65 = i62;
          i66 = i63;
          i67 = (i56 | 0) > 255 ? 255 : i56;
         } else {
          i64 = i53;
          i65 = i54;
          i66 = i55;
          i67 = i56;
         }
        } while (0);
        i59 = (HEAP32[i5 >> 2] | 0) + ((i65 >>> 4 << 12) + (i64 >>> 4 << 8) + (i66 >> 4) + (i67 & -16) << 1) | 0;
        i60 = i65 + i64 + i66 + i67 | 0;
       }
       i39 = HEAPU16[i59 >> 1] | 0;
       i57 = i60 - ((((HEAP32[(HEAP32[i33 >> 2] | 0) + (i39 * 20 | 0) + 16 >> 2] | 0) * 1020 | 0) >>> 0) / (i32 >>> 0) | 0) | 0;
       i58 = i39;
      }
     } while (0);
     HEAP8[(HEAP32[i24 >> 2] | 0) + i30 >> 0] = i58 >>> 8;
     HEAP8[(HEAP32[i2 >> 2] | 0) + i30 >> 0] = i58;
     i35 = i35 + 1 | 0;
     if ((i35 | 0) == (i6 | 0)) {
      i68 = i57;
      break;
     } else {
      i15 = i57;
      i29 = i29 + 2 | 0;
      i30 = i30 + 1 | 0;
     }
    }
   } else {
    i68 = 0;
   }
   if (i31) {
    if (i13) {
     i30 = (HEAP32[i9 + (i18 << 2) >> 2] | 0) + (i22 << 2) | 0;
     HEAP32[i30 >> 2] = (HEAP32[i30 >> 2] | 0) + (i68 >> 4);
    }
    if (i25) {
     i30 = HEAP32[i9 + (i18 << 2) >> 2] | 0;
     i29 = i30 + (i12 << 2) | 0;
     HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + (i68 * 5 >> 4);
     i69 = i30;
    } else {
     i69 = HEAP32[i9 + (i18 << 2) >> 2] | 0;
    }
    i30 = i18 ^ 1;
    HEAP32[(HEAP32[i9 + (i30 << 2) >> 2] | 0) + (i21 << 2) >> 2] = 0;
    HEAP32[i69 + -4 >> 2] = 0;
    i70 = i30;
   } else {
    i70 = i18;
   }
   i17 = i17 + 1 | 0;
   if ((i17 | 0) == (i7 | 0)) {
    break;
   } else {
    i18 = i70;
   }
  }
 }
 if ((i28 | 0) != 2) {
  STACKTOP = i8;
  return;
 }
 _free(i27 + -12 | 0);
 _free((HEAP32[i9 + 4 >> 2] | 0) + -12 | 0);
 STACKTOP = i8;
 return;
}
function _qsort(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 944 | 0;
 i6 = i5 + 680 | 0;
 i7 = i5 + 424 | 0;
 i8 = i5 + 192 | 0;
 i9 = i5;
 i10 = Math_imul(i3, i2) | 0;
 if ((i10 | 0) == 0) {
  STACKTOP = i5;
  return;
 }
 i2 = i10 - i3 | 0;
 HEAP32[i9 + 4 >> 2] = i3;
 HEAP32[i9 >> 2] = i3;
 i11 = i3;
 i12 = i3;
 i13 = 2;
 while (1) {
  i14 = i11 + i3 + i12 | 0;
  HEAP32[i9 + (i13 << 2) >> 2] = i14;
  if (i14 >>> 0 < i10 >>> 0) {
   i15 = i12;
   i12 = i14;
   i13 = i13 + 1 | 0;
   i11 = i15;
  } else {
   break;
  }
 }
 i11 = 0 - i3 | 0;
 i13 = i1 + i2 | 0;
 if ((i2 | 0) > 0) {
  i2 = (i3 | 0) == 0;
  i12 = i3 >>> 0 > 256 ? 256 : i3;
  i10 = (i12 | 0) == (i3 | 0);
  i15 = i13;
  i14 = 1;
  i16 = 0;
  i17 = i1;
  i18 = 1;
  while (1) {
   do {
    if ((i14 & 3 | 0) != 3) {
     i19 = i18 + -1 | 0;
     L13 : do {
      if ((HEAP32[i9 + (i19 << 2) >> 2] | 0) >>> 0 < (i15 - i17 | 0) >>> 0) {
       HEAP32[i8 >> 2] = i17;
       if ((i18 | 0) > 1) {
        i20 = i18;
        i21 = i17;
        i22 = i17;
        i23 = 1;
        while (1) {
         i24 = i21 + i11 | 0;
         i25 = i20 + -2 | 0;
         i26 = i21 + (0 - ((HEAP32[i9 + (i25 << 2) >> 2] | 0) + i3)) | 0;
         if ((FUNCTION_TABLE_iii[i4 & 3](i22, i26) | 0) > -1 ? (FUNCTION_TABLE_iii[i4 & 3](i22, i24) | 0) > -1 : 0) {
          i27 = i23;
          break;
         }
         i28 = i23 + 1 | 0;
         i29 = i8 + (i23 << 2) | 0;
         if ((FUNCTION_TABLE_iii[i4 & 3](i26, i24) | 0) > -1) {
          HEAP32[i29 >> 2] = i26;
          i30 = i26;
          i31 = i20 + -1 | 0;
         } else {
          HEAP32[i29 >> 2] = i24;
          i30 = i24;
          i31 = i25;
         }
         if ((i31 | 0) <= 1) {
          i27 = i28;
          break;
         }
         i20 = i31;
         i21 = i30;
         i22 = HEAP32[i8 >> 2] | 0;
         i23 = i28;
        }
        if ((i27 | 0) >= 2 ? (i23 = i8 + (i27 << 2) | 0, HEAP32[i23 >> 2] = i6, !i2) : 0) {
         if ((i27 | 0) > 0) {
          i32 = i3;
          i33 = i6;
         } else {
          i22 = HEAP32[i8 >> 2] | 0;
          _memcpy(i6 | 0, i22 | 0, i12 | 0) | 0;
          if (i10) {
           break;
          } else {
           i34 = i3;
           i35 = i12;
          }
          while (1) {
           i34 = i34 - i35 | 0;
           i35 = i34 >>> 0 > 256 ? 256 : i34;
           _memcpy(i6 | 0, i22 | 0, i35 | 0) | 0;
           if ((i34 | 0) == (i35 | 0)) {
            break L13;
           }
          }
         }
         while (1) {
          i22 = i32 >>> 0 > 256 ? 256 : i32;
          i21 = HEAP32[i8 >> 2] | 0;
          _memcpy(i33 | 0, i21 | 0, i22 | 0) | 0;
          i20 = i21;
          i21 = 0;
          do {
           i28 = i21;
           i21 = i21 + 1 | 0;
           i25 = i20;
           i20 = HEAP32[i8 + (i21 << 2) >> 2] | 0;
           _memcpy(i25 | 0, i20 | 0, i22 | 0) | 0;
           HEAP32[i8 + (i28 << 2) >> 2] = i25 + i22;
          } while ((i21 | 0) != (i27 | 0));
          if ((i32 | 0) == (i22 | 0)) {
           break L13;
          }
          i32 = i32 - i22 | 0;
          i33 = HEAP32[i23 >> 2] | 0;
         }
        }
       }
      } else {
       _trinkle(i17, i3, i4, i14, i16, i18, 0, i9);
      }
     } while (0);
     if ((i18 | 0) == 1) {
      i36 = i14 << 1;
      i37 = i14 >>> 31 | i16 << 1;
      i38 = 0;
      break;
     } else {
      i23 = i19 >>> 0 > 31;
      i21 = i23 ? 0 : i14;
      i20 = i23 ? i18 + -33 | 0 : i19;
      i36 = i21 << i20;
      i37 = i21 >>> (32 - i20 | 0) | (i23 ? i14 : i16) << i20;
      i38 = 1;
      break;
     }
    } else {
     HEAP32[i8 >> 2] = i17;
     L44 : do {
      if ((i18 | 0) > 1) {
       i20 = i18;
       i23 = i17;
       i21 = i17;
       i25 = 1;
       while (1) {
        i28 = i23 + i11 | 0;
        i24 = i20 + -2 | 0;
        i29 = i23 + (0 - ((HEAP32[i9 + (i24 << 2) >> 2] | 0) + i3)) | 0;
        if ((FUNCTION_TABLE_iii[i4 & 3](i21, i29) | 0) > -1 ? (FUNCTION_TABLE_iii[i4 & 3](i21, i28) | 0) > -1 : 0) {
         i39 = i25;
         break;
        }
        i26 = i25 + 1 | 0;
        i40 = i8 + (i25 << 2) | 0;
        if ((FUNCTION_TABLE_iii[i4 & 3](i29, i28) | 0) > -1) {
         HEAP32[i40 >> 2] = i29;
         i41 = i29;
         i42 = i20 + -1 | 0;
        } else {
         HEAP32[i40 >> 2] = i28;
         i41 = i28;
         i42 = i24;
        }
        if ((i42 | 0) <= 1) {
         i39 = i26;
         break;
        }
        i20 = i42;
        i23 = i41;
        i21 = HEAP32[i8 >> 2] | 0;
        i25 = i26;
       }
       if ((i39 | 0) >= 2 ? (i25 = i8 + (i39 << 2) | 0, HEAP32[i25 >> 2] = i7, !i2) : 0) {
        if ((i39 | 0) > 0) {
         i43 = i3;
         i44 = i7;
        } else {
         i21 = HEAP32[i8 >> 2] | 0;
         _memcpy(i7 | 0, i21 | 0, i12 | 0) | 0;
         if (i10) {
          break;
         } else {
          i45 = i3;
          i46 = i12;
         }
         while (1) {
          i45 = i45 - i46 | 0;
          i46 = i45 >>> 0 > 256 ? 256 : i45;
          _memcpy(i7 | 0, i21 | 0, i46 | 0) | 0;
          if ((i45 | 0) == (i46 | 0)) {
           break L44;
          }
         }
        }
        while (1) {
         i21 = i43 >>> 0 > 256 ? 256 : i43;
         i23 = HEAP32[i8 >> 2] | 0;
         _memcpy(i44 | 0, i23 | 0, i21 | 0) | 0;
         i20 = i23;
         i23 = 0;
         do {
          i26 = i23;
          i23 = i23 + 1 | 0;
          i24 = i20;
          i20 = HEAP32[i8 + (i23 << 2) >> 2] | 0;
          _memcpy(i24 | 0, i20 | 0, i21 | 0) | 0;
          HEAP32[i8 + (i26 << 2) >> 2] = i24 + i21;
         } while ((i23 | 0) != (i39 | 0));
         if ((i43 | 0) == (i21 | 0)) {
          break L44;
         }
         i43 = i43 - i21 | 0;
         i44 = HEAP32[i25 >> 2] | 0;
        }
       }
      }
     } while (0);
     i36 = i14 >>> 2 | i16 << 30;
     i37 = i16 >>> 2;
     i38 = i18 + 2 | 0;
    }
   } while (0);
   i19 = i36 | 1;
   i25 = i17 + i3 | 0;
   if (i25 >>> 0 < i13 >>> 0) {
    i14 = i19;
    i16 = i37;
    i17 = i25;
    i18 = i38;
   } else {
    i47 = i37;
    i48 = i19;
    i49 = i25;
    i50 = i38;
    break;
   }
  }
 } else {
  i47 = 0;
  i48 = 1;
  i49 = i1;
  i50 = 1;
 }
 _trinkle(i49, i3, i4, i48, i47, i50, 0, i9);
 i1 = i48;
 i48 = i47;
 i47 = i49;
 i49 = i50;
 while (1) {
  if ((i49 | 0) == 1) {
   if ((i1 | 0) == 1) {
    if ((i48 | 0) == 0) {
     break;
    } else {
     i51 = 52;
    }
   }
  } else {
   i51 = 52;
  }
  if ((i51 | 0) == 52 ? (i51 = 0, (i49 | 0) >= 2) : 0) {
   i50 = i1 >>> 30;
   i38 = i49 + -2 | 0;
   i37 = (i1 << 1 & 2147483646 | i50 << 31) ^ 3;
   i18 = (i50 | i48 << 2) >>> 1;
   _trinkle(i47 + (0 - ((HEAP32[i9 + (i38 << 2) >> 2] | 0) + i3)) | 0, i3, i4, i37, i18, i49 + -1 | 0, 1, i9);
   i17 = i18 << 1 | i50 & 1;
   i50 = i37 << 1 | 1;
   i37 = i47 + i11 | 0;
   _trinkle(i37, i3, i4, i50, i17, i38, 1, i9);
   i1 = i50;
   i48 = i17;
   i47 = i37;
   i49 = i38;
   continue;
  }
  i38 = i1 + -1 | 0;
  if ((i38 | 0) != 0) {
   if ((i38 & 1 | 0) == 0) {
    i37 = i38;
    i38 = 0;
    do {
     i38 = i38 + 1 | 0;
     i37 = i37 >>> 1;
    } while ((i37 & 1 | 0) == 0);
    if ((i38 | 0) != 0) {
     i52 = i38;
    } else {
     i51 = 57;
    }
   } else {
    i51 = 57;
   }
   if ((i51 | 0) == 57) {
    i51 = 0;
    if ((i48 | 0) != 0) {
     if ((i48 & 1 | 0) == 0) {
      i37 = i48;
      i17 = 0;
      while (1) {
       i50 = i17 + 1 | 0;
       i37 = i37 >>> 1;
       if ((i37 & 1 | 0) != 0) {
        i53 = i50;
        break;
       } else {
        i17 = i50;
       }
      }
     } else {
      i53 = 0;
     }
    } else {
     i53 = 32;
    }
    i52 = (i53 | 0) == 0 ? 0 : i53 + 32 | 0;
   }
   if (i52 >>> 0 > 31) {
    i54 = i52;
    i51 = 62;
   } else {
    i55 = i52;
    i56 = i1;
    i57 = i48;
    i58 = i52;
   }
  } else {
   i54 = 32;
   i51 = 62;
  }
  if ((i51 | 0) == 62) {
   i51 = 0;
   i55 = i54 + -32 | 0;
   i56 = i48;
   i57 = 0;
   i58 = i54;
  }
  i1 = i57 << 32 - i55 | i56 >>> i55;
  i48 = i57 >>> i55;
  i47 = i47 + i11 | 0;
  i49 = i58 + i49 | 0;
 }
 STACKTOP = i5;
 return;
}
function _scene6__async_cb29(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, d13 = 0.0, i14 = 0, d15 = 0.0, d16 = 0.0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, d24 = 0.0, d25 = 0.0, i26 = 0, d27 = 0.0, d28 = 0.0, i29 = 0, d30 = 0.0, i31 = 0, d32 = 0.0, d33 = 0.0, d34 = 0.0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, d40 = 0.0, i41 = 0, d42 = 0.0, i43 = 0, i44 = 0, i45 = 0, i46 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2;
 i5 = i2 + 16 | 0;
 d6 = +HEAPF64[i1 + 8 >> 3];
 d7 = +HEAPF64[i1 + 16 >> 3];
 i8 = HEAP32[i1 + 24 >> 2] | 0;
 i9 = HEAP32[i1 + 28 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAPF64[i4 >> 3] = d6;
 HEAPF64[i3 >> 3] = d7;
 HEAP32[68720] = 2;
 i1 = HEAP32[68736] | 0;
 d7 = +HEAPF64[i1 + 1192 >> 3];
 d6 = +HEAPF64[i1 + 1184 >> 3];
 i10 = i1;
 L2 : while (1) {
  HEAP32[68824] = 1;
  HEAPF64[34410] = d7 + +HEAPF64[i4 >> 3] * ((d6 - d7) / +(HEAP32[i10 + 128 >> 2] | 0));
  d11 = +HEAPF64[i10 + 1208 >> 3];
  HEAPF64[34411] = d11 + +HEAPF64[i3 >> 3] * ((+HEAPF64[i10 + 1200 >> 3] - d11) / +(HEAP32[i10 + 132 >> 2] | 0));
  L4 : while (1) {
   if ((HEAP32[i5 >> 2] & 512 | 0) == 0) {
    HEAP32[68824] = 0;
   }
   d11 = +HEAPF64[34366];
   do {
    if (d11 > 0.0) {
     d12 = +HEAPF64[34413] * 6.0e-4;
     if (d11 < d12) {
      HEAPF64[34366] = 0.0;
      d13 = 0.0;
      i14 = 0;
      break;
     } else {
      d15 = d11 - d12;
      HEAPF64[34366] = d15;
      d13 = d15;
      i14 = 0;
      break;
     }
    } else {
     if (d11 < 0.0) {
      d15 = +HEAPF64[34413];
      if (d11 > d15 * -6.0e-4) {
       HEAPF64[34366] = 0.0;
       d13 = 0.0;
       i14 = 0;
       break;
      } else {
       d12 = d11 + d15 * 6.0e-4;
       HEAPF64[34366] = d12;
       d13 = d12;
       i14 = 0;
       break;
      }
     } else {
      d13 = d11;
      i14 = 0;
     }
    }
   } while (0);
   while (1) {
    d11 = +HEAPF64[34365];
    if (!(d13 > d11)) {
     d12 = -d11;
     if (d13 < d12) {
      HEAPF64[34366] = d12;
      d16 = d12;
     } else {
      d16 = d13;
     }
    } else {
     HEAPF64[34366] = d11;
     d16 = d11;
    }
    if (d16 != 0.0) {
     i17 = 50;
     break L2;
    }
    if ((i14 | 0) == 0) {
     HEAP32[68720] = 2;
    }
    i1 = HEAP32[68188] | 0;
    i18 = HEAP32[68196] | 0;
    if (!((i1 | 0) < (i18 | 0) & (HEAP32[68190] | 0) == 0)) {
     i17 = 56;
     break L2;
    }
    i19 = HEAP32[68194] | 0;
    if ((i1 | 0) < (i19 + 2e5 | 0)) {
     i20 = HEAP32[22682] | 0;
     HEAP32[i20 >> 2] = 255 - (((i1 - i19 | 0) * 255 | 0) / 2e5 | 0);
     i21 = i20;
    } else {
     i20 = HEAP32[22682] | 0;
     HEAP32[i20 >> 2] = 0;
     i21 = i20;
    }
    i20 = HEAP32[68188] | 0;
    i19 = HEAP32[68196] | 0;
    if ((i20 | 0) > (i19 + -1e6 | 0)) {
     HEAP32[i21 >> 2] = (((i19 - i20 | 0) * 255 | 0) / 1e6 | 0) + -255;
    }
    if ((HEAP32[68722] | 0) == 0 ? (HEAP32[(HEAP32[68736] | 0) + 120 >> 2] | 0) != 0 : 0) {
     i17 = 8;
     break L2;
    }
    HEAP32[68722] = 0;
    i20 = HEAP32[68720] | 0;
    if ((i20 | 0) != 0) {
     HEAPF64[34413] = 1.0;
    }
    if ((HEAP32[68728] | 0) == 0) {
     i22 = i20;
     i23 = 0;
     d24 = 0.0;
     d25 = 0.0;
    } else {
     d11 = +HEAPF64[34413] + +HEAPF64[34409];
     HEAPF64[34409] = d11;
     if (d11 > 1.0) {
      do {
       _do_autopilot(HEAP32[68736] | 0, 275312, 275320, 275328, 24);
       d11 = +HEAPF64[34409] + -1.0;
       HEAPF64[34409] = d11;
      } while (d11 > 1.0);
      i26 = HEAP32[68720] | 0;
     } else {
      i26 = i20;
     }
     i22 = i26;
     i23 = HEAP32[68832] | 0;
     d24 = +(HEAP32[68828] | 0);
     d25 = +(HEAP32[68830] | 0);
    }
    HEAPF64[i3 >> 3] = d25;
    HEAPF64[i4 >> 3] = d24;
    HEAP32[i5 >> 2] = i23;
    if ((i22 | 0) == 0) {
     d11 = +HEAPF64[34413];
     if (d11 == 0.0) {
      HEAPF64[34413] = .001;
      d27 = .001;
     } else {
      d27 = d11;
     }
    } else {
     HEAPF64[34413] = 1.0;
     d27 = 1.0;
    }
    if ((HEAP32[i5 >> 2] | 0) <= 0) {
     continue L4;
    }
    i19 = HEAP32[i5 >> 2] | 0;
    if ((i19 | 0) == 512) {
     break L4;
    } else if ((i19 | 0) == 256) {
     d28 = +HEAPF64[34366] - d27 * .0012;
    } else if ((i19 | 0) == 1024) {
     d28 = d27 * .0012 + +HEAPF64[34366];
    } else {
     continue L4;
    }
    HEAPF64[34366] = d28;
    HEAP32[68824] = 0;
    d13 = d28;
    i14 = 1;
   }
  }
  i19 = i10;
  i10 = HEAP32[68736] | 0;
  i19 = i10 + 1192 | 0;
  d11 = +HEAPF64[i19 >> 3];
  i1 = i10 + 1184 | 0;
  d12 = +HEAPF64[i1 >> 3];
  d15 = d11 + +HEAPF64[i4 >> 3] * ((d12 - d11) / +(HEAP32[i10 + 128 >> 2] | 0));
  i29 = i10 + 1208 | 0;
  d30 = +HEAPF64[i29 >> 3];
  i31 = i10 + 1200 | 0;
  d32 = +HEAPF64[i31 >> 3];
  d33 = d30 + +HEAPF64[i3 >> 3] * ((d32 - d30) / +(HEAP32[i10 + 132 >> 2] | 0));
  if ((HEAP32[68824] | 0) == 0) {
   d7 = d11;
   d6 = d12;
   i10 = i10;
   continue;
  }
  d34 = +HEAPF64[34410];
  if (!(d34 != d15 | +HEAPF64[34411] != d33)) {
   d7 = d11;
   d6 = d12;
   i10 = i10;
   continue;
  }
  d7 = d11 - (d15 - d34);
  HEAPF64[i19 >> 3] = d7;
  d6 = d12 - (d15 - +HEAPF64[34410]);
  HEAPF64[i1 >> 3] = d6;
  HEAPF64[i29 >> 3] = d30 - (d33 - +HEAPF64[34411]);
  HEAPF64[i31 >> 3] = d32 - (d33 - +HEAPF64[34411]);
  if (!(+HEAPF64[34366] != 0.0)) {
   i17 = 29;
   break;
  }
 }
 if ((i17 | 0) == 8) {
  i10 = _emscripten_realloc_async_context(12) | 0;
  _ui_do_fractal(1);
  if (___async) {
   HEAP32[i10 >> 2] = 188;
   i35 = i10 + 4 | 0;
   HEAP32[i35 >> 2] = i8;
   i36 = i10 + 8 | 0;
   HEAP32[i36 >> 2] = i9;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i10 >> 2] = 188;
  i35 = i10 + 4 | 0;
  HEAP32[i35 >> 2] = i8;
  i36 = i10 + 8 | 0;
  HEAP32[i36 >> 2] = i9;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else if ((i17 | 0) == 29) {
  i36 = _emscripten_realloc_async_context(32) | 0;
  _ui_do_fractal(1);
  if (___async) {
   HEAP32[i36 >> 2] = 189;
   i37 = i36 + 4 | 0;
   i38 = HEAP32[i5 >> 2] | 0;
   HEAP32[i37 >> 2] = i38;
   i39 = i36 + 8 | 0;
   d40 = +HEAPF64[i4 >> 3];
   HEAPF64[i39 >> 3] = d40;
   i41 = i36 + 16 | 0;
   d42 = +HEAPF64[i3 >> 3];
   HEAPF64[i41 >> 3] = d42;
   i43 = i36 + 24 | 0;
   HEAP32[i43 >> 2] = i8;
   i44 = i36 + 28 | 0;
   HEAP32[i44 >> 2] = i9;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i36 >> 2] = 189;
  i37 = i36 + 4 | 0;
  i38 = HEAP32[i5 >> 2] | 0;
  HEAP32[i37 >> 2] = i38;
  i39 = i36 + 8 | 0;
  d40 = +HEAPF64[i4 >> 3];
  HEAPF64[i39 >> 3] = d40;
  i41 = i36 + 16 | 0;
  d42 = +HEAPF64[i3 >> 3];
  HEAPF64[i41 >> 3] = d42;
  i43 = i36 + 24 | 0;
  HEAP32[i43 >> 2] = i8;
  i44 = i36 + 28 | 0;
  HEAP32[i44 >> 2] = i9;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else if ((i17 | 0) == 50) {
  i44 = HEAP32[68736] | 0;
  i36 = i44 + 1192 | 0;
  d42 = +HEAPF64[i36 >> 3];
  i43 = i44 + 1184 | 0;
  d40 = +HEAPF64[i43 >> 3];
  d6 = d42 + +HEAPF64[i4 >> 3] * ((d40 - d42) / +(HEAP32[i44 + 128 >> 2] | 0));
  i4 = i44 + 1208 | 0;
  d7 = +HEAPF64[i4 >> 3];
  i41 = i44 + 1200 | 0;
  d28 = +HEAPF64[i41 >> 3];
  d13 = d7 + +HEAPF64[i3 >> 3] * ((d28 - d7) / +(HEAP32[i44 + 132 >> 2] | 0));
  d27 = +Math_pow(+(d16 + 1.0), +(+HEAPF64[34413]));
  HEAPF64[i43 >> 3] = d6 + (d40 - d6) * d27;
  HEAPF64[i36 >> 3] = d6 + (d42 - d6) * d27;
  HEAPF64[i41 >> 3] = d13 + d27 * (d28 - d13);
  HEAPF64[i4 >> 3] = d13 + d27 * (d7 - d13);
  i4 = _emscripten_realloc_async_context(12) | 0;
  _ui_do_fractal(1);
  if (___async) {
   HEAP32[i4 >> 2] = 190;
   i45 = i4 + 4 | 0;
   HEAP32[i45 >> 2] = i8;
   i46 = i4 + 8 | 0;
   HEAP32[i46 >> 2] = i9;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i4 >> 2] = 190;
  i45 = i4 + 4 | 0;
  HEAP32[i45 >> 2] = i8;
  i46 = i4 + 8 | 0;
  HEAP32[i46 >> 2] = i9;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else if ((i17 | 0) == 56) {
  HEAP32[68194] = i18;
  HEAP32[(HEAP32[12936] | 0) + 160 >> 2] = i8;
  _free(i9);
  _tl_free_timer(HEAP32[68734] | 0);
  i9 = HEAP32[22682] | 0;
  HEAP32[i9 >> 2] = 0;
  HEAP32[i9 + 20 >> 2] = 0;
  _initlepic();
  HEAP32[34] = 25;
  i9 = _emscripten_realloc_async_context(4) | 0;
  _timestuff(-60, 157, 1, 2e6);
  if (___async) {
   HEAP32[i9 >> 2] = 191;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i9 >> 2] = 191;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
}
function _scene1() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, d5 = 0.0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _aa_showcursor(i2);
 if (___async) {
  HEAP32[i3 >> 2] = 34;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 i3 = HEAP32[12936] | 0;
 _memset(HEAP32[i3 + 164 >> 2] | 0, 32, Math_imul(HEAP32[i3 + 60 >> 2] | 0, HEAP32[i3 + 56 >> 2] | 0) | 0) | 0;
 i3 = HEAP32[12936] | 0;
 _memset(HEAP32[i3 + 168 >> 2] | 0, 0, Math_imul(HEAP32[i3 + 60 >> 2] | 0, HEAP32[i3 + 56 >> 2] | 0) | 0) | 0;
 i3 = HEAP32[12936] | 0;
 _memset(HEAP32[i3 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i3 + 156 >> 2] | 0, HEAP32[i3 + 152 >> 2] | 0) | 0) | 0;
 HEAP32[36] = 160;
 HEAP32[50] = 0;
 HEAP32[52] = 0;
 HEAP32[54] = 255;
 HEAPF64[28] = 0.0;
 HEAPF64[29] = 0.0;
 HEAPF64[30] = 0.0;
 HEAPF64[19] = -10.0;
 HEAP32[62] = 0;
 HEAP32[64] = 0;
 HEAP32[66] = 0;
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(-10, 35, 2, 2e6);
 if (___async) {
  HEAP32[i3 >> 2] = 36;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(-40, 35, 2, 2e6);
 if (___async) {
  HEAP32[i3 >> 2] = 37;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(-80, 35, 2, 2e6);
 if (___async) {
  HEAP32[i3 >> 2] = 38;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(-30, 39, 2, 2e6);
 if (___async) {
  HEAP32[i3 >> 2] = 40;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(-200, 39, 2, 2e6);
 if (___async) {
  HEAP32[i3 >> 2] = 41;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(-420, 39, 2, 2e6);
 if (___async) {
  HEAP32[i3 >> 2] = 42;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 HEAP32[66] = 1;
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(600, 39, 2, 2e6);
 if (___async) {
  HEAP32[i3 >> 2] = 43;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 HEAP32[66] = 800;
 HEAP32[(HEAP32[22682] | 0) + 20 >> 2] = 3620;
 HEAP32[36] = 272;
 i3 = HEAP32[12936] | 0;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _aa_gotoxy(i3, 0, 0);
 if (___async) {
  HEAP32[i2 >> 2] = 44;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 i2 = HEAP32[12936] | 0;
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _aa_hidecursor(i2);
 if (___async) {
  HEAP32[i3 >> 2] = 45;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(20, 46, 3, 2e6);
 if (___async) {
  HEAP32[i3 >> 2] = 47;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(20, 46, 3, 2e6);
 if (___async) {
  HEAP32[i3 >> 2] = 48;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 HEAP32[64] = 1;
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(20, 46, 3, 2e6);
 if (___async) {
  HEAP32[i3 >> 2] = 49;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 HEAP32[64] = 40;
 HEAP32[62] = 1;
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(20, 46, 3, 2e6);
 if (___async) {
  HEAP32[i3 >> 2] = 50;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 HEAP32[62] = 40;
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(20, 46, 3, 2e6);
 if (___async) {
  HEAP32[i3 >> 2] = 51;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 HEAP32[34] = 4;
 _play();
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(20, 52, 1, 6e6);
 if (___async) {
  HEAP32[i3 >> 2] = 53;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(20, 54, 1, 2e6);
 if (___async) {
  HEAP32[i3 >> 2] = 55;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 HEAPF64[30] = +(HEAP32[(HEAP32[12936] | 0) + 156 >> 2] << 1 | 0);
 HEAP32[34] = 5;
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(60, 56, 1, 5e6);
 if (___async) {
  HEAP32[i3 >> 2] = 57;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(60, 58, 1, 2e5);
 if (___async) {
  HEAP32[i3 >> 2] = 59;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(60, 60, 1, 3e5);
 if (___async) {
  HEAP32[i3 >> 2] = 61;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 HEAP32[34] = 0;
 if ((HEAP32[(HEAP32[HEAP32[12936] >> 2] | 0) + 24 >> 2] | 0) != 0) {
  HEAP32[(HEAP32[22682] | 0) + 12 >> 2] = 0;
 }
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _strobikstart();
 if (___async) {
  HEAP32[i3 >> 2] = 62;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 i3 = HEAP32[22682] | 0;
 i2 = 0;
 while (1) {
  HEAP32[i3 + 20 >> 2] = 0;
  i4 = HEAP32[432 + (i2 << 2) >> 2] | 0;
  d5 = +HEAPF32[512 + (i2 << 2) >> 2];
  i6 = HEAP32[12936] | 0;
  _memset(HEAP32[i6 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i6 + 156 >> 2] | 0, HEAP32[i6 + 152 >> 2] | 0) | 0) | 0;
  i6 = HEAP32[12936] | 0;
  _centerprint((HEAP32[i6 + 152 >> 2] | 0) / 2 | 0, (HEAP32[i6 + 156 >> 2] | 0) / 2 | 0, d5, 255, i4, 3);
  i7 = _emscripten_alloc_async_context(8) | 0;
  HEAP32[___async_cur_frame + 4 >> 2] = i1;
  _timestuff(-60, 13, 1, 285714);
  if (___async) {
   i8 = 47;
   break;
  }
  _emscripten_free_async_context(i7 | 0);
  HEAP32[HEAP32[22682] >> 2] = 0;
  i9 = _emscripten_alloc_async_context(8) | 0;
  HEAP32[___async_cur_frame + 4 >> 2] = i1;
  _draw();
  if (___async) {
   i8 = 49;
   break;
  }
  _emscripten_free_async_context(i9 | 0);
  i10 = i2 + 1 | 0;
  i11 = _emscripten_alloc_async_context(8) | 0;
  HEAP32[___async_cur_frame + 4 >> 2] = i1;
  _strobikstart();
  if (___async) {
   i8 = 51;
   break;
  }
  _emscripten_free_async_context(i11 | 0);
  i3 = HEAP32[22682] | 0;
  if ((i10 | 0) == 19) {
   i8 = 53;
   break;
  } else {
   i2 = i10;
  }
 }
 if ((i8 | 0) == 47) {
  HEAP32[i7 >> 2] = 63;
  HEAP32[i7 + 4 >> 2] = i2;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else if ((i8 | 0) == 49) {
  HEAP32[i9 >> 2] = 64;
  HEAP32[i9 + 4 >> 2] = i2;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else if ((i8 | 0) == 51) {
  HEAP32[i11 >> 2] = 65;
  HEAP32[i11 + 4 >> 2] = i10;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else if ((i8 | 0) == 53) {
  HEAP32[i3 + 12 >> 2] = 2;
  i3 = _emscripten_alloc_async_context(4) | 0;
  HEAP32[___async_cur_frame + 4 >> 2] = i1;
  _draw();
  if (___async) {
   HEAP32[i3 >> 2] = 66;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  } else {
   _emscripten_free_async_context(i3 | 0);
   STACKTOP = i1;
   return;
  }
 }
}
function _aa_flush__async_cb53(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 i6 = HEAP32[i1 + 4 >> 2] | 0;
 i7 = HEAP32[i1 + 8 >> 2] | 0;
 i8 = HEAP32[i1 + 12 >> 2] | 0;
 i9 = HEAP32[i1 + 16 >> 2] | 0;
 i10 = HEAP32[i1 + 24 >> 2] | 0;
 i11 = HEAP32[i1 + 28 >> 2] | 0;
 i12 = HEAP32[i1 + 32 >> 2] | 0;
 i13 = HEAP32[i1 + 36 >> 2] | 0;
 i14 = HEAP32[i1 + 40 >> 2] | 0;
 i15 = HEAP32[i1 + 44 >> 2] | 0;
 i16 = HEAP8[i1 + 48 >> 0] & 1;
 i17 = HEAP32[i1 + 52 >> 2] | 0;
 i18 = HEAP32[i1 + 56 >> 2] | 0;
 i19 = HEAP8[i1 + 60 >> 0] & 1;
 i20 = HEAP32[i1 + 64 >> 2] | 0;
 i21 = HEAP32[i1 + 68 >> 2] | 0;
 i22 = HEAP32[i1 + 72 >> 2] | 0;
 i23 = HEAP32[i1 + 76 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[i1 + 20 >> 2];
 HEAP32[i4 >> 2] = i22;
 HEAP32[i3 >> 2] = i23;
 i23 = HEAP32[i5 >> 2] | 0;
 i22 = HEAP32[i5 >> 2] | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i24 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[i4 >> 2] | 0) >= (i15 | 0)) {
  i25 = HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] | 0;
  i26 = HEAP32[i11 >> 2] | 0;
  i27 = HEAP32[i12 >> 2] | 0;
  i28 = _emscripten_realloc_async_context(72) | 0;
  FUNCTION_TABLE_viii[i25 & 3](i6, i26, i27);
  if (___async) {
   HEAP32[i28 >> 2] = 275;
   i29 = i28 + 4 | 0;
   HEAP32[i29 >> 2] = i7;
   i30 = i28 + 8 | 0;
   HEAP32[i30 >> 2] = i6;
   i31 = i28 + 12 | 0;
   HEAP32[i31 >> 2] = i8;
   i32 = i28 + 16 | 0;
   HEAP32[i32 >> 2] = i9;
   i33 = i28 + 20 | 0;
   HEAP32[i33 >> 2] = i10;
   i34 = i28 + 24 | 0;
   HEAP32[i34 >> 2] = i11;
   i35 = i28 + 28 | 0;
   HEAP32[i35 >> 2] = i12;
   i36 = i28 + 32 | 0;
   HEAP32[i36 >> 2] = i13;
   i37 = i28 + 36 | 0;
   HEAP32[i37 >> 2] = i14;
   i38 = i28 + 40 | 0;
   HEAP32[i38 >> 2] = i15;
   i39 = i28 + 44 | 0;
   i40 = i16 & 1;
   HEAP8[i39 >> 0] = i40;
   i41 = i28 + 48 | 0;
   HEAP32[i41 >> 2] = i17;
   i42 = i28 + 52 | 0;
   HEAP32[i42 >> 2] = i18;
   i43 = i28 + 56 | 0;
   i44 = i19 & 1;
   HEAP8[i43 >> 0] = i44;
   i45 = i28 + 60 | 0;
   HEAP32[i45 >> 2] = i20;
   i46 = i28 + 64 | 0;
   HEAP32[i46 >> 2] = i21;
   i47 = i28 + 68 | 0;
   HEAP32[i47 >> 2] = i23;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i28 >> 2] = 275;
  i29 = i28 + 4 | 0;
  HEAP32[i29 >> 2] = i7;
  i30 = i28 + 8 | 0;
  HEAP32[i30 >> 2] = i6;
  i31 = i28 + 12 | 0;
  HEAP32[i31 >> 2] = i8;
  i32 = i28 + 16 | 0;
  HEAP32[i32 >> 2] = i9;
  i33 = i28 + 20 | 0;
  HEAP32[i33 >> 2] = i10;
  i34 = i28 + 24 | 0;
  HEAP32[i34 >> 2] = i11;
  i35 = i28 + 28 | 0;
  HEAP32[i35 >> 2] = i12;
  i36 = i28 + 32 | 0;
  HEAP32[i36 >> 2] = i13;
  i37 = i28 + 36 | 0;
  HEAP32[i37 >> 2] = i14;
  i38 = i28 + 40 | 0;
  HEAP32[i38 >> 2] = i15;
  i39 = i28 + 44 | 0;
  i40 = i16 & 1;
  HEAP8[i39 >> 0] = i40;
  i41 = i28 + 48 | 0;
  HEAP32[i41 >> 2] = i17;
  i42 = i28 + 52 | 0;
  HEAP32[i42 >> 2] = i18;
  i43 = i28 + 56 | 0;
  i44 = i19 & 1;
  HEAP8[i43 >> 0] = i44;
  i45 = i28 + 60 | 0;
  HEAP32[i45 >> 2] = i20;
  i46 = i28 + 64 | 0;
  HEAP32[i46 >> 2] = i21;
  i47 = i28 + 68 | 0;
  HEAP32[i47 >> 2] = i23;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i23 = HEAP32[i18 >> 2] | 0;
 i47 = HEAP8[i23 + i24 >> 0] | 0;
 i28 = i47 & 255;
 L9 : do {
  if ((i1 | 0) < (i15 | 0)) {
   i46 = HEAP32[i13 >> 2] | 0;
   i45 = 0;
   i44 = i24;
   i43 = i1;
   while (1) {
    HEAP8[i14 + i45 >> 0] = HEAP8[i46 + i44 >> 0] | 0;
    i42 = i44 + 1 | 0;
    i41 = i45 + 1 | 0;
    i40 = i43 + 1 | 0;
    if (!((i41 | 0) < 79 & (i40 | 0) < (i15 | 0))) {
     i48 = i41;
     i49 = i42;
     i50 = i40;
     break L9;
    }
    if ((HEAP8[i23 + i42 >> 0] | 0) == i47 << 24 >> 24) {
     i45 = i41;
     i44 = i42;
     i43 = i40;
    } else {
     i48 = i41;
     i49 = i42;
     i50 = i40;
     break;
    }
   }
  } else {
   i48 = 0;
   i49 = i24;
   i50 = i1;
  }
 } while (0);
 HEAP32[i3 >> 2] = i49;
 HEAP32[i4 >> 2] = i50;
 HEAP8[i14 + i48 >> 0] = 0;
 if (!((i22 | 0) != 0 | i16)) {
  i48 = HEAP32[i17 >> 2] | 0;
  if ((i48 | 0) != 0 ? (HEAP32[i48 + 8 >> 2] & 8 | 0) != 0 : 0) {
   if ((HEAP32[i7 >> 2] | 0) != 0 ? (HEAP32[i7 >> 2] = 0, i50 = HEAP32[i48 + 24 >> 2] | 0, (i50 | 0) != 0) : 0) {
    i48 = _emscripten_realloc_async_context(80) | 0;
    FUNCTION_TABLE_vii[i50 & 3](i6, 0);
    if (___async) {
     HEAP32[i48 >> 2] = 272;
     i51 = i48 + 4 | 0;
     HEAP32[i51 >> 2] = i6;
     i52 = i48 + 8 | 0;
     HEAP32[i52 >> 2] = i7;
     i53 = i48 + 12 | 0;
     HEAP32[i53 >> 2] = i8;
     i54 = i48 + 16 | 0;
     HEAP32[i54 >> 2] = i9;
     i55 = i48 + 20 | 0;
     HEAP32[i55 >> 2] = i10;
     i56 = i48 + 24 | 0;
     HEAP32[i56 >> 2] = i11;
     i57 = i48 + 28 | 0;
     HEAP32[i57 >> 2] = i12;
     i58 = i48 + 32 | 0;
     HEAP32[i58 >> 2] = i28;
     i59 = i48 + 36 | 0;
     HEAP32[i59 >> 2] = i13;
     i60 = i48 + 40 | 0;
     HEAP32[i60 >> 2] = i14;
     i61 = i48 + 44 | 0;
     HEAP32[i61 >> 2] = i15;
     i62 = i48 + 48 | 0;
     i63 = i16 & 1;
     HEAP8[i62 >> 0] = i63;
     i64 = i48 + 52 | 0;
     HEAP32[i64 >> 2] = i17;
     i65 = i48 + 56 | 0;
     HEAP32[i65 >> 2] = i18;
     i66 = i48 + 60 | 0;
     i67 = i19 & 1;
     HEAP8[i66 >> 0] = i67;
     i68 = i48 + 64 | 0;
     HEAP32[i68 >> 2] = i20;
     i69 = i48 + 68 | 0;
     HEAP32[i69 >> 2] = i21;
     i70 = i48 + 72 | 0;
     i71 = HEAP32[i4 >> 2] | 0;
     HEAP32[i70 >> 2] = i71;
     i72 = i48 + 76 | 0;
     i73 = HEAP32[i3 >> 2] | 0;
     HEAP32[i72 >> 2] = i73;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i48 >> 2] = 272;
    i51 = i48 + 4 | 0;
    HEAP32[i51 >> 2] = i6;
    i52 = i48 + 8 | 0;
    HEAP32[i52 >> 2] = i7;
    i53 = i48 + 12 | 0;
    HEAP32[i53 >> 2] = i8;
    i54 = i48 + 16 | 0;
    HEAP32[i54 >> 2] = i9;
    i55 = i48 + 20 | 0;
    HEAP32[i55 >> 2] = i10;
    i56 = i48 + 24 | 0;
    HEAP32[i56 >> 2] = i11;
    i57 = i48 + 28 | 0;
    HEAP32[i57 >> 2] = i12;
    i58 = i48 + 32 | 0;
    HEAP32[i58 >> 2] = i28;
    i59 = i48 + 36 | 0;
    HEAP32[i59 >> 2] = i13;
    i60 = i48 + 40 | 0;
    HEAP32[i60 >> 2] = i14;
    i61 = i48 + 44 | 0;
    HEAP32[i61 >> 2] = i15;
    i62 = i48 + 48 | 0;
    i63 = i16 & 1;
    HEAP8[i62 >> 0] = i63;
    i64 = i48 + 52 | 0;
    HEAP32[i64 >> 2] = i17;
    i65 = i48 + 56 | 0;
    HEAP32[i65 >> 2] = i18;
    i66 = i48 + 60 | 0;
    i67 = i19 & 1;
    HEAP8[i66 >> 0] = i67;
    i68 = i48 + 64 | 0;
    HEAP32[i68 >> 2] = i20;
    i69 = i48 + 68 | 0;
    HEAP32[i69 >> 2] = i21;
    i70 = i48 + 72 | 0;
    i71 = HEAP32[i4 >> 2] | 0;
    HEAP32[i70 >> 2] = i71;
    i72 = i48 + 76 | 0;
    i73 = HEAP32[i3 >> 2] | 0;
    HEAP32[i72 >> 2] = i73;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   } else {
    i74 = 1;
   }
  } else {
   i74 = 0;
  }
 } else {
  i74 = i22;
 }
 HEAP32[i5 >> 2] = i74;
 i74 = HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] | 0;
 i22 = _emscripten_realloc_async_context(80) | 0;
 FUNCTION_TABLE_vii[i74 & 3](i6, i28);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i22 >> 2] = 273;
 HEAP32[i22 + 4 >> 2] = i6;
 HEAP32[i22 + 8 >> 2] = i7;
 HEAP32[i22 + 12 >> 2] = i8;
 HEAP32[i22 + 16 >> 2] = i9;
 HEAP32[i22 + 20 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i22 + 24 >> 2] = i10;
 HEAP32[i22 + 28 >> 2] = i11;
 HEAP32[i22 + 32 >> 2] = i12;
 HEAP32[i22 + 36 >> 2] = i13;
 HEAP32[i22 + 40 >> 2] = i14;
 HEAP32[i22 + 44 >> 2] = i15;
 HEAP8[i22 + 48 >> 0] = i16 & 1;
 HEAP32[i22 + 52 >> 2] = i17;
 HEAP32[i22 + 56 >> 2] = i18;
 HEAP8[i22 + 60 >> 0] = i19 & 1;
 HEAP32[i22 + 64 >> 2] = i20;
 HEAP32[i22 + 68 >> 2] = i21;
 HEAP32[i22 + 72 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i22 + 76 >> 2] = HEAP32[i3 >> 2];
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _scene6__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, d13 = 0.0, d14 = 0.0, d15 = 0.0, i16 = 0, d17 = 0.0, i18 = 0, i19 = 0, d20 = 0.0, d21 = 0.0, i22 = 0, d23 = 0.0, i24 = 0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, i33 = 0, d34 = 0.0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 _tl_reset_timer(HEAP32[68734] | 0);
 i1 = HEAP32[68188] | 0;
 i5 = HEAP32[68196] | 0;
 L2 : do {
  if ((i1 | 0) < (i5 | 0) & (HEAP32[68190] | 0) == 0) {
   i6 = i1;
   L3 : while (1) {
    i7 = HEAP32[68194] | 0;
    if ((i6 | 0) < (i7 + 2e5 | 0)) {
     i8 = HEAP32[22682] | 0;
     HEAP32[i8 >> 2] = 255 - (((i6 - i7 | 0) * 255 | 0) / 2e5 | 0);
     i9 = i8;
    } else {
     i8 = HEAP32[22682] | 0;
     HEAP32[i8 >> 2] = 0;
     i9 = i8;
    }
    i8 = HEAP32[68188] | 0;
    i7 = HEAP32[68196] | 0;
    if ((i8 | 0) > (i7 + -1e6 | 0)) {
     HEAP32[i9 >> 2] = (((i7 - i8 | 0) * 255 | 0) / 1e6 | 0) + -255;
    }
    if ((HEAP32[68722] | 0) == 0 ? (HEAP32[(HEAP32[68736] | 0) + 120 >> 2] | 0) != 0 : 0) {
     i10 = 9;
     break;
    }
    HEAP32[68722] = 0;
    i8 = HEAP32[68720] | 0;
    if ((i8 | 0) != 0) {
     HEAPF64[34413] = 1.0;
    }
    if ((HEAP32[68728] | 0) == 0) {
     i11 = i8;
     i12 = 0;
     d13 = 0.0;
     d14 = 0.0;
    } else {
     d15 = +HEAPF64[34413] + +HEAPF64[34409];
     HEAPF64[34409] = d15;
     if (d15 > 1.0) {
      do {
       _do_autopilot(HEAP32[68736] | 0, 275312, 275320, 275328, 24);
       d15 = +HEAPF64[34409] + -1.0;
       HEAPF64[34409] = d15;
      } while (d15 > 1.0);
      i16 = HEAP32[68720] | 0;
     } else {
      i16 = i8;
     }
     i11 = i16;
     i12 = HEAP32[68832] | 0;
     d13 = +(HEAP32[68828] | 0);
     d14 = +(HEAP32[68830] | 0);
    }
    if ((i11 | 0) == 0) {
     d15 = +HEAPF64[34413];
     if (d15 == 0.0) {
      HEAPF64[34413] = .001;
      d17 = .001;
     } else {
      d17 = d15;
     }
    } else {
     HEAPF64[34413] = 1.0;
     d17 = 1.0;
    }
    do {
     if ((i12 | 0) > 0) {
      if ((i12 | 0) == 512) {
       i7 = HEAP32[68736] | 0;
       i18 = i7 + 1192 | 0;
       d15 = +HEAPF64[i18 >> 3];
       i19 = i7 + 1184 | 0;
       d20 = +HEAPF64[i19 >> 3];
       d21 = d15 + d13 * ((d20 - d15) / +(HEAP32[i7 + 128 >> 2] | 0));
       i22 = i7 + 1208 | 0;
       d23 = +HEAPF64[i22 >> 3];
       i24 = i7 + 1200 | 0;
       d25 = +HEAPF64[i24 >> 3];
       d26 = d23 + d14 * ((d25 - d23) / +(HEAP32[i7 + 132 >> 2] | 0));
       if ((HEAP32[68824] | 0) != 0 ? (d27 = +HEAPF64[34410], d27 != d21 | +HEAPF64[34411] != d26) : 0) {
        d28 = d15 - (d21 - d27);
        HEAPF64[i18 >> 3] = d28;
        d27 = d20 - (d21 - +HEAPF64[34410]);
        HEAPF64[i19 >> 3] = d27;
        HEAPF64[i22 >> 3] = d23 - (d26 - +HEAPF64[34411]);
        HEAPF64[i24 >> 3] = d25 - (d26 - +HEAPF64[34411]);
        if (+HEAPF64[34366] != 0.0) {
         d29 = d28;
         d30 = d27;
        } else {
         i10 = 30;
         break L3;
        }
       } else {
        d29 = d15;
        d30 = d20;
       }
       HEAP32[68824] = 1;
       HEAPF64[34410] = d29 + d13 * ((d30 - d29) / +(HEAP32[i7 + 128 >> 2] | 0));
       d20 = +HEAPF64[i7 + 1208 >> 3];
       HEAPF64[34411] = d20 + d14 * ((+HEAPF64[i7 + 1200 >> 3] - d20) / +(HEAP32[i7 + 132 >> 2] | 0));
       i10 = 35;
       break;
      } else if ((i12 | 0) == 1024) {
       d31 = d17 * .0012 + +HEAPF64[34366];
      } else if ((i12 | 0) == 256) {
       d31 = +HEAPF64[34366] - d17 * .0012;
      } else {
       i10 = 35;
       break;
      }
      HEAPF64[34366] = d31;
      HEAP32[68824] = 0;
      d32 = d31;
      i33 = 1;
     } else {
      i10 = 35;
     }
    } while (0);
    do {
     if ((i10 | 0) == 35) {
      i10 = 0;
      if ((i12 & 512 | 0) == 0) {
       HEAP32[68824] = 0;
      }
      d20 = +HEAPF64[34366];
      if (d20 > 0.0) {
       d15 = +HEAPF64[34413] * 6.0e-4;
       if (d20 < d15) {
        HEAPF64[34366] = 0.0;
        d32 = 0.0;
        i33 = 0;
        break;
       } else {
        d27 = d20 - d15;
        HEAPF64[34366] = d27;
        d32 = d27;
        i33 = 0;
        break;
       }
      }
      if (d20 < 0.0) {
       d27 = +HEAPF64[34413];
       if (d20 > d27 * -6.0e-4) {
        HEAPF64[34366] = 0.0;
        d32 = 0.0;
        i33 = 0;
        break;
       } else {
        d15 = d20 + d27 * 6.0e-4;
        HEAPF64[34366] = d15;
        d32 = d15;
        i33 = 0;
        break;
       }
      } else {
       d32 = d20;
       i33 = 0;
      }
     }
    } while (0);
    d20 = +HEAPF64[34365];
    if (!(d32 > d20)) {
     d15 = -d20;
     if (d32 < d15) {
      HEAPF64[34366] = d15;
      d34 = d15;
     } else {
      d34 = d32;
     }
    } else {
     HEAPF64[34366] = d20;
     d34 = d20;
    }
    if (d34 != 0.0) {
     i10 = 50;
     break;
    }
    if ((i33 | 0) == 0) {
     HEAP32[68720] = 2;
    }
    i6 = HEAP32[68188] | 0;
    i8 = HEAP32[68196] | 0;
    if (!((i6 | 0) < (i8 | 0) & (HEAP32[68190] | 0) == 0)) {
     i35 = i8;
     break L2;
    }
   }
   if ((i10 | 0) == 9) {
    i6 = _emscripten_realloc_async_context(12) | 0;
    _ui_do_fractal(1);
    if (___async) {
     HEAP32[i6 >> 2] = 188;
     i36 = i6 + 4 | 0;
     HEAP32[i36 >> 2] = i3;
     i37 = i6 + 8 | 0;
     HEAP32[i37 >> 2] = i4;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i6 >> 2] = 188;
    i36 = i6 + 4 | 0;
    HEAP32[i36 >> 2] = i3;
    i37 = i6 + 8 | 0;
    HEAP32[i37 >> 2] = i4;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   } else if ((i10 | 0) == 30) {
    i6 = _emscripten_realloc_async_context(32) | 0;
    _ui_do_fractal(1);
    if (___async) {
     HEAP32[i6 >> 2] = 189;
     i38 = i6 + 4 | 0;
     HEAP32[i38 >> 2] = i12;
     i39 = i6 + 8 | 0;
     HEAPF64[i39 >> 3] = d13;
     i40 = i6 + 16 | 0;
     HEAPF64[i40 >> 3] = d14;
     i41 = i6 + 24 | 0;
     HEAP32[i41 >> 2] = i3;
     i42 = i6 + 28 | 0;
     HEAP32[i42 >> 2] = i4;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i6 >> 2] = 189;
    i38 = i6 + 4 | 0;
    HEAP32[i38 >> 2] = i12;
    i39 = i6 + 8 | 0;
    HEAPF64[i39 >> 3] = d13;
    i40 = i6 + 16 | 0;
    HEAPF64[i40 >> 3] = d14;
    i41 = i6 + 24 | 0;
    HEAP32[i41 >> 2] = i3;
    i42 = i6 + 28 | 0;
    HEAP32[i42 >> 2] = i4;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   } else if ((i10 | 0) == 50) {
    i6 = HEAP32[68736] | 0;
    i8 = i6 + 1192 | 0;
    d20 = +HEAPF64[i8 >> 3];
    i7 = i6 + 1184 | 0;
    d15 = +HEAPF64[i7 >> 3];
    d27 = d20 + d13 * ((d15 - d20) / +(HEAP32[i6 + 128 >> 2] | 0));
    i24 = i6 + 1208 | 0;
    d28 = +HEAPF64[i24 >> 3];
    i22 = i6 + 1200 | 0;
    d26 = +HEAPF64[i22 >> 3];
    d25 = d28 + d14 * ((d26 - d28) / +(HEAP32[i6 + 132 >> 2] | 0));
    d23 = +Math_pow(+(d34 + 1.0), +(+HEAPF64[34413]));
    HEAPF64[i7 >> 3] = d27 + (d15 - d27) * d23;
    HEAPF64[i8 >> 3] = d27 + (d20 - d27) * d23;
    HEAPF64[i22 >> 3] = d25 + d23 * (d26 - d25);
    HEAPF64[i24 >> 3] = d25 + d23 * (d28 - d25);
    i24 = _emscripten_realloc_async_context(12) | 0;
    _ui_do_fractal(1);
    if (___async) {
     HEAP32[i24 >> 2] = 190;
     i43 = i24 + 4 | 0;
     HEAP32[i43 >> 2] = i3;
     i44 = i24 + 8 | 0;
     HEAP32[i44 >> 2] = i4;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i24 >> 2] = 190;
    i43 = i24 + 4 | 0;
    HEAP32[i43 >> 2] = i3;
    i44 = i24 + 8 | 0;
    HEAP32[i44 >> 2] = i4;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
  } else {
   i35 = i5;
  }
 } while (0);
 HEAP32[68194] = i35;
 HEAP32[(HEAP32[12936] | 0) + 160 >> 2] = i3;
 _free(i4);
 _tl_free_timer(HEAP32[68734] | 0);
 i4 = HEAP32[22682] | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 20 >> 2] = 0;
 _initlepic();
 HEAP32[34] = 25;
 i4 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(-60, 157, 1, 2e6);
 if (___async) {
  HEAP32[i4 >> 2] = 191;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i4 >> 2] = 191;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _scene6__async_cb28(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, d12 = 0.0, d13 = 0.0, d14 = 0.0, i15 = 0, d16 = 0.0, i17 = 0, d18 = 0.0, d19 = 0.0, i20 = 0, d21 = 0.0, i22 = 0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, i31 = 0, d32 = 0.0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i1 = HEAP32[68720] | 0;
 if ((i1 | 0) != 0) {
  HEAP32[68720] = i1 + -1;
 }
 L4 : while (1) {
  i1 = HEAP32[68188] | 0;
  i5 = HEAP32[68196] | 0;
  if (!((i1 | 0) < (i5 | 0) & (HEAP32[68190] | 0) == 0)) {
   i6 = 57;
   break;
  }
  i7 = HEAP32[68194] | 0;
  if ((i1 | 0) < (i7 + 2e5 | 0)) {
   i8 = HEAP32[22682] | 0;
   HEAP32[i8 >> 2] = 255 - (((i1 - i7 | 0) * 255 | 0) / 2e5 | 0);
   i9 = i8;
  } else {
   i8 = HEAP32[22682] | 0;
   HEAP32[i8 >> 2] = 0;
   i9 = i8;
  }
  i8 = HEAP32[68188] | 0;
  i7 = HEAP32[68196] | 0;
  if ((i8 | 0) > (i7 + -1e6 | 0)) {
   HEAP32[i9 >> 2] = (((i7 - i8 | 0) * 255 | 0) / 1e6 | 0) + -255;
  }
  if ((HEAP32[68722] | 0) == 0 ? (HEAP32[(HEAP32[68736] | 0) + 120 >> 2] | 0) != 0 : 0) {
   i6 = 8;
   break;
  }
  HEAP32[68722] = 0;
  i8 = HEAP32[68720] | 0;
  if ((i8 | 0) != 0) {
   HEAPF64[34413] = 1.0;
  }
  if ((HEAP32[68728] | 0) == 0) {
   i10 = i8;
   i11 = 0;
   d12 = 0.0;
   d13 = 0.0;
  } else {
   d14 = +HEAPF64[34413] + +HEAPF64[34409];
   HEAPF64[34409] = d14;
   if (d14 > 1.0) {
    do {
     _do_autopilot(HEAP32[68736] | 0, 275312, 275320, 275328, 24);
     d14 = +HEAPF64[34409] + -1.0;
     HEAPF64[34409] = d14;
    } while (d14 > 1.0);
    i15 = HEAP32[68720] | 0;
   } else {
    i15 = i8;
   }
   i10 = i15;
   i11 = HEAP32[68832] | 0;
   d12 = +(HEAP32[68828] | 0);
   d13 = +(HEAP32[68830] | 0);
  }
  if ((i10 | 0) == 0) {
   d14 = +HEAPF64[34413];
   if (d14 == 0.0) {
    HEAPF64[34413] = .001;
    d16 = .001;
   } else {
    d16 = d14;
   }
  } else {
   HEAPF64[34413] = 1.0;
   d16 = 1.0;
  }
  do {
   if ((i11 | 0) > 0) {
    if ((i11 | 0) == 512) {
     i7 = HEAP32[68736] | 0;
     i1 = i7 + 1192 | 0;
     d14 = +HEAPF64[i1 >> 3];
     i17 = i7 + 1184 | 0;
     d18 = +HEAPF64[i17 >> 3];
     d19 = d14 + d12 * ((d18 - d14) / +(HEAP32[i7 + 128 >> 2] | 0));
     i20 = i7 + 1208 | 0;
     d21 = +HEAPF64[i20 >> 3];
     i22 = i7 + 1200 | 0;
     d23 = +HEAPF64[i22 >> 3];
     d24 = d21 + d13 * ((d23 - d21) / +(HEAP32[i7 + 132 >> 2] | 0));
     if ((HEAP32[68824] | 0) != 0 ? (d25 = +HEAPF64[34410], d25 != d19 | +HEAPF64[34411] != d24) : 0) {
      d26 = d14 - (d19 - d25);
      HEAPF64[i1 >> 3] = d26;
      d25 = d18 - (d19 - +HEAPF64[34410]);
      HEAPF64[i17 >> 3] = d25;
      HEAPF64[i20 >> 3] = d21 - (d24 - +HEAPF64[34411]);
      HEAPF64[i22 >> 3] = d23 - (d24 - +HEAPF64[34411]);
      if (+HEAPF64[34366] != 0.0) {
       d27 = d26;
       d28 = d25;
      } else {
       i6 = 29;
       break L4;
      }
     } else {
      d27 = d14;
      d28 = d18;
     }
     HEAP32[68824] = 1;
     HEAPF64[34410] = d27 + d12 * ((d28 - d27) / +(HEAP32[i7 + 128 >> 2] | 0));
     d18 = +HEAPF64[i7 + 1208 >> 3];
     HEAPF64[34411] = d18 + d13 * ((+HEAPF64[i7 + 1200 >> 3] - d18) / +(HEAP32[i7 + 132 >> 2] | 0));
     i6 = 34;
     break;
    } else if ((i11 | 0) == 256) {
     d29 = +HEAPF64[34366] - d16 * .0012;
    } else if ((i11 | 0) == 1024) {
     d29 = d16 * .0012 + +HEAPF64[34366];
    } else {
     i6 = 34;
     break;
    }
    HEAPF64[34366] = d29;
    HEAP32[68824] = 0;
    d30 = d29;
    i31 = 1;
   } else {
    i6 = 34;
   }
  } while (0);
  do {
   if ((i6 | 0) == 34) {
    i6 = 0;
    if ((i11 & 512 | 0) == 0) {
     HEAP32[68824] = 0;
    }
    d18 = +HEAPF64[34366];
    if (d18 > 0.0) {
     d14 = +HEAPF64[34413] * 6.0e-4;
     if (d18 < d14) {
      HEAPF64[34366] = 0.0;
      d30 = 0.0;
      i31 = 0;
      break;
     } else {
      d25 = d18 - d14;
      HEAPF64[34366] = d25;
      d30 = d25;
      i31 = 0;
      break;
     }
    }
    if (d18 < 0.0) {
     d25 = +HEAPF64[34413];
     if (d18 > d25 * -6.0e-4) {
      HEAPF64[34366] = 0.0;
      d30 = 0.0;
      i31 = 0;
      break;
     } else {
      d14 = d18 + d25 * 6.0e-4;
      HEAPF64[34366] = d14;
      d30 = d14;
      i31 = 0;
      break;
     }
    } else {
     d30 = d18;
     i31 = 0;
    }
   }
  } while (0);
  d18 = +HEAPF64[34365];
  if (!(d30 > d18)) {
   d14 = -d18;
   if (d30 < d14) {
    HEAPF64[34366] = d14;
    d32 = d14;
   } else {
    d32 = d30;
   }
  } else {
   HEAPF64[34366] = d18;
   d32 = d18;
  }
  if (d32 != 0.0) {
   i6 = 49;
   break;
  }
  if ((i31 | 0) != 0) {
   continue;
  }
  HEAP32[68720] = 2;
 }
 if ((i6 | 0) == 8) {
  i31 = _emscripten_realloc_async_context(12) | 0;
  _ui_do_fractal(1);
  if (___async) {
   HEAP32[i31 >> 2] = 188;
   i33 = i31 + 4 | 0;
   HEAP32[i33 >> 2] = i3;
   i34 = i31 + 8 | 0;
   HEAP32[i34 >> 2] = i4;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i31 >> 2] = 188;
  i33 = i31 + 4 | 0;
  HEAP32[i33 >> 2] = i3;
  i34 = i31 + 8 | 0;
  HEAP32[i34 >> 2] = i4;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else if ((i6 | 0) == 29) {
  i34 = _emscripten_realloc_async_context(32) | 0;
  _ui_do_fractal(1);
  if (___async) {
   HEAP32[i34 >> 2] = 189;
   i35 = i34 + 4 | 0;
   HEAP32[i35 >> 2] = i11;
   i36 = i34 + 8 | 0;
   HEAPF64[i36 >> 3] = d12;
   i37 = i34 + 16 | 0;
   HEAPF64[i37 >> 3] = d13;
   i38 = i34 + 24 | 0;
   HEAP32[i38 >> 2] = i3;
   i39 = i34 + 28 | 0;
   HEAP32[i39 >> 2] = i4;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i34 >> 2] = 189;
  i35 = i34 + 4 | 0;
  HEAP32[i35 >> 2] = i11;
  i36 = i34 + 8 | 0;
  HEAPF64[i36 >> 3] = d12;
  i37 = i34 + 16 | 0;
  HEAPF64[i37 >> 3] = d13;
  i38 = i34 + 24 | 0;
  HEAP32[i38 >> 2] = i3;
  i39 = i34 + 28 | 0;
  HEAP32[i39 >> 2] = i4;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else if ((i6 | 0) == 49) {
  i39 = HEAP32[68736] | 0;
  i34 = i39 + 1192 | 0;
  d30 = +HEAPF64[i34 >> 3];
  i38 = i39 + 1184 | 0;
  d29 = +HEAPF64[i38 >> 3];
  d16 = d30 + d12 * ((d29 - d30) / +(HEAP32[i39 + 128 >> 2] | 0));
  i37 = i39 + 1208 | 0;
  d12 = +HEAPF64[i37 >> 3];
  i36 = i39 + 1200 | 0;
  d27 = +HEAPF64[i36 >> 3];
  d28 = d12 + d13 * ((d27 - d12) / +(HEAP32[i39 + 132 >> 2] | 0));
  d13 = +Math_pow(+(d32 + 1.0), +(+HEAPF64[34413]));
  HEAPF64[i38 >> 3] = d16 + (d29 - d16) * d13;
  HEAPF64[i34 >> 3] = d16 + (d30 - d16) * d13;
  HEAPF64[i36 >> 3] = d28 + d13 * (d27 - d28);
  HEAPF64[i37 >> 3] = d28 + d13 * (d12 - d28);
  i37 = _emscripten_realloc_async_context(12) | 0;
  _ui_do_fractal(1);
  if (___async) {
   HEAP32[i37 >> 2] = 190;
   i40 = i37 + 4 | 0;
   HEAP32[i40 >> 2] = i3;
   i41 = i37 + 8 | 0;
   HEAP32[i41 >> 2] = i4;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i37 >> 2] = 190;
  i40 = i37 + 4 | 0;
  HEAP32[i40 >> 2] = i3;
  i41 = i37 + 8 | 0;
  HEAP32[i41 >> 2] = i4;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else if ((i6 | 0) == 57) {
  HEAP32[68194] = i5;
  HEAP32[(HEAP32[12936] | 0) + 160 >> 2] = i3;
  _free(i4);
  _tl_free_timer(HEAP32[68734] | 0);
  i4 = HEAP32[22682] | 0;
  HEAP32[i4 >> 2] = 0;
  HEAP32[i4 + 20 >> 2] = 0;
  _initlepic();
  HEAP32[34] = 25;
  i4 = _emscripten_realloc_async_context(4) | 0;
  _timestuff(-60, 157, 1, 2e6);
  if (___async) {
   HEAP32[i4 >> 2] = 191;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i4 >> 2] = 191;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
}
function _do_julia(i1, d2, d3) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, d26 = 0.0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, d34 = 0.0, d35 = 0.0, i36 = 0, d37 = 0.0, i38 = 0, d39 = 0.0, d40 = 0.0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, d46 = 0.0, d47 = 0.0, d48 = 0.0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 4e3 | 0;
 i5 = i4;
 i6 = i1 + 136 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 i8 = i1 + 36 | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 i10 = HEAP32[(HEAP32[i1 + 60 >> 2] | 0) + 288 >> 2] | 0;
 d11 = (i10 | 0) == 6 ? 4.0 : 2.0;
 d12 = d11 * d11;
 i13 = i1 + 132 | 0;
 i14 = HEAP32[i13 >> 2] | 0;
 i15 = i1 + 128 | 0;
 L1 : do {
  if ((i14 | 0) > 0) {
   i16 = i7;
   i17 = 0;
   while (1) {
    i18 = i9 + (Math_imul(i16, i17) | 0) | 0;
    _memset(i18 | 0, 0, HEAP32[i15 >> 2] | 0) | 0;
    i18 = i17 + 1 | 0;
    i19 = HEAP32[i13 >> 2] | 0;
    if ((i18 | 0) >= (i19 | 0)) {
     i20 = i19;
     break L1;
    }
    i16 = HEAP32[i6 >> 2] | 0;
    i17 = i18;
   }
  } else {
   i20 = i14;
  }
 } while (0);
 i14 = HEAP32[i15 >> 2] | 0;
 d21 = +(i14 | 0);
 d22 = d11 + d11;
 d23 = d21 / d22;
 d24 = +(i20 | 0);
 d25 = d24 / d22;
 d26 = d22 / d21;
 d21 = d22 / d24;
 L6 : do {
  if ((i20 | 0) > 0) {
   i17 = i14;
   i16 = 0;
   while (1) {
    i18 = Math_imul(i7, i16) | 0;
    d24 = d21 * (+(i16 | 0) + .5) - d11;
    i19 = ~~(d23 * +Math_sqrt(+(d12 - d24 * d24)) + .5);
    i27 = ((i17 | 0) / 2 | 0) - i19 | 0;
    if ((i27 | 0) > 0) {
     _memset(i9 + i18 | 0, 1, i27 | 0) | 0;
     i28 = HEAP32[i15 >> 2] | 0;
    } else {
     i28 = i17;
    }
    i27 = (i28 | 0) / 2 | 0;
    i29 = i27 + i19 | 0;
    if ((i29 | 0) < (i28 | 0)) {
     _memset(i9 + (i18 + i29) | 0, 1, i28 - i19 - i27 | 0) | 0;
    }
    i27 = i16 + 1 | 0;
    i19 = HEAP32[i13 >> 2] | 0;
    if ((i27 | 0) >= (i19 | 0)) {
     i30 = i19;
     break L6;
    }
    i17 = HEAP32[i15 >> 2] | 0;
    i16 = i27;
   }
  } else {
   i30 = i20;
  }
 } while (0);
 i20 = i1 + 124 | 0;
 i28 = i5 + 4e3 | 0;
 i14 = i30;
 i30 = 0;
 while (1) {
  if ((i14 | 0) > 0) {
   i16 = i14;
   i17 = 0;
   while (1) {
    i27 = (i16 | 0) / 2 | 0;
    i19 = (i17 | 0) / 2 | 0;
    if ((i17 & 1 | 0) == 0) {
     i31 = i27 + 1 + i19 | 0;
    } else {
     i31 = i27 - i19 | 0;
    }
    if ((i31 | 0) < (i16 | 0) ? (d24 = d21 * (+(i31 | 0) + .5) - d11, i19 = i31 + i30 & 1, (i19 | 0) < (HEAP32[i15 >> 2] | 0)) : 0) {
     i27 = Math_imul(i31, i7) | 0;
     d22 = d24 * d24;
     i29 = (i31 | 0) > 0;
     i18 = i19;
     do {
      i19 = i18 + i27 | 0;
      i32 = i9 + i19 | 0;
      L31 : do {
       if ((HEAP8[i32 >> 0] | 0) == 0) {
        if ((((((i18 | 0) >= 1 ? (i33 = HEAP8[i9 + (i19 + 1) >> 0] | 0, !(i33 << 24 >> 24 == 0)) : 0) ? i33 << 24 >> 24 == (HEAP8[i9 + (i19 + -1) >> 0] | 0) & i29 : 0) ? (i31 | 0) < (HEAP32[i13 >> 2] | 0) : 0) ? i33 << 24 >> 24 == (HEAP8[i9 + (i19 + i7) >> 0] | 0) : 0) ? i33 << 24 >> 24 == (HEAP8[i9 + (i19 - i7) >> 0] | 0) : 0) {
         HEAP8[i32 >> 0] = i33;
         break;
        }
        d34 = d26 * (+(i18 | 0) + .5) - d11;
        d35 = d34 * d34;
        if (!(d22 + d35 > d12)) {
         i33 = 0;
         i36 = i32;
         d37 = d22;
         i38 = i5;
         d39 = d35;
         d35 = d24;
         d40 = d34;
         while (1) {
          i41 = i33 & 255;
          if (i33 << 24 >> 24 == -2 | i33 << 24 >> 24 == -1) {
           i42 = 30;
           break;
          } else if (!(i33 << 24 >> 24 == 0)) {
           i43 = i41;
           i44 = i38;
           i42 = 47;
           break;
          }
          HEAP32[i38 >> 2] = i36;
          i41 = i38 + 4 | 0;
          HEAP8[i36 >> 0] = -1;
          if (!(i41 >>> 0 < i28 >>> 0)) {
           i45 = i41;
           break;
          }
          if ((i10 | 0) == 1) {
           d46 = d35 * (d40 * d40 * 3.0 - d37) + d3;
           d47 = d40 * (d39 - d37 * 3.0) + d2;
          } else if ((i10 | 0) == 0) {
           d46 = d40 * d35 * 2.0 + d3;
           d47 = d39 - d37 + d2;
          } else {
           d46 = d35;
           d47 = d40;
          }
          d34 = d46 * d46;
          d48 = d47 * d47;
          if (d48 + d34 > 4.0) {
           i43 = 0;
           i44 = i41;
           i42 = 47;
           break;
          }
          i49 = ~~(d23 * (d11 + d47));
          i50 = ~~(d25 * (d11 + d46));
          i51 = (Math_imul(i50, i7) | 0) + i49 | 0;
          i52 = i9 + i51 | 0;
          do {
           if ((i49 | 0) > 0) {
            if ((i49 | 0) >= (HEAP32[i15 >> 2] | 0)) {
             break;
            }
            i53 = HEAP8[i9 + (i51 + 1) >> 0] | 0;
            if (i53 << 24 >> 24 == 0) {
             break;
            }
            if (!((i50 | 0) > 0 ? i53 << 24 >> 24 == (HEAP8[i9 + (i51 + -1) >> 0] | 0) : 0)) {
             break;
            }
            if ((i50 | 0) >= (HEAP32[i13 >> 2] | 0)) {
             break;
            }
            if (!(i53 << 24 >> 24 == (HEAP8[i9 + (i51 + i7) >> 0] | 0))) {
             break;
            }
            if (!(i53 << 24 >> 24 == (HEAP8[i9 + (i51 - i7) >> 0] | 0))) {
             break;
            }
            HEAP8[i52 >> 0] = i53;
           }
          } while (0);
          i33 = HEAP8[i52 >> 0] | 0;
          i36 = i52;
          d37 = d34;
          i38 = i41;
          d39 = d48;
          d35 = d46;
          d40 = d47;
         }
         if ((i42 | 0) == 30) {
          i42 = 0;
          HEAP32[i38 >> 2] = i36;
          i45 = i38 + 4 | 0;
         } else if ((i42 | 0) == 47) {
          i42 = 0;
          i33 = HEAP32[i20 >> 2] | 0;
          if (i44 >>> 0 > i5 >>> 0) {
           i54 = i43;
           i55 = i44;
          } else {
           break;
          }
          while (1) {
           i55 = i55 + -4 | 0;
           HEAP8[HEAP32[i55 >> 2] >> 0] = ((i54 | 0) % (i33 | 0) | 0) + 1;
           if (!(i55 >>> 0 > i5 >>> 0)) {
            break L31;
           } else {
            i54 = i54 + 1 | 0;
           }
          }
         }
         if (i45 >>> 0 > i5 >>> 0) {
          i33 = i45;
          do {
           i33 = i33 + -4 | 0;
           HEAP8[HEAP32[i33 >> 2] >> 0] = -2;
          } while (i33 >>> 0 > i5 >>> 0);
         }
        }
       }
      } while (0);
      i18 = i18 + 2 | 0;
     } while ((i18 | 0) < (HEAP32[i15 >> 2] | 0));
     i56 = HEAP32[i13 >> 2] | 0;
    } else {
     i56 = i16;
    }
    i17 = i17 + 1 | 0;
    if ((i17 | 0) >= (i56 | 0)) {
     i57 = i56;
     break;
    } else {
     i16 = i56;
    }
   }
  } else {
   i57 = i14;
  }
  i30 = i30 + 1 | 0;
  if ((i30 | 0) == 2) {
   break;
  } else {
   i14 = i57;
  }
 }
 if ((i57 | 0) > 0) {
  i58 = i57;
  i59 = 0;
 } else {
  STACKTOP = i4;
  return;
 }
 while (1) {
  i57 = HEAP32[i8 >> 2] | 0;
  i14 = Math_imul(HEAP32[i6 >> 2] | 0, i59) | 0;
  i30 = i14 + (HEAP32[i15 >> 2] | 0) | 0;
  i56 = i57 + i30 | 0;
  i5 = HEAP32[i20 >> 2] | 0;
  if ((i14 | 0) < (i30 | 0)) {
   i30 = i57 + i14 | 0;
   do {
    HEAP8[i30 >> 0] = HEAP8[i1 + ((HEAPU8[i30 >> 0] | 0) % (i5 | 0) | 0) + 144 >> 0] | 0;
    i30 = i30 + 1 | 0;
   } while (i30 >>> 0 < i56 >>> 0);
   i60 = HEAP32[i13 >> 2] | 0;
  } else {
   i60 = i58;
  }
  i59 = i59 + 1 | 0;
  if ((i59 | 0) >= (i60 | 0)) {
   break;
  } else {
   i58 = i60;
  }
 }
 STACKTOP = i4;
 return;
}
function _scene6__async_cb30(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, i10 = 0, d11 = 0.0, i12 = 0, i13 = 0, i14 = 0, d15 = 0.0, d16 = 0.0, i17 = 0, d18 = 0.0, i19 = 0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, i26 = 0, d27 = 0.0, d28 = 0.0, i29 = 0, d30 = 0.0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 L2 : while (1) {
  HEAP32[68722] = 0;
  i1 = HEAP32[68720] | 0;
  if ((i1 | 0) != 0) {
   HEAPF64[34413] = 1.0;
  }
  if ((HEAP32[68728] | 0) == 0) {
   i5 = i1;
   i6 = 0;
   d7 = 0.0;
   d8 = 0.0;
  } else {
   d9 = +HEAPF64[34413] + +HEAPF64[34409];
   HEAPF64[34409] = d9;
   if (d9 > 1.0) {
    do {
     _do_autopilot(HEAP32[68736] | 0, 275312, 275320, 275328, 24);
     d9 = +HEAPF64[34409] + -1.0;
     HEAPF64[34409] = d9;
    } while (d9 > 1.0);
    i10 = HEAP32[68720] | 0;
   } else {
    i10 = i1;
   }
   i5 = i10;
   i6 = HEAP32[68832] | 0;
   d7 = +(HEAP32[68828] | 0);
   d8 = +(HEAP32[68830] | 0);
  }
  if ((i5 | 0) == 0) {
   d9 = +HEAPF64[34413];
   if (d9 == 0.0) {
    HEAPF64[34413] = .001;
    d11 = .001;
   } else {
    d11 = d9;
   }
  } else {
   HEAPF64[34413] = 1.0;
   d11 = 1.0;
  }
  do {
   if ((i6 | 0) > 0) {
    if ((i6 | 0) == 512) {
     i12 = HEAP32[68736] | 0;
     i13 = i12 + 1192 | 0;
     d9 = +HEAPF64[i13 >> 3];
     i14 = i12 + 1184 | 0;
     d15 = +HEAPF64[i14 >> 3];
     d16 = d9 + d7 * ((d15 - d9) / +(HEAP32[i12 + 128 >> 2] | 0));
     i17 = i12 + 1208 | 0;
     d18 = +HEAPF64[i17 >> 3];
     i19 = i12 + 1200 | 0;
     d20 = +HEAPF64[i19 >> 3];
     d21 = d18 + d8 * ((d20 - d18) / +(HEAP32[i12 + 132 >> 2] | 0));
     if ((HEAP32[68824] | 0) != 0 ? (d22 = +HEAPF64[34410], d22 != d16 | +HEAPF64[34411] != d21) : 0) {
      d23 = d9 - (d16 - d22);
      HEAPF64[i13 >> 3] = d23;
      d22 = d15 - (d16 - +HEAPF64[34410]);
      HEAPF64[i14 >> 3] = d22;
      HEAPF64[i17 >> 3] = d18 - (d21 - +HEAPF64[34411]);
      HEAPF64[i19 >> 3] = d20 - (d21 - +HEAPF64[34411]);
      if (+HEAPF64[34366] != 0.0) {
       d24 = d23;
       d25 = d22;
      } else {
       i26 = 30;
       break L2;
      }
     } else {
      d24 = d9;
      d25 = d15;
     }
     HEAP32[68824] = 1;
     HEAPF64[34410] = d24 + d7 * ((d25 - d24) / +(HEAP32[i12 + 128 >> 2] | 0));
     d15 = +HEAPF64[i12 + 1208 >> 3];
     HEAPF64[34411] = d15 + d8 * ((+HEAPF64[i12 + 1200 >> 3] - d15) / +(HEAP32[i12 + 132 >> 2] | 0));
     i26 = 35;
     break;
    } else if ((i6 | 0) == 1024) {
     d27 = d11 * .0012 + +HEAPF64[34366];
    } else if ((i6 | 0) == 256) {
     d27 = +HEAPF64[34366] - d11 * .0012;
    } else {
     i26 = 35;
     break;
    }
    HEAPF64[34366] = d27;
    HEAP32[68824] = 0;
    d28 = d27;
    i29 = 1;
   } else {
    i26 = 35;
   }
  } while (0);
  do {
   if ((i26 | 0) == 35) {
    i26 = 0;
    if ((i6 & 512 | 0) == 0) {
     HEAP32[68824] = 0;
    }
    d15 = +HEAPF64[34366];
    if (d15 > 0.0) {
     d9 = +HEAPF64[34413] * 6.0e-4;
     if (d15 < d9) {
      HEAPF64[34366] = 0.0;
      d28 = 0.0;
      i29 = 0;
      break;
     } else {
      d22 = d15 - d9;
      HEAPF64[34366] = d22;
      d28 = d22;
      i29 = 0;
      break;
     }
    }
    if (d15 < 0.0) {
     d22 = +HEAPF64[34413];
     if (d15 > d22 * -6.0e-4) {
      HEAPF64[34366] = 0.0;
      d28 = 0.0;
      i29 = 0;
      break;
     } else {
      d9 = d15 + d22 * 6.0e-4;
      HEAPF64[34366] = d9;
      d28 = d9;
      i29 = 0;
      break;
     }
    } else {
     d28 = d15;
     i29 = 0;
    }
   }
  } while (0);
  d15 = +HEAPF64[34365];
  if (!(d28 > d15)) {
   d9 = -d15;
   if (d28 < d9) {
    HEAPF64[34366] = d9;
    d30 = d9;
   } else {
    d30 = d28;
   }
  } else {
   HEAPF64[34366] = d15;
   d30 = d15;
  }
  if (d30 != 0.0) {
   i26 = 50;
   break;
  }
  if ((i29 | 0) == 0) {
   HEAP32[68720] = 2;
  }
  i1 = HEAP32[68188] | 0;
  i31 = HEAP32[68196] | 0;
  if (!((i1 | 0) < (i31 | 0) & (HEAP32[68190] | 0) == 0)) {
   i26 = 56;
   break;
  }
  i12 = HEAP32[68194] | 0;
  if ((i1 | 0) < (i12 + 2e5 | 0)) {
   i19 = HEAP32[22682] | 0;
   HEAP32[i19 >> 2] = 255 - (((i1 - i12 | 0) * 255 | 0) / 2e5 | 0);
   i32 = i19;
  } else {
   i19 = HEAP32[22682] | 0;
   HEAP32[i19 >> 2] = 0;
   i32 = i19;
  }
  i19 = HEAP32[68188] | 0;
  i12 = HEAP32[68196] | 0;
  if ((i19 | 0) > (i12 + -1e6 | 0)) {
   HEAP32[i32 >> 2] = (((i12 - i19 | 0) * 255 | 0) / 1e6 | 0) + -255;
  }
  if ((HEAP32[68722] | 0) == 0 ? (HEAP32[(HEAP32[68736] | 0) + 120 >> 2] | 0) != 0 : 0) {
   i26 = 8;
   break;
  }
 }
 if ((i26 | 0) == 8) {
  i32 = _emscripten_realloc_async_context(12) | 0;
  _ui_do_fractal(1);
  if (___async) {
   HEAP32[i32 >> 2] = 188;
   i33 = i32 + 4 | 0;
   HEAP32[i33 >> 2] = i3;
   i34 = i32 + 8 | 0;
   HEAP32[i34 >> 2] = i4;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i32 >> 2] = 188;
  i33 = i32 + 4 | 0;
  HEAP32[i33 >> 2] = i3;
  i34 = i32 + 8 | 0;
  HEAP32[i34 >> 2] = i4;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else if ((i26 | 0) == 30) {
  i34 = _emscripten_realloc_async_context(32) | 0;
  _ui_do_fractal(1);
  if (___async) {
   HEAP32[i34 >> 2] = 189;
   i35 = i34 + 4 | 0;
   HEAP32[i35 >> 2] = i6;
   i36 = i34 + 8 | 0;
   HEAPF64[i36 >> 3] = d7;
   i37 = i34 + 16 | 0;
   HEAPF64[i37 >> 3] = d8;
   i38 = i34 + 24 | 0;
   HEAP32[i38 >> 2] = i3;
   i39 = i34 + 28 | 0;
   HEAP32[i39 >> 2] = i4;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i34 >> 2] = 189;
  i35 = i34 + 4 | 0;
  HEAP32[i35 >> 2] = i6;
  i36 = i34 + 8 | 0;
  HEAPF64[i36 >> 3] = d7;
  i37 = i34 + 16 | 0;
  HEAPF64[i37 >> 3] = d8;
  i38 = i34 + 24 | 0;
  HEAP32[i38 >> 2] = i3;
  i39 = i34 + 28 | 0;
  HEAP32[i39 >> 2] = i4;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else if ((i26 | 0) == 50) {
  i39 = HEAP32[68736] | 0;
  i34 = i39 + 1192 | 0;
  d28 = +HEAPF64[i34 >> 3];
  i38 = i39 + 1184 | 0;
  d27 = +HEAPF64[i38 >> 3];
  d11 = d28 + d7 * ((d27 - d28) / +(HEAP32[i39 + 128 >> 2] | 0));
  i37 = i39 + 1208 | 0;
  d7 = +HEAPF64[i37 >> 3];
  i36 = i39 + 1200 | 0;
  d24 = +HEAPF64[i36 >> 3];
  d25 = d7 + d8 * ((d24 - d7) / +(HEAP32[i39 + 132 >> 2] | 0));
  d8 = +Math_pow(+(d30 + 1.0), +(+HEAPF64[34413]));
  HEAPF64[i38 >> 3] = d11 + (d27 - d11) * d8;
  HEAPF64[i34 >> 3] = d11 + (d28 - d11) * d8;
  HEAPF64[i36 >> 3] = d25 + d8 * (d24 - d25);
  HEAPF64[i37 >> 3] = d25 + d8 * (d7 - d25);
  i37 = _emscripten_realloc_async_context(12) | 0;
  _ui_do_fractal(1);
  if (___async) {
   HEAP32[i37 >> 2] = 190;
   i40 = i37 + 4 | 0;
   HEAP32[i40 >> 2] = i3;
   i41 = i37 + 8 | 0;
   HEAP32[i41 >> 2] = i4;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i37 >> 2] = 190;
  i40 = i37 + 4 | 0;
  HEAP32[i40 >> 2] = i3;
  i41 = i37 + 8 | 0;
  HEAP32[i41 >> 2] = i4;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else if ((i26 | 0) == 56) {
  HEAP32[68194] = i31;
  HEAP32[(HEAP32[12936] | 0) + 160 >> 2] = i3;
  _free(i4);
  _tl_free_timer(HEAP32[68734] | 0);
  i4 = HEAP32[22682] | 0;
  HEAP32[i4 >> 2] = 0;
  HEAP32[i4 + 20 >> 2] = 0;
  _initlepic();
  HEAP32[34] = 25;
  i4 = _emscripten_realloc_async_context(4) | 0;
  _timestuff(-60, 157, 1, 2e6);
  if (___async) {
   HEAP32[i4 >> 2] = 191;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i4 >> 2] = 191;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
}
function _do_fractal__async_cb149(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 i7 = HEAP32[i1 + 8 >> 2] | 0;
 i8 = HEAP32[i1 + 12 >> 2] | 0;
 i9 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i5 >> 2] = i7;
 HEAP32[i4 >> 2] = i8;
 HEAP32[i3 >> 2] = i9;
 i9 = HEAP32[71600] | 0;
 i8 = i9 + 64 | 0;
 HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 i8 = HEAP32[i9 + 28 >> 2] | 0;
 if ((i8 | 0) != 0) {
  i7 = _emscripten_realloc_async_context(20) | 0;
  FUNCTION_TABLE_v[i8 & 63]();
  if (___async) {
   HEAP32[i7 >> 2] = 222;
   i10 = i7 + 4 | 0;
   i11 = HEAP32[i6 >> 2] | 0;
   HEAP32[i10 >> 2] = i11;
   i12 = i7 + 8 | 0;
   i13 = HEAP32[i5 >> 2] | 0;
   HEAP32[i12 >> 2] = i13;
   i14 = i7 + 12 | 0;
   i15 = HEAP32[i4 >> 2] | 0;
   HEAP32[i14 >> 2] = i15;
   i16 = i7 + 16 | 0;
   i17 = HEAP32[i3 >> 2] | 0;
   HEAP32[i16 >> 2] = i17;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i7 >> 2] = 222;
  i10 = i7 + 4 | 0;
  i11 = HEAP32[i6 >> 2] | 0;
  HEAP32[i10 >> 2] = i11;
  i12 = i7 + 8 | 0;
  i13 = HEAP32[i5 >> 2] | 0;
  HEAP32[i12 >> 2] = i13;
  i14 = i7 + 12 | 0;
  i15 = HEAP32[i4 >> 2] | 0;
  HEAP32[i14 >> 2] = i15;
  i16 = i7 + 16 | 0;
  i17 = HEAP32[i3 >> 2] | 0;
  HEAP32[i16 >> 2] = i17;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i9 + 140 >> 2] | 0) == 0) {
  i17 = i9;
  L10 : while (1) {
   i16 = (HEAP32[i4 >> 2] | 0) + 80 | 0;
   if (i16 >>> 0 < (HEAP32[i3 >> 2] | 0) >>> 0) {
    i18 = i17;
    i19 = i16;
    i20 = (HEAP32[i5 >> 2] | 0) + (HEAP32[i17 + 136 >> 2] << 1) | 0;
   } else {
    i21 = i17;
    do {
     i16 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
     if ((i16 | 0) >= 2) {
      break L10;
     }
     HEAP32[i6 >> 2] = i16;
     i22 = HEAP32[i21 + 56 >> 2] | 0;
     i16 = HEAP32[i21 + 132 >> 2] | 0;
     HEAP32[i3 >> 2] = i22 + (i16 * 40 | 0);
    } while ((HEAP32[i6 >> 2] | 0) >= (i16 | 0));
    i16 = Math_imul(HEAP32[i21 + 136 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
    i18 = i21;
    i19 = i22 + ((HEAP32[i6 >> 2] | 0) * 40 | 0) | 0;
    i20 = (HEAP32[i21 + 36 >> 2] | 0) + i16 | 0;
   }
   HEAP32[i4 >> 2] = i19;
   HEAP32[i5 >> 2] = i20;
   if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] | 0) == 0) {
    i17 = i18;
   } else {
    i23 = 5;
    break;
   }
  }
  if ((i23 | 0) == 5) {
   i18 = _emscripten_realloc_async_context(20) | 0;
   _calcline(HEAP32[i5 >> 2] | 0, HEAP32[i4 >> 2] | 0);
   if (___async) {
    HEAP32[i18 >> 2] = 221;
    i24 = i18 + 4 | 0;
    i25 = HEAP32[i6 >> 2] | 0;
    HEAP32[i24 >> 2] = i25;
    i26 = i18 + 8 | 0;
    i27 = HEAP32[i5 >> 2] | 0;
    HEAP32[i26 >> 2] = i27;
    i28 = i18 + 12 | 0;
    i29 = HEAP32[i4 >> 2] | 0;
    HEAP32[i28 >> 2] = i29;
    i30 = i18 + 16 | 0;
    i31 = HEAP32[i3 >> 2] | 0;
    HEAP32[i30 >> 2] = i31;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   ___async_unwind = 0;
   HEAP32[i18 >> 2] = 221;
   i24 = i18 + 4 | 0;
   i25 = HEAP32[i6 >> 2] | 0;
   HEAP32[i24 >> 2] = i25;
   i26 = i18 + 8 | 0;
   i27 = HEAP32[i5 >> 2] | 0;
   HEAP32[i26 >> 2] = i27;
   i28 = i18 + 12 | 0;
   i29 = HEAP32[i4 >> 2] | 0;
   HEAP32[i28 >> 2] = i29;
   i30 = i18 + 16 | 0;
   i31 = HEAP32[i3 >> 2] | 0;
   HEAP32[i30 >> 2] = i31;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[i21 + 68 >> 2] = 0;
  HEAP32[i21 + 72 >> 2] = 286600;
  i21 = HEAP32[71600] | 0;
  HEAP32[i21 + 64 >> 2] = 0;
  i31 = HEAP32[i21 + 52 >> 2] | 0;
  i30 = HEAP32[i21 + 128 >> 2] | 0;
  i3 = i31 + (i30 * 40 | 0) | 0;
  if ((i30 | 0) > 0) {
   i18 = i21 + 68 | 0;
   i29 = i31;
   do {
    if ((HEAP32[i29 + 20 >> 2] | 0) != 0) {
     HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
    }
    i29 = i29 + 40 | 0;
   } while (i29 >>> 0 < i3 >>> 0);
   i32 = i31;
   i33 = i30;
   i34 = i21;
   i35 = 0;
  } else {
   i32 = i31;
   i33 = i30;
   i34 = i21;
   i35 = 0;
  }
  L32 : while (1) {
   i36 = i32 + (i33 * 40 | 0) | 0;
   if ((i35 | 0) < (i33 | 0)) {
    i21 = i34;
    i37 = i32 + (i35 * 40 | 0) | 0;
    i38 = (HEAP32[i34 + 36 >> 2] | 0) + i35 | 0;
    while (1) {
     if ((HEAP32[i37 + 20 >> 2] | 0) != 0) {
      i23 = 23;
      break L32;
     }
     i30 = i37 + 80 | 0;
     if (i30 >>> 0 < i36 >>> 0) {
      i37 = i30;
      i38 = i38 + 2 | 0;
     } else {
      i39 = i21;
      break;
     }
    }
   } else {
    i39 = i34;
   }
   i21 = i35 + 1 | 0;
   if ((i21 | 0) >= 2) {
    break;
   }
   i32 = HEAP32[i39 + 52 >> 2] | 0;
   i33 = HEAP32[i39 + 128 >> 2] | 0;
   i34 = i39;
   i35 = i21;
  }
  if ((i23 | 0) == 23) {
   i23 = _emscripten_realloc_async_context(20) | 0;
   _calccolumn(i38, i37);
   if (___async) {
    HEAP32[i23 >> 2] = 223;
    i40 = i23 + 4 | 0;
    HEAP32[i40 >> 2] = i35;
    i41 = i23 + 8 | 0;
    HEAP32[i41 >> 2] = i38;
    i42 = i23 + 12 | 0;
    HEAP32[i42 >> 2] = i37;
    i43 = i23 + 16 | 0;
    HEAP32[i43 >> 2] = i36;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   ___async_unwind = 0;
   HEAP32[i23 >> 2] = 223;
   i40 = i23 + 4 | 0;
   HEAP32[i40 >> 2] = i35;
   i41 = i23 + 8 | 0;
   HEAP32[i41 >> 2] = i38;
   i42 = i23 + 12 | 0;
   HEAP32[i42 >> 2] = i37;
   i43 = i23 + 16 | 0;
   HEAP32[i43 >> 2] = i36;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  if ((HEAP32[i39 + 140 >> 2] | 0) == 0) {
   i36 = HEAP32[i39 + 28 >> 2] | 0;
   if ((i36 | 0) != 0) {
    i43 = _emscripten_realloc_async_context(4) | 0;
    FUNCTION_TABLE_v[i36 & 63]();
    if (___async) {
     HEAP32[i43 >> 2] = 225;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i43 >> 2] = 225;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   HEAP32[i39 + 64 >> 2] = 0;
   HEAP32[i39 + 68 >> 2] = 0;
   HEAP32[i39 + 72 >> 2] = 286552;
   _dosymetry();
   i43 = HEAP32[71600] | 0;
   i36 = HEAP32[i43 + 28 >> 2] | 0;
   if ((i36 | 0) != 0) {
    i23 = _emscripten_realloc_async_context(4) | 0;
    FUNCTION_TABLE_v[i36 & 63]();
    if (___async) {
     HEAP32[i23 >> 2] = 226;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i23 >> 2] = 226;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   i23 = HEAP32[i43 + 52 >> 2] | 0;
   i36 = HEAP32[i43 + 128 >> 2] | 0;
   i37 = i23 + (i36 * 40 | 0) | 0;
   if ((i36 | 0) > 0) {
    i36 = HEAP32[i43 + 16 >> 2] | 0;
    i42 = i23;
    while (1) {
     HEAPF64[i36 >> 3] = +HEAPF64[i42 >> 3];
     i42 = i42 + 40 | 0;
     if (!(i42 >>> 0 < i37 >>> 0)) {
      break;
     } else {
      i36 = i36 + 8 | 0;
     }
    }
   }
   i36 = HEAP32[i43 + 56 >> 2] | 0;
   i37 = HEAP32[i43 + 132 >> 2] | 0;
   i42 = i36 + (i37 * 40 | 0) | 0;
   if ((i37 | 0) <= 0) {
    STACKTOP = i2;
    return;
   }
   i37 = HEAP32[i43 + 20 >> 2] | 0;
   i43 = i36;
   while (1) {
    HEAPF64[i37 >> 3] = +HEAPF64[i43 >> 3];
    i43 = i43 + 40 | 0;
    if (!(i43 >>> 0 < i42 >>> 0)) {
     break;
    } else {
     i37 = i37 + 8 | 0;
    }
   }
   STACKTOP = i2;
   return;
  } else {
   i44 = i39;
  }
 } else {
  i44 = i9;
 }
 _init_tables(i44);
 STACKTOP = i2;
 return;
}
function _scene5() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 HEAP32[68666] = -1;
 _set_zbuff();
 i2 = HEAP32[12936] | 0;
 HEAP32[68668] = _malloc(Math_imul(HEAP32[i2 + 156 >> 2] | 0, HEAP32[i2 + 152 >> 2] | 0) | 0) | 0;
 HEAP32[12950] = 0;
 HEAP32[22676] = 90;
 HEAP32[22678] = 0;
 HEAP32[12944] = 0;
 HEAP32[12946] = 0;
 HEAP32[12948] = 0;
 HEAPF32[226] = 1.5;
 _torusconstructor();
 _disp3d();
 i2 = HEAP32[12936] | 0;
 _memcpy(HEAP32[68668] | 0, HEAP32[i2 + 160 >> 2] | 0, Math_imul(HEAP32[i2 + 156 >> 2] | 0, HEAP32[i2 + 152 >> 2] | 0) | 0) | 0;
 HEAP32[(HEAP32[22682] | 0) + 12 >> 2] = 0;
 HEAP32[68674] = 274680;
 HEAP32[34] = 12;
 _initlepic();
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(-60, 157, 1, 2e6);
 if (___async) {
  HEAP32[i2 >> 2] = 158;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[34] = 13;
 HEAP32[68666] = 0;
 HEAP32[68674] = 274704;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(60, 0, 1, 5e6);
 if (___async) {
  HEAP32[i2 >> 2] = 159;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[68674] = 274720;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(-60, 160, 1, 3e6);
 if (___async) {
  HEAP32[i2 >> 2] = 161;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[68674] = 274728;
 HEAP32[68688] = 0;
 HEAP32[34] = 14;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(-60, 162, 1, 6e6);
 if (___async) {
  HEAP32[i2 >> 2] = 163;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[68690] = HEAP32[68188];
 HEAP32[34] = 15;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 1, 2e6);
 if (___async) {
  HEAP32[i2 >> 2] = 164;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 _initlepic();
 HEAP32[68674] = 274768;
 HEAP32[34] = 16;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(-60, 157, 1, 2e6);
 if (___async) {
  HEAP32[i2 >> 2] = 165;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[34] = 15;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 1, 2e6);
 if (___async) {
  HEAP32[i2 >> 2] = 166;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[68674] = 274784;
 HEAP32[34] = 17;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(-60, 167, 1, 3e6);
 if (___async) {
  HEAP32[i2 >> 2] = 168;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[(HEAP32[22682] | 0) + 20 >> 2] = 0;
 HEAP32[34] = 15;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 1, 2e6);
 if (___async) {
  HEAP32[i2 >> 2] = 169;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[68700] = 274792;
 HEAP32[68674] = 274808;
 HEAP32[34] = 18;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(60, 0, 1, 1e6);
 if (___async) {
  HEAP32[i2 >> 2] = 170;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[(HEAP32[22682] | 0) + 12 >> 2] = 1;
 HEAP32[68700] = 274808;
 HEAP32[68674] = 274816;
 HEAP32[34] = 18;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(60, 0, 1, 1e6);
 if (___async) {
  HEAP32[i2 >> 2] = 171;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[68700] = 274816;
 HEAP32[68674] = 274792;
 HEAP32[34] = 18;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(60, 0, 1, 1e6);
 if (___async) {
  HEAP32[i2 >> 2] = 172;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[(HEAP32[22682] | 0) + 20 >> 2] = 0;
 HEAP32[34] = 15;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 1, 2e6);
 if (___async) {
  HEAP32[i2 >> 2] = 173;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[68700] = 274792;
 HEAP32[68674] = 274832;
 HEAP32[34] = 19;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(60, 0, 1, 1e6);
 if (___async) {
  HEAP32[i2 >> 2] = 174;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[(HEAP32[22682] | 0) + 12 >> 2] = 2;
 HEAP32[68700] = 274832;
 HEAP32[68674] = 274840;
 HEAP32[34] = 19;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(60, 0, 1, 1e6);
 if (___async) {
  HEAP32[i2 >> 2] = 175;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[68700] = 274840;
 HEAP32[68674] = 274792;
 HEAP32[34] = 19;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(60, 0, 1, 1e6);
 if (___async) {
  HEAP32[i2 >> 2] = 176;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[34] = 15;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 1, 2e6);
 if (___async) {
  HEAP32[i2 >> 2] = 177;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[68700] = 274792;
 HEAP32[68674] = 274856;
 HEAP32[34] = 20;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(-60, 178, 1, 1e6);
 if (___async) {
  HEAP32[i2 >> 2] = 179;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[(HEAP32[22682] | 0) + 12 >> 2] = 2;
 HEAP32[68700] = 274856;
 HEAP32[68674] = 274864;
 HEAP32[34] = 20;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(60, 0, 1, 1e6);
 if (___async) {
  HEAP32[i2 >> 2] = 180;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[68700] = 274864;
 HEAP32[68674] = 274792;
 HEAP32[34] = 20;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(-60, 181, 1, 15e5);
 if (___async) {
  HEAP32[i2 >> 2] = 182;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAPF32[(HEAP32[22682] | 0) + 8 >> 2] = 1.0;
 HEAP32[34] = 15;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 1, 2e6);
 if (___async) {
  HEAP32[i2 >> 2] = 183;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[34] = 21;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 1, 2e6);
 if (___async) {
  HEAP32[i2 >> 2] = 184;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else {
  _emscripten_free_async_context(i2 | 0);
  HEAP32[12944] = 0;
  STACKTOP = i1;
  return;
 }
}
function _aa_init(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, d23 = 0.0, i24 = 0;
 i4 = STACKTOP;
 i5 = _calloc(1, 232) | 0;
 i6 = i5 + 216 | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i5 + 224 >> 2] = 0;
 HEAP32[i5 + 220 >> 2] = 0;
 if ((i5 | 0) == 0) {
  i7 = 0;
  STACKTOP = i4;
  return i7 | 0;
 }
 i8 = HEAP32[i1 + 8 >> 2] | 0;
 i9 = i5 + 80 | 0;
 i10 = _emscripten_alloc_async_context(28) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i4;
 i11 = FUNCTION_TABLE_iiiii[i8 & 1](i2, i3, i9, i6) | 0;
 if (___async) {
  HEAP32[i10 >> 2] = 295;
  HEAP32[i10 + 4 >> 2] = i1;
  HEAP32[i10 + 8 >> 2] = i5;
  HEAP32[i10 + 12 >> 2] = i2;
  HEAP32[i10 + 16 >> 2] = i5;
  HEAP32[i10 + 20 >> 2] = i9;
  HEAP32[i10 + 24 >> 2] = i6;
  i4 = STACKTOP;
  STACKTOP = i4;
  return 0;
 }
 _emscripten_free_async_context(i10 | 0);
 if ((i11 | 0) == 0) {
  _free(i5);
  i7 = 0;
  STACKTOP = i4;
  return i7 | 0;
 }
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 i11 = HEAP32[i5 + 84 >> 2] | 0;
 i10 = HEAP32[i2 + 4 >> 2] & i11;
 i3 = i5 + 16 | 0;
 i8 = i5 + 20 | 0;
 HEAP32[i8 >> 2] = i10;
 i12 = HEAP32[i2 >> 2] | 0;
 i13 = (i12 | 0) == 0;
 if (i13) {
  i14 = HEAP32[i9 >> 2] | 0;
  HEAP32[i3 >> 2] = i14;
  if ((i14 | 0) == 0) {
   HEAP32[i3 >> 2] = i13 ? 532176 : i12;
  }
 } else {
  HEAP32[i3 >> 2] = i12;
 }
 if ((i10 | 0) == 0) {
  HEAP32[i8 >> 2] = i11;
 }
 HEAP32[i5 + 144 >> 2] = 2;
 HEAP32[i5 + 148 >> 2] = 2;
 HEAP32[i5 + 196 >> 2] = 0;
 HEAP32[i5 + 200 >> 2] = 0;
 HEAP32[i5 + 204 >> 2] = 0;
 i11 = i5 + 172 | 0;
 i8 = i2 + 40 | 0;
 HEAP32[i11 + 0 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 HEAP32[i11 + 12 >> 2] = 0;
 HEAP32[i11 + 16 >> 2] = 0;
 i11 = HEAP32[i8 >> 2] | 0;
 do {
  if ((i11 | 0) == 0) {
   i10 = HEAP32[i5 + 120 >> 2] | 0;
   if ((i10 | 0) != 0) {
    HEAP32[i5 + 56 >> 2] = i10;
    break;
   }
   i10 = HEAP32[i2 + 24 >> 2] | 0;
   if ((i10 | 0) != 0) {
    HEAP32[i5 + 40 >> 2] = i10;
    break;
   }
   i10 = HEAP32[i5 + 104 >> 2] | 0;
   if ((i10 | 0) == 0) {
    HEAP32[i5 + 56 >> 2] = 80;
    break;
   } else {
    HEAP32[i5 + 40 >> 2] = i10;
    break;
   }
  } else {
   HEAP32[i5 + 56 >> 2] = i11;
  }
 } while (0);
 i11 = i2 + 8 | 0;
 i10 = HEAP32[i11 >> 2] | 0;
 i12 = i5 + 56 | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 if ((i10 | 0) > (i3 | 0)) {
  HEAP32[i12 >> 2] = i10;
  i15 = i10;
 } else {
  i15 = i3;
 }
 i3 = HEAP32[i5 + 88 >> 2] | 0;
 if ((i3 | 0) > (i15 | 0)) {
  HEAP32[i12 >> 2] = i3;
  i16 = i3;
 } else {
  i16 = i15;
 }
 i15 = i2 + 16 | 0;
 i3 = HEAP32[i15 >> 2] | 0;
 if ((i3 | 0) != 0 & (i3 | 0) > (i16 | 0)) {
  HEAP32[i12 >> 2] = i3;
  i17 = i3;
 } else {
  i17 = i16;
 }
 i16 = HEAP32[i5 + 96 >> 2] | 0;
 if ((i16 | 0) != 0 & (i16 | 0) > (i17 | 0)) {
  HEAP32[i12 >> 2] = i16;
  i18 = i16;
 } else {
  i18 = i17;
 }
 i17 = i2 + 44 | 0;
 i16 = HEAP32[i17 >> 2] | 0;
 do {
  if ((i16 | 0) == 0) {
   i3 = HEAP32[i5 + 124 >> 2] | 0;
   if ((i3 | 0) != 0) {
    HEAP32[i5 + 60 >> 2] = i3;
    break;
   }
   i3 = HEAP32[i2 + 28 >> 2] | 0;
   if ((i3 | 0) != 0) {
    HEAP32[i5 + 44 >> 2] = i3;
    break;
   }
   i3 = HEAP32[i5 + 108 >> 2] | 0;
   if ((i3 | 0) == 0) {
    HEAP32[i5 + 60 >> 2] = 25;
    break;
   } else {
    HEAP32[i5 + 44 >> 2] = i3;
    break;
   }
  } else {
   HEAP32[i5 + 60 >> 2] = i16;
  }
 } while (0);
 i16 = i2 + 12 | 0;
 i3 = HEAP32[i16 >> 2] | 0;
 i10 = i5 + 60 | 0;
 i13 = HEAP32[i10 >> 2] | 0;
 if ((i3 | 0) > (i13 | 0)) {
  HEAP32[i10 >> 2] = i3;
  i19 = i3;
 } else {
  i19 = i13;
 }
 i13 = HEAP32[i5 + 92 >> 2] | 0;
 if ((i13 | 0) > (i19 | 0)) {
  HEAP32[i10 >> 2] = i13;
  i20 = i13;
 } else {
  i20 = i19;
 }
 i19 = i2 + 20 | 0;
 i13 = HEAP32[i19 >> 2] | 0;
 if ((i13 | 0) != 0 & (i13 | 0) > (i20 | 0)) {
  HEAP32[i10 >> 2] = i13;
  i21 = i13;
 } else {
  i21 = i20;
 }
 i20 = HEAP32[i5 + 100 >> 2] | 0;
 if ((i20 | 0) != 0 & (i20 | 0) > (i21 | 0)) {
  HEAP32[i10 >> 2] = i20;
  i22 = i20;
 } else {
  i22 = i21;
 }
 HEAP32[i12 >> 2] = 0 - i18;
 HEAP32[i10 >> 2] = 0 - i22;
 i22 = i5 + 64 | 0;
 HEAPF64[i22 >> 3] = 5.3;
 i18 = i5 + 72 | 0;
 HEAPF64[i18 >> 3] = 2.7;
 d23 = +HEAPF64[i5 + 128 >> 3];
 if (d23 != 0.0) {
  HEAPF64[i22 >> 3] = d23;
 }
 d23 = +HEAPF64[i5 + 136 >> 3];
 if (d23 != 0.0) {
  HEAPF64[i18 >> 3] = d23;
 }
 d23 = +HEAPF64[i2 + 48 >> 3];
 if (d23 != 0.0) {
  HEAPF64[i22 >> 3] = d23;
 }
 d23 = +HEAPF64[i2 + 56 >> 3];
 if (d23 != 0.0) {
  HEAPF64[i18 >> 3] = d23;
 }
 HEAP32[i5 + 160 >> 2] = 0;
 HEAP32[i5 + 164 >> 2] = 0;
 HEAP32[i5 + 168 >> 2] = 0;
 HEAP32[i5 + 212 >> 2] = 0;
 i18 = _emscripten_alloc_async_context(52) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i4;
 i2 = _aa_resize(i5) | 0;
 if (___async) {
  HEAP32[i18 >> 2] = 296;
  HEAP32[i18 + 4 >> 2] = i1;
  HEAP32[i18 + 8 >> 2] = i5;
  HEAP32[i18 + 12 >> 2] = i5;
  HEAP32[i18 + 16 >> 2] = i8;
  HEAP32[i18 + 20 >> 2] = i12;
  HEAP32[i18 + 24 >> 2] = i15;
  HEAP32[i18 + 28 >> 2] = i11;
  HEAP32[i18 + 32 >> 2] = i17;
  HEAP32[i18 + 36 >> 2] = i10;
  HEAP32[i18 + 40 >> 2] = i19;
  HEAP32[i18 + 44 >> 2] = i16;
  HEAP32[i18 + 48 >> 2] = i6;
  i4 = STACKTOP;
  STACKTOP = i4;
  return 0;
 }
 _emscripten_free_async_context(i18 | 0);
 if ((i2 | 0) == 0) {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  i1 = _emscripten_alloc_async_context(12) | 0;
  HEAP32[___async_cur_frame + 4 >> 2] = i4;
  FUNCTION_TABLE_vi[i2 & 511](i5);
  if (___async) {
   HEAP32[i1 >> 2] = 297;
   HEAP32[i1 + 4 >> 2] = i6;
   HEAP32[i1 + 8 >> 2] = i5;
   i4 = STACKTOP;
   STACKTOP = i4;
   return 0;
  }
  _emscripten_free_async_context(i1 | 0);
  i1 = HEAP32[i6 >> 2] | 0;
  if ((i1 | 0) != 0) {
   _free(i1);
  }
  _free(i5);
  _puts(526e3) | 0;
  i7 = 0;
  STACKTOP = i4;
  return i7 | 0;
 }
 i1 = HEAP32[i11 >> 2] | 0;
 i11 = (i1 | 0) == 0;
 do {
  if (i11) {
   if ((HEAP32[i15 >> 2] | 0) != 0) {
    i24 = 65;
    break;
   }
   i6 = HEAP32[i8 >> 2] | 0;
   if ((i6 | 0) == 0 ? 1 : (i6 | 0) == (HEAP32[i12 >> 2] | 0)) {
    i24 = 65;
   }
  } else {
   i24 = 65;
  }
 } while (0);
 L97 : do {
  if ((i24 | 0) == 65) {
   i8 = HEAP32[i16 >> 2] | 0;
   i6 = (i8 | 0) == 0;
   do {
    if (i6) {
     if ((HEAP32[i19 >> 2] | 0) != 0) {
      break;
     }
     i2 = HEAP32[i17 >> 2] | 0;
     if (!((i2 | 0) == 0 ? 1 : (i2 | 0) == (HEAP32[i10 >> 2] | 0))) {
      break L97;
     }
    }
   } while (0);
   if (!i11 ? (i1 | 0) > (HEAP32[i12 >> 2] | 0) : 0) {
    break;
   }
   if (!i6 ? (i8 | 0) > (HEAP32[i12 >> 2] | 0) : 0) {
    break;
   }
   i2 = HEAP32[i15 >> 2] | 0;
   if ((i2 | 0) != 0 ? (i2 | 0) < (HEAP32[i12 >> 2] | 0) : 0) {
    break;
   }
   i2 = HEAP32[i19 >> 2] | 0;
   if ((i2 | 0) == 0) {
    i7 = i5;
    STACKTOP = i4;
    return i7 | 0;
   }
   if ((i2 | 0) < (HEAP32[i12 >> 2] | 0)) {
    break;
   } else {
    i7 = i5;
   }
   STACKTOP = i4;
   return i7 | 0;
  }
 } while (0);
 i12 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i4;
 _aa_close(i5);
 if (___async) {
  HEAP32[i12 >> 2] = 298;
  i4 = STACKTOP;
  STACKTOP = i4;
  return 0;
 }
 _emscripten_free_async_context(i12 | 0);
 i7 = 0;
 STACKTOP = i4;
 return i7 | 0;
}
function _aa_getevent(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 i7 = i1 + 8 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 do {
  if ((i8 | 0) != 0) {
   i9 = HEAP32[i8 + 20 >> 2] | 0;
   i10 = _emscripten_alloc_async_context(28) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i3;
   FUNCTION_TABLE_viiii[i9 & 0](i1, i4, i5, i6);
   if (___async) {
    HEAP32[i10 >> 2] = 282;
    HEAP32[i10 + 4 >> 2] = i1;
    HEAP32[i10 + 8 >> 2] = i7;
    HEAP32[i10 + 12 >> 2] = i4;
    HEAP32[i10 + 16 >> 2] = i5;
    HEAP32[i10 + 20 >> 2] = i6;
    HEAP32[i10 + 24 >> 2] = i2;
    i3 = STACKTOP;
    STACKTOP = i3;
    return 0;
   }
   _emscripten_free_async_context(i10 | 0);
   i10 = HEAP32[i4 >> 2] | 0;
   i9 = i1 + 196 | 0;
   i11 = HEAP32[i5 >> 2] | 0;
   i12 = i1 + 200 | 0;
   if (((i10 | 0) == (HEAP32[i9 >> 2] | 0) ? (i11 | 0) == (HEAP32[i12 >> 2] | 0) : 0) ? (HEAP32[i6 >> 2] | 0) == (HEAP32[i1 + 204 >> 2] | 0) : 0) {
    break;
   }
   HEAP32[i9 >> 2] = i10;
   HEAP32[i12 >> 2] = i11;
   HEAP32[i1 + 204 >> 2] = HEAP32[i6 >> 2];
   i13 = 259;
   STACKTOP = i3;
   return i13 | 0;
  }
 } while (0);
 i8 = i1 + 4 | 0;
 i11 = HEAP32[i8 >> 2] | 0;
 if ((i11 | 0) == 0) {
  i13 = 400;
  STACKTOP = i3;
  return i13 | 0;
 }
 i12 = HEAP32[i11 + 20 >> 2] | 0;
 L15 : do {
  if ((i2 | 0) == 0) {
   i11 = _emscripten_alloc_async_context(28) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i3;
   i10 = FUNCTION_TABLE_iii[i12 & 3](i1, 0) | 0;
   if (___async) {
    HEAP32[i11 >> 2] = 286;
    HEAP32[i11 + 4 >> 2] = i1;
    HEAP32[i11 + 8 >> 2] = i7;
    HEAP32[i11 + 12 >> 2] = i4;
    HEAP32[i11 + 16 >> 2] = i5;
    HEAP32[i11 + 20 >> 2] = i6;
    HEAP32[i11 + 24 >> 2] = i2;
    i3 = STACKTOP;
    STACKTOP = i3;
    return 0;
   } else {
    _emscripten_free_async_context(i11 | 0);
    i14 = i10;
    break;
   }
  } else {
   i10 = _emscripten_alloc_async_context(32) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i3;
   i11 = FUNCTION_TABLE_iii[i12 & 3](i1, 1) | 0;
   if (___async) {
    HEAP32[i10 >> 2] = 283;
    HEAP32[i10 + 4 >> 2] = i1;
    HEAP32[i10 + 8 >> 2] = i7;
    HEAP32[i10 + 12 >> 2] = i4;
    HEAP32[i10 + 16 >> 2] = i5;
    HEAP32[i10 + 20 >> 2] = i6;
    HEAP32[i10 + 24 >> 2] = i2;
    HEAP32[i10 + 28 >> 2] = i8;
    i3 = STACKTOP;
    STACKTOP = i3;
    return 0;
   }
   _emscripten_free_async_context(i10 | 0);
   if ((i11 | 0) == 0) {
    i10 = i1 + 196 | 0;
    i9 = i1 + 200 | 0;
    i15 = i1 + 204 | 0;
    while (1) {
     i16 = HEAP32[i7 >> 2] | 0;
     if ((i16 | 0) != 0) {
      i17 = HEAP32[i16 + 20 >> 2] | 0;
      i18 = _emscripten_alloc_async_context(44) | 0;
      HEAP32[___async_cur_frame + 4 >> 2] = i3;
      FUNCTION_TABLE_viiii[i17 & 0](i1, i4, i5, i6);
      if (___async) {
       i19 = 19;
       break;
      }
      _emscripten_free_async_context(i18 | 0);
      i20 = HEAP32[i4 >> 2] | 0;
      i21 = HEAP32[i5 >> 2] | 0;
      if ((i20 | 0) != (HEAP32[i10 >> 2] | 0)) {
       i19 = 23;
       break;
      }
      if ((i21 | 0) != (HEAP32[i9 >> 2] | 0)) {
       i19 = 23;
       break;
      }
      if ((HEAP32[i6 >> 2] | 0) != (HEAP32[i15 >> 2] | 0)) {
       i19 = 23;
       break;
      }
     }
     i17 = HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] | 0;
     i22 = _emscripten_alloc_async_context(44) | 0;
     HEAP32[___async_cur_frame + 4 >> 2] = i3;
     i16 = FUNCTION_TABLE_iii[i17 & 3](i1, 1) | 0;
     if (___async) {
      i19 = 16;
      break;
     }
     _emscripten_free_async_context(i22 | 0);
     if ((i16 | 0) != 0) {
      i14 = i16;
      break L15;
     }
    }
    if ((i19 | 0) == 16) {
     HEAP32[i22 >> 2] = 284;
     HEAP32[i22 + 4 >> 2] = i1;
     HEAP32[i22 + 8 >> 2] = i7;
     HEAP32[i22 + 12 >> 2] = i4;
     HEAP32[i22 + 16 >> 2] = i5;
     HEAP32[i22 + 20 >> 2] = i6;
     HEAP32[i22 + 24 >> 2] = i2;
     HEAP32[i22 + 28 >> 2] = i10;
     HEAP32[i22 + 32 >> 2] = i8;
     HEAP32[i22 + 36 >> 2] = i9;
     HEAP32[i22 + 40 >> 2] = i15;
     i3 = STACKTOP;
     STACKTOP = i3;
     return 0;
    } else if ((i19 | 0) == 19) {
     HEAP32[i18 >> 2] = 285;
     HEAP32[i18 + 4 >> 2] = i1;
     HEAP32[i18 + 8 >> 2] = i7;
     HEAP32[i18 + 12 >> 2] = i4;
     HEAP32[i18 + 16 >> 2] = i5;
     HEAP32[i18 + 20 >> 2] = i6;
     HEAP32[i18 + 24 >> 2] = i2;
     HEAP32[i18 + 28 >> 2] = i10;
     HEAP32[i18 + 32 >> 2] = i8;
     HEAP32[i18 + 36 >> 2] = i9;
     HEAP32[i18 + 40 >> 2] = i15;
     i3 = STACKTOP;
     STACKTOP = i3;
     return 0;
    } else if ((i19 | 0) == 23) {
     HEAP32[i10 >> 2] = i20;
     HEAP32[i9 >> 2] = i21;
     HEAP32[i15 >> 2] = HEAP32[i6 >> 2];
     i13 = 259;
     STACKTOP = i3;
     return i13 | 0;
    }
   } else {
    i14 = i11;
   }
  }
 } while (0);
 if ((i14 | 0) == 259) {
  i21 = HEAP32[i7 >> 2] | 0;
  if ((i21 | 0) == 0) {
   i13 = 400;
   STACKTOP = i3;
   return i13 | 0;
  }
  i7 = HEAP32[i21 + 20 >> 2] | 0;
  i21 = _emscripten_alloc_async_context(24) | 0;
  HEAP32[___async_cur_frame + 4 >> 2] = i3;
  FUNCTION_TABLE_viiii[i7 & 0](i1, i4, i5, i6);
  if (___async) {
   HEAP32[i21 >> 2] = 288;
   HEAP32[i21 + 4 >> 2] = i4;
   HEAP32[i21 + 8 >> 2] = i1;
   HEAP32[i21 + 12 >> 2] = i5;
   HEAP32[i21 + 16 >> 2] = i6;
   HEAP32[i21 + 20 >> 2] = i2;
   i3 = STACKTOP;
   STACKTOP = i3;
   return 0;
  }
  _emscripten_free_async_context(i21 | 0);
  i21 = HEAP32[i4 >> 2] | 0;
  i4 = i1 + 196 | 0;
  i7 = HEAP32[i5 >> 2] | 0;
  i5 = i1 + 200 | 0;
  if (((i21 | 0) == (HEAP32[i4 >> 2] | 0) ? (i7 | 0) == (HEAP32[i5 >> 2] | 0) : 0) ? (HEAP32[i6 >> 2] | 0) == (HEAP32[i1 + 204 >> 2] | 0) : 0) {
   i20 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i3;
   i19 = _aa_getevent(i1, i2) | 0;
   if (___async) {
    HEAP32[i20 >> 2] = 289;
    i3 = STACKTOP;
    STACKTOP = i3;
    return 0;
   }
   _emscripten_free_async_context(i20 | 0);
   i13 = i19;
   STACKTOP = i3;
   return i13 | 0;
  }
  HEAP32[i4 >> 2] = i21;
  HEAP32[i5 >> 2] = i7;
  HEAP32[i1 + 204 >> 2] = HEAP32[i6 >> 2];
  i13 = 259;
  STACKTOP = i3;
  return i13 | 0;
 } else if ((i14 | 0) == 258) {
  i6 = HEAP32[i1 + 212 >> 2] | 0;
  if ((i6 | 0) == 0) {
   i13 = 258;
   STACKTOP = i3;
   return i13 | 0;
  }
  i7 = _emscripten_alloc_async_context(4) | 0;
  HEAP32[___async_cur_frame + 4 >> 2] = i3;
  FUNCTION_TABLE_vi[i6 & 511](i1);
  if (___async) {
   HEAP32[i7 >> 2] = 287;
   i3 = STACKTOP;
   STACKTOP = i3;
   return 0;
  }
  _emscripten_free_async_context(i7 | 0);
  i13 = 258;
  STACKTOP = i3;
  return i13 | 0;
 } else {
  i13 = i14;
  STACKTOP = i3;
  return i13 | 0;
 }
 return 0;
}
function _trinkle(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 720 | 0;
 i10 = i9 + 456 | 0;
 i11 = i9 + 228 | 0;
 i12 = i9;
 HEAP32[i12 >> 2] = i1;
 i13 = 0 - i2 | 0;
 L1 : do {
  if ((i4 | 0) == 1 & (i5 | 0) == 0) {
   i14 = i1;
   i15 = i6;
   i16 = i7;
   i17 = 1;
   i18 = 18;
  } else {
   i19 = i6;
   i20 = i1;
   i21 = i7;
   i22 = i4;
   i23 = i5;
   i24 = i1;
   i25 = 1;
   while (1) {
    i26 = i20 + (0 - (HEAP32[i8 + (i19 << 2) >> 2] | 0)) | 0;
    if ((FUNCTION_TABLE_iii[i3 & 3](i26, i24) | 0) < 1) {
     i14 = i20;
     i15 = i19;
     i16 = i21;
     i17 = i25;
     i18 = 18;
     break L1;
    }
    if ((i21 | 0) == 0 & (i19 | 0) > 1) {
     i27 = HEAP32[i8 + (i19 + -2 << 2) >> 2] | 0;
     if ((FUNCTION_TABLE_iii[i3 & 3](i20 + i13 | 0, i26) | 0) > -1) {
      i28 = i20;
      i29 = i19;
      i30 = i25;
      break L1;
     }
     if ((FUNCTION_TABLE_iii[i3 & 3](i20 + (0 - (i27 + i2)) | 0, i26) | 0) > -1) {
      i28 = i20;
      i29 = i19;
      i30 = i25;
      break L1;
     }
    }
    i27 = i25 + 1 | 0;
    HEAP32[i12 + (i25 << 2) >> 2] = i26;
    i31 = i22 + -1 | 0;
    if ((i31 | 0) != 0) {
     if ((i31 & 1 | 0) == 0) {
      i32 = i31;
      i31 = 0;
      do {
       i31 = i31 + 1 | 0;
       i32 = i32 >>> 1;
      } while ((i32 & 1 | 0) == 0);
      if ((i31 | 0) != 0) {
       i33 = i31;
      } else {
       i18 = 10;
      }
     } else {
      i18 = 10;
     }
     if ((i18 | 0) == 10) {
      i18 = 0;
      if ((i23 | 0) != 0) {
       if ((i23 & 1 | 0) == 0) {
        i32 = i23;
        i34 = 0;
        while (1) {
         i35 = i34 + 1 | 0;
         i32 = i32 >>> 1;
         if ((i32 & 1 | 0) != 0) {
          i36 = i35;
          break;
         } else {
          i34 = i35;
         }
        }
       } else {
        i36 = 0;
       }
      } else {
       i36 = 32;
      }
      i33 = (i36 | 0) == 0 ? 0 : i36 + 32 | 0;
     }
     if (i33 >>> 0 > 31) {
      i37 = i33;
      i18 = 15;
     } else {
      i38 = i33;
      i39 = i22;
      i40 = i23;
      i41 = i33;
     }
    } else {
     i37 = 32;
     i18 = 15;
    }
    if ((i18 | 0) == 15) {
     i18 = 0;
     i38 = i37 + -32 | 0;
     i39 = i23;
     i40 = 0;
     i41 = i37;
    }
    i34 = i40 << 32 - i38 | i39 >>> i38;
    i32 = i40 >>> i38;
    i31 = i41 + i19 | 0;
    if ((i34 | 0) == 1 & (i32 | 0) == 0) {
     i28 = i26;
     i29 = i31;
     i30 = i27;
     break L1;
    }
    i19 = i31;
    i20 = i26;
    i21 = 0;
    i22 = i34;
    i23 = i32;
    i24 = HEAP32[i12 >> 2] | 0;
    i25 = i27;
   }
  }
 } while (0);
 if ((i18 | 0) == 18) {
  if ((i16 | 0) == 0) {
   i28 = i14;
   i29 = i15;
   i30 = i17;
  } else {
   STACKTOP = i9;
   return;
  }
 }
 L31 : do {
  if ((i30 | 0) >= 2 ? (i17 = i12 + (i30 << 2) | 0, HEAP32[i17 >> 2] = i10, (i2 | 0) != 0) : 0) {
   if ((i30 | 0) > 0) {
    i42 = i2;
    i43 = i10;
   } else {
    i15 = i2 >>> 0 > 256 ? 256 : i2;
    i14 = HEAP32[i12 >> 2] | 0;
    _memcpy(i10 | 0, i14 | 0, i15 | 0) | 0;
    if ((i15 | 0) == (i2 | 0)) {
     break;
    } else {
     i44 = i2;
     i45 = i15;
    }
    while (1) {
     i44 = i44 - i45 | 0;
     i45 = i44 >>> 0 > 256 ? 256 : i44;
     _memcpy(i10 | 0, i14 | 0, i45 | 0) | 0;
     if ((i44 | 0) == (i45 | 0)) {
      break L31;
     }
    }
   }
   while (1) {
    i14 = i42 >>> 0 > 256 ? 256 : i42;
    i15 = HEAP32[i12 >> 2] | 0;
    _memcpy(i43 | 0, i15 | 0, i14 | 0) | 0;
    i16 = i15;
    i15 = 0;
    do {
     i18 = i15;
     i15 = i15 + 1 | 0;
     i41 = i16;
     i16 = HEAP32[i12 + (i15 << 2) >> 2] | 0;
     _memcpy(i41 | 0, i16 | 0, i14 | 0) | 0;
     HEAP32[i12 + (i18 << 2) >> 2] = i41 + i14;
    } while ((i15 | 0) != (i30 | 0));
    if ((i42 | 0) == (i14 | 0)) {
     break L31;
    }
    i42 = i42 - i14 | 0;
    i43 = HEAP32[i17 >> 2] | 0;
   }
  }
 } while (0);
 HEAP32[i11 >> 2] = i28;
 L45 : do {
  if ((i29 | 0) > 1) {
   i43 = i29;
   i42 = i28;
   i30 = i28;
   i12 = 1;
   while (1) {
    i45 = i42 + i13 | 0;
    i44 = i43 + -2 | 0;
    i17 = i42 + (0 - ((HEAP32[i8 + (i44 << 2) >> 2] | 0) + i2)) | 0;
    if ((FUNCTION_TABLE_iii[i3 & 3](i30, i17) | 0) > -1 ? (FUNCTION_TABLE_iii[i3 & 3](i30, i45) | 0) > -1 : 0) {
     i46 = i12;
     break;
    }
    i15 = i12 + 1 | 0;
    i16 = i11 + (i12 << 2) | 0;
    if ((FUNCTION_TABLE_iii[i3 & 3](i17, i45) | 0) > -1) {
     HEAP32[i16 >> 2] = i17;
     i47 = i17;
     i48 = i43 + -1 | 0;
    } else {
     HEAP32[i16 >> 2] = i45;
     i47 = i45;
     i48 = i44;
    }
    if ((i48 | 0) <= 1) {
     i46 = i15;
     break;
    }
    i43 = i48;
    i42 = i47;
    i30 = HEAP32[i11 >> 2] | 0;
    i12 = i15;
   }
   if ((i46 | 0) >= 2 ? (i12 = i11 + (i46 << 2) | 0, HEAP32[i12 >> 2] = i10, (i2 | 0) != 0) : 0) {
    if ((i46 | 0) > 0) {
     i49 = i2;
     i50 = i10;
    } else {
     i30 = i2 >>> 0 > 256 ? 256 : i2;
     i42 = HEAP32[i11 >> 2] | 0;
     _memcpy(i10 | 0, i42 | 0, i30 | 0) | 0;
     if ((i30 | 0) == (i2 | 0)) {
      i51 = i10;
      break;
     } else {
      i52 = i2;
      i53 = i30;
     }
     while (1) {
      i52 = i52 - i53 | 0;
      i53 = i52 >>> 0 > 256 ? 256 : i52;
      _memcpy(i10 | 0, i42 | 0, i53 | 0) | 0;
      if ((i52 | 0) == (i53 | 0)) {
       i51 = i10;
       break L45;
      }
     }
    }
    while (1) {
     i42 = i49 >>> 0 > 256 ? 256 : i49;
     i30 = HEAP32[i11 >> 2] | 0;
     _memcpy(i50 | 0, i30 | 0, i42 | 0) | 0;
     i43 = i30;
     i30 = 0;
     do {
      i15 = i30;
      i30 = i30 + 1 | 0;
      i44 = i43;
      i43 = HEAP32[i11 + (i30 << 2) >> 2] | 0;
      _memcpy(i44 | 0, i43 | 0, i42 | 0) | 0;
      HEAP32[i11 + (i15 << 2) >> 2] = i44 + i42;
     } while ((i30 | 0) != (i46 | 0));
     if ((i49 | 0) == (i42 | 0)) {
      i51 = i10;
      break L45;
     }
     i49 = i49 - i42 | 0;
     i50 = HEAP32[i12 >> 2] | 0;
    }
   } else {
    i51 = i10;
   }
  } else {
   i51 = i10;
  }
 } while (0);
 STACKTOP = i9;
 return;
}
function _scene4__async_cb42(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 12 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2 + 4 | 0;
 i7 = i2;
 i8 = HEAP32[i1 + 8 >> 2] | 0;
 i9 = HEAP32[i1 + 12 >> 2] | 0;
 i10 = HEAP32[i1 + 16 >> 2] | 0;
 i11 = HEAP32[i1 + 20 >> 2] | 0;
 i12 = HEAP32[i1 + 24 >> 2] | 0;
 HEAP32[i7 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i6 >> 2] = i8;
 HEAP32[i5 >> 2] = i9;
 HEAP32[i4 >> 2] = i10;
 HEAP32[i3 >> 2] = i12;
 i12 = (HEAP32[i3 >> 2] | 0) + -1 | 0;
 i10 = HEAP32[i7 >> 2] | 0;
 i9 = HEAP32[i6 >> 2] | 0;
 i8 = HEAP32[i5 >> 2] | 0;
 if ((i12 | 0) != 0) {
  HEAP32[i3 >> 2] = i12;
  i12 = (i8 | 0) > 7;
  HEAP32[i5 >> 2] = i12 ? 0 : i8 + 1 | 0;
  i8 = i12 & 1;
  HEAP32[i6 >> 2] = i8 ^ i9;
  i12 = HEAP32[12936] | 0;
  if (((HEAP32[i12 + 56 >> 2] | 0) + -25 | 0) > 0) {
   i1 = (i9 | 0) != (i8 | 0) ? 179504 : 179512;
   i8 = i12;
   i9 = 0;
   while (1) {
    i13 = i9 + (HEAP32[i3 >> 2] | 0) | 0;
    _aa_puts(i8, i13, i11, 0, i1);
    _aa_puts(HEAP32[12936] | 0, i13, i11 + 3 | 0, 0, i1);
    _aa_puts(HEAP32[12936] | 0, i13, i11 + 6 | 0, 0, i1);
    _aa_puts(HEAP32[12936] | 0, i13, i11 + 9 | 0, 0, i1);
    i9 = i9 + 6 | 0;
    i13 = HEAP32[12936] | 0;
    if ((i9 | 0) >= ((HEAP32[i13 + 56 >> 2] | 0) + -25 | 0)) {
     i14 = i13;
     break;
    } else {
     i8 = i13;
    }
   }
  } else {
   i14 = i12;
  }
  _aa_puts(i14, i10, (HEAP32[i14 + 60 >> 2] | 0) + -1 | 0, 0, 179520);
  HEAP32[i7 >> 2] = i10 + -1 + ((_rand() | 0) % 3 | 0);
  i10 = _emscripten_realloc_async_context(28) | 0;
  _bbflushwait(2e4);
  if (___async) {
   HEAP32[i10 >> 2] = 97;
   i15 = i10 + 4 | 0;
   i16 = HEAP32[i7 >> 2] | 0;
   HEAP32[i15 >> 2] = i16;
   i17 = i10 + 8 | 0;
   i18 = HEAP32[i6 >> 2] | 0;
   HEAP32[i17 >> 2] = i18;
   i19 = i10 + 12 | 0;
   i20 = HEAP32[i5 >> 2] | 0;
   HEAP32[i19 >> 2] = i20;
   i21 = i10 + 16 | 0;
   i22 = HEAP32[i4 >> 2] | 0;
   HEAP32[i21 >> 2] = i22;
   i23 = i10 + 20 | 0;
   HEAP32[i23 >> 2] = i11;
   i24 = i10 + 24 | 0;
   i25 = HEAP32[i3 >> 2] | 0;
   HEAP32[i24 >> 2] = i25;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i10 >> 2] = 97;
  i15 = i10 + 4 | 0;
  i16 = HEAP32[i7 >> 2] | 0;
  HEAP32[i15 >> 2] = i16;
  i17 = i10 + 8 | 0;
  i18 = HEAP32[i6 >> 2] | 0;
  HEAP32[i17 >> 2] = i18;
  i19 = i10 + 12 | 0;
  i20 = HEAP32[i5 >> 2] | 0;
  HEAP32[i19 >> 2] = i20;
  i21 = i10 + 16 | 0;
  i22 = HEAP32[i4 >> 2] | 0;
  HEAP32[i21 >> 2] = i22;
  i23 = i10 + 20 | 0;
  HEAP32[i23 >> 2] = i11;
  i24 = i10 + 24 | 0;
  i25 = HEAP32[i3 >> 2] | 0;
  HEAP32[i24 >> 2] = i25;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i25 = (HEAP32[i4 >> 2] | 0) + 2 | 0;
 i24 = HEAP32[12936] | 0;
 i3 = HEAP32[i24 + 60 >> 2] | 0;
 _memset(HEAP32[i24 + 164 >> 2] | 0, 32, Math_imul((i3 | 0) > 15 ? 15 : i3, HEAP32[i24 + 56 >> 2] | 0) | 0) | 0;
 i24 = HEAP32[i7 >> 2] | 0;
 i3 = HEAP32[i7 >> 2] | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 i10 = HEAP32[i6 >> 2] | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i11 = HEAP32[i5 >> 2] | 0;
 if ((i25 | 0) >= 5) {
  i5 = (i6 | 0) > 7;
  i23 = i5 ? 0 : i6 + 1 | 0;
  i6 = i5 & 1;
  i5 = i6 ^ i7;
  i22 = HEAP32[12936] | 0;
  if (((HEAP32[i22 + 56 >> 2] | 0) + -25 | 0) > 0) {
   i21 = (i7 | 0) != (i6 | 0) ? 179504 : 179512;
   i6 = i22;
   i7 = 0;
   while (1) {
    i20 = i7 + 0 | 0;
    _aa_puts(i6, i20, 6, 0, i21);
    _aa_puts(HEAP32[12936] | 0, i20, 9, 0, i21);
    _aa_puts(HEAP32[12936] | 0, i20, 12, 0, i21);
    _aa_puts(HEAP32[12936] | 0, i20, 15, 0, i21);
    i7 = i7 + 6 | 0;
    i20 = HEAP32[12936] | 0;
    if ((i7 | 0) >= ((HEAP32[i20 + 56 >> 2] | 0) + -25 | 0)) {
     i26 = i20;
     break;
    } else {
     i6 = i20;
    }
   }
  } else {
   i26 = i22;
  }
  _aa_puts(i26, i24, (HEAP32[i26 + 60 >> 2] | 0) + -1 | 0, 0, 179520);
  i26 = i24 + -1 + ((_rand() | 0) % 3 | 0) | 0;
  i24 = _emscripten_realloc_async_context(20) | 0;
  _bbflushwait(1e4);
  if (___async) {
   HEAP32[i24 >> 2] = 98;
   i27 = i24 + 4 | 0;
   HEAP32[i27 >> 2] = i26;
   i28 = i24 + 8 | 0;
   HEAP32[i28 >> 2] = 0;
   i29 = i24 + 12 | 0;
   HEAP32[i29 >> 2] = i5;
   i30 = i24 + 16 | 0;
   HEAP32[i30 >> 2] = i23;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i24 >> 2] = 98;
  i27 = i24 + 4 | 0;
  HEAP32[i27 >> 2] = i26;
  i28 = i24 + 8 | 0;
  HEAP32[i28 >> 2] = 0;
  i29 = i24 + 12 | 0;
  HEAP32[i29 >> 2] = i5;
  i30 = i24 + 16 | 0;
  HEAP32[i30 >> 2] = i23;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 >> 2] = i25;
 i25 = (i11 | 0) > 7;
 i23 = i25 ? 0 : i11 + 1 | 0;
 i11 = i25 & 1;
 i25 = i11 ^ i10;
 i30 = HEAP32[12936] | 0;
 if (((HEAP32[i30 + 56 >> 2] | 0) + -25 | 0) > 0) {
  i24 = (i10 | 0) != (i11 | 0) ? 179504 : 179512;
  i11 = i30;
  i10 = 0;
  while (1) {
   i5 = i10 + 0 | 0;
   _aa_puts(i11, i5, HEAP32[i4 >> 2] | 0, 0, i24);
   _aa_puts(HEAP32[12936] | 0, i5, (HEAP32[i4 >> 2] | 0) + 3 | 0, 0, i24);
   _aa_puts(HEAP32[12936] | 0, i5, (HEAP32[i4 >> 2] | 0) + 6 | 0, 0, i24);
   _aa_puts(HEAP32[12936] | 0, i5, (HEAP32[i4 >> 2] | 0) + 9 | 0, 0, i24);
   i10 = i10 + 6 | 0;
   i5 = HEAP32[12936] | 0;
   if ((i10 | 0) >= ((HEAP32[i5 + 56 >> 2] | 0) + -25 | 0)) {
    i31 = i5;
    break;
   } else {
    i11 = i5;
   }
  }
 } else {
  i31 = i30;
 }
 _aa_puts(i31, i3, (HEAP32[i31 + 60 >> 2] | 0) + -1 | 0, 0, 179520);
 i31 = i3 + -1 + ((_rand() | 0) % 3 | 0) | 0;
 i3 = _emscripten_realloc_async_context(24) | 0;
 _bbflushwait(2e4);
 if (___async) {
  HEAP32[i3 >> 2] = 96;
  i32 = i3 + 4 | 0;
  HEAP32[i32 >> 2] = 0;
  i33 = i3 + 8 | 0;
  i34 = HEAP32[i4 >> 2] | 0;
  HEAP32[i33 >> 2] = i34;
  i35 = i3 + 12 | 0;
  HEAP32[i35 >> 2] = i31;
  i36 = i3 + 16 | 0;
  HEAP32[i36 >> 2] = i25;
  i37 = i3 + 20 | 0;
  HEAP32[i37 >> 2] = i23;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i3 >> 2] = 96;
 i32 = i3 + 4 | 0;
 HEAP32[i32 >> 2] = 0;
 i33 = i3 + 8 | 0;
 i34 = HEAP32[i4 >> 2] | 0;
 HEAP32[i33 >> 2] = i34;
 i35 = i3 + 12 | 0;
 HEAP32[i35 >> 2] = i31;
 i36 = i3 + 16 | 0;
 HEAP32[i36 >> 2] = i25;
 i37 = i3 + 20 | 0;
 HEAP32[i37 >> 2] = i23;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _tl_process_group__async_cb86(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 i7 = HEAP32[i1 + 4 >> 2] | 0;
 i8 = HEAP32[i1 + 12 >> 2] | 0;
 i9 = HEAP32[i1 + 16 >> 2] | 0;
 i10 = HEAP32[i1 + 20 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i5 >> 2] = i8;
 HEAP32[i4 >> 2] = i9;
 HEAP32[i3 >> 2] = i10;
 do {
  _gettimeofday(56, 64) | 0;
  i10 = HEAP32[60 >> 2] | 0;
 } while ((i10 | 0) > 999999);
 i11 = i10;
 i12 = HEAP32[i6 >> 2] | 0;
 L4 : while (1) {
  i10 = (i12 | 0) < (HEAP32[i5 >> 2] | 0) ? i12 : HEAP32[i5 >> 2] | 0;
  i9 = HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0;
  if ((i9 | 0) == 0) {
   i13 = i11;
   i14 = HEAP32[i3 >> 2] | 0;
   i15 = i10;
   i16 = 2;
  } else {
   i17 = i11;
   i18 = i10;
   i19 = i9;
   i16 = 5;
  }
  L6 : while (1) {
   if ((i16 | 0) == 2) {
    i16 = 0;
    if ((i14 | 0) == 0) {
     i16 = 25;
     break L4;
    }
    i9 = HEAP32[i7 >> 2] | 0;
    if ((i9 | 0) == 0) {
     i20 = -1;
     i16 = 27;
     break L4;
    } else {
     i21 = i13;
     i22 = 0;
     i23 = 2147483647;
     i24 = i9;
    }
   } else if ((i16 | 0) == 5) {
    i16 = 0;
    HEAP32[i5 >> 2] = i18;
    i9 = i19;
    while (1) {
     HEAP32[i4 >> 2] = i9;
     i25 = (HEAP32[i4 >> 2] | 0) + 16 | 0;
     if ((HEAP32[i25 >> 2] | 0) != 0 ? (i26 = (HEAP32[i4 >> 2] | 0) + 8 | 0, (HEAP32[i26 >> 2] | 0) > 0) : 0) {
      break;
     }
     i27 = (HEAP32[i4 >> 2] | 0) + 20 | 0;
     if ((HEAP32[i27 >> 2] | 0) != 0 ? (i28 = (HEAP32[i4 >> 2] | 0) + 8 | 0, (HEAP32[i28 >> 2] | 0) > 0) : 0) {
      break L6;
     }
     i10 = HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0;
     if ((i10 | 0) == 0) {
      i13 = i17;
      i14 = HEAP32[i3 >> 2] | 0;
      i15 = HEAP32[i5 >> 2] | 0;
      i16 = 2;
      continue L6;
     } else {
      i9 = i10;
     }
    }
    i29 = (HEAP32[i4 >> 2] | 0) + 12 | 0;
    i30 = (HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[i29 >> 2] | 0) - i17 + (Math_imul((HEAP32[14] | 0) - (HEAP32[HEAP32[i4 >> 2] >> 2] | 0) | 0, -1e6) | 0) | 0;
    i9 = HEAP32[i3 >> 2] | 0;
    if ((i30 | 0) < 500) {
     i16 = 9;
     break L4;
    }
    i10 = (i30 | 0) < (HEAP32[i5 >> 2] | 0) ? i30 : HEAP32[i5 >> 2] | 0;
    i8 = HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0;
    if ((i8 | 0) == 0) {
     i13 = i17;
     i14 = i9;
     i15 = i10;
     i16 = 2;
     continue;
    } else {
     i21 = i17;
     i22 = i9;
     i23 = i10;
     i24 = i8;
    }
   }
   HEAP32[i3 >> 2] = i22;
   i17 = i21;
   i18 = i23;
   i19 = i24;
   i16 = 5;
  }
  i31 = (HEAP32[i4 >> 2] | 0) + 12 | 0;
  i12 = (HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[i31 >> 2] | 0) - i17 + (Math_imul((HEAP32[14] | 0) - (HEAP32[HEAP32[i4 >> 2] >> 2] | 0) | 0, -1e6) | 0) | 0;
  if ((i12 | 0) < 500) {
   i16 = 18;
   break;
  } else {
   i11 = i17;
  }
 }
 if ((i16 | 0) == 9) {
  while (1) {
   i16 = 0;
   _gettimeofday(56, 64) | 0;
   if ((HEAP32[60 >> 2] | 0) > 999999) {
    i16 = 9;
   } else {
    break;
   }
  }
  i17 = 56;
  i11 = HEAP32[i17 + 4 >> 2] | 0;
  i24 = HEAP32[i4 >> 2] | 0;
  HEAP32[i24 >> 2] = HEAP32[i17 >> 2];
  HEAP32[i24 + 4 >> 2] = i11;
  i11 = (HEAP32[i26 >> 2] | 0) + ((i30 | 0) < -2e8 ? 0 : i30) | 0;
  HEAP32[i29 >> 2] = i11;
  i29 = HEAP32[i25 >> 2] | 0;
  i25 = _emscripten_realloc_async_context(20) | 0;
  FUNCTION_TABLE_v[i29 & 63]();
  if (___async) {
   HEAP32[i25 >> 2] = 5;
   i32 = i25 + 4 | 0;
   HEAP32[i32 >> 2] = i7;
   i33 = i25 + 8 | 0;
   HEAP32[i33 >> 2] = i11;
   i34 = i25 + 12 | 0;
   i35 = HEAP32[i5 >> 2] | 0;
   HEAP32[i34 >> 2] = i35;
   i36 = i25 + 16 | 0;
   i37 = HEAP32[i4 >> 2] | 0;
   HEAP32[i36 >> 2] = i37;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i25 >> 2] = 5;
  i32 = i25 + 4 | 0;
  HEAP32[i32 >> 2] = i7;
  i33 = i25 + 8 | 0;
  HEAP32[i33 >> 2] = i11;
  i34 = i25 + 12 | 0;
  i35 = HEAP32[i5 >> 2] | 0;
  HEAP32[i34 >> 2] = i35;
  i36 = i25 + 16 | 0;
  i37 = HEAP32[i4 >> 2] | 0;
  HEAP32[i36 >> 2] = i37;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else if ((i16 | 0) == 18) {
  while (1) {
   i16 = 0;
   _gettimeofday(56, 64) | 0;
   if ((HEAP32[60 >> 2] | 0) > 999999) {
    i16 = 18;
   } else {
    break;
   }
  }
  i37 = 56;
  i36 = HEAP32[i37 + 4 >> 2] | 0;
  i25 = HEAP32[i4 >> 2] | 0;
  HEAP32[i25 >> 2] = HEAP32[i37 >> 2];
  HEAP32[i25 + 4 >> 2] = i36;
  i36 = (i12 | 0) < -2e8 ? 0 : i12;
  i12 = HEAP32[i28 >> 2] | 0;
  i28 = ((-500 - i36 | 0) / (i12 | 0) | 0) + 1 | 0;
  HEAP32[i6 >> 2] = (Math_imul(i28, i12) | 0) + i36;
  HEAP32[i31 >> 2] = HEAP32[i6 >> 2];
  i31 = HEAP32[i27 >> 2] | 0;
  i27 = _emscripten_realloc_async_context(24) | 0;
  FUNCTION_TABLE_vi[i31 & 511](i28);
  if (___async) {
   HEAP32[i27 >> 2] = 6;
   i38 = i27 + 4 | 0;
   HEAP32[i38 >> 2] = i7;
   i39 = i27 + 8 | 0;
   i40 = HEAP32[i6 >> 2] | 0;
   HEAP32[i39 >> 2] = i40;
   i41 = i27 + 12 | 0;
   i42 = HEAP32[i5 >> 2] | 0;
   HEAP32[i41 >> 2] = i42;
   i43 = i27 + 16 | 0;
   i44 = HEAP32[i4 >> 2] | 0;
   HEAP32[i43 >> 2] = i44;
   i45 = i27 + 20 | 0;
   i46 = HEAP32[i3 >> 2] | 0;
   HEAP32[i45 >> 2] = i46;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i27 >> 2] = 6;
  i38 = i27 + 4 | 0;
  HEAP32[i38 >> 2] = i7;
  i39 = i27 + 8 | 0;
  i40 = HEAP32[i6 >> 2] | 0;
  HEAP32[i39 >> 2] = i40;
  i41 = i27 + 12 | 0;
  i42 = HEAP32[i5 >> 2] | 0;
  HEAP32[i41 >> 2] = i42;
  i43 = i27 + 16 | 0;
  i44 = HEAP32[i4 >> 2] | 0;
  HEAP32[i43 >> 2] = i44;
  i45 = i27 + 20 | 0;
  i46 = HEAP32[i3 >> 2] | 0;
  HEAP32[i45 >> 2] = i46;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else if ((i16 | 0) == 25) {
  if ((i15 | 0) == 2147483647) {
   i20 = -1;
   i47 = ___async_retval;
   HEAP32[i47 >> 2] = i20;
   STACKTOP = i2;
   return;
  }
  i20 = (i15 | 0) < 0 ? 0 : i15;
  i47 = ___async_retval;
  HEAP32[i47 >> 2] = i20;
  STACKTOP = i2;
  return;
 } else if ((i16 | 0) == 27) {
  i47 = ___async_retval;
  HEAP32[i47 >> 2] = i20;
  STACKTOP = i2;
  return;
 }
}
function _do_fractal__async_cb143(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 i7 = HEAP32[i1 + 8 >> 2] | 0;
 i8 = HEAP32[i1 + 12 >> 2] | 0;
 i9 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i5 >> 2] = i7;
 HEAP32[i4 >> 2] = i8;
 HEAP32[i3 >> 2] = i9;
 i9 = HEAP32[71600] | 0;
 if ((HEAP32[i9 + 140 >> 2] | 0) == 0) {
  i8 = i9;
  L4 : while (1) {
   i7 = (HEAP32[i4 >> 2] | 0) + 80 | 0;
   if (i7 >>> 0 < (HEAP32[i3 >> 2] | 0) >>> 0) {
    i10 = i8;
    i11 = i7;
    i12 = (HEAP32[i5 >> 2] | 0) + (HEAP32[i8 + 136 >> 2] << 1) | 0;
   } else {
    i13 = i8;
    do {
     i7 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
     if ((i7 | 0) >= 2) {
      break L4;
     }
     HEAP32[i6 >> 2] = i7;
     i14 = HEAP32[i13 + 56 >> 2] | 0;
     i7 = HEAP32[i13 + 132 >> 2] | 0;
     HEAP32[i3 >> 2] = i14 + (i7 * 40 | 0);
    } while ((HEAP32[i6 >> 2] | 0) >= (i7 | 0));
    i7 = Math_imul(HEAP32[i13 + 136 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
    i10 = i13;
    i11 = i14 + ((HEAP32[i6 >> 2] | 0) * 40 | 0) | 0;
    i12 = (HEAP32[i13 + 36 >> 2] | 0) + i7 | 0;
   }
   HEAP32[i4 >> 2] = i11;
   HEAP32[i5 >> 2] = i12;
   if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] | 0) == 0) {
    i8 = i10;
   } else {
    i15 = 5;
    break;
   }
  }
  if ((i15 | 0) == 5) {
   i10 = _emscripten_realloc_async_context(20) | 0;
   _calcline(HEAP32[i5 >> 2] | 0, HEAP32[i4 >> 2] | 0);
   if (___async) {
    HEAP32[i10 >> 2] = 221;
    i16 = i10 + 4 | 0;
    i17 = HEAP32[i6 >> 2] | 0;
    HEAP32[i16 >> 2] = i17;
    i18 = i10 + 8 | 0;
    i19 = HEAP32[i5 >> 2] | 0;
    HEAP32[i18 >> 2] = i19;
    i20 = i10 + 12 | 0;
    i21 = HEAP32[i4 >> 2] | 0;
    HEAP32[i20 >> 2] = i21;
    i22 = i10 + 16 | 0;
    i23 = HEAP32[i3 >> 2] | 0;
    HEAP32[i22 >> 2] = i23;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   ___async_unwind = 0;
   HEAP32[i10 >> 2] = 221;
   i16 = i10 + 4 | 0;
   i17 = HEAP32[i6 >> 2] | 0;
   HEAP32[i16 >> 2] = i17;
   i18 = i10 + 8 | 0;
   i19 = HEAP32[i5 >> 2] | 0;
   HEAP32[i18 >> 2] = i19;
   i20 = i10 + 12 | 0;
   i21 = HEAP32[i4 >> 2] | 0;
   HEAP32[i20 >> 2] = i21;
   i22 = i10 + 16 | 0;
   i23 = HEAP32[i3 >> 2] | 0;
   HEAP32[i22 >> 2] = i23;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[i13 + 68 >> 2] = 0;
  HEAP32[i13 + 72 >> 2] = 286600;
  i13 = HEAP32[71600] | 0;
  HEAP32[i13 + 64 >> 2] = 0;
  i23 = HEAP32[i13 + 52 >> 2] | 0;
  i22 = HEAP32[i13 + 128 >> 2] | 0;
  i3 = i23 + (i22 * 40 | 0) | 0;
  if ((i22 | 0) > 0) {
   i10 = i13 + 68 | 0;
   i21 = i23;
   do {
    if ((HEAP32[i21 + 20 >> 2] | 0) != 0) {
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
    }
    i21 = i21 + 40 | 0;
   } while (i21 >>> 0 < i3 >>> 0);
   i24 = i23;
   i25 = i22;
   i26 = i13;
   i27 = 0;
  } else {
   i24 = i23;
   i25 = i22;
   i26 = i13;
   i27 = 0;
  }
  L26 : while (1) {
   i28 = i24 + (i25 * 40 | 0) | 0;
   if ((i27 | 0) < (i25 | 0)) {
    i13 = i26;
    i29 = i24 + (i27 * 40 | 0) | 0;
    i30 = (HEAP32[i26 + 36 >> 2] | 0) + i27 | 0;
    while (1) {
     if ((HEAP32[i29 + 20 >> 2] | 0) != 0) {
      i15 = 20;
      break L26;
     }
     i22 = i29 + 80 | 0;
     if (i22 >>> 0 < i28 >>> 0) {
      i29 = i22;
      i30 = i30 + 2 | 0;
     } else {
      i31 = i13;
      break;
     }
    }
   } else {
    i31 = i26;
   }
   i13 = i27 + 1 | 0;
   if ((i13 | 0) >= 2) {
    break;
   }
   i24 = HEAP32[i31 + 52 >> 2] | 0;
   i25 = HEAP32[i31 + 128 >> 2] | 0;
   i26 = i31;
   i27 = i13;
  }
  if ((i15 | 0) == 20) {
   i15 = _emscripten_realloc_async_context(20) | 0;
   _calccolumn(i30, i29);
   if (___async) {
    HEAP32[i15 >> 2] = 223;
    i32 = i15 + 4 | 0;
    HEAP32[i32 >> 2] = i27;
    i33 = i15 + 8 | 0;
    HEAP32[i33 >> 2] = i30;
    i34 = i15 + 12 | 0;
    HEAP32[i34 >> 2] = i29;
    i35 = i15 + 16 | 0;
    HEAP32[i35 >> 2] = i28;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   ___async_unwind = 0;
   HEAP32[i15 >> 2] = 223;
   i32 = i15 + 4 | 0;
   HEAP32[i32 >> 2] = i27;
   i33 = i15 + 8 | 0;
   HEAP32[i33 >> 2] = i30;
   i34 = i15 + 12 | 0;
   HEAP32[i34 >> 2] = i29;
   i35 = i15 + 16 | 0;
   HEAP32[i35 >> 2] = i28;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  if ((HEAP32[i31 + 140 >> 2] | 0) == 0) {
   i28 = HEAP32[i31 + 28 >> 2] | 0;
   if ((i28 | 0) != 0) {
    i35 = _emscripten_realloc_async_context(4) | 0;
    FUNCTION_TABLE_v[i28 & 63]();
    if (___async) {
     HEAP32[i35 >> 2] = 225;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i35 >> 2] = 225;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   HEAP32[i31 + 64 >> 2] = 0;
   HEAP32[i31 + 68 >> 2] = 0;
   HEAP32[i31 + 72 >> 2] = 286552;
   _dosymetry();
   i35 = HEAP32[71600] | 0;
   i28 = HEAP32[i35 + 28 >> 2] | 0;
   if ((i28 | 0) != 0) {
    i15 = _emscripten_realloc_async_context(4) | 0;
    FUNCTION_TABLE_v[i28 & 63]();
    if (___async) {
     HEAP32[i15 >> 2] = 226;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i15 >> 2] = 226;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   i15 = HEAP32[i35 + 52 >> 2] | 0;
   i28 = HEAP32[i35 + 128 >> 2] | 0;
   i29 = i15 + (i28 * 40 | 0) | 0;
   if ((i28 | 0) > 0) {
    i28 = HEAP32[i35 + 16 >> 2] | 0;
    i34 = i15;
    while (1) {
     HEAPF64[i28 >> 3] = +HEAPF64[i34 >> 3];
     i34 = i34 + 40 | 0;
     if (!(i34 >>> 0 < i29 >>> 0)) {
      break;
     } else {
      i28 = i28 + 8 | 0;
     }
    }
   }
   i28 = HEAP32[i35 + 56 >> 2] | 0;
   i29 = HEAP32[i35 + 132 >> 2] | 0;
   i34 = i28 + (i29 * 40 | 0) | 0;
   if ((i29 | 0) <= 0) {
    STACKTOP = i2;
    return;
   }
   i29 = HEAP32[i35 + 20 >> 2] | 0;
   i35 = i28;
   while (1) {
    HEAPF64[i29 >> 3] = +HEAPF64[i35 >> 3];
    i35 = i35 + 40 | 0;
    if (!(i35 >>> 0 < i34 >>> 0)) {
     break;
    } else {
     i29 = i29 + 8 | 0;
    }
   }
   STACKTOP = i2;
   return;
  } else {
   i36 = i31;
  }
 } else {
  i36 = i9;
 }
 _init_tables(i36);
 STACKTOP = i2;
 return;
}
function _vezen(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 HEAP32[34] = 0;
 HEAP32[130840] = 0;
 i6 = _emscripten_alloc_async_context(20) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i5;
 _strobikstart();
 if (___async) {
  HEAP32[i6 >> 2] = 16;
  HEAP32[i6 + 4 >> 2] = i4;
  HEAP32[i6 + 8 >> 2] = i2;
  HEAP32[i6 + 12 >> 2] = i3;
  HEAP32[i6 + 16 >> 2] = i1;
  i5 = STACKTOP;
  STACKTOP = i5;
  return;
 }
 _emscripten_free_async_context(i6 | 0);
 i6 = HEAP32[12936] | 0;
 _memset(HEAP32[i6 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i6 + 156 >> 2] | 0, HEAP32[i6 + 152 >> 2] | 0) | 0) | 0;
 _dispimg(i1, HEAP32[68184] | 0);
 i1 = _emscripten_alloc_async_context(16) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i5;
 _timestuff(-60, 13, 1, 285714);
 if (___async) {
  HEAP32[i1 >> 2] = 17;
  HEAP32[i1 + 4 >> 2] = i4;
  HEAP32[i1 + 8 >> 2] = i2;
  HEAP32[i1 + 12 >> 2] = i3;
  i5 = STACKTOP;
  STACKTOP = i5;
  return;
 }
 _emscripten_free_async_context(i1 | 0);
 HEAP32[HEAP32[22682] >> 2] = 0;
 i1 = _emscripten_alloc_async_context(16) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i5;
 _draw();
 if (___async) {
  HEAP32[i1 >> 2] = 18;
  HEAP32[i1 + 4 >> 2] = i4;
  HEAP32[i1 + 8 >> 2] = i2;
  HEAP32[i1 + 12 >> 2] = i3;
  i5 = STACKTOP;
  STACKTOP = i5;
  return;
 }
 _emscripten_free_async_context(i1 | 0);
 i1 = _emscripten_alloc_async_context(16) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i5;
 _bbwait(5e5);
 if (___async) {
  HEAP32[i1 >> 2] = 19;
  HEAP32[i1 + 4 >> 2] = i4;
  HEAP32[i1 + 8 >> 2] = i2;
  HEAP32[i1 + 12 >> 2] = i3;
  i5 = STACKTOP;
  STACKTOP = i5;
  return;
 }
 _emscripten_free_async_context(i1 | 0);
 i1 = _emscripten_alloc_async_context(16) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i5;
 _strobikstart();
 if (___async) {
  HEAP32[i1 >> 2] = 20;
  HEAP32[i1 + 4 >> 2] = i4;
  HEAP32[i1 + 8 >> 2] = i3;
  HEAP32[i1 + 12 >> 2] = i2;
  i5 = STACKTOP;
  STACKTOP = i5;
  return;
 }
 _emscripten_free_async_context(i1 | 0);
 i1 = HEAP32[12936] | 0;
 _memset(HEAP32[i1 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i1 + 156 >> 2] | 0, HEAP32[i1 + 152 >> 2] | 0) | 0) | 0;
 _dispimg(i2, HEAP32[68184] | 0);
 i2 = _emscripten_alloc_async_context(12) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i5;
 _timestuff(-60, 13, 1, 285714);
 if (___async) {
  HEAP32[i2 >> 2] = 21;
  HEAP32[i2 + 4 >> 2] = i4;
  HEAP32[i2 + 8 >> 2] = i3;
  i5 = STACKTOP;
  STACKTOP = i5;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[HEAP32[22682] >> 2] = 0;
 i2 = _emscripten_alloc_async_context(12) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i5;
 _draw();
 if (___async) {
  HEAP32[i2 >> 2] = 22;
  HEAP32[i2 + 4 >> 2] = i4;
  HEAP32[i2 + 8 >> 2] = i3;
  i5 = STACKTOP;
  STACKTOP = i5;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 i2 = _emscripten_alloc_async_context(12) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i5;
 _bbwait(5e5);
 if (___async) {
  HEAP32[i2 >> 2] = 23;
  HEAP32[i2 + 4 >> 2] = i4;
  HEAP32[i2 + 8 >> 2] = i3;
  i5 = STACKTOP;
  STACKTOP = i5;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 i2 = _emscripten_alloc_async_context(12) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i5;
 _strobikstart();
 if (___async) {
  HEAP32[i2 >> 2] = 24;
  HEAP32[i2 + 4 >> 2] = i4;
  HEAP32[i2 + 8 >> 2] = i3;
  i5 = STACKTOP;
  STACKTOP = i5;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 i2 = HEAP32[12936] | 0;
 _memset(HEAP32[i2 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i2 + 156 >> 2] | 0, HEAP32[i2 + 152 >> 2] | 0) | 0) | 0;
 _dispimg(i3, HEAP32[68184] | 0);
 i3 = _emscripten_alloc_async_context(8) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i5;
 _timestuff(-60, 13, 1, 285714);
 if (___async) {
  HEAP32[i3 >> 2] = 25;
  HEAP32[i3 + 4 >> 2] = i4;
  i5 = STACKTOP;
  STACKTOP = i5;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 HEAP32[HEAP32[22682] >> 2] = 0;
 i3 = _emscripten_alloc_async_context(8) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i5;
 _draw();
 if (___async) {
  HEAP32[i3 >> 2] = 26;
  HEAP32[i3 + 4 >> 2] = i4;
  i5 = STACKTOP;
  STACKTOP = i5;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 i3 = _emscripten_alloc_async_context(8) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i5;
 _bbwait(5e5);
 if (___async) {
  HEAP32[i3 >> 2] = 27;
  HEAP32[i3 + 4 >> 2] = i4;
  i5 = STACKTOP;
  STACKTOP = i5;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 i3 = _emscripten_alloc_async_context(8) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i5;
 _strobikstart();
 if (___async) {
  HEAP32[i3 >> 2] = 28;
  HEAP32[i3 + 4 >> 2] = i4;
  i5 = STACKTOP;
  STACKTOP = i5;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 i3 = HEAP32[12936] | 0;
 _memset(HEAP32[i3 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i3 + 156 >> 2] | 0, HEAP32[i3 + 152 >> 2] | 0) | 0) | 0;
 _dispimg(i4, HEAP32[68184] | 0);
 i3 = HEAP32[68184] | 0;
 if ((i3 | 0) != 0) {
  _dispimg(i4, i3);
 }
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i5;
 _timestuff(-60, 13, 1, 285714);
 if (___async) {
  HEAP32[i3 >> 2] = 29;
  i5 = STACKTOP;
  STACKTOP = i5;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 HEAP32[HEAP32[22682] >> 2] = 0;
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i5;
 _draw();
 if (___async) {
  HEAP32[i3 >> 2] = 30;
  i5 = STACKTOP;
  STACKTOP = i5;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i5;
 _draw();
 if (___async) {
  HEAP32[i3 >> 2] = 31;
  i5 = STACKTOP;
  STACKTOP = i5;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i5;
 _bbupdate() | 0;
 if (___async) {
  HEAP32[i3 >> 2] = 32;
  i5 = STACKTOP;
  STACKTOP = i5;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i5;
 _bbwait(1e6);
 if (___async) {
  HEAP32[i3 >> 2] = 33;
  i5 = STACKTOP;
  STACKTOP = i5;
  return;
 } else {
  _emscripten_free_async_context(i3 | 0);
  STACKTOP = i5;
  return;
 }
}
function _lzo1x_decompress(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0;
 i5 = STACKTOP;
 i6 = i1 + i2 | 0;
 HEAP32[i4 >> 2] = 0;
 i2 = HEAP8[i1 >> 0] | 0;
 if ((i2 & 255) > 17) {
  i7 = i2 & 255;
  i8 = i7 + -17 | 0;
  i9 = i7 + -16 | 0;
  i7 = i1;
  i10 = i3;
  i11 = i8;
  while (1) {
   i7 = i7 + 1 | 0;
   HEAP8[i10 >> 0] = HEAP8[i7 >> 0] | 0;
   i11 = i11 + -1 | 0;
   if ((i11 | 0) == 0) {
    break;
   } else {
    i10 = i10 + 1 | 0;
   }
  }
  i12 = i1 + i9 | 0;
  i13 = i3 + i8 | 0;
  i14 = 13;
 } else {
  i15 = i2;
  i16 = i1;
  i17 = i3;
  i14 = 4;
 }
 L6 : while (1) {
  if ((i14 | 0) == 4) {
   i14 = 0;
   i1 = i16 + 1 | 0;
   i2 = i15 & 255;
   if ((i15 & 255) > 15) {
    i18 = i1;
    i19 = i17;
    i20 = i2;
   } else {
    if (i15 << 24 >> 24 == 0) {
     i8 = HEAP8[i1 >> 0] | 0;
     if (i8 << 24 >> 24 == 0) {
      i9 = i1;
      i10 = i2;
      while (1) {
       i11 = i10 + 255 | 0;
       i7 = i9 + 1 | 0;
       i21 = HEAP8[i7 >> 0] | 0;
       if (i21 << 24 >> 24 == 0) {
        i9 = i7;
        i10 = i11;
       } else {
        i22 = i21;
        i23 = i7;
        i24 = i11;
        break;
       }
      }
     } else {
      i22 = i8;
      i23 = i1;
      i24 = i2;
     }
     i25 = i23 + 1 | 0;
     i26 = i24 + 15 + (i22 & 255) | 0;
    } else {
     i25 = i1;
     i26 = i2;
    }
    HEAP8[i17 >> 0] = HEAP8[i25 >> 0] | 0;
    HEAP8[i17 + 1 >> 0] = HEAP8[i25 + 1 >> 0] | 0;
    HEAP8[i17 + 2 >> 0] = HEAP8[i25 + 2 >> 0] | 0;
    i10 = i26 + 3 | 0;
    i9 = i17 + i10 | 0;
    i11 = i25 + 3 | 0;
    i7 = i17 + 3 | 0;
    i21 = i26;
    while (1) {
     HEAP8[i7 >> 0] = HEAP8[i11 >> 0] | 0;
     i21 = i21 + -1 | 0;
     if ((i21 | 0) == 0) {
      break;
     } else {
      i11 = i11 + 1 | 0;
      i7 = i7 + 1 | 0;
     }
    }
    i12 = i25 + i10 | 0;
    i13 = i9;
    i14 = 13;
    continue;
   }
  } else if ((i14 | 0) == 13) {
   i14 = 0;
   i7 = i12 + 1 | 0;
   i11 = HEAP8[i12 >> 0] | 0;
   i21 = i11 & 255;
   if ((i11 & 255) > 15) {
    i18 = i7;
    i19 = i13;
    i20 = i21;
   } else {
    i11 = -2049 - (i21 >>> 2) - ((HEAPU8[i7 >> 0] | 0) << 2) | 0;
    HEAP8[i13 >> 0] = HEAP8[i13 + i11 >> 0] | 0;
    HEAP8[i13 + 1 >> 0] = HEAP8[i13 + (i11 + 1) >> 0] | 0;
    HEAP8[i13 + 2 >> 0] = HEAP8[i13 + (i11 + 2) >> 0] | 0;
    i27 = i12 + 2 | 0;
    i28 = i13 + 3 | 0;
    i14 = 36;
   }
  }
  L22 : while (1) {
   if ((i14 | 0) == 36) {
    i14 = 0;
    i11 = HEAP8[i27 + -2 >> 0] | 0;
    i7 = i11 & 3;
    if ((i7 | 0) == 0) {
     break;
    }
    i21 = i11 & 3;
    i11 = i28 + i21 | 0;
    i2 = i27;
    i1 = i28;
    i8 = i7;
    while (1) {
     HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
     i8 = i8 + -1 | 0;
     if ((i8 | 0) == 0) {
      break;
     } else {
      i2 = i2 + 1 | 0;
      i1 = i1 + 1 | 0;
     }
    }
    i18 = i27 + (i21 + 1) | 0;
    i19 = i11;
    i20 = HEAPU8[i27 + i21 >> 0] | 0;
   }
   do {
    if (i20 >>> 0 > 63) {
     i29 = i18 + 1 | 0;
     i30 = i19 + (((i20 >>> 2 | -8) ^ 7) - ((HEAPU8[i18 >> 0] | 0) << 3)) | 0;
     i31 = (i20 >>> 5) + -1 | 0;
    } else {
     if (i20 >>> 0 > 31) {
      i1 = i20 & 31;
      if ((i1 | 0) == 0) {
       i2 = HEAP8[i18 >> 0] | 0;
       if (i2 << 24 >> 24 == 0) {
        i8 = i18;
        i7 = 0;
        while (1) {
         i8 = i8 + 1 | 0;
         i32 = HEAP8[i8 >> 0] | 0;
         if (!(i32 << 24 >> 24 == 0)) {
          break;
         } else {
          i7 = i7 + 255 | 0;
         }
        }
        i33 = i32;
        i34 = i8;
        i35 = i7 + 286 | 0;
       } else {
        i33 = i2;
        i34 = i18;
        i35 = 31;
       }
       i36 = i34 + 1 | 0;
       i37 = i35 + (i33 & 255) | 0;
      } else {
       i36 = i18;
       i37 = i1;
      }
      i29 = i36 + 2 | 0;
      i30 = i19 + (~((HEAPU8[i36 >> 0] | 0) >>> 2) - ((HEAPU8[i36 + 1 >> 0] | 0) << 6)) | 0;
      i31 = i37;
      break;
     }
     if (!(i20 >>> 0 > 15)) {
      i38 = ~(i20 >>> 2) - ((HEAPU8[i18 >> 0] | 0) << 2) | 0;
      HEAP8[i19 >> 0] = HEAP8[i19 + i38 >> 0] | 0;
      HEAP8[i19 + 1 >> 0] = HEAP8[i19 + (i38 + 1) >> 0] | 0;
      i27 = i18 + 1 | 0;
      i28 = i19 + 2 | 0;
      i14 = 36;
      continue L22;
     }
     i38 = i20 << 11 & 16384;
     i39 = i20 & 7;
     if ((i39 | 0) == 0) {
      i40 = HEAP8[i18 >> 0] | 0;
      if (i40 << 24 >> 24 == 0) {
       i41 = i18;
       i42 = 0;
       while (1) {
        i41 = i41 + 1 | 0;
        i43 = HEAP8[i41 >> 0] | 0;
        if (!(i43 << 24 >> 24 == 0)) {
         break;
        } else {
         i42 = i42 + 255 | 0;
        }
       }
       i44 = i43;
       i45 = i41;
       i46 = i42 + 262 | 0;
      } else {
       i44 = i40;
       i45 = i18;
       i46 = 7;
      }
      i47 = i45 + 1 | 0;
      i48 = i46 + (i44 & 255) | 0;
     } else {
      i47 = i18;
      i48 = i39;
     }
     i49 = i47 + 2 | 0;
     i1 = (HEAPU8[i47 >> 0] | 0) >>> 2 | i38 | (HEAPU8[i47 + 1 >> 0] | 0) << 6;
     if ((i1 | 0) == 0) {
      break L6;
     }
     i29 = i49;
     i30 = i19 + (-16384 - i1) | 0;
     i31 = i48;
    }
   } while (0);
   HEAP8[i19 >> 0] = HEAP8[i30 >> 0] | 0;
   HEAP8[i19 + 1 >> 0] = HEAP8[i30 + 1 >> 0] | 0;
   i21 = i31 + 2 | 0;
   i11 = i30 + 2 | 0;
   i1 = i19 + 2 | 0;
   i2 = i31;
   while (1) {
    HEAP8[i1 >> 0] = HEAP8[i11 >> 0] | 0;
    i2 = i2 + -1 | 0;
    if ((i2 | 0) == 0) {
     break;
    } else {
     i11 = i11 + 1 | 0;
     i1 = i1 + 1 | 0;
    }
   }
   i27 = i29;
   i28 = i19 + i21 | 0;
   i14 = 36;
  }
  i15 = HEAP8[i27 >> 0] | 0;
  i16 = i27;
  i17 = i28;
  i14 = 4;
 }
 HEAP32[i4 >> 2] = i19 - i3;
 if ((i49 | 0) == (i6 | 0)) {
  i50 = 0;
  STACKTOP = i5;
  return i50 | 0;
 }
 i50 = i49 >>> 0 < i6 >>> 0 ? -8 : -4;
 STACKTOP = i5;
 return i50 | 0;
}
function _tl_process_group__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 i6 = HEAP32[i1 + 4 >> 2] | 0;
 i7 = HEAP32[i1 + 12 >> 2] | 0;
 i8 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i4 >> 2] = i7;
 HEAP32[i3 >> 2] = i8;
 do {
  _gettimeofday(56, 64) | 0;
  i8 = HEAP32[60 >> 2] | 0;
 } while ((i8 | 0) > 999999);
 i9 = i8;
 i10 = 1;
 i11 = HEAP32[i5 >> 2] | 0;
 L4 : while (1) {
  i8 = (i11 | 0) < (HEAP32[i4 >> 2] | 0) ? i11 : HEAP32[i4 >> 2] | 0;
  i7 = HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0;
  if ((i7 | 0) == 0) {
   i12 = i9;
   i13 = i10;
   i14 = i8;
   i15 = 2;
  } else {
   i16 = i9;
   i17 = i10;
   i18 = i8;
   i19 = i7;
  }
  L6 : while (1) {
   if ((i15 | 0) == 2) {
    i15 = 0;
    if ((i13 | 0) == 0) {
     i15 = 25;
     break L4;
    }
    i7 = HEAP32[i6 >> 2] | 0;
    if ((i7 | 0) == 0) {
     i20 = -1;
     i15 = 27;
     break L4;
    } else {
     i16 = i12;
     i17 = 0;
     i18 = 2147483647;
     i19 = i7;
    }
   }
   i21 = i16;
   i7 = i18;
   i8 = i19;
   while (1) {
    HEAP32[i4 >> 2] = i7;
    i1 = i8;
    while (1) {
     HEAP32[i3 >> 2] = i1;
     i22 = (HEAP32[i3 >> 2] | 0) + 16 | 0;
     if ((HEAP32[i22 >> 2] | 0) != 0 ? (i23 = (HEAP32[i3 >> 2] | 0) + 8 | 0, (HEAP32[i23 >> 2] | 0) > 0) : 0) {
      break L6;
     }
     i24 = (HEAP32[i3 >> 2] | 0) + 20 | 0;
     if ((HEAP32[i24 >> 2] | 0) != 0 ? (i25 = (HEAP32[i3 >> 2] | 0) + 8 | 0, (HEAP32[i25 >> 2] | 0) > 0) : 0) {
      break;
     }
     i26 = HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0;
     if ((i26 | 0) == 0) {
      i12 = i21;
      i13 = i17;
      i14 = HEAP32[i4 >> 2] | 0;
      i15 = 2;
      continue L6;
     } else {
      i1 = i26;
     }
    }
    i27 = (HEAP32[i3 >> 2] | 0) + 12 | 0;
    i28 = (HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[i27 >> 2] | 0) - i21 + (Math_imul((HEAP32[14] | 0) - (HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0, -1e6) | 0) | 0;
    if ((i28 | 0) < 500) {
     i15 = 20;
     break L4;
    }
    i1 = (i28 | 0) < (HEAP32[i4 >> 2] | 0) ? i28 : HEAP32[i4 >> 2] | 0;
    i26 = HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0;
    if ((i26 | 0) == 0) {
     i12 = i21;
     i13 = i17;
     i14 = i1;
     i15 = 2;
     continue L6;
    } else {
     i7 = i1;
     i8 = i26;
    }
   }
  }
  i29 = (HEAP32[i3 >> 2] | 0) + 12 | 0;
  i11 = (HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[i29 >> 2] | 0) - i21 + (Math_imul((HEAP32[14] | 0) - (HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0, -1e6) | 0) | 0;
  if ((i11 | 0) < 500) {
   i15 = 9;
   break;
  } else {
   i9 = i21;
   i10 = i17;
  }
 }
 if ((i15 | 0) == 9) {
  while (1) {
   i15 = 0;
   _gettimeofday(56, 64) | 0;
   if ((HEAP32[60 >> 2] | 0) > 999999) {
    i15 = 9;
   } else {
    break;
   }
  }
  i10 = 56;
  i21 = HEAP32[i10 + 4 >> 2] | 0;
  i9 = HEAP32[i3 >> 2] | 0;
  HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i9 + 4 >> 2] = i21;
  HEAP32[i5 >> 2] = (HEAP32[i23 >> 2] | 0) + ((i11 | 0) < -2e8 ? 0 : i11);
  HEAP32[i29 >> 2] = HEAP32[i5 >> 2];
  i29 = HEAP32[i22 >> 2] | 0;
  i22 = _emscripten_realloc_async_context(20) | 0;
  FUNCTION_TABLE_v[i29 & 63]();
  if (___async) {
   HEAP32[i22 >> 2] = 5;
   i30 = i22 + 4 | 0;
   HEAP32[i30 >> 2] = i6;
   i31 = i22 + 8 | 0;
   i32 = HEAP32[i5 >> 2] | 0;
   HEAP32[i31 >> 2] = i32;
   i33 = i22 + 12 | 0;
   i34 = HEAP32[i4 >> 2] | 0;
   HEAP32[i33 >> 2] = i34;
   i35 = i22 + 16 | 0;
   i36 = HEAP32[i3 >> 2] | 0;
   HEAP32[i35 >> 2] = i36;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i22 >> 2] = 5;
  i30 = i22 + 4 | 0;
  HEAP32[i30 >> 2] = i6;
  i31 = i22 + 8 | 0;
  i32 = HEAP32[i5 >> 2] | 0;
  HEAP32[i31 >> 2] = i32;
  i33 = i22 + 12 | 0;
  i34 = HEAP32[i4 >> 2] | 0;
  HEAP32[i33 >> 2] = i34;
  i35 = i22 + 16 | 0;
  i36 = HEAP32[i3 >> 2] | 0;
  HEAP32[i35 >> 2] = i36;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else if ((i15 | 0) == 20) {
  while (1) {
   i15 = 0;
   _gettimeofday(56, 64) | 0;
   if ((HEAP32[60 >> 2] | 0) > 999999) {
    i15 = 20;
   } else {
    break;
   }
  }
  i36 = 56;
  i35 = HEAP32[i36 + 4 >> 2] | 0;
  i22 = HEAP32[i3 >> 2] | 0;
  HEAP32[i22 >> 2] = HEAP32[i36 >> 2];
  HEAP32[i22 + 4 >> 2] = i35;
  i35 = (i28 | 0) < -2e8 ? 0 : i28;
  i28 = HEAP32[i25 >> 2] | 0;
  i25 = ((-500 - i35 | 0) / (i28 | 0) | 0) + 1 | 0;
  i22 = (Math_imul(i25, i28) | 0) + i35 | 0;
  HEAP32[i27 >> 2] = i22;
  i27 = HEAP32[i24 >> 2] | 0;
  i24 = _emscripten_realloc_async_context(24) | 0;
  FUNCTION_TABLE_vi[i27 & 511](i25);
  if (___async) {
   HEAP32[i24 >> 2] = 6;
   i37 = i24 + 4 | 0;
   HEAP32[i37 >> 2] = i6;
   i38 = i24 + 8 | 0;
   HEAP32[i38 >> 2] = i22;
   i39 = i24 + 12 | 0;
   i40 = HEAP32[i4 >> 2] | 0;
   HEAP32[i39 >> 2] = i40;
   i41 = i24 + 16 | 0;
   i42 = HEAP32[i3 >> 2] | 0;
   HEAP32[i41 >> 2] = i42;
   i43 = i24 + 20 | 0;
   HEAP32[i43 >> 2] = i17;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i24 >> 2] = 6;
  i37 = i24 + 4 | 0;
  HEAP32[i37 >> 2] = i6;
  i38 = i24 + 8 | 0;
  HEAP32[i38 >> 2] = i22;
  i39 = i24 + 12 | 0;
  i40 = HEAP32[i4 >> 2] | 0;
  HEAP32[i39 >> 2] = i40;
  i41 = i24 + 16 | 0;
  i42 = HEAP32[i3 >> 2] | 0;
  HEAP32[i41 >> 2] = i42;
  i43 = i24 + 20 | 0;
  HEAP32[i43 >> 2] = i17;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else if ((i15 | 0) == 25) {
  if ((i14 | 0) == 2147483647) {
   i20 = -1;
   i44 = ___async_retval;
   HEAP32[i44 >> 2] = i20;
   STACKTOP = i2;
   return;
  }
  i20 = (i14 | 0) < 0 ? 0 : i14;
  i44 = ___async_retval;
  HEAP32[i44 >> 2] = i20;
  STACKTOP = i2;
  return;
 } else if ((i15 | 0) == 27) {
  i44 = ___async_retval;
  HEAP32[i44 >> 2] = i20;
  STACKTOP = i2;
  return;
 }
}
function _aa_flush__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = HEAP32[i1 + 12 >> 2] | 0;
 i6 = HEAP32[i1 + 16 >> 2] | 0;
 i7 = HEAP32[i1 + 20 >> 2] | 0;
 i8 = HEAP32[i1 + 24 >> 2] | 0;
 i9 = HEAP32[i1 + 28 >> 2] | 0;
 i10 = HEAP32[i1 + 32 >> 2] | 0;
 i11 = HEAP32[i1 + 36 >> 2] | 0;
 i12 = HEAP32[i1 + 40 >> 2] | 0;
 i13 = HEAP32[i1 + 44 >> 2] | 0;
 i14 = HEAP8[i1 + 48 >> 0] & 1;
 i15 = HEAP32[i1 + 52 >> 2] | 0;
 i16 = HEAP32[i1 + 56 >> 2] | 0;
 i17 = HEAP32[i1 + 60 >> 2] | 0;
 i18 = HEAP8[i1 + 64 >> 0] & 1;
 i19 = HEAP32[i1 + 68 >> 2] | 0;
 i20 = HEAP32[i1 + 72 >> 2] | 0;
 if (!i18) {
  i1 = HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2] | 0;
  i21 = HEAP32[i9 >> 2] | 0;
  i22 = HEAP32[i10 >> 2] | 0;
  i23 = _emscripten_realloc_async_context(72) | 0;
  FUNCTION_TABLE_viii[i1 & 3](i3, i21, i22);
  if (___async) {
   HEAP32[i23 >> 2] = 275;
   i24 = i23 + 4 | 0;
   HEAP32[i24 >> 2] = i4;
   i25 = i23 + 8 | 0;
   HEAP32[i25 >> 2] = i3;
   i26 = i23 + 12 | 0;
   HEAP32[i26 >> 2] = i5;
   i27 = i23 + 16 | 0;
   HEAP32[i27 >> 2] = i6;
   i28 = i23 + 20 | 0;
   HEAP32[i28 >> 2] = i8;
   i29 = i23 + 24 | 0;
   HEAP32[i29 >> 2] = i9;
   i30 = i23 + 28 | 0;
   HEAP32[i30 >> 2] = i10;
   i31 = i23 + 32 | 0;
   HEAP32[i31 >> 2] = i11;
   i32 = i23 + 36 | 0;
   HEAP32[i32 >> 2] = i12;
   i33 = i23 + 40 | 0;
   HEAP32[i33 >> 2] = i13;
   i34 = i23 + 44 | 0;
   i35 = i14 & 1;
   HEAP8[i34 >> 0] = i35;
   i36 = i23 + 48 | 0;
   HEAP32[i36 >> 2] = i15;
   i37 = i23 + 52 | 0;
   HEAP32[i37 >> 2] = i17;
   i38 = i23 + 56 | 0;
   i39 = i18 & 1;
   HEAP8[i38 >> 0] = i39;
   i40 = i23 + 60 | 0;
   HEAP32[i40 >> 2] = i19;
   i41 = i23 + 64 | 0;
   HEAP32[i41 >> 2] = i20;
   i42 = i23 + 68 | 0;
   HEAP32[i42 >> 2] = i7;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i23 >> 2] = 275;
  i24 = i23 + 4 | 0;
  HEAP32[i24 >> 2] = i4;
  i25 = i23 + 8 | 0;
  HEAP32[i25 >> 2] = i3;
  i26 = i23 + 12 | 0;
  HEAP32[i26 >> 2] = i5;
  i27 = i23 + 16 | 0;
  HEAP32[i27 >> 2] = i6;
  i28 = i23 + 20 | 0;
  HEAP32[i28 >> 2] = i8;
  i29 = i23 + 24 | 0;
  HEAP32[i29 >> 2] = i9;
  i30 = i23 + 28 | 0;
  HEAP32[i30 >> 2] = i10;
  i31 = i23 + 32 | 0;
  HEAP32[i31 >> 2] = i11;
  i32 = i23 + 36 | 0;
  HEAP32[i32 >> 2] = i12;
  i33 = i23 + 40 | 0;
  HEAP32[i33 >> 2] = i13;
  i34 = i23 + 44 | 0;
  i35 = i14 & 1;
  HEAP8[i34 >> 0] = i35;
  i36 = i23 + 48 | 0;
  HEAP32[i36 >> 2] = i15;
  i37 = i23 + 52 | 0;
  HEAP32[i37 >> 2] = i17;
  i38 = i23 + 56 | 0;
  i39 = i18 & 1;
  HEAP8[i38 >> 0] = i39;
  i40 = i23 + 60 | 0;
  HEAP32[i40 >> 2] = i19;
  i41 = i23 + 64 | 0;
  HEAP32[i41 >> 2] = i20;
  i42 = i23 + 68 | 0;
  HEAP32[i42 >> 2] = i7;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i42 = Math_imul(i5, i16) | 0;
 i16 = HEAP32[i17 >> 2] | 0;
 i23 = HEAP8[i16 + i42 >> 0] | 0;
 i41 = i23 & 255;
 L10 : do {
  if (0 < (i13 | 0)) {
   i40 = HEAP32[i11 >> 2] | 0;
   i39 = 0;
   i38 = i42;
   i37 = 0;
   while (1) {
    HEAP8[i12 + i39 >> 0] = HEAP8[i40 + i38 >> 0] | 0;
    i36 = i38 + 1 | 0;
    i35 = i39 + 1 | 0;
    i34 = i37 + 1 | 0;
    if (!((i35 | 0) < 79 & (i34 | 0) < (i13 | 0))) {
     i43 = i35;
     i44 = i36;
     i45 = i34;
     break L10;
    }
    if ((HEAP8[i16 + i36 >> 0] | 0) == i23 << 24 >> 24) {
     i39 = i35;
     i38 = i36;
     i37 = i34;
    } else {
     i43 = i35;
     i44 = i36;
     i45 = i34;
     break;
    }
   }
  } else {
   i43 = 0;
   i44 = i42;
   i45 = 0;
  }
 } while (0);
 HEAP8[i12 + i43 >> 0] = 0;
 if (!((i7 | 0) != 0 | i14)) {
  i43 = HEAP32[i15 >> 2] | 0;
  if ((i43 | 0) != 0 ? (HEAP32[i43 + 8 >> 2] & 8 | 0) != 0 : 0) {
   if ((HEAP32[i4 >> 2] | 0) != 0 ? (HEAP32[i4 >> 2] = 0, i42 = HEAP32[i43 + 24 >> 2] | 0, (i42 | 0) != 0) : 0) {
    i43 = _emscripten_realloc_async_context(80) | 0;
    FUNCTION_TABLE_vii[i42 & 3](i3, 0);
    if (!___async) {
     ___async_unwind = 0;
    }
    HEAP32[i43 >> 2] = 272;
    HEAP32[i43 + 4 >> 2] = i3;
    HEAP32[i43 + 8 >> 2] = i4;
    HEAP32[i43 + 12 >> 2] = i5;
    HEAP32[i43 + 16 >> 2] = i6;
    HEAP32[i43 + 20 >> 2] = i8;
    HEAP32[i43 + 24 >> 2] = i9;
    HEAP32[i43 + 28 >> 2] = i10;
    HEAP32[i43 + 32 >> 2] = i41;
    HEAP32[i43 + 36 >> 2] = i11;
    HEAP32[i43 + 40 >> 2] = i12;
    HEAP32[i43 + 44 >> 2] = i13;
    HEAP8[i43 + 48 >> 0] = i14 & 1;
    HEAP32[i43 + 52 >> 2] = i15;
    HEAP32[i43 + 56 >> 2] = i17;
    HEAP8[i43 + 60 >> 0] = i18 & 1;
    HEAP32[i43 + 64 >> 2] = i19;
    HEAP32[i43 + 68 >> 2] = i20;
    HEAP32[i43 + 72 >> 2] = i45;
    HEAP32[i43 + 76 >> 2] = i44;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   } else {
    i46 = 1;
   }
  } else {
   i46 = 0;
  }
 } else {
  i46 = i7;
 }
 i7 = HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] | 0;
 i43 = _emscripten_realloc_async_context(80) | 0;
 FUNCTION_TABLE_vii[i7 & 3](i3, i41);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i43 >> 2] = 273;
 HEAP32[i43 + 4 >> 2] = i3;
 HEAP32[i43 + 8 >> 2] = i4;
 HEAP32[i43 + 12 >> 2] = i5;
 HEAP32[i43 + 16 >> 2] = i6;
 HEAP32[i43 + 20 >> 2] = i46;
 HEAP32[i43 + 24 >> 2] = i8;
 HEAP32[i43 + 28 >> 2] = i9;
 HEAP32[i43 + 32 >> 2] = i10;
 HEAP32[i43 + 36 >> 2] = i11;
 HEAP32[i43 + 40 >> 2] = i12;
 HEAP32[i43 + 44 >> 2] = i13;
 HEAP8[i43 + 48 >> 0] = i14 & 1;
 HEAP32[i43 + 52 >> 2] = i15;
 HEAP32[i43 + 56 >> 2] = i17;
 HEAP8[i43 + 60 >> 0] = i18 & 1;
 HEAP32[i43 + 64 >> 2] = i19;
 HEAP32[i43 + 68 >> 2] = i20;
 HEAP32[i43 + 72 >> 2] = i45;
 HEAP32[i43 + 76 >> 2] = i44;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _aa_init__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, d23 = 0.0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 i5 = HEAP32[i1 + 8 >> 2] | 0;
 i6 = HEAP32[i1 + 12 >> 2] | 0;
 i7 = HEAP32[i1 + 16 >> 2] | 0;
 i8 = HEAP32[i1 + 20 >> 2] | 0;
 i9 = HEAP32[i1 + 24 >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[___async_retval >> 2];
 if ((HEAP32[i3 >> 2] | 0) == 0) {
  _free(i7);
  HEAP32[___async_retval >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 HEAP32[i7 >> 2] = i4;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 i3 = HEAP32[i7 + 84 >> 2] | 0;
 i1 = HEAP32[i6 + 4 >> 2] & i3;
 i10 = i7 + 16 | 0;
 i11 = i7 + 20 | 0;
 HEAP32[i11 >> 2] = i1;
 i12 = HEAP32[i6 >> 2] | 0;
 i13 = (i12 | 0) == 0;
 if (i13) {
  i14 = HEAP32[i8 >> 2] | 0;
  HEAP32[i10 >> 2] = i14;
  if ((i14 | 0) == 0) {
   HEAP32[i10 >> 2] = i13 ? 532176 : i12;
  }
 } else {
  HEAP32[i10 >> 2] = i12;
 }
 if ((i1 | 0) == 0) {
  HEAP32[i11 >> 2] = i3;
 }
 HEAP32[i7 + 144 >> 2] = 2;
 HEAP32[i7 + 148 >> 2] = 2;
 HEAP32[i7 + 196 >> 2] = 0;
 HEAP32[i7 + 200 >> 2] = 0;
 HEAP32[i7 + 204 >> 2] = 0;
 i3 = i7 + 172 | 0;
 i11 = i6 + 40 | 0;
 HEAP32[i3 + 0 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 i3 = HEAP32[i11 >> 2] | 0;
 do {
  if ((i3 | 0) == 0) {
   i1 = HEAP32[i7 + 120 >> 2] | 0;
   if ((i1 | 0) != 0) {
    HEAP32[i7 + 56 >> 2] = i1;
    break;
   }
   i1 = HEAP32[i6 + 24 >> 2] | 0;
   if ((i1 | 0) != 0) {
    HEAP32[i7 + 40 >> 2] = i1;
    break;
   }
   i1 = HEAP32[i7 + 104 >> 2] | 0;
   if ((i1 | 0) == 0) {
    HEAP32[i7 + 56 >> 2] = 80;
    break;
   } else {
    HEAP32[i7 + 40 >> 2] = i1;
    break;
   }
  } else {
   HEAP32[i7 + 56 >> 2] = i3;
  }
 } while (0);
 i3 = i6 + 8 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i12 = i7 + 56 | 0;
 i10 = HEAP32[i12 >> 2] | 0;
 if ((i1 | 0) > (i10 | 0)) {
  HEAP32[i12 >> 2] = i1;
  i15 = i1;
 } else {
  i15 = i10;
 }
 i10 = HEAP32[i7 + 88 >> 2] | 0;
 if ((i10 | 0) > (i15 | 0)) {
  HEAP32[i12 >> 2] = i10;
  i16 = i10;
 } else {
  i16 = i15;
 }
 i15 = i6 + 16 | 0;
 i10 = HEAP32[i15 >> 2] | 0;
 if ((i10 | 0) != 0 & (i10 | 0) > (i16 | 0)) {
  HEAP32[i12 >> 2] = i10;
  i17 = i10;
 } else {
  i17 = i16;
 }
 i16 = HEAP32[i7 + 96 >> 2] | 0;
 if ((i16 | 0) != 0 & (i16 | 0) > (i17 | 0)) {
  HEAP32[i12 >> 2] = i16;
  i18 = i16;
 } else {
  i18 = i17;
 }
 i17 = i6 + 44 | 0;
 i16 = HEAP32[i17 >> 2] | 0;
 do {
  if ((i16 | 0) == 0) {
   i10 = HEAP32[i7 + 124 >> 2] | 0;
   if ((i10 | 0) != 0) {
    HEAP32[i7 + 60 >> 2] = i10;
    break;
   }
   i10 = HEAP32[i6 + 28 >> 2] | 0;
   if ((i10 | 0) != 0) {
    HEAP32[i7 + 44 >> 2] = i10;
    break;
   }
   i10 = HEAP32[i7 + 108 >> 2] | 0;
   if ((i10 | 0) == 0) {
    HEAP32[i7 + 60 >> 2] = 25;
    break;
   } else {
    HEAP32[i7 + 44 >> 2] = i10;
    break;
   }
  } else {
   HEAP32[i7 + 60 >> 2] = i16;
  }
 } while (0);
 i16 = i6 + 12 | 0;
 i10 = HEAP32[i16 >> 2] | 0;
 i1 = i7 + 60 | 0;
 i13 = HEAP32[i1 >> 2] | 0;
 if ((i10 | 0) > (i13 | 0)) {
  HEAP32[i1 >> 2] = i10;
  i19 = i10;
 } else {
  i19 = i13;
 }
 i13 = HEAP32[i7 + 92 >> 2] | 0;
 if ((i13 | 0) > (i19 | 0)) {
  HEAP32[i1 >> 2] = i13;
  i20 = i13;
 } else {
  i20 = i19;
 }
 i19 = i6 + 20 | 0;
 i13 = HEAP32[i19 >> 2] | 0;
 if ((i13 | 0) != 0 & (i13 | 0) > (i20 | 0)) {
  HEAP32[i1 >> 2] = i13;
  i21 = i13;
 } else {
  i21 = i20;
 }
 i20 = HEAP32[i7 + 100 >> 2] | 0;
 if ((i20 | 0) != 0 & (i20 | 0) > (i21 | 0)) {
  HEAP32[i1 >> 2] = i20;
  i22 = i20;
 } else {
  i22 = i21;
 }
 HEAP32[i12 >> 2] = 0 - i18;
 HEAP32[i1 >> 2] = 0 - i22;
 i22 = i7 + 64 | 0;
 HEAPF64[i22 >> 3] = 5.3;
 i18 = i7 + 72 | 0;
 HEAPF64[i18 >> 3] = 2.7;
 d23 = +HEAPF64[i7 + 128 >> 3];
 if (d23 != 0.0) {
  HEAPF64[i22 >> 3] = d23;
 }
 d23 = +HEAPF64[i7 + 136 >> 3];
 if (d23 != 0.0) {
  HEAPF64[i18 >> 3] = d23;
 }
 d23 = +HEAPF64[i6 + 48 >> 3];
 if (d23 != 0.0) {
  HEAPF64[i22 >> 3] = d23;
 }
 d23 = +HEAPF64[i6 + 56 >> 3];
 if (d23 != 0.0) {
  HEAPF64[i18 >> 3] = d23;
 }
 HEAP32[i7 + 160 >> 2] = 0;
 HEAP32[i7 + 164 >> 2] = 0;
 HEAP32[i7 + 168 >> 2] = 0;
 HEAP32[i7 + 212 >> 2] = 0;
 i18 = _emscripten_realloc_async_context(52) | 0;
 i6 = _aa_resize(i5) | 0;
 if (___async) {
  HEAP32[i18 >> 2] = 296;
  i24 = i18 + 4 | 0;
  HEAP32[i24 >> 2] = i4;
  i25 = i18 + 8 | 0;
  HEAP32[i25 >> 2] = i5;
  i26 = i18 + 12 | 0;
  HEAP32[i26 >> 2] = i7;
  i27 = i18 + 16 | 0;
  HEAP32[i27 >> 2] = i11;
  i28 = i18 + 20 | 0;
  HEAP32[i28 >> 2] = i12;
  i29 = i18 + 24 | 0;
  HEAP32[i29 >> 2] = i15;
  i30 = i18 + 28 | 0;
  HEAP32[i30 >> 2] = i3;
  i31 = i18 + 32 | 0;
  HEAP32[i31 >> 2] = i17;
  i32 = i18 + 36 | 0;
  HEAP32[i32 >> 2] = i1;
  i33 = i18 + 40 | 0;
  HEAP32[i33 >> 2] = i19;
  i34 = i18 + 44 | 0;
  HEAP32[i34 >> 2] = i16;
  i35 = i18 + 48 | 0;
  HEAP32[i35 >> 2] = i9;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 HEAP32[___async_retval >> 2] = i6;
 ___async_unwind = 0;
 HEAP32[i18 >> 2] = 296;
 i24 = i18 + 4 | 0;
 HEAP32[i24 >> 2] = i4;
 i25 = i18 + 8 | 0;
 HEAP32[i25 >> 2] = i5;
 i26 = i18 + 12 | 0;
 HEAP32[i26 >> 2] = i7;
 i27 = i18 + 16 | 0;
 HEAP32[i27 >> 2] = i11;
 i28 = i18 + 20 | 0;
 HEAP32[i28 >> 2] = i12;
 i29 = i18 + 24 | 0;
 HEAP32[i29 >> 2] = i15;
 i30 = i18 + 28 | 0;
 HEAP32[i30 >> 2] = i3;
 i31 = i18 + 32 | 0;
 HEAP32[i31 >> 2] = i17;
 i32 = i18 + 36 | 0;
 HEAP32[i32 >> 2] = i1;
 i33 = i18 + 40 | 0;
 HEAP32[i33 >> 2] = i19;
 i34 = i18 + 44 | 0;
 HEAP32[i34 >> 2] = i16;
 i35 = i18 + 48 | 0;
 HEAP32[i35 >> 2] = i9;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _scene10() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[31686] | 0;
 HEAP32[31688] = i2;
 HEAP32[31690] = i2;
 HEAP32[31692] = i2;
 HEAP32[31694] = i2;
 HEAP32[31696] = i2;
 HEAPF32[31698] = 0.0;
 HEAP32[31700] = 0;
 HEAP32[31702] = 0;
 HEAP32[31704] = 0;
 HEAP32[31706] = 0;
 HEAP32[31708] = 0;
 HEAP32[31710] = 0;
 HEAPF32[31712] = 0.0;
 HEAPF32[31684] = 1.0;
 HEAP32[34] = 0;
 _patnikconstructor();
 HEAPF32[(HEAP32[22682] | 0) + 8 >> 2] = 1.0;
 HEAP32[12946] = -40;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _strobikstart();
 if (___async) {
  HEAP32[i2 >> 2] = 72;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAPF32[226] = 3.0;
 HEAP32[12950] = 90;
 HEAP32[22676] = 0;
 HEAP32[22678] = 180;
 _disp3d();
 i2 = HEAP32[12936] | 0;
 _aa_render(i2, HEAP32[22682] | 0, 0, 0, HEAP32[i2 + 56 >> 2] | 0, HEAP32[i2 + 60 >> 2] | 0);
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _strobikend();
 if (___async) {
  HEAP32[i2 >> 2] = 73;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _bbwait(5e5);
 if (___async) {
  HEAP32[i2 >> 2] = 74;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _strobikstart();
 if (___async) {
  HEAP32[i2 >> 2] = 75;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[12950] = 0;
 _disp3d();
 i2 = HEAP32[12936] | 0;
 _aa_render(i2, HEAP32[22682] | 0, 0, 0, HEAP32[i2 + 56 >> 2] | 0, HEAP32[i2 + 60 >> 2] | 0);
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _strobikend();
 if (___async) {
  HEAP32[i2 >> 2] = 76;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _bbwait(5e5);
 if (___async) {
  HEAP32[i2 >> 2] = 77;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _strobikstart();
 if (___async) {
  HEAP32[i2 >> 2] = 78;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[12950] = 180;
 _disp3d();
 i2 = HEAP32[12936] | 0;
 _aa_render(i2, HEAP32[22682] | 0, 0, 0, HEAP32[i2 + 56 >> 2] | 0, HEAP32[i2 + 60 >> 2] | 0);
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _strobikend();
 if (___async) {
  HEAP32[i2 >> 2] = 79;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _bbwait(5e5);
 if (___async) {
  HEAP32[i2 >> 2] = 80;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _strobikstart();
 if (___async) {
  HEAP32[i2 >> 2] = 81;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[12950] = 270;
 _disp3d();
 i2 = HEAP32[12936] | 0;
 _aa_render(i2, HEAP32[22682] | 0, 0, 0, HEAP32[i2 + 56 >> 2] | 0, HEAP32[i2 + 60 >> 2] | 0);
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _strobikend();
 if (___async) {
  HEAP32[i2 >> 2] = 82;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[31696] = 270;
 HEAP32[31694] = 0;
 HEAP32[31692] = 180;
 HEAPF32[31698] = 3.0;
 HEAP32[31688] = -40;
 HEAP32[31710] = 450;
 HEAP32[31708] = 0;
 HEAP32[31706] = 180;
 HEAPF32[31712] = 3.0;
 HEAP32[31702] = -40;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _do3d(4e6);
 if (___async) {
  HEAP32[i2 >> 2] = 83;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAPF32[31684] = 3.0;
 HEAPF32[31712] = 2.0;
 HEAP32[31708] = 90;
 HEAP32[31700] = 60;
 HEAP32[31702] = 50;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _do3d(3e6);
 if (___async) {
  HEAP32[i2 >> 2] = 84;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAPF32[31684] = .4000000059604645;
 HEAP32[31708] = 60;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _do3d(5e5);
 if (___async) {
  HEAP32[i2 >> 2] = 85;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAPF32[31684] = 5.0;
 HEAP32[31708] = 90;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _do3d(5e5);
 if (___async) {
  HEAP32[i2 >> 2] = 86;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAPF32[31684] = 2.0;
 HEAP32[31700] = 0;
 HEAP32[31704] = 60;
 HEAP32[31708] = 0;
 HEAP32[31706] = 900;
 HEAPF32[31712] = .10000000149011612;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _do3d(115e5);
 if (___async) {
  HEAP32[i2 >> 2] = 87;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else {
  _emscripten_free_async_context(i2 | 0);
  HEAPF32[(HEAP32[22682] | 0) + 8 >> 2] = 1.0;
  STACKTOP = i1;
  return;
 }
}
function _do_fractal__async_cb147(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 i7 = HEAP32[i1 + 8 >> 2] | 0;
 i8 = HEAP32[i1 + 12 >> 2] | 0;
 i9 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i5 >> 2] = i7;
 HEAP32[i4 >> 2] = i8;
 HEAP32[i3 >> 2] = i9;
 i9 = HEAP32[71600] | 0;
 i8 = i9 + 64 | 0;
 HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 i8 = HEAP32[i9 + 28 >> 2] | 0;
 if ((i8 | 0) != 0) {
  i7 = _emscripten_realloc_async_context(20) | 0;
  FUNCTION_TABLE_v[i8 & 63]();
  if (___async) {
   HEAP32[i7 >> 2] = 224;
   i10 = i7 + 4 | 0;
   i11 = HEAP32[i6 >> 2] | 0;
   HEAP32[i10 >> 2] = i11;
   i12 = i7 + 8 | 0;
   i13 = HEAP32[i5 >> 2] | 0;
   HEAP32[i12 >> 2] = i13;
   i14 = i7 + 12 | 0;
   i15 = HEAP32[i4 >> 2] | 0;
   HEAP32[i14 >> 2] = i15;
   i16 = i7 + 16 | 0;
   i17 = HEAP32[i3 >> 2] | 0;
   HEAP32[i16 >> 2] = i17;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i7 >> 2] = 224;
  i10 = i7 + 4 | 0;
  i11 = HEAP32[i6 >> 2] | 0;
  HEAP32[i10 >> 2] = i11;
  i12 = i7 + 8 | 0;
  i13 = HEAP32[i5 >> 2] | 0;
  HEAP32[i12 >> 2] = i13;
  i14 = i7 + 12 | 0;
  i15 = HEAP32[i4 >> 2] | 0;
  HEAP32[i14 >> 2] = i15;
  i16 = i7 + 16 | 0;
  i17 = HEAP32[i3 >> 2] | 0;
  HEAP32[i16 >> 2] = i17;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i9 + 140 >> 2] | 0) == 0) {
  i17 = i9;
  L10 : while (1) {
   i16 = (HEAP32[i4 >> 2] | 0) + 80 | 0;
   if (i16 >>> 0 < (HEAP32[i3 >> 2] | 0) >>> 0) {
    i18 = i17;
    i19 = i16;
    i20 = (HEAP32[i5 >> 2] | 0) + 2 | 0;
   } else {
    i21 = i17;
    do {
     i16 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
     if ((i16 | 0) >= 2) {
      break L10;
     }
     i22 = HEAP32[i21 + 52 >> 2] | 0;
     i7 = HEAP32[i21 + 128 >> 2] | 0;
     HEAP32[i6 >> 2] = i16;
     HEAP32[i3 >> 2] = i22 + (i7 * 40 | 0);
    } while ((HEAP32[i6 >> 2] | 0) >= (i7 | 0));
    i18 = i21;
    i19 = i22 + ((HEAP32[i6 >> 2] | 0) * 40 | 0) | 0;
    i20 = (HEAP32[i21 + 36 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0;
   }
   HEAP32[i4 >> 2] = i19;
   HEAP32[i5 >> 2] = i20;
   if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] | 0) == 0) {
    i17 = i18;
   } else {
    i23 = 5;
    break;
   }
  }
  if ((i23 | 0) == 5) {
   i23 = _emscripten_realloc_async_context(20) | 0;
   _calccolumn(HEAP32[i5 >> 2] | 0, HEAP32[i4 >> 2] | 0);
   if (___async) {
    HEAP32[i23 >> 2] = 223;
    i24 = i23 + 4 | 0;
    i25 = HEAP32[i6 >> 2] | 0;
    HEAP32[i24 >> 2] = i25;
    i26 = i23 + 8 | 0;
    i27 = HEAP32[i5 >> 2] | 0;
    HEAP32[i26 >> 2] = i27;
    i28 = i23 + 12 | 0;
    i29 = HEAP32[i4 >> 2] | 0;
    HEAP32[i28 >> 2] = i29;
    i30 = i23 + 16 | 0;
    i31 = HEAP32[i3 >> 2] | 0;
    HEAP32[i30 >> 2] = i31;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   ___async_unwind = 0;
   HEAP32[i23 >> 2] = 223;
   i24 = i23 + 4 | 0;
   i25 = HEAP32[i6 >> 2] | 0;
   HEAP32[i24 >> 2] = i25;
   i26 = i23 + 8 | 0;
   i27 = HEAP32[i5 >> 2] | 0;
   HEAP32[i26 >> 2] = i27;
   i28 = i23 + 12 | 0;
   i29 = HEAP32[i4 >> 2] | 0;
   HEAP32[i28 >> 2] = i29;
   i30 = i23 + 16 | 0;
   i31 = HEAP32[i3 >> 2] | 0;
   HEAP32[i30 >> 2] = i31;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  if ((HEAP32[i21 + 140 >> 2] | 0) == 0) {
   i31 = HEAP32[i21 + 28 >> 2] | 0;
   if ((i31 | 0) != 0) {
    i30 = _emscripten_realloc_async_context(4) | 0;
    FUNCTION_TABLE_v[i31 & 63]();
    if (___async) {
     HEAP32[i30 >> 2] = 225;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i30 >> 2] = 225;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   HEAP32[i21 + 64 >> 2] = 0;
   HEAP32[i21 + 68 >> 2] = 0;
   HEAP32[i21 + 72 >> 2] = 286552;
   _dosymetry();
   i30 = HEAP32[71600] | 0;
   i31 = HEAP32[i30 + 28 >> 2] | 0;
   if ((i31 | 0) != 0) {
    i3 = _emscripten_realloc_async_context(4) | 0;
    FUNCTION_TABLE_v[i31 & 63]();
    if (___async) {
     HEAP32[i3 >> 2] = 226;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i3 >> 2] = 226;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   i3 = HEAP32[i30 + 52 >> 2] | 0;
   i31 = HEAP32[i30 + 128 >> 2] | 0;
   i23 = i3 + (i31 * 40 | 0) | 0;
   if ((i31 | 0) > 0) {
    i31 = HEAP32[i30 + 16 >> 2] | 0;
    i29 = i3;
    while (1) {
     HEAPF64[i31 >> 3] = +HEAPF64[i29 >> 3];
     i29 = i29 + 40 | 0;
     if (!(i29 >>> 0 < i23 >>> 0)) {
      break;
     } else {
      i31 = i31 + 8 | 0;
     }
    }
   }
   i31 = HEAP32[i30 + 56 >> 2] | 0;
   i23 = HEAP32[i30 + 132 >> 2] | 0;
   i29 = i31 + (i23 * 40 | 0) | 0;
   if ((i23 | 0) <= 0) {
    STACKTOP = i2;
    return;
   }
   i23 = HEAP32[i30 + 20 >> 2] | 0;
   i30 = i31;
   while (1) {
    HEAPF64[i23 >> 3] = +HEAPF64[i30 >> 3];
    i30 = i30 + 40 | 0;
    if (!(i30 >>> 0 < i29 >>> 0)) {
     break;
    } else {
     i23 = i23 + 8 | 0;
    }
   }
   STACKTOP = i2;
   return;
  } else {
   i32 = i21;
  }
 } else {
  i32 = i9;
 }
 _init_tables(i32);
 STACKTOP = i2;
 return;
}
function _aa_getevent__async_cb173(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 i5 = HEAP32[i1 + 8 >> 2] | 0;
 i6 = HEAP32[i1 + 12 >> 2] | 0;
 i7 = HEAP32[i1 + 16 >> 2] | 0;
 i8 = HEAP32[i1 + 20 >> 2] | 0;
 i9 = HEAP32[i1 + 24 >> 2] | 0;
 i10 = HEAP32[i1 + 28 >> 2] | 0;
 i11 = HEAP32[i1 + 32 >> 2] | 0;
 i12 = HEAP32[i1 + 36 >> 2] | 0;
 i13 = HEAP32[i1 + 40 >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[___async_retval >> 2];
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[i3 >> 2] | 0) == 0) {
  i14 = HEAP32[i5 >> 2] | 0;
  if ((i14 | 0) == 0) {
   i15 = HEAP32[(HEAP32[i11 >> 2] | 0) + 20 >> 2] | 0;
   i16 = _emscripten_realloc_async_context(44) | 0;
   HEAP32[i3 >> 2] = FUNCTION_TABLE_iii[i15 & 3](i4, 1) | 0;
   if (___async) {
    HEAP32[i16 >> 2] = 284;
    i17 = i16 + 4 | 0;
    HEAP32[i17 >> 2] = i4;
    i18 = i16 + 8 | 0;
    HEAP32[i18 >> 2] = i5;
    i19 = i16 + 12 | 0;
    HEAP32[i19 >> 2] = i6;
    i20 = i16 + 16 | 0;
    HEAP32[i20 >> 2] = i7;
    i21 = i16 + 20 | 0;
    HEAP32[i21 >> 2] = i8;
    i22 = i16 + 24 | 0;
    HEAP32[i22 >> 2] = i9;
    i23 = i16 + 28 | 0;
    HEAP32[i23 >> 2] = i10;
    i24 = i16 + 32 | 0;
    HEAP32[i24 >> 2] = i11;
    i25 = i16 + 36 | 0;
    HEAP32[i25 >> 2] = i12;
    i26 = i16 + 40 | 0;
    HEAP32[i26 >> 2] = i13;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   HEAP32[___async_retval >> 2] = HEAP32[i3 >> 2];
   ___async_unwind = 0;
   HEAP32[i16 >> 2] = 284;
   i17 = i16 + 4 | 0;
   HEAP32[i17 >> 2] = i4;
   i18 = i16 + 8 | 0;
   HEAP32[i18 >> 2] = i5;
   i19 = i16 + 12 | 0;
   HEAP32[i19 >> 2] = i6;
   i20 = i16 + 16 | 0;
   HEAP32[i20 >> 2] = i7;
   i21 = i16 + 20 | 0;
   HEAP32[i21 >> 2] = i8;
   i22 = i16 + 24 | 0;
   HEAP32[i22 >> 2] = i9;
   i23 = i16 + 28 | 0;
   HEAP32[i23 >> 2] = i10;
   i24 = i16 + 32 | 0;
   HEAP32[i24 >> 2] = i11;
   i25 = i16 + 36 | 0;
   HEAP32[i25 >> 2] = i12;
   i26 = i16 + 40 | 0;
   HEAP32[i26 >> 2] = i13;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  } else {
   i26 = HEAP32[i14 + 20 >> 2] | 0;
   i14 = _emscripten_realloc_async_context(44) | 0;
   FUNCTION_TABLE_viiii[i26 & 0](i4, i6, i7, i8);
   if (___async) {
    HEAP32[i14 >> 2] = 285;
    i27 = i14 + 4 | 0;
    HEAP32[i27 >> 2] = i4;
    i28 = i14 + 8 | 0;
    HEAP32[i28 >> 2] = i5;
    i29 = i14 + 12 | 0;
    HEAP32[i29 >> 2] = i6;
    i30 = i14 + 16 | 0;
    HEAP32[i30 >> 2] = i7;
    i31 = i14 + 20 | 0;
    HEAP32[i31 >> 2] = i8;
    i32 = i14 + 24 | 0;
    HEAP32[i32 >> 2] = i9;
    i33 = i14 + 28 | 0;
    HEAP32[i33 >> 2] = i10;
    i34 = i14 + 32 | 0;
    HEAP32[i34 >> 2] = i11;
    i35 = i14 + 36 | 0;
    HEAP32[i35 >> 2] = i12;
    i36 = i14 + 40 | 0;
    HEAP32[i36 >> 2] = i13;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   ___async_unwind = 0;
   HEAP32[i14 >> 2] = 285;
   i27 = i14 + 4 | 0;
   HEAP32[i27 >> 2] = i4;
   i28 = i14 + 8 | 0;
   HEAP32[i28 >> 2] = i5;
   i29 = i14 + 12 | 0;
   HEAP32[i29 >> 2] = i6;
   i30 = i14 + 16 | 0;
   HEAP32[i30 >> 2] = i7;
   i31 = i14 + 20 | 0;
   HEAP32[i31 >> 2] = i8;
   i32 = i14 + 24 | 0;
   HEAP32[i32 >> 2] = i9;
   i33 = i14 + 28 | 0;
   HEAP32[i33 >> 2] = i10;
   i34 = i14 + 32 | 0;
   HEAP32[i34 >> 2] = i11;
   i35 = i14 + 36 | 0;
   HEAP32[i35 >> 2] = i12;
   i36 = i14 + 40 | 0;
   HEAP32[i36 >> 2] = i13;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
 }
 if ((i1 | 0) == 259) {
  i13 = HEAP32[i5 >> 2] | 0;
  if ((i13 | 0) == 0) {
   i37 = 400;
   i38 = ___async_retval;
   HEAP32[i38 >> 2] = i37;
   STACKTOP = i2;
   return;
  }
  i5 = HEAP32[i13 + 20 >> 2] | 0;
  i13 = _emscripten_realloc_async_context(24) | 0;
  FUNCTION_TABLE_viiii[i5 & 0](i4, i6, i7, i8);
  if (___async) {
   HEAP32[i13 >> 2] = 288;
   i39 = i13 + 4 | 0;
   HEAP32[i39 >> 2] = i6;
   i40 = i13 + 8 | 0;
   HEAP32[i40 >> 2] = i4;
   i41 = i13 + 12 | 0;
   HEAP32[i41 >> 2] = i7;
   i42 = i13 + 16 | 0;
   HEAP32[i42 >> 2] = i8;
   i43 = i13 + 20 | 0;
   HEAP32[i43 >> 2] = i9;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i13 >> 2] = 288;
  i39 = i13 + 4 | 0;
  HEAP32[i39 >> 2] = i6;
  i40 = i13 + 8 | 0;
  HEAP32[i40 >> 2] = i4;
  i41 = i13 + 12 | 0;
  HEAP32[i41 >> 2] = i7;
  i42 = i13 + 16 | 0;
  HEAP32[i42 >> 2] = i8;
  i43 = i13 + 20 | 0;
  HEAP32[i43 >> 2] = i9;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else if ((i1 | 0) == 258) {
  i9 = HEAP32[i4 + 212 >> 2] | 0;
  if ((i9 | 0) == 0) {
   i37 = 258;
   i38 = ___async_retval;
   HEAP32[i38 >> 2] = i37;
   STACKTOP = i2;
   return;
  }
  i43 = _emscripten_realloc_async_context(4) | 0;
  FUNCTION_TABLE_vi[i9 & 511](i4);
  if (___async) {
   HEAP32[i43 >> 2] = 287;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i43 >> 2] = 287;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  i37 = i1;
  i38 = ___async_retval;
  HEAP32[i38 >> 2] = i37;
  STACKTOP = i2;
  return;
 }
}
function _aa_getevent__async_cb172(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 i5 = HEAP32[i1 + 8 >> 2] | 0;
 i6 = HEAP32[i1 + 12 >> 2] | 0;
 i7 = HEAP32[i1 + 16 >> 2] | 0;
 i8 = HEAP32[i1 + 20 >> 2] | 0;
 i9 = HEAP32[i1 + 24 >> 2] | 0;
 i10 = HEAP32[i1 + 28 >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[___async_retval >> 2];
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[i3 >> 2] | 0) == 0) {
  i3 = i4 + 196 | 0;
  i11 = i4 + 200 | 0;
  i12 = i4 + 204 | 0;
  i13 = HEAP32[i5 >> 2] | 0;
  if ((i13 | 0) == 0) {
   i14 = HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] | 0;
   i15 = _emscripten_realloc_async_context(44) | 0;
   i16 = FUNCTION_TABLE_iii[i14 & 3](i4, 1) | 0;
   if (___async) {
    HEAP32[i15 >> 2] = 284;
    i17 = i15 + 4 | 0;
    HEAP32[i17 >> 2] = i4;
    i18 = i15 + 8 | 0;
    HEAP32[i18 >> 2] = i5;
    i19 = i15 + 12 | 0;
    HEAP32[i19 >> 2] = i6;
    i20 = i15 + 16 | 0;
    HEAP32[i20 >> 2] = i7;
    i21 = i15 + 20 | 0;
    HEAP32[i21 >> 2] = i8;
    i22 = i15 + 24 | 0;
    HEAP32[i22 >> 2] = i9;
    i23 = i15 + 28 | 0;
    HEAP32[i23 >> 2] = i3;
    i24 = i15 + 32 | 0;
    HEAP32[i24 >> 2] = i10;
    i25 = i15 + 36 | 0;
    HEAP32[i25 >> 2] = i11;
    i26 = i15 + 40 | 0;
    HEAP32[i26 >> 2] = i12;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   HEAP32[___async_retval >> 2] = i16;
   ___async_unwind = 0;
   HEAP32[i15 >> 2] = 284;
   i17 = i15 + 4 | 0;
   HEAP32[i17 >> 2] = i4;
   i18 = i15 + 8 | 0;
   HEAP32[i18 >> 2] = i5;
   i19 = i15 + 12 | 0;
   HEAP32[i19 >> 2] = i6;
   i20 = i15 + 16 | 0;
   HEAP32[i20 >> 2] = i7;
   i21 = i15 + 20 | 0;
   HEAP32[i21 >> 2] = i8;
   i22 = i15 + 24 | 0;
   HEAP32[i22 >> 2] = i9;
   i23 = i15 + 28 | 0;
   HEAP32[i23 >> 2] = i3;
   i24 = i15 + 32 | 0;
   HEAP32[i24 >> 2] = i10;
   i25 = i15 + 36 | 0;
   HEAP32[i25 >> 2] = i11;
   i26 = i15 + 40 | 0;
   HEAP32[i26 >> 2] = i12;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  } else {
   i26 = HEAP32[i13 + 20 >> 2] | 0;
   i13 = _emscripten_realloc_async_context(44) | 0;
   FUNCTION_TABLE_viiii[i26 & 0](i4, i6, i7, i8);
   if (___async) {
    HEAP32[i13 >> 2] = 285;
    i27 = i13 + 4 | 0;
    HEAP32[i27 >> 2] = i4;
    i28 = i13 + 8 | 0;
    HEAP32[i28 >> 2] = i5;
    i29 = i13 + 12 | 0;
    HEAP32[i29 >> 2] = i6;
    i30 = i13 + 16 | 0;
    HEAP32[i30 >> 2] = i7;
    i31 = i13 + 20 | 0;
    HEAP32[i31 >> 2] = i8;
    i32 = i13 + 24 | 0;
    HEAP32[i32 >> 2] = i9;
    i33 = i13 + 28 | 0;
    HEAP32[i33 >> 2] = i3;
    i34 = i13 + 32 | 0;
    HEAP32[i34 >> 2] = i10;
    i35 = i13 + 36 | 0;
    HEAP32[i35 >> 2] = i11;
    i36 = i13 + 40 | 0;
    HEAP32[i36 >> 2] = i12;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   ___async_unwind = 0;
   HEAP32[i13 >> 2] = 285;
   i27 = i13 + 4 | 0;
   HEAP32[i27 >> 2] = i4;
   i28 = i13 + 8 | 0;
   HEAP32[i28 >> 2] = i5;
   i29 = i13 + 12 | 0;
   HEAP32[i29 >> 2] = i6;
   i30 = i13 + 16 | 0;
   HEAP32[i30 >> 2] = i7;
   i31 = i13 + 20 | 0;
   HEAP32[i31 >> 2] = i8;
   i32 = i13 + 24 | 0;
   HEAP32[i32 >> 2] = i9;
   i33 = i13 + 28 | 0;
   HEAP32[i33 >> 2] = i3;
   i34 = i13 + 32 | 0;
   HEAP32[i34 >> 2] = i10;
   i35 = i13 + 36 | 0;
   HEAP32[i35 >> 2] = i11;
   i36 = i13 + 40 | 0;
   HEAP32[i36 >> 2] = i12;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
 }
 if ((i1 | 0) == 259) {
  i12 = HEAP32[i5 >> 2] | 0;
  if ((i12 | 0) == 0) {
   i37 = 400;
   i38 = ___async_retval;
   HEAP32[i38 >> 2] = i37;
   STACKTOP = i2;
   return;
  }
  i5 = HEAP32[i12 + 20 >> 2] | 0;
  i12 = _emscripten_realloc_async_context(24) | 0;
  FUNCTION_TABLE_viiii[i5 & 0](i4, i6, i7, i8);
  if (___async) {
   HEAP32[i12 >> 2] = 288;
   i39 = i12 + 4 | 0;
   HEAP32[i39 >> 2] = i6;
   i40 = i12 + 8 | 0;
   HEAP32[i40 >> 2] = i4;
   i41 = i12 + 12 | 0;
   HEAP32[i41 >> 2] = i7;
   i42 = i12 + 16 | 0;
   HEAP32[i42 >> 2] = i8;
   i43 = i12 + 20 | 0;
   HEAP32[i43 >> 2] = i9;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i12 >> 2] = 288;
  i39 = i12 + 4 | 0;
  HEAP32[i39 >> 2] = i6;
  i40 = i12 + 8 | 0;
  HEAP32[i40 >> 2] = i4;
  i41 = i12 + 12 | 0;
  HEAP32[i41 >> 2] = i7;
  i42 = i12 + 16 | 0;
  HEAP32[i42 >> 2] = i8;
  i43 = i12 + 20 | 0;
  HEAP32[i43 >> 2] = i9;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else if ((i1 | 0) == 258) {
  i9 = HEAP32[i4 + 212 >> 2] | 0;
  if ((i9 | 0) == 0) {
   i37 = 258;
   i38 = ___async_retval;
   HEAP32[i38 >> 2] = i37;
   STACKTOP = i2;
   return;
  }
  i43 = _emscripten_realloc_async_context(4) | 0;
  FUNCTION_TABLE_vi[i9 & 511](i4);
  if (___async) {
   HEAP32[i43 >> 2] = 287;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i43 >> 2] = 287;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  i37 = i1;
  i38 = ___async_retval;
  HEAP32[i38 >> 2] = i37;
  STACKTOP = i2;
  return;
 }
}
function _calccolumn__async_cb131(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, d18 = 0.0, d19 = 0.0, d20 = 0.0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 d6 = +HEAPF64[i1 + 8 >> 3];
 i7 = HEAP32[i1 + 16 >> 2] | 0;
 i8 = HEAP32[i1 + 20 >> 2] | 0;
 i9 = HEAP32[i1 + 28 >> 2] | 0;
 i10 = HEAP32[i1 + 32 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[i1 + 24 >> 2];
 HEAP32[i4 >> 2] = i9;
 HEAP32[i3 >> 2] = HEAP32[___async_retval >> 2];
 i9 = HEAP32[i3 >> 2] | 0;
 if ((i9 | 0) == 2147483647) {
  i11 = (HEAP32[71600] | 0) + 144 | 0;
 } else {
  if ((i9 | 0) < 0) {
   i1 = HEAP32[71600] | 0;
   i12 = HEAP32[i1 + 124 >> 2] | 0;
   i13 = i12 + -1 | 0;
   i14 = i12;
   i15 = i1;
   i16 = (Math_imul(((0 - i9 | 0) / (i13 | 0) | 0) + 1 | 0, i13) | 0) + i9 | 0;
  } else {
   i13 = HEAP32[71600] | 0;
   i14 = HEAP32[i13 + 124 >> 2] | 0;
   i15 = i13;
   i16 = i9;
  }
  i11 = i15 + (((i16 | 0) % (i14 + -1 | 0) | 0) + 1) + 144 | 0;
 }
 HEAP8[HEAP32[i5 >> 2] >> 0] = HEAP8[i11 >> 0] | 0;
 i11 = HEAP32[71600] | 0;
 do {
  i14 = (HEAP32[i5 >> 2] | 0) + (HEAP32[i11 + 136 >> 2] | 0) | 0;
  i16 = (HEAP32[i4 >> 2] | 0) + 40 | 0;
  if (!(i16 >>> 0 < i10 >>> 0)) {
   i17 = 23;
   break;
  }
  HEAP32[i4 >> 2] = i16;
  HEAP32[i5 >> 2] = i14;
 } while ((HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0) != 0);
 if ((i17 | 0) == 23) {
  HEAP32[i7 + 20 >> 2] = 0;
  HEAP32[i7 + 32 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 d18 = +HEAPF64[HEAP32[i4 >> 2] >> 3];
 i17 = HEAP32[i11 + 60 >> 2] | 0;
 if ((HEAP32[i11 + 92 >> 2] | 0) == 0) {
  i14 = HEAP32[i17 + 4 >> 2] | 0;
  d19 = +HEAPF64[i11 >> 3];
  d20 = +HEAPF64[i11 + 8 >> 3];
  i11 = _emscripten_realloc_async_context(40) | 0;
  HEAP32[i3 >> 2] = FUNCTION_TABLE_idddd[i14 & 3](d6, d18, d19, d20) | 0;
  if (___async) {
   HEAP32[i11 >> 2] = 235;
   i21 = i11 + 8 | 0;
   HEAPF64[i21 >> 3] = d6;
   i22 = i11 + 16 | 0;
   HEAP32[i22 >> 2] = i7;
   i23 = i11 + 20 | 0;
   HEAP32[i23 >> 2] = i8;
   i24 = i11 + 24 | 0;
   i25 = HEAP32[i5 >> 2] | 0;
   HEAP32[i24 >> 2] = i25;
   i26 = i11 + 28 | 0;
   i27 = HEAP32[i4 >> 2] | 0;
   HEAP32[i26 >> 2] = i27;
   i28 = i11 + 32 | 0;
   HEAP32[i28 >> 2] = i10;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = HEAP32[i3 >> 2];
  ___async_unwind = 0;
  HEAP32[i11 >> 2] = 235;
  i21 = i11 + 8 | 0;
  HEAPF64[i21 >> 3] = d6;
  i22 = i11 + 16 | 0;
  HEAP32[i22 >> 2] = i7;
  i23 = i11 + 20 | 0;
  HEAP32[i23 >> 2] = i8;
  i24 = i11 + 24 | 0;
  i25 = HEAP32[i5 >> 2] | 0;
  HEAP32[i24 >> 2] = i25;
  i26 = i11 + 28 | 0;
  i27 = HEAP32[i4 >> 2] | 0;
  HEAP32[i26 >> 2] = i27;
  i28 = i11 + 32 | 0;
  HEAP32[i28 >> 2] = i10;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i28 = HEAP32[i17 + 4 >> 2] | 0;
 if ((HEAP32[i17 + 292 >> 2] | 0) == 0) {
  i17 = _emscripten_realloc_async_context(40) | 0;
  i11 = FUNCTION_TABLE_idddd[i28 & 3](d6, d18, d6, d18) | 0;
  if (___async) {
   HEAP32[i17 >> 2] = 234;
   i29 = i17 + 8 | 0;
   HEAPF64[i29 >> 3] = d6;
   i30 = i17 + 16 | 0;
   HEAP32[i30 >> 2] = i7;
   i31 = i17 + 20 | 0;
   HEAP32[i31 >> 2] = i8;
   i32 = i17 + 24 | 0;
   i33 = HEAP32[i5 >> 2] | 0;
   HEAP32[i32 >> 2] = i33;
   i34 = i17 + 28 | 0;
   i35 = HEAP32[i4 >> 2] | 0;
   HEAP32[i34 >> 2] = i35;
   i36 = i17 + 32 | 0;
   HEAP32[i36 >> 2] = i10;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i11;
  ___async_unwind = 0;
  HEAP32[i17 >> 2] = 234;
  i29 = i17 + 8 | 0;
  HEAPF64[i29 >> 3] = d6;
  i30 = i17 + 16 | 0;
  HEAP32[i30 >> 2] = i7;
  i31 = i17 + 20 | 0;
  HEAP32[i31 >> 2] = i8;
  i32 = i17 + 24 | 0;
  i33 = HEAP32[i5 >> 2] | 0;
  HEAP32[i32 >> 2] = i33;
  i34 = i17 + 28 | 0;
  i35 = HEAP32[i4 >> 2] | 0;
  HEAP32[i34 >> 2] = i35;
  i36 = i17 + 32 | 0;
  HEAP32[i36 >> 2] = i10;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  i36 = _emscripten_realloc_async_context(40) | 0;
  i17 = FUNCTION_TABLE_idddd[i28 & 3](0.0, 0.0, d6, d18) | 0;
  if (___async) {
   HEAP32[i36 >> 2] = 233;
   i37 = i36 + 8 | 0;
   HEAPF64[i37 >> 3] = d6;
   i38 = i36 + 16 | 0;
   HEAP32[i38 >> 2] = i7;
   i39 = i36 + 20 | 0;
   HEAP32[i39 >> 2] = i8;
   i40 = i36 + 24 | 0;
   i41 = HEAP32[i5 >> 2] | 0;
   HEAP32[i40 >> 2] = i41;
   i42 = i36 + 28 | 0;
   i43 = HEAP32[i4 >> 2] | 0;
   HEAP32[i42 >> 2] = i43;
   i44 = i36 + 32 | 0;
   HEAP32[i44 >> 2] = i10;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i17;
  ___async_unwind = 0;
  HEAP32[i36 >> 2] = 233;
  i37 = i36 + 8 | 0;
  HEAPF64[i37 >> 3] = d6;
  i38 = i36 + 16 | 0;
  HEAP32[i38 >> 2] = i7;
  i39 = i36 + 20 | 0;
  HEAP32[i39 >> 2] = i8;
  i40 = i36 + 24 | 0;
  i41 = HEAP32[i5 >> 2] | 0;
  HEAP32[i40 >> 2] = i41;
  i42 = i36 + 28 | 0;
  i43 = HEAP32[i4 >> 2] | 0;
  HEAP32[i42 >> 2] = i43;
  i44 = i36 + 32 | 0;
  HEAP32[i44 >> 2] = i10;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
}
function _calccolumn__async_cb130(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, d18 = 0.0, d19 = 0.0, d20 = 0.0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 d6 = +HEAPF64[i1 + 8 >> 3];
 i7 = HEAP32[i1 + 16 >> 2] | 0;
 i8 = HEAP32[i1 + 20 >> 2] | 0;
 i9 = HEAP32[i1 + 28 >> 2] | 0;
 i10 = HEAP32[i1 + 32 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[i1 + 24 >> 2];
 HEAP32[i4 >> 2] = i9;
 HEAP32[i3 >> 2] = HEAP32[___async_retval >> 2];
 i9 = HEAP32[i3 >> 2] | 0;
 if ((i9 | 0) == 2147483647) {
  i11 = (HEAP32[71600] | 0) + 144 | 0;
 } else {
  if ((i9 | 0) < 0) {
   i1 = HEAP32[71600] | 0;
   i12 = HEAP32[i1 + 124 >> 2] | 0;
   i13 = i12 + -1 | 0;
   i14 = i12;
   i15 = i1;
   i16 = (Math_imul(((0 - i9 | 0) / (i13 | 0) | 0) + 1 | 0, i13) | 0) + i9 | 0;
  } else {
   i13 = HEAP32[71600] | 0;
   i14 = HEAP32[i13 + 124 >> 2] | 0;
   i15 = i13;
   i16 = i9;
  }
  i11 = i15 + (((i16 | 0) % (i14 + -1 | 0) | 0) + 1) + 144 | 0;
 }
 HEAP8[HEAP32[i5 >> 2] >> 0] = HEAP8[i11 >> 0] | 0;
 i11 = HEAP32[71600] | 0;
 do {
  i14 = (HEAP32[i5 >> 2] | 0) + (HEAP32[i11 + 136 >> 2] | 0) | 0;
  i16 = (HEAP32[i4 >> 2] | 0) + 40 | 0;
  if (!(i16 >>> 0 < i10 >>> 0)) {
   i17 = 23;
   break;
  }
  HEAP32[i4 >> 2] = i16;
  HEAP32[i5 >> 2] = i14;
 } while ((HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0) != 0);
 if ((i17 | 0) == 23) {
  HEAP32[i7 + 20 >> 2] = 0;
  HEAP32[i7 + 32 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 d18 = +HEAPF64[HEAP32[i4 >> 2] >> 3];
 i17 = HEAP32[i11 + 60 >> 2] | 0;
 if ((HEAP32[i11 + 92 >> 2] | 0) == 0) {
  i14 = HEAP32[i17 + 4 >> 2] | 0;
  d19 = +HEAPF64[i11 >> 3];
  d20 = +HEAPF64[i11 + 8 >> 3];
  i11 = _emscripten_realloc_async_context(40) | 0;
  i16 = FUNCTION_TABLE_idddd[i14 & 3](d6, d18, d19, d20) | 0;
  if (___async) {
   HEAP32[i11 >> 2] = 235;
   i21 = i11 + 8 | 0;
   HEAPF64[i21 >> 3] = d6;
   i22 = i11 + 16 | 0;
   HEAP32[i22 >> 2] = i7;
   i23 = i11 + 20 | 0;
   HEAP32[i23 >> 2] = i8;
   i24 = i11 + 24 | 0;
   i25 = HEAP32[i5 >> 2] | 0;
   HEAP32[i24 >> 2] = i25;
   i26 = i11 + 28 | 0;
   i27 = HEAP32[i4 >> 2] | 0;
   HEAP32[i26 >> 2] = i27;
   i28 = i11 + 32 | 0;
   HEAP32[i28 >> 2] = i10;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i16;
  ___async_unwind = 0;
  HEAP32[i11 >> 2] = 235;
  i21 = i11 + 8 | 0;
  HEAPF64[i21 >> 3] = d6;
  i22 = i11 + 16 | 0;
  HEAP32[i22 >> 2] = i7;
  i23 = i11 + 20 | 0;
  HEAP32[i23 >> 2] = i8;
  i24 = i11 + 24 | 0;
  i25 = HEAP32[i5 >> 2] | 0;
  HEAP32[i24 >> 2] = i25;
  i26 = i11 + 28 | 0;
  i27 = HEAP32[i4 >> 2] | 0;
  HEAP32[i26 >> 2] = i27;
  i28 = i11 + 32 | 0;
  HEAP32[i28 >> 2] = i10;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i28 = HEAP32[i17 + 4 >> 2] | 0;
 if ((HEAP32[i17 + 292 >> 2] | 0) == 0) {
  i17 = _emscripten_realloc_async_context(40) | 0;
  HEAP32[i3 >> 2] = FUNCTION_TABLE_idddd[i28 & 3](d6, d18, d6, d18) | 0;
  if (___async) {
   HEAP32[i17 >> 2] = 234;
   i29 = i17 + 8 | 0;
   HEAPF64[i29 >> 3] = d6;
   i30 = i17 + 16 | 0;
   HEAP32[i30 >> 2] = i7;
   i31 = i17 + 20 | 0;
   HEAP32[i31 >> 2] = i8;
   i32 = i17 + 24 | 0;
   i33 = HEAP32[i5 >> 2] | 0;
   HEAP32[i32 >> 2] = i33;
   i34 = i17 + 28 | 0;
   i35 = HEAP32[i4 >> 2] | 0;
   HEAP32[i34 >> 2] = i35;
   i36 = i17 + 32 | 0;
   HEAP32[i36 >> 2] = i10;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = HEAP32[i3 >> 2];
  ___async_unwind = 0;
  HEAP32[i17 >> 2] = 234;
  i29 = i17 + 8 | 0;
  HEAPF64[i29 >> 3] = d6;
  i30 = i17 + 16 | 0;
  HEAP32[i30 >> 2] = i7;
  i31 = i17 + 20 | 0;
  HEAP32[i31 >> 2] = i8;
  i32 = i17 + 24 | 0;
  i33 = HEAP32[i5 >> 2] | 0;
  HEAP32[i32 >> 2] = i33;
  i34 = i17 + 28 | 0;
  i35 = HEAP32[i4 >> 2] | 0;
  HEAP32[i34 >> 2] = i35;
  i36 = i17 + 32 | 0;
  HEAP32[i36 >> 2] = i10;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  i36 = _emscripten_realloc_async_context(40) | 0;
  i17 = FUNCTION_TABLE_idddd[i28 & 3](0.0, 0.0, d6, d18) | 0;
  if (___async) {
   HEAP32[i36 >> 2] = 233;
   i37 = i36 + 8 | 0;
   HEAPF64[i37 >> 3] = d6;
   i38 = i36 + 16 | 0;
   HEAP32[i38 >> 2] = i7;
   i39 = i36 + 20 | 0;
   HEAP32[i39 >> 2] = i8;
   i40 = i36 + 24 | 0;
   i41 = HEAP32[i5 >> 2] | 0;
   HEAP32[i40 >> 2] = i41;
   i42 = i36 + 28 | 0;
   i43 = HEAP32[i4 >> 2] | 0;
   HEAP32[i42 >> 2] = i43;
   i44 = i36 + 32 | 0;
   HEAP32[i44 >> 2] = i10;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i17;
  ___async_unwind = 0;
  HEAP32[i36 >> 2] = 233;
  i37 = i36 + 8 | 0;
  HEAPF64[i37 >> 3] = d6;
  i38 = i36 + 16 | 0;
  HEAP32[i38 >> 2] = i7;
  i39 = i36 + 20 | 0;
  HEAP32[i39 >> 2] = i8;
  i40 = i36 + 24 | 0;
  i41 = HEAP32[i5 >> 2] | 0;
  HEAP32[i40 >> 2] = i41;
  i42 = i36 + 28 | 0;
  i43 = HEAP32[i4 >> 2] | 0;
  HEAP32[i42 >> 2] = i43;
  i44 = i36 + 32 | 0;
  HEAP32[i44 >> 2] = i10;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
}
function _calccolumn__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, d18 = 0.0, d19 = 0.0, d20 = 0.0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 d6 = +HEAPF64[i1 + 8 >> 3];
 i7 = HEAP32[i1 + 16 >> 2] | 0;
 i8 = HEAP32[i1 + 20 >> 2] | 0;
 i9 = HEAP32[i1 + 28 >> 2] | 0;
 i10 = HEAP32[i1 + 32 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[i1 + 24 >> 2];
 HEAP32[i4 >> 2] = i9;
 HEAP32[i3 >> 2] = HEAP32[___async_retval >> 2];
 i9 = HEAP32[i3 >> 2] | 0;
 if ((i9 | 0) == 2147483647) {
  i11 = (HEAP32[71600] | 0) + 144 | 0;
 } else {
  if ((i9 | 0) < 0) {
   i1 = HEAP32[71600] | 0;
   i12 = HEAP32[i1 + 124 >> 2] | 0;
   i13 = i12 + -1 | 0;
   i14 = i12;
   i15 = i1;
   i16 = (Math_imul(((0 - i9 | 0) / (i13 | 0) | 0) + 1 | 0, i13) | 0) + i9 | 0;
  } else {
   i13 = HEAP32[71600] | 0;
   i14 = HEAP32[i13 + 124 >> 2] | 0;
   i15 = i13;
   i16 = i9;
  }
  i11 = i15 + (((i16 | 0) % (i14 + -1 | 0) | 0) + 1) + 144 | 0;
 }
 HEAP8[HEAP32[i5 >> 2] >> 0] = HEAP8[i11 >> 0] | 0;
 i11 = HEAP32[71600] | 0;
 do {
  i14 = (HEAP32[i5 >> 2] | 0) + (HEAP32[i11 + 136 >> 2] | 0) | 0;
  i16 = (HEAP32[i4 >> 2] | 0) + 40 | 0;
  if (!(i16 >>> 0 < i10 >>> 0)) {
   i17 = 23;
   break;
  }
  HEAP32[i4 >> 2] = i16;
  HEAP32[i5 >> 2] = i14;
 } while ((HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0) != 0);
 if ((i17 | 0) == 23) {
  HEAP32[i7 + 20 >> 2] = 0;
  HEAP32[i7 + 32 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 d18 = +HEAPF64[HEAP32[i4 >> 2] >> 3];
 i17 = HEAP32[i11 + 60 >> 2] | 0;
 if ((HEAP32[i11 + 92 >> 2] | 0) == 0) {
  i14 = HEAP32[i17 + 4 >> 2] | 0;
  d19 = +HEAPF64[i11 >> 3];
  d20 = +HEAPF64[i11 + 8 >> 3];
  i11 = _emscripten_realloc_async_context(40) | 0;
  i16 = FUNCTION_TABLE_idddd[i14 & 3](d6, d18, d19, d20) | 0;
  if (___async) {
   HEAP32[i11 >> 2] = 235;
   i21 = i11 + 8 | 0;
   HEAPF64[i21 >> 3] = d6;
   i22 = i11 + 16 | 0;
   HEAP32[i22 >> 2] = i7;
   i23 = i11 + 20 | 0;
   HEAP32[i23 >> 2] = i8;
   i24 = i11 + 24 | 0;
   i25 = HEAP32[i5 >> 2] | 0;
   HEAP32[i24 >> 2] = i25;
   i26 = i11 + 28 | 0;
   i27 = HEAP32[i4 >> 2] | 0;
   HEAP32[i26 >> 2] = i27;
   i28 = i11 + 32 | 0;
   HEAP32[i28 >> 2] = i10;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i16;
  ___async_unwind = 0;
  HEAP32[i11 >> 2] = 235;
  i21 = i11 + 8 | 0;
  HEAPF64[i21 >> 3] = d6;
  i22 = i11 + 16 | 0;
  HEAP32[i22 >> 2] = i7;
  i23 = i11 + 20 | 0;
  HEAP32[i23 >> 2] = i8;
  i24 = i11 + 24 | 0;
  i25 = HEAP32[i5 >> 2] | 0;
  HEAP32[i24 >> 2] = i25;
  i26 = i11 + 28 | 0;
  i27 = HEAP32[i4 >> 2] | 0;
  HEAP32[i26 >> 2] = i27;
  i28 = i11 + 32 | 0;
  HEAP32[i28 >> 2] = i10;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i28 = HEAP32[i17 + 4 >> 2] | 0;
 if ((HEAP32[i17 + 292 >> 2] | 0) == 0) {
  i17 = _emscripten_realloc_async_context(40) | 0;
  i11 = FUNCTION_TABLE_idddd[i28 & 3](d6, d18, d6, d18) | 0;
  if (___async) {
   HEAP32[i17 >> 2] = 234;
   i29 = i17 + 8 | 0;
   HEAPF64[i29 >> 3] = d6;
   i30 = i17 + 16 | 0;
   HEAP32[i30 >> 2] = i7;
   i31 = i17 + 20 | 0;
   HEAP32[i31 >> 2] = i8;
   i32 = i17 + 24 | 0;
   i33 = HEAP32[i5 >> 2] | 0;
   HEAP32[i32 >> 2] = i33;
   i34 = i17 + 28 | 0;
   i35 = HEAP32[i4 >> 2] | 0;
   HEAP32[i34 >> 2] = i35;
   i36 = i17 + 32 | 0;
   HEAP32[i36 >> 2] = i10;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i11;
  ___async_unwind = 0;
  HEAP32[i17 >> 2] = 234;
  i29 = i17 + 8 | 0;
  HEAPF64[i29 >> 3] = d6;
  i30 = i17 + 16 | 0;
  HEAP32[i30 >> 2] = i7;
  i31 = i17 + 20 | 0;
  HEAP32[i31 >> 2] = i8;
  i32 = i17 + 24 | 0;
  i33 = HEAP32[i5 >> 2] | 0;
  HEAP32[i32 >> 2] = i33;
  i34 = i17 + 28 | 0;
  i35 = HEAP32[i4 >> 2] | 0;
  HEAP32[i34 >> 2] = i35;
  i36 = i17 + 32 | 0;
  HEAP32[i36 >> 2] = i10;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  i36 = _emscripten_realloc_async_context(40) | 0;
  HEAP32[i3 >> 2] = FUNCTION_TABLE_idddd[i28 & 3](0.0, 0.0, d6, d18) | 0;
  if (___async) {
   HEAP32[i36 >> 2] = 233;
   i37 = i36 + 8 | 0;
   HEAPF64[i37 >> 3] = d6;
   i38 = i36 + 16 | 0;
   HEAP32[i38 >> 2] = i7;
   i39 = i36 + 20 | 0;
   HEAP32[i39 >> 2] = i8;
   i40 = i36 + 24 | 0;
   i41 = HEAP32[i5 >> 2] | 0;
   HEAP32[i40 >> 2] = i41;
   i42 = i36 + 28 | 0;
   i43 = HEAP32[i4 >> 2] | 0;
   HEAP32[i42 >> 2] = i43;
   i44 = i36 + 32 | 0;
   HEAP32[i44 >> 2] = i10;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = HEAP32[i3 >> 2];
  ___async_unwind = 0;
  HEAP32[i36 >> 2] = 233;
  i37 = i36 + 8 | 0;
  HEAPF64[i37 >> 3] = d6;
  i38 = i36 + 16 | 0;
  HEAP32[i38 >> 2] = i7;
  i39 = i36 + 20 | 0;
  HEAP32[i39 >> 2] = i8;
  i40 = i36 + 24 | 0;
  i41 = HEAP32[i5 >> 2] | 0;
  HEAP32[i40 >> 2] = i41;
  i42 = i36 + 28 | 0;
  i43 = HEAP32[i4 >> 2] | 0;
  HEAP32[i42 >> 2] = i43;
  i44 = i36 + 32 | 0;
  HEAP32[i44 >> 2] = i10;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
}
function _move_starfield(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i3 = i1;
 i1 = HEAP32[68848] | 0;
 while (1) {
  if ((i1 | 0) == 4) {
   d4 = +HEAPF32[68850];
   d5 = +HEAPF32[68852];
   if (d4 >= d5) {
    d6 = d4 + -.05;
    HEAPF32[68850] = d6;
    if (!(d6 <= d5)) {
     d7 = d5;
    } else {
     d6 = +(((_rand() | 0) % 40 | 0) + -10 | 0);
     HEAPF32[68852] = d6;
     d7 = d6;
    }
    if (d7 < 0.0) {
     HEAPF32[68852] = 0.0;
     d8 = 0.0;
    } else {
     d8 = d7;
    }
   } else {
    d8 = d5;
   }
   d5 = +HEAPF32[68850];
   if (d5 < d8) {
    HEAPF32[68850] = d5 + .05;
   }
   d5 = +HEAPF32[68854];
   d6 = +HEAPF32[68856];
   if (d5 <= d6) {
    d4 = d5 + .005;
    HEAPF32[68854] = d4;
    if (!(d4 >= d6)) {
     d9 = d6;
     d10 = d4;
    } else {
     d4 = +((_rand() | 0) % 1e3 | 0 | 0) * 3.141592653589793 / 1.0e3 * 4.0 / 3.0 + -2.0943951023931953;
     HEAPF32[68856] = d4;
     d9 = d4;
     d10 = +HEAPF32[68854];
    }
   } else {
    d9 = d6;
    d10 = d5;
   }
   if (!(d10 >= d9)) {
    d11 = d10;
   } else {
    d5 = d10 + -.005;
    HEAPF32[68854] = d5;
    d11 = d5;
   }
   d5 = d11;
   d6 = +Math_sin(+d5);
   d4 = +HEAPF32[68850];
   HEAP32[68844] = ~~(d6 * d4 * 100.0);
   HEAP32[68846] = ~~-(+Math_cos(+d5) * d4);
  } else if ((i1 | 0) == 2) {
   i12 = HEAP32[68196] | 0;
   i13 = Math_imul(i12 - (HEAP32[68188] | 0) | 0, -30) | 0;
   HEAP32[68846] = (i13 | 0) / (i12 - (HEAP32[68194] | 0) | 0) | 0;
  }
  HEAP32[71596] = (HEAP32[71596] | 0) + 1;
  i12 = (i3 | 0) == 1;
  i13 = 0;
  do {
   L29 : do {
    if (i12) {
     i14 = 277384 + (i13 * 20 | 0) | 0;
     i15 = 277392 + (i13 * 20 | 0) | 0;
     i16 = HEAP32[i15 >> 2] | 0;
     if ((i16 | 0) == 0) {
      i17 = 277388 + (i13 * 20 | 0) | 0;
      i18 = i14;
      i19 = 277400 + (i13 * 20 | 0) | 0;
      i20 = HEAP32[277396 + (i13 * 20 | 0) >> 2] | 0;
      i21 = HEAP32[12936] | 0;
     } else {
      i22 = HEAP32[12936] | 0;
      i23 = i22 + 152 | 0;
      i24 = HEAP32[i23 >> 2] | 0;
      i25 = ((Math_imul(i24, ((HEAP32[i14 >> 2] | 0) + -256 | 0) / (i16 | 0) | 0) | 0) >> 8) + ((i24 | 0) / 2 | 0) | 0;
      HEAP32[277396 + (i13 * 20 | 0) >> 2] = i25;
      i24 = 277388 + (i13 * 20 | 0) | 0;
      i26 = Math_imul(HEAP32[i23 >> 2] | 0, ((HEAP32[i24 >> 2] | 0) + -256 | 0) / (i16 | 0) | 0) | 0;
      i23 = Math_imul(i26, HEAP32[i22 + 52 >> 2] | 0) | 0;
      i26 = 277400 + (i13 * 20 | 0) | 0;
      HEAP32[i26 >> 2] = ((HEAP32[i22 + 156 >> 2] | 0) / 2 | 0) + (((i23 | 0) / (HEAP32[i22 + 48 >> 2] | 0) | 0) >> 8);
      i17 = i24;
      i18 = i14;
      i19 = i26;
      i20 = i25;
      i21 = i22;
     }
     i22 = 277396 + (i13 * 20 | 0) | 0;
     i25 = 277384 + (i13 * 20 | 0) | 0;
     i26 = i21;
     i14 = i20;
     i24 = i16;
     while (1) {
      i16 = HEAP32[i26 + 152 >> 2] | 0;
      if (((((i14 | 0) > ((i16 | 0) / -3 | 0 | 0) ? (i14 | 0) < ((i16 << 2 | 0) / 3 | 0 | 0) : 0) ? (i16 = HEAP32[i19 >> 2] | 0, i23 = HEAP32[i26 + 156 >> 2] | 0, (i16 | 0) > ((i23 | 0) / -3 | 0 | 0)) : 0) ? (i16 | 0) < ((i23 << 2 | 0) / 3 | 0 | 0) : 0) ? !((i24 + -1 | 0) >>> 0 > 999) : 0) {
       break L29;
      }
      HEAP32[i25 >> 2] = ~~(+(_rand() | 0) * 4.656612873077393e-10 * 51.0e4 + -255.0e3);
      HEAP32[i17 >> 2] = ~~(+(_rand() | 0) * 4.656612873077393e-10 * 51.0e4 + -255.0e3);
      i23 = HEAP32[12936] | 0;
      HEAP32[i22 >> 2] = (HEAP32[i23 + 152 >> 2] | 0) / 2 | 0;
      HEAP32[i19 >> 2] = (HEAP32[i23 + 156 >> 2] | 0) / 2 | 0;
      i23 = ~~(+(_rand() | 0) * 4.656612873077393e-10 * 2.0e3 + 0.0 + 1.0);
      HEAP32[i15 >> 2] = i23;
      i16 = HEAP32[12936] | 0;
      i27 = i16 + 152 | 0;
      i28 = HEAP32[i27 >> 2] | 0;
      i29 = ((Math_imul(i28, ((HEAP32[i18 >> 2] | 0) + -256 | 0) / (i23 | 0) | 0) | 0) >> 8) + ((i28 | 0) / 2 | 0) | 0;
      HEAP32[i22 >> 2] = i29;
      i28 = Math_imul(HEAP32[i27 >> 2] | 0, ((HEAP32[i17 >> 2] | 0) + -256 | 0) / (i23 | 0) | 0) | 0;
      i27 = Math_imul(i28, HEAP32[i16 + 52 >> 2] | 0) | 0;
      HEAP32[i19 >> 2] = ((HEAP32[i16 + 156 >> 2] | 0) / 2 | 0) + (((i27 | 0) / (HEAP32[i16 + 48 >> 2] | 0) | 0) >> 8);
      i26 = i16;
      i14 = i29;
      i24 = i23;
     }
    }
   } while (0);
   i30 = HEAP32[68848] | 0;
   if ((i30 | 0) != 1) {
    i24 = ((HEAP32[71596] | 0) + i13 | 0) % 120 | 0;
    i14 = 277384 + (i13 * 20 | 0) | 0;
    HEAP32[i14 >> 2] = (HEAP32[68844] | 0) + (HEAP32[(HEAP32[68860] | 0) + (i24 << 2) >> 2] | 0) + (HEAP32[i14 >> 2] | 0);
    i14 = 277388 + (i13 * 20 | 0) | 0;
    HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[(HEAP32[68862] | 0) + (i24 << 2) >> 2] | 0);
   }
   i24 = 277392 + (i13 * 20 | 0) | 0;
   HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + (HEAP32[68846] | 0);
   i13 = i13 + 1 | 0;
  } while ((i13 | 0) != 450);
  i13 = i3 + -1 | 0;
  if ((i13 | 0) == 0) {
   break;
  } else {
   i3 = i13;
   i1 = i30;
  }
 }
 STACKTOP = i2;
 return;
}
function _calcline__async_cb212(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, d18 = 0.0, d19 = 0.0, d20 = 0.0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 i6 = HEAP32[i1 + 4 >> 2] | 0;
 d7 = +HEAPF64[i1 + 8 >> 3];
 i8 = HEAP32[i1 + 16 >> 2] | 0;
 i9 = HEAP32[i1 + 20 >> 2] | 0;
 i10 = HEAP32[i1 + 28 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[i1 + 24 >> 2];
 HEAP32[i4 >> 2] = i10;
 HEAP32[i3 >> 2] = HEAP32[___async_retval >> 2];
 i10 = HEAP32[i3 >> 2] | 0;
 if ((i10 | 0) == 2147483647) {
  i11 = (HEAP32[71600] | 0) + 144 | 0;
 } else {
  if ((i10 | 0) < 0) {
   i1 = HEAP32[71600] | 0;
   i12 = HEAP32[i1 + 124 >> 2] | 0;
   i13 = i12 + -1 | 0;
   i14 = i12;
   i15 = i1;
   i16 = (Math_imul(((0 - i10 | 0) / (i13 | 0) | 0) + 1 | 0, i13) | 0) + i10 | 0;
  } else {
   i13 = HEAP32[71600] | 0;
   i14 = HEAP32[i13 + 124 >> 2] | 0;
   i15 = i13;
   i16 = i10;
  }
  i11 = i15 + (((i16 | 0) % (i14 + -1 | 0) | 0) + 1) + 144 | 0;
 }
 HEAP8[HEAP32[i5 >> 2] >> 0] = HEAP8[i11 >> 0] | 0;
 do {
  i11 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
  i14 = (HEAP32[i4 >> 2] | 0) + 40 | 0;
  if (!(i14 >>> 0 < i9 >>> 0)) {
   i17 = 23;
   break;
  }
  HEAP32[i4 >> 2] = i14;
  HEAP32[i5 >> 2] = i11;
 } while ((HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0) != 0);
 if ((i17 | 0) == 23) {
  HEAP32[i6 + 20 >> 2] = 2;
  HEAP32[i6 + 32 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 d18 = +HEAPF64[HEAP32[i4 >> 2] >> 3];
 i17 = HEAP32[71600] | 0;
 i11 = HEAP32[i17 + 60 >> 2] | 0;
 if ((HEAP32[i17 + 92 >> 2] | 0) == 0) {
  i14 = HEAP32[i11 + 4 >> 2] | 0;
  d19 = +HEAPF64[i17 >> 3];
  d20 = +HEAPF64[i17 + 8 >> 3];
  i17 = _emscripten_realloc_async_context(32) | 0;
  HEAP32[i3 >> 2] = FUNCTION_TABLE_idddd[i14 & 3](d18, d7, d19, d20) | 0;
  if (___async) {
   HEAP32[i17 >> 2] = 229;
   i21 = i17 + 4 | 0;
   HEAP32[i21 >> 2] = i6;
   i22 = i17 + 8 | 0;
   HEAPF64[i22 >> 3] = d7;
   i23 = i17 + 16 | 0;
   HEAP32[i23 >> 2] = i8;
   i24 = i17 + 20 | 0;
   HEAP32[i24 >> 2] = i9;
   i25 = i17 + 24 | 0;
   i26 = HEAP32[i5 >> 2] | 0;
   HEAP32[i25 >> 2] = i26;
   i27 = i17 + 28 | 0;
   i28 = HEAP32[i4 >> 2] | 0;
   HEAP32[i27 >> 2] = i28;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = HEAP32[i3 >> 2];
  ___async_unwind = 0;
  HEAP32[i17 >> 2] = 229;
  i21 = i17 + 4 | 0;
  HEAP32[i21 >> 2] = i6;
  i22 = i17 + 8 | 0;
  HEAPF64[i22 >> 3] = d7;
  i23 = i17 + 16 | 0;
  HEAP32[i23 >> 2] = i8;
  i24 = i17 + 20 | 0;
  HEAP32[i24 >> 2] = i9;
  i25 = i17 + 24 | 0;
  i26 = HEAP32[i5 >> 2] | 0;
  HEAP32[i25 >> 2] = i26;
  i27 = i17 + 28 | 0;
  i28 = HEAP32[i4 >> 2] | 0;
  HEAP32[i27 >> 2] = i28;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i28 = HEAP32[i11 + 4 >> 2] | 0;
 if ((HEAP32[i11 + 292 >> 2] | 0) == 0) {
  i11 = _emscripten_realloc_async_context(32) | 0;
  i27 = FUNCTION_TABLE_idddd[i28 & 3](d18, d7, d18, d7) | 0;
  if (___async) {
   HEAP32[i11 >> 2] = 228;
   i29 = i11 + 4 | 0;
   HEAP32[i29 >> 2] = i6;
   i30 = i11 + 8 | 0;
   HEAPF64[i30 >> 3] = d7;
   i31 = i11 + 16 | 0;
   HEAP32[i31 >> 2] = i8;
   i32 = i11 + 20 | 0;
   HEAP32[i32 >> 2] = i9;
   i33 = i11 + 24 | 0;
   i34 = HEAP32[i5 >> 2] | 0;
   HEAP32[i33 >> 2] = i34;
   i35 = i11 + 28 | 0;
   i36 = HEAP32[i4 >> 2] | 0;
   HEAP32[i35 >> 2] = i36;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i27;
  ___async_unwind = 0;
  HEAP32[i11 >> 2] = 228;
  i29 = i11 + 4 | 0;
  HEAP32[i29 >> 2] = i6;
  i30 = i11 + 8 | 0;
  HEAPF64[i30 >> 3] = d7;
  i31 = i11 + 16 | 0;
  HEAP32[i31 >> 2] = i8;
  i32 = i11 + 20 | 0;
  HEAP32[i32 >> 2] = i9;
  i33 = i11 + 24 | 0;
  i34 = HEAP32[i5 >> 2] | 0;
  HEAP32[i33 >> 2] = i34;
  i35 = i11 + 28 | 0;
  i36 = HEAP32[i4 >> 2] | 0;
  HEAP32[i35 >> 2] = i36;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  i36 = _emscripten_realloc_async_context(32) | 0;
  i35 = FUNCTION_TABLE_idddd[i28 & 3](0.0, 0.0, d18, d7) | 0;
  if (___async) {
   HEAP32[i36 >> 2] = 227;
   i37 = i36 + 4 | 0;
   HEAP32[i37 >> 2] = i6;
   i38 = i36 + 8 | 0;
   HEAPF64[i38 >> 3] = d7;
   i39 = i36 + 16 | 0;
   HEAP32[i39 >> 2] = i8;
   i40 = i36 + 20 | 0;
   i41 = HEAP32[i5 >> 2] | 0;
   HEAP32[i40 >> 2] = i41;
   i42 = i36 + 24 | 0;
   i43 = HEAP32[i4 >> 2] | 0;
   HEAP32[i42 >> 2] = i43;
   i44 = i36 + 28 | 0;
   HEAP32[i44 >> 2] = i9;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i35;
  ___async_unwind = 0;
  HEAP32[i36 >> 2] = 227;
  i37 = i36 + 4 | 0;
  HEAP32[i37 >> 2] = i6;
  i38 = i36 + 8 | 0;
  HEAPF64[i38 >> 3] = d7;
  i39 = i36 + 16 | 0;
  HEAP32[i39 >> 2] = i8;
  i40 = i36 + 20 | 0;
  i41 = HEAP32[i5 >> 2] | 0;
  HEAP32[i40 >> 2] = i41;
  i42 = i36 + 24 | 0;
  i43 = HEAP32[i4 >> 2] | 0;
  HEAP32[i42 >> 2] = i43;
  i44 = i36 + 28 | 0;
  HEAP32[i44 >> 2] = i9;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
}
function _calcline__async_cb211(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, d18 = 0.0, d19 = 0.0, d20 = 0.0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 i6 = HEAP32[i1 + 4 >> 2] | 0;
 d7 = +HEAPF64[i1 + 8 >> 3];
 i8 = HEAP32[i1 + 16 >> 2] | 0;
 i9 = HEAP32[i1 + 20 >> 2] | 0;
 i10 = HEAP32[i1 + 28 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[i1 + 24 >> 2];
 HEAP32[i4 >> 2] = i10;
 HEAP32[i3 >> 2] = HEAP32[___async_retval >> 2];
 i10 = HEAP32[i3 >> 2] | 0;
 if ((i10 | 0) == 2147483647) {
  i11 = (HEAP32[71600] | 0) + 144 | 0;
 } else {
  if ((i10 | 0) < 0) {
   i1 = HEAP32[71600] | 0;
   i12 = HEAP32[i1 + 124 >> 2] | 0;
   i13 = i12 + -1 | 0;
   i14 = i12;
   i15 = i1;
   i16 = (Math_imul(((0 - i10 | 0) / (i13 | 0) | 0) + 1 | 0, i13) | 0) + i10 | 0;
  } else {
   i13 = HEAP32[71600] | 0;
   i14 = HEAP32[i13 + 124 >> 2] | 0;
   i15 = i13;
   i16 = i10;
  }
  i11 = i15 + (((i16 | 0) % (i14 + -1 | 0) | 0) + 1) + 144 | 0;
 }
 HEAP8[HEAP32[i5 >> 2] >> 0] = HEAP8[i11 >> 0] | 0;
 do {
  i11 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
  i14 = (HEAP32[i4 >> 2] | 0) + 40 | 0;
  if (!(i14 >>> 0 < i9 >>> 0)) {
   i17 = 23;
   break;
  }
  HEAP32[i4 >> 2] = i14;
  HEAP32[i5 >> 2] = i11;
 } while ((HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0) != 0);
 if ((i17 | 0) == 23) {
  HEAP32[i6 + 20 >> 2] = 2;
  HEAP32[i6 + 32 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 d18 = +HEAPF64[HEAP32[i4 >> 2] >> 3];
 i17 = HEAP32[71600] | 0;
 i11 = HEAP32[i17 + 60 >> 2] | 0;
 if ((HEAP32[i17 + 92 >> 2] | 0) == 0) {
  i14 = HEAP32[i11 + 4 >> 2] | 0;
  d19 = +HEAPF64[i17 >> 3];
  d20 = +HEAPF64[i17 + 8 >> 3];
  i17 = _emscripten_realloc_async_context(32) | 0;
  i16 = FUNCTION_TABLE_idddd[i14 & 3](d18, d7, d19, d20) | 0;
  if (___async) {
   HEAP32[i17 >> 2] = 229;
   i21 = i17 + 4 | 0;
   HEAP32[i21 >> 2] = i6;
   i22 = i17 + 8 | 0;
   HEAPF64[i22 >> 3] = d7;
   i23 = i17 + 16 | 0;
   HEAP32[i23 >> 2] = i8;
   i24 = i17 + 20 | 0;
   HEAP32[i24 >> 2] = i9;
   i25 = i17 + 24 | 0;
   i26 = HEAP32[i5 >> 2] | 0;
   HEAP32[i25 >> 2] = i26;
   i27 = i17 + 28 | 0;
   i28 = HEAP32[i4 >> 2] | 0;
   HEAP32[i27 >> 2] = i28;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i16;
  ___async_unwind = 0;
  HEAP32[i17 >> 2] = 229;
  i21 = i17 + 4 | 0;
  HEAP32[i21 >> 2] = i6;
  i22 = i17 + 8 | 0;
  HEAPF64[i22 >> 3] = d7;
  i23 = i17 + 16 | 0;
  HEAP32[i23 >> 2] = i8;
  i24 = i17 + 20 | 0;
  HEAP32[i24 >> 2] = i9;
  i25 = i17 + 24 | 0;
  i26 = HEAP32[i5 >> 2] | 0;
  HEAP32[i25 >> 2] = i26;
  i27 = i17 + 28 | 0;
  i28 = HEAP32[i4 >> 2] | 0;
  HEAP32[i27 >> 2] = i28;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i28 = HEAP32[i11 + 4 >> 2] | 0;
 if ((HEAP32[i11 + 292 >> 2] | 0) == 0) {
  i11 = _emscripten_realloc_async_context(32) | 0;
  HEAP32[i3 >> 2] = FUNCTION_TABLE_idddd[i28 & 3](d18, d7, d18, d7) | 0;
  if (___async) {
   HEAP32[i11 >> 2] = 228;
   i29 = i11 + 4 | 0;
   HEAP32[i29 >> 2] = i6;
   i30 = i11 + 8 | 0;
   HEAPF64[i30 >> 3] = d7;
   i31 = i11 + 16 | 0;
   HEAP32[i31 >> 2] = i8;
   i32 = i11 + 20 | 0;
   HEAP32[i32 >> 2] = i9;
   i33 = i11 + 24 | 0;
   i34 = HEAP32[i5 >> 2] | 0;
   HEAP32[i33 >> 2] = i34;
   i35 = i11 + 28 | 0;
   i36 = HEAP32[i4 >> 2] | 0;
   HEAP32[i35 >> 2] = i36;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = HEAP32[i3 >> 2];
  ___async_unwind = 0;
  HEAP32[i11 >> 2] = 228;
  i29 = i11 + 4 | 0;
  HEAP32[i29 >> 2] = i6;
  i30 = i11 + 8 | 0;
  HEAPF64[i30 >> 3] = d7;
  i31 = i11 + 16 | 0;
  HEAP32[i31 >> 2] = i8;
  i32 = i11 + 20 | 0;
  HEAP32[i32 >> 2] = i9;
  i33 = i11 + 24 | 0;
  i34 = HEAP32[i5 >> 2] | 0;
  HEAP32[i33 >> 2] = i34;
  i35 = i11 + 28 | 0;
  i36 = HEAP32[i4 >> 2] | 0;
  HEAP32[i35 >> 2] = i36;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  i36 = _emscripten_realloc_async_context(32) | 0;
  i35 = FUNCTION_TABLE_idddd[i28 & 3](0.0, 0.0, d18, d7) | 0;
  if (___async) {
   HEAP32[i36 >> 2] = 227;
   i37 = i36 + 4 | 0;
   HEAP32[i37 >> 2] = i6;
   i38 = i36 + 8 | 0;
   HEAPF64[i38 >> 3] = d7;
   i39 = i36 + 16 | 0;
   HEAP32[i39 >> 2] = i8;
   i40 = i36 + 20 | 0;
   i41 = HEAP32[i5 >> 2] | 0;
   HEAP32[i40 >> 2] = i41;
   i42 = i36 + 24 | 0;
   i43 = HEAP32[i4 >> 2] | 0;
   HEAP32[i42 >> 2] = i43;
   i44 = i36 + 28 | 0;
   HEAP32[i44 >> 2] = i9;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i35;
  ___async_unwind = 0;
  HEAP32[i36 >> 2] = 227;
  i37 = i36 + 4 | 0;
  HEAP32[i37 >> 2] = i6;
  i38 = i36 + 8 | 0;
  HEAPF64[i38 >> 3] = d7;
  i39 = i36 + 16 | 0;
  HEAP32[i39 >> 2] = i8;
  i40 = i36 + 20 | 0;
  i41 = HEAP32[i5 >> 2] | 0;
  HEAP32[i40 >> 2] = i41;
  i42 = i36 + 24 | 0;
  i43 = HEAP32[i4 >> 2] | 0;
  HEAP32[i42 >> 2] = i43;
  i44 = i36 + 28 | 0;
  HEAP32[i44 >> 2] = i9;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
}
function _calcline__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, d18 = 0.0, d19 = 0.0, d20 = 0.0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 i6 = HEAP32[i1 + 4 >> 2] | 0;
 d7 = +HEAPF64[i1 + 8 >> 3];
 i8 = HEAP32[i1 + 16 >> 2] | 0;
 i9 = HEAP32[i1 + 24 >> 2] | 0;
 i10 = HEAP32[i1 + 28 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[i1 + 20 >> 2];
 HEAP32[i4 >> 2] = i9;
 HEAP32[i3 >> 2] = HEAP32[___async_retval >> 2];
 i9 = HEAP32[i3 >> 2] | 0;
 if ((i9 | 0) == 2147483647) {
  i11 = (HEAP32[71600] | 0) + 144 | 0;
 } else {
  if ((i9 | 0) < 0) {
   i1 = HEAP32[71600] | 0;
   i12 = HEAP32[i1 + 124 >> 2] | 0;
   i13 = i12 + -1 | 0;
   i14 = i12;
   i15 = i1;
   i16 = (Math_imul(((0 - i9 | 0) / (i13 | 0) | 0) + 1 | 0, i13) | 0) + i9 | 0;
  } else {
   i13 = HEAP32[71600] | 0;
   i14 = HEAP32[i13 + 124 >> 2] | 0;
   i15 = i13;
   i16 = i9;
  }
  i11 = i15 + (((i16 | 0) % (i14 + -1 | 0) | 0) + 1) + 144 | 0;
 }
 HEAP8[HEAP32[i5 >> 2] >> 0] = HEAP8[i11 >> 0] | 0;
 do {
  i11 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
  i14 = (HEAP32[i4 >> 2] | 0) + 40 | 0;
  if (!(i14 >>> 0 < i10 >>> 0)) {
   i17 = 23;
   break;
  }
  HEAP32[i4 >> 2] = i14;
  HEAP32[i5 >> 2] = i11;
 } while ((HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0) != 0);
 if ((i17 | 0) == 23) {
  HEAP32[i6 + 20 >> 2] = 2;
  HEAP32[i6 + 32 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 d18 = +HEAPF64[HEAP32[i4 >> 2] >> 3];
 i17 = HEAP32[71600] | 0;
 i11 = HEAP32[i17 + 60 >> 2] | 0;
 if ((HEAP32[i17 + 92 >> 2] | 0) == 0) {
  i14 = HEAP32[i11 + 4 >> 2] | 0;
  d19 = +HEAPF64[i17 >> 3];
  d20 = +HEAPF64[i17 + 8 >> 3];
  i17 = _emscripten_realloc_async_context(32) | 0;
  i16 = FUNCTION_TABLE_idddd[i14 & 3](d18, d7, d19, d20) | 0;
  if (___async) {
   HEAP32[i17 >> 2] = 229;
   i21 = i17 + 4 | 0;
   HEAP32[i21 >> 2] = i6;
   i22 = i17 + 8 | 0;
   HEAPF64[i22 >> 3] = d7;
   i23 = i17 + 16 | 0;
   HEAP32[i23 >> 2] = i8;
   i24 = i17 + 20 | 0;
   HEAP32[i24 >> 2] = i10;
   i25 = i17 + 24 | 0;
   i26 = HEAP32[i5 >> 2] | 0;
   HEAP32[i25 >> 2] = i26;
   i27 = i17 + 28 | 0;
   i28 = HEAP32[i4 >> 2] | 0;
   HEAP32[i27 >> 2] = i28;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i16;
  ___async_unwind = 0;
  HEAP32[i17 >> 2] = 229;
  i21 = i17 + 4 | 0;
  HEAP32[i21 >> 2] = i6;
  i22 = i17 + 8 | 0;
  HEAPF64[i22 >> 3] = d7;
  i23 = i17 + 16 | 0;
  HEAP32[i23 >> 2] = i8;
  i24 = i17 + 20 | 0;
  HEAP32[i24 >> 2] = i10;
  i25 = i17 + 24 | 0;
  i26 = HEAP32[i5 >> 2] | 0;
  HEAP32[i25 >> 2] = i26;
  i27 = i17 + 28 | 0;
  i28 = HEAP32[i4 >> 2] | 0;
  HEAP32[i27 >> 2] = i28;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i28 = HEAP32[i11 + 4 >> 2] | 0;
 if ((HEAP32[i11 + 292 >> 2] | 0) == 0) {
  i11 = _emscripten_realloc_async_context(32) | 0;
  i27 = FUNCTION_TABLE_idddd[i28 & 3](d18, d7, d18, d7) | 0;
  if (___async) {
   HEAP32[i11 >> 2] = 228;
   i29 = i11 + 4 | 0;
   HEAP32[i29 >> 2] = i6;
   i30 = i11 + 8 | 0;
   HEAPF64[i30 >> 3] = d7;
   i31 = i11 + 16 | 0;
   HEAP32[i31 >> 2] = i8;
   i32 = i11 + 20 | 0;
   HEAP32[i32 >> 2] = i10;
   i33 = i11 + 24 | 0;
   i34 = HEAP32[i5 >> 2] | 0;
   HEAP32[i33 >> 2] = i34;
   i35 = i11 + 28 | 0;
   i36 = HEAP32[i4 >> 2] | 0;
   HEAP32[i35 >> 2] = i36;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i27;
  ___async_unwind = 0;
  HEAP32[i11 >> 2] = 228;
  i29 = i11 + 4 | 0;
  HEAP32[i29 >> 2] = i6;
  i30 = i11 + 8 | 0;
  HEAPF64[i30 >> 3] = d7;
  i31 = i11 + 16 | 0;
  HEAP32[i31 >> 2] = i8;
  i32 = i11 + 20 | 0;
  HEAP32[i32 >> 2] = i10;
  i33 = i11 + 24 | 0;
  i34 = HEAP32[i5 >> 2] | 0;
  HEAP32[i33 >> 2] = i34;
  i35 = i11 + 28 | 0;
  i36 = HEAP32[i4 >> 2] | 0;
  HEAP32[i35 >> 2] = i36;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  i36 = _emscripten_realloc_async_context(32) | 0;
  HEAP32[i3 >> 2] = FUNCTION_TABLE_idddd[i28 & 3](0.0, 0.0, d18, d7) | 0;
  if (___async) {
   HEAP32[i36 >> 2] = 227;
   i37 = i36 + 4 | 0;
   HEAP32[i37 >> 2] = i6;
   i38 = i36 + 8 | 0;
   HEAPF64[i38 >> 3] = d7;
   i39 = i36 + 16 | 0;
   HEAP32[i39 >> 2] = i8;
   i40 = i36 + 20 | 0;
   i41 = HEAP32[i5 >> 2] | 0;
   HEAP32[i40 >> 2] = i41;
   i42 = i36 + 24 | 0;
   i43 = HEAP32[i4 >> 2] | 0;
   HEAP32[i42 >> 2] = i43;
   i44 = i36 + 28 | 0;
   HEAP32[i44 >> 2] = i10;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = HEAP32[i3 >> 2];
  ___async_unwind = 0;
  HEAP32[i36 >> 2] = 227;
  i37 = i36 + 4 | 0;
  HEAP32[i37 >> 2] = i6;
  i38 = i36 + 8 | 0;
  HEAPF64[i38 >> 3] = d7;
  i39 = i36 + 16 | 0;
  HEAP32[i39 >> 2] = i8;
  i40 = i36 + 20 | 0;
  i41 = HEAP32[i5 >> 2] | 0;
  HEAP32[i40 >> 2] = i41;
  i42 = i36 + 24 | 0;
  i43 = HEAP32[i4 >> 2] | 0;
  HEAP32[i42 >> 2] = i43;
  i44 = i36 + 28 | 0;
  HEAP32[i44 >> 2] = i10;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
}
function _do_autopilot(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var d6 = 0.0, i7 = 0, d8 = 0.0, i9 = 0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0;
 i5 = STACKTOP;
 if ((HEAP32[i1 + 104 >> 2] | 0) == 0) {
  d6 = +HEAPF64[36316];
 } else {
  HEAPF64[36316] = 1.0e3;
  HEAPF64[36317] = 0.0;
  HEAP32[72636] = 0;
  HEAP32[72638] = 0;
  d6 = 1.0e3;
 }
 i7 = i1 + 1184 | 0;
 d8 = +HEAPF64[i7 >> 3];
 i9 = i1 + 1192 | 0;
 d10 = +HEAPF64[i9 >> 3];
 d11 = d8 - d10;
 if (d11 < d6) {
  HEAPF64[36316] = d11;
  HEAP32[72638] = 0;
  d12 = +HEAPF64[i9 >> 3];
  d13 = +HEAPF64[i7 >> 3];
 } else {
  d12 = d10;
  d13 = d8;
 }
 d8 = d13 - d12;
 if (d8 > +HEAPF64[36317]) {
  HEAPF64[36316] = d8;
  HEAPF64[36317] = +HEAPF64[i7 >> 3] - +HEAPF64[i9 >> 3];
  HEAP32[72638] = 0;
 }
 i9 = i1 + 128 | 0;
 i7 = HEAP32[i9 >> 2] | 0;
 i14 = i7 + -1 | 0;
 if ((i14 | 0) > 0) {
  i15 = HEAP32[i1 + 16 >> 2] | 0;
  d8 = +HEAPF64[i15 >> 3];
  i16 = 0;
  i17 = 0;
  while (1) {
   i16 = i16 + 1 | 0;
   d12 = d8;
   d8 = +HEAPF64[i15 + (i16 << 3) >> 3];
   i18 = (d12 == d8 & 1) + i17 | 0;
   if ((i16 | 0) >= (i14 | 0)) {
    i19 = i18;
    break;
   } else {
    i17 = i18;
   }
  }
 } else {
  i19 = 0;
 }
 i17 = HEAP32[72636] | 0;
 do {
  if ((i17 | 0) < 1) {
   i14 = i1 + 120 | 0;
   if ((HEAP32[i14 >> 2] | 0) != 0 ? (i19 | 0) > ((i7 | 0) / 2 | 0 | 0) : 0) {
    i20 = 0;
    HEAP32[i4 >> 2] = i20;
    STACKTOP = i5;
    return;
   }
   HEAP32[72638] = (HEAP32[72638] | 0) + 1;
   _ui_tbreak();
   i16 = i1 + 132 | 0;
   i15 = i1 + 36 | 0;
   i18 = i1 + 136 | 0;
   i21 = i1 + 144 | 0;
   i22 = 40;
   do {
    i22 = i22 + -1 | 0;
    i23 = _rand() | 0;
    HEAP32[72640] = ((i23 | 0) % ((HEAP32[i9 >> 2] | 0) + -4 | 0) | 0) + 2;
    i23 = _rand() | 0;
    HEAP32[72642] = ((i23 | 0) % ((HEAP32[i16 >> 2] | 0) + -4 | 0) | 0) + 2;
    i24 = (_rand() | 0) % 50 | 0;
    HEAP32[72636] = i24;
    i23 = HEAP32[72640] | 0;
    i25 = HEAP32[72642] | 0;
    i26 = i25 + -2 | 0;
    i27 = i23 + 2 | 0;
    i28 = i25 + 2 | 0;
    i25 = 0;
    i29 = i23 + -2 | 0;
    while (1) {
     i23 = HEAP32[i15 >> 2] | 0;
     i30 = HEAP32[i18 >> 2] | 0;
     i31 = HEAP8[i21 >> 0] | 0;
     i32 = i25;
     i33 = i26;
     while (1) {
      i32 = ((HEAP8[i23 + ((Math_imul(i30, i33) | 0) + i29) >> 0] | 0) == i31 << 24 >> 24 & 1) + i32 | 0;
      if ((i33 | 0) >= (i28 | 0)) {
       break;
      } else {
       i33 = i33 + 1 | 0;
      }
     }
     if ((i29 | 0) < (i27 | 0)) {
      i25 = i32;
      i29 = i29 + 1 | 0;
     } else {
      break;
     }
    }
    i34 = (i22 | 0) > 0;
   } while (((i32 | 0) == 0 | (i32 | 0) > 4) & i34);
   if (i34) {
    HEAP32[72644] = 256;
    i35 = i24;
    break;
   } else {
    i36 = 1e3;
   }
   do {
    i36 = i36 + -1 | 0;
    i22 = _rand() | 0;
    HEAP32[72640] = ((i22 | 0) % ((HEAP32[i9 >> 2] | 0) + -4 | 0) | 0) + 2;
    i22 = _rand() | 0;
    HEAP32[72642] = ((i22 | 0) % ((HEAP32[i16 >> 2] | 0) + -4 | 0) | 0) + 2;
    i37 = (_rand() | 0) % 50 | 0;
    HEAP32[72636] = i37;
    i22 = HEAP32[72640] | 0;
    i21 = i22 + -2 | 0;
    i29 = HEAP32[72642] | 0;
    i25 = i29 + -2 | 0;
    i27 = i22 + 2 | 0;
    i28 = 0;
    i26 = i21;
    while (1) {
     i33 = i28;
     i31 = i25;
     while (1) {
      i30 = i33;
      i23 = i21;
      while (1) {
       i38 = (i23 | 0) == (i26 | 0);
       i39 = i30;
       i40 = i25;
       while (1) {
        if (i38 | (i40 | 0) == (i31 | 0)) {
         i41 = i39;
        } else {
         i42 = HEAP32[i15 >> 2] | 0;
         i43 = HEAP32[i18 >> 2] | 0;
         i44 = HEAP8[i42 + ((Math_imul(i43, i31) | 0) + i26) >> 0] | 0;
         i41 = (i44 << 24 >> 24 == (HEAP8[i42 + ((Math_imul(i43, i40) | 0) + i23) >> 0] | 0) & 1) + i39 | 0;
        }
        if ((i40 | 0) < (i29 + 1 | 0)) {
         i39 = i41;
         i40 = i40 + 1 | 0;
        } else {
         break;
        }
       }
       if ((i23 | 0) < (i22 + 1 | 0)) {
        i30 = i41;
        i23 = i23 + 1 | 0;
       } else {
        break;
       }
      }
      if ((i31 | 0) < (i29 + 1 | 0)) {
       i33 = i41;
       i31 = i31 + 1 | 0;
      } else {
       break;
      }
     }
     if ((i26 | 0) < (i27 | 0)) {
      i28 = i41;
      i26 = i26 + 1 | 0;
     } else {
      break;
     }
    }
    i45 = (i36 | 0) > 0;
   } while ((i41 | 0) > 2 & i45);
   if (i45) {
    HEAP32[72644] = 256;
    i35 = i37;
    break;
   }
   if ((HEAP32[i14 >> 2] | 0) == 0) {
    HEAP32[72644] = 1024;
    i18 = i37 >> 1;
    HEAP32[72636] = i18;
    i35 = i18;
    break;
   } else {
    HEAP32[72644] = 0;
    HEAP32[72636] = 20;
    i35 = 20;
    break;
   }
  } else {
   i35 = i17;
  }
 } while (0);
 HEAP32[72636] = i35 + -1;
 HEAP32[i2 >> 2] = HEAP32[72640];
 HEAP32[i3 >> 2] = HEAP32[72642];
 i20 = HEAP32[72644] | 0;
 HEAP32[i4 >> 2] = i20;
 STACKTOP = i5;
 return;
}
function _do_fractal__async_cb142(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[71600] | 0;
 i3 = 0;
 L2 : while (1) {
  i4 = HEAP32[i2 + 56 >> 2] | 0;
  i5 = HEAP32[i2 + 132 >> 2] | 0;
  i6 = i4 + (i5 * 40 | 0) | 0;
  if ((i3 | 0) < (i5 | 0)) {
   i5 = Math_imul(HEAP32[i2 + 136 >> 2] | 0, i3) | 0;
   i7 = i2;
   i8 = i4 + (i3 * 40 | 0) | 0;
   i9 = (HEAP32[i2 + 36 >> 2] | 0) + i5 | 0;
   while (1) {
    if ((HEAP32[i8 + 20 >> 2] | 0) != 0) {
     i10 = 6;
     break L2;
    }
    i5 = i8 + 80 | 0;
    if (i5 >>> 0 < i6 >>> 0) {
     i8 = i5;
     i9 = i9 + (HEAP32[i7 + 136 >> 2] << 1) | 0;
    } else {
     i11 = i7;
     break;
    }
   }
  } else {
   i11 = i2;
  }
  i7 = i3 + 1 | 0;
  if ((i7 | 0) < 2) {
   i2 = i11;
   i3 = i7;
  } else {
   break;
  }
 }
 if ((i10 | 0) == 6) {
  i2 = _emscripten_realloc_async_context(20) | 0;
  _calcline(i9, i8);
  if (___async) {
   HEAP32[i2 >> 2] = 221;
   i12 = i2 + 4 | 0;
   HEAP32[i12 >> 2] = i3;
   i13 = i2 + 8 | 0;
   HEAP32[i13 >> 2] = i9;
   i14 = i2 + 12 | 0;
   HEAP32[i14 >> 2] = i8;
   i15 = i2 + 16 | 0;
   HEAP32[i15 >> 2] = i6;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i2 >> 2] = 221;
  i12 = i2 + 4 | 0;
  HEAP32[i12 >> 2] = i3;
  i13 = i2 + 8 | 0;
  HEAP32[i13 >> 2] = i9;
  i14 = i2 + 12 | 0;
  HEAP32[i14 >> 2] = i8;
  i15 = i2 + 16 | 0;
  HEAP32[i15 >> 2] = i6;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 HEAP32[i11 + 68 >> 2] = 0;
 HEAP32[i11 + 72 >> 2] = 286600;
 i11 = HEAP32[71600] | 0;
 HEAP32[i11 + 64 >> 2] = 0;
 i6 = HEAP32[i11 + 52 >> 2] | 0;
 i15 = HEAP32[i11 + 128 >> 2] | 0;
 i2 = i6 + (i15 * 40 | 0) | 0;
 if ((i15 | 0) > 0) {
  i8 = i11 + 68 | 0;
  i14 = i6;
  do {
   if ((HEAP32[i14 + 20 >> 2] | 0) != 0) {
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   }
   i14 = i14 + 40 | 0;
  } while (i14 >>> 0 < i2 >>> 0);
  i16 = i6;
  i17 = i15;
  i18 = i11;
  i19 = 0;
 } else {
  i16 = i6;
  i17 = i15;
  i18 = i11;
  i19 = 0;
 }
 L24 : while (1) {
  i20 = i16 + (i17 * 40 | 0) | 0;
  if ((i19 | 0) < (i17 | 0)) {
   i11 = i18;
   i21 = i16 + (i19 * 40 | 0) | 0;
   i22 = (HEAP32[i18 + 36 >> 2] | 0) + i19 | 0;
   while (1) {
    if ((HEAP32[i21 + 20 >> 2] | 0) != 0) {
     i10 = 19;
     break L24;
    }
    i15 = i21 + 80 | 0;
    if (i15 >>> 0 < i20 >>> 0) {
     i21 = i15;
     i22 = i22 + 2 | 0;
    } else {
     i23 = i11;
     break;
    }
   }
  } else {
   i23 = i18;
  }
  i11 = i19 + 1 | 0;
  if ((i11 | 0) >= 2) {
   break;
  }
  i16 = HEAP32[i23 + 52 >> 2] | 0;
  i17 = HEAP32[i23 + 128 >> 2] | 0;
  i18 = i23;
  i19 = i11;
 }
 if ((i10 | 0) == 19) {
  i10 = _emscripten_realloc_async_context(20) | 0;
  _calccolumn(i22, i21);
  if (___async) {
   HEAP32[i10 >> 2] = 223;
   i24 = i10 + 4 | 0;
   HEAP32[i24 >> 2] = i19;
   i25 = i10 + 8 | 0;
   HEAP32[i25 >> 2] = i22;
   i26 = i10 + 12 | 0;
   HEAP32[i26 >> 2] = i21;
   i27 = i10 + 16 | 0;
   HEAP32[i27 >> 2] = i20;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i10 >> 2] = 223;
  i24 = i10 + 4 | 0;
  HEAP32[i24 >> 2] = i19;
  i25 = i10 + 8 | 0;
  HEAP32[i25 >> 2] = i22;
  i26 = i10 + 12 | 0;
  HEAP32[i26 >> 2] = i21;
  i27 = i10 + 16 | 0;
  HEAP32[i27 >> 2] = i20;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 if ((HEAP32[i23 + 140 >> 2] | 0) != 0) {
  _init_tables(i23);
  STACKTOP = i1;
  return;
 }
 i20 = HEAP32[i23 + 28 >> 2] | 0;
 if ((i20 | 0) != 0) {
  i27 = _emscripten_realloc_async_context(4) | 0;
  FUNCTION_TABLE_v[i20 & 63]();
  if (___async) {
   HEAP32[i27 >> 2] = 225;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i27 >> 2] = 225;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 HEAP32[i23 + 64 >> 2] = 0;
 HEAP32[i23 + 68 >> 2] = 0;
 HEAP32[i23 + 72 >> 2] = 286552;
 _dosymetry();
 i23 = HEAP32[71600] | 0;
 i27 = HEAP32[i23 + 28 >> 2] | 0;
 if ((i27 | 0) != 0) {
  i20 = _emscripten_realloc_async_context(4) | 0;
  FUNCTION_TABLE_v[i27 & 63]();
  if (___async) {
   HEAP32[i20 >> 2] = 226;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i20 >> 2] = 226;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 i20 = HEAP32[i23 + 52 >> 2] | 0;
 i27 = HEAP32[i23 + 128 >> 2] | 0;
 i10 = i20 + (i27 * 40 | 0) | 0;
 if ((i27 | 0) > 0) {
  i27 = HEAP32[i23 + 16 >> 2] | 0;
  i21 = i20;
  while (1) {
   HEAPF64[i27 >> 3] = +HEAPF64[i21 >> 3];
   i21 = i21 + 40 | 0;
   if (!(i21 >>> 0 < i10 >>> 0)) {
    break;
   } else {
    i27 = i27 + 8 | 0;
   }
  }
 }
 i27 = HEAP32[i23 + 56 >> 2] | 0;
 i10 = HEAP32[i23 + 132 >> 2] | 0;
 i21 = i27 + (i10 * 40 | 0) | 0;
 if ((i10 | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i10 = HEAP32[i23 + 20 >> 2] | 0;
 i23 = i27;
 while (1) {
  HEAPF64[i10 >> 3] = +HEAPF64[i23 >> 3];
  i23 = i23 + 40 | 0;
  if (!(i23 >>> 0 < i21 >>> 0)) {
   break;
  } else {
   i10 = i10 + 8 | 0;
  }
 }
 STACKTOP = i1;
 return;
}
function _scene4__async_cb39(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[i1 + 8 >> 2];
 i1 = (HEAP32[i3 >> 2] | 0) + 1 | 0;
 if ((i1 | 0) != 5) {
  HEAP32[i3 >> 2] = i1;
  i1 = HEAP32[12936] | 0;
  if (((HEAP32[i1 + 56 >> 2] | 0) + -25 | 0) > 0) {
   i5 = i1;
   i1 = 0;
   do {
    i6 = i1 + 10 | 0;
    _aa_puts(i5, i6, 6, 0, 179528);
    _aa_puts(HEAP32[12936] | 0, i6, 9, 0, 179528);
    _aa_puts(HEAP32[12936] | 0, i6, 12, 0, 179528);
    _aa_puts(HEAP32[12936] | 0, i6, 15, 0, 179528);
    i1 = i1 + 6 | 0;
    i5 = HEAP32[12936] | 0;
   } while ((i1 | 0) < ((HEAP32[i5 + 56 >> 2] | 0) + -25 | 0));
  }
  i5 = _emscripten_realloc_async_context(12) | 0;
  _bbflushwait(1e5);
  if (___async) {
   HEAP32[i5 >> 2] = 99;
   i7 = i5 + 4 | 0;
   HEAP32[i7 >> 2] = i4;
   i8 = i5 + 8 | 0;
   i9 = HEAP32[i3 >> 2] | 0;
   HEAP32[i8 >> 2] = i9;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i5 >> 2] = 99;
  i7 = i5 + 4 | 0;
  HEAP32[i7 >> 2] = i4;
  i8 = i5 + 8 | 0;
  i9 = HEAP32[i3 >> 2] | 0;
  HEAP32[i8 >> 2] = i9;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i9 = HEAP32[12936] | 0;
 i8 = HEAP32[i9 + 60 >> 2] | 0;
 if ((i8 | 0) < 20) {
  i10 = (i8 | 0) / 2 | 0;
 } else {
  i10 = i8 + -10 | 0;
 }
 i3 = i10 + -6 | 0;
 if ((i3 | 0) < 1) {
  i10 = _emscripten_realloc_async_context(4) | 0;
  _bbflushwait(7e5);
  if (___async) {
   HEAP32[i10 >> 2] = 101;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i10 >> 2] = 101;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i10 = ~~(7.0e5 / +(i3 | 0));
 if ((i8 | 0) > 13) {
  if (((HEAP32[i9 + 56 >> 2] | 0) + -25 | 0) > 0) {
   i3 = i9;
   i5 = 0;
   while (1) {
    i7 = i5 + 10 | 0;
    i1 = i3;
    i6 = 0;
    while (1) {
     i11 = i6 + 6 | 0;
     _aa_puts(i1, i7, i11, 0, 179544);
     _aa_puts(HEAP32[12936] | 0, i7, i11 + 1 | 0, 0, 179552);
     i11 = i6 + 3 | 0;
     if ((i11 | 0) >= 10) {
      break;
     }
     i1 = HEAP32[12936] | 0;
     i6 = i11;
    }
    i5 = i5 + 6 | 0;
    i6 = HEAP32[12936] | 0;
    if ((i5 | 0) >= ((HEAP32[i6 + 56 >> 2] | 0) + -25 | 0)) {
     i12 = i6;
     break;
    } else {
     i3 = i6;
    }
   }
  } else {
   i12 = i9;
  }
  i3 = i4 + -2 | 0;
  _aa_puts(i12, i3, (HEAP32[i12 + 60 >> 2] | 0) + -1 | 0, 0, 179560);
  i12 = i3 + ((_rand() | 0) % 5 | 0) | 0;
  i3 = _emscripten_realloc_async_context(16) | 0;
  _bbflushwait(i10);
  if (___async) {
   HEAP32[i3 >> 2] = 102;
   i13 = i3 + 4 | 0;
   HEAP32[i13 >> 2] = i10;
   i14 = i3 + 8 | 0;
   HEAP32[i14 >> 2] = i12;
   i15 = i3 + 12 | 0;
   HEAP32[i15 >> 2] = 6;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i3 >> 2] = 102;
  i13 = i3 + 4 | 0;
  HEAP32[i13 >> 2] = i10;
  i14 = i3 + 8 | 0;
  HEAP32[i14 >> 2] = i12;
  i15 = i3 + 12 | 0;
  HEAP32[i15 >> 2] = 6;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 if (6 >= (i8 + -10 | 0)) {
  _free(HEAP32[i9 + 160 >> 2] | 0);
  i8 = HEAP32[12936] | 0;
  HEAP32[i8 + 160 >> 2] = _malloc(Math_imul((HEAP32[i8 + 156 >> 2] | 0) + 4 | 0, HEAP32[i8 + 152 >> 2] | 0) | 0) | 0;
  i8 = HEAP32[12936] | 0;
  _backconvert(0, 0, HEAP32[i8 + 56 >> 2] | 0, HEAP32[i8 + 60 >> 2] | 0);
  HEAP32[HEAP32[22682] >> 2] = 120;
  HEAP32[34] = 0;
  i8 = _emscripten_realloc_async_context(4) | 0;
  _draw();
  if (___async) {
   HEAP32[i8 >> 2] = 104;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i8 >> 2] = 104;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 if (((HEAP32[i9 + 56 >> 2] | 0) + -25 | 0) > 0) {
  i8 = i9;
  i15 = 0;
  while (1) {
   i3 = i15 + 10 | 0;
   i12 = i8;
   i14 = 0;
   while (1) {
    i13 = i14 + 6 | 0;
    _aa_puts(i12, i3, i13, 0, 179544);
    _aa_puts(HEAP32[12936] | 0, i3, i13 + 1 | 0, 0, 179576);
    i13 = i14 + 3 | 0;
    if ((i13 | 0) >= 10) {
     break;
    }
    i12 = HEAP32[12936] | 0;
    i14 = i13;
   }
   i15 = i15 + 6 | 0;
   i14 = HEAP32[12936] | 0;
   if ((i15 | 0) >= ((HEAP32[i14 + 56 >> 2] | 0) + -25 | 0)) {
    i16 = i14;
    break;
   } else {
    i8 = i14;
   }
  }
 } else {
  i16 = i9;
 }
 _aa_puts(i16, i4 + -2 | 0, (HEAP32[i16 + 60 >> 2] | 0) + -1 | 0, 0, 179584);
 i16 = i4 + -3 + ((_rand() | 0) % 7 | 0) | 0;
 i4 = _emscripten_realloc_async_context(16) | 0;
 _bbflushwait(i10);
 if (___async) {
  HEAP32[i4 >> 2] = 103;
  i17 = i4 + 4 | 0;
  HEAP32[i17 >> 2] = 6;
  i18 = i4 + 8 | 0;
  HEAP32[i18 >> 2] = i16;
  i19 = i4 + 12 | 0;
  HEAP32[i19 >> 2] = i10;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i4 >> 2] = 103;
 i17 = i4 + 4 | 0;
 HEAP32[i17 >> 2] = 6;
 i18 = i4 + 8 | 0;
 HEAP32[i18 >> 2] = i16;
 i19 = i4 + 12 | 0;
 HEAP32[i19 >> 2] = i10;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function ___udivmoddi4(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i6 = i1;
 i7 = i2;
 i8 = i7;
 i9 = i3;
 i10 = i4;
 i11 = i10;
 if ((i8 | 0) == 0) {
  i12 = (i5 | 0) != 0;
  if ((i11 | 0) == 0) {
   if (i12) {
    HEAP32[i5 >> 2] = (i6 >>> 0) % (i9 >>> 0);
    HEAP32[i5 + 4 >> 2] = 0;
   }
   i13 = 0;
   i14 = (i6 >>> 0) / (i9 >>> 0) >>> 0;
   return (tempRet0 = i13, i14) | 0;
  } else {
   if (!i12) {
    i13 = 0;
    i14 = 0;
    return (tempRet0 = i13, i14) | 0;
   }
   HEAP32[i5 >> 2] = i1 | 0;
   HEAP32[i5 + 4 >> 2] = i2 & 0;
   i13 = 0;
   i14 = 0;
   return (tempRet0 = i13, i14) | 0;
  }
 }
 i12 = (i11 | 0) == 0;
 do {
  if ((i9 | 0) != 0) {
   if (!i12) {
    i15 = (_llvm_ctlz_i32(i11 | 0) | 0) - (_llvm_ctlz_i32(i8 | 0) | 0) | 0;
    if (i15 >>> 0 <= 31) {
     i16 = i15 + 1 | 0;
     i17 = 31 - i15 | 0;
     i18 = i15 - 31 >> 31;
     i19 = i16;
     i20 = i6 >>> (i16 >>> 0) & i18 | i8 << i17;
     i21 = i8 >>> (i16 >>> 0) & i18;
     i22 = 0;
     i23 = i6 << i17;
     break;
    }
    if ((i5 | 0) == 0) {
     i13 = 0;
     i14 = 0;
     return (tempRet0 = i13, i14) | 0;
    }
    HEAP32[i5 >> 2] = i1 | 0;
    HEAP32[i5 + 4 >> 2] = i7 | i2 & 0;
    i13 = 0;
    i14 = 0;
    return (tempRet0 = i13, i14) | 0;
   }
   i17 = i9 - 1 | 0;
   if ((i17 & i9 | 0) != 0) {
    i18 = (_llvm_ctlz_i32(i9 | 0) | 0) + 33 - (_llvm_ctlz_i32(i8 | 0) | 0) | 0;
    i16 = 64 - i18 | 0;
    i15 = 32 - i18 | 0;
    i24 = i15 >> 31;
    i25 = i18 - 32 | 0;
    i26 = i25 >> 31;
    i19 = i18;
    i20 = i15 - 1 >> 31 & i8 >>> (i25 >>> 0) | (i8 << i15 | i6 >>> (i18 >>> 0)) & i26;
    i21 = i26 & i8 >>> (i18 >>> 0);
    i22 = i6 << i16 & i24;
    i23 = (i8 << i16 | i6 >>> (i25 >>> 0)) & i24 | i6 << i15 & i18 - 33 >> 31;
    break;
   }
   if ((i5 | 0) != 0) {
    HEAP32[i5 >> 2] = i17 & i6;
    HEAP32[i5 + 4 >> 2] = 0;
   }
   if ((i9 | 0) == 1) {
    i13 = i7 | i2 & 0;
    i14 = i1 | 0 | 0;
    return (tempRet0 = i13, i14) | 0;
   } else {
    i17 = _llvm_cttz_i32(i9 | 0) | 0;
    i13 = i8 >>> (i17 >>> 0) | 0;
    i14 = i8 << 32 - i17 | i6 >>> (i17 >>> 0) | 0;
    return (tempRet0 = i13, i14) | 0;
   }
  } else {
   if (i12) {
    if ((i5 | 0) != 0) {
     HEAP32[i5 >> 2] = (i8 >>> 0) % (i9 >>> 0);
     HEAP32[i5 + 4 >> 2] = 0;
    }
    i13 = 0;
    i14 = (i8 >>> 0) / (i9 >>> 0) >>> 0;
    return (tempRet0 = i13, i14) | 0;
   }
   if ((i6 | 0) == 0) {
    if ((i5 | 0) != 0) {
     HEAP32[i5 >> 2] = 0;
     HEAP32[i5 + 4 >> 2] = (i8 >>> 0) % (i11 >>> 0);
    }
    i13 = 0;
    i14 = (i8 >>> 0) / (i11 >>> 0) >>> 0;
    return (tempRet0 = i13, i14) | 0;
   }
   i17 = i11 - 1 | 0;
   if ((i17 & i11 | 0) == 0) {
    if ((i5 | 0) != 0) {
     HEAP32[i5 >> 2] = i1 | 0;
     HEAP32[i5 + 4 >> 2] = i17 & i8 | i2 & 0;
    }
    i13 = 0;
    i14 = i8 >>> ((_llvm_cttz_i32(i11 | 0) | 0) >>> 0);
    return (tempRet0 = i13, i14) | 0;
   }
   i17 = (_llvm_ctlz_i32(i11 | 0) | 0) - (_llvm_ctlz_i32(i8 | 0) | 0) | 0;
   if (i17 >>> 0 <= 30) {
    i18 = i17 + 1 | 0;
    i15 = 31 - i17 | 0;
    i19 = i18;
    i20 = i8 << i15 | i6 >>> (i18 >>> 0);
    i21 = i8 >>> (i18 >>> 0);
    i22 = 0;
    i23 = i6 << i15;
    break;
   }
   if ((i5 | 0) == 0) {
    i13 = 0;
    i14 = 0;
    return (tempRet0 = i13, i14) | 0;
   }
   HEAP32[i5 >> 2] = i1 | 0;
   HEAP32[i5 + 4 >> 2] = i7 | i2 & 0;
   i13 = 0;
   i14 = 0;
   return (tempRet0 = i13, i14) | 0;
  }
 } while (0);
 if ((i19 | 0) == 0) {
  i27 = i23;
  i28 = i22;
  i29 = i21;
  i30 = i20;
  i31 = 0;
  i32 = 0;
 } else {
  i2 = i3 | 0 | 0;
  i3 = i10 | i4 & 0;
  i4 = _i64Add(i2, i3, -1, -1) | 0;
  i10 = tempRet0;
  i7 = i23;
  i23 = i22;
  i22 = i21;
  i21 = i20;
  i20 = i19;
  i19 = 0;
  do {
   i1 = i7;
   i7 = i23 >>> 31 | i7 << 1;
   i23 = i19 | i23 << 1;
   i6 = i21 << 1 | i1 >>> 31 | 0;
   i1 = i21 >>> 31 | i22 << 1 | 0;
   _i64Subtract(i4, i10, i6, i1) | 0;
   i8 = tempRet0;
   i11 = i8 >> 31 | ((i8 | 0) < 0 ? -1 : 0) << 1;
   i19 = i11 & 1;
   i21 = _i64Subtract(i6, i1, i11 & i2, (((i8 | 0) < 0 ? -1 : 0) >> 31 | ((i8 | 0) < 0 ? -1 : 0) << 1) & i3) | 0;
   i22 = tempRet0;
   i20 = i20 - 1 | 0;
  } while ((i20 | 0) != 0);
  i27 = i7;
  i28 = i23;
  i29 = i22;
  i30 = i21;
  i31 = 0;
  i32 = i19;
 }
 i19 = i28;
 i28 = 0;
 if ((i5 | 0) != 0) {
  HEAP32[i5 >> 2] = i30;
  HEAP32[i5 + 4 >> 2] = i29;
 }
 i13 = (i19 | 0) >>> 31 | (i27 | i28) << 1 | (i28 << 1 | i19 >>> 31) & 0 | i31;
 i14 = (i19 << 1 | 0 >>> 31) & -2 | i32;
 return (tempRet0 = i13, i14) | 0;
}
function _displaytext(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP16[i3 >> 1] = 0;
 i4 = HEAP32[12936] | 0;
 _memset(HEAP32[i4 + 164 >> 2] | 0, 32, Math_imul(HEAP32[i4 + 60 >> 2] | 0, HEAP32[i4 + 56 >> 2] | 0) | 0) | 0;
 i4 = HEAP32[12936] | 0;
 _memset(HEAP32[i4 + 168 >> 2] | 0, 0, Math_imul(HEAP32[i4 + 60 >> 2] | 0, HEAP32[i4 + 56 >> 2] | 0) | 0) | 0;
 _displogo(1);
 i4 = HEAP32[12936] | 0;
 i5 = HEAP32[i4 + 56 >> 2] | 0;
 if ((i5 | 0) > 0) {
  i6 = i5;
  i5 = i4;
  i7 = 0;
  while (1) {
   HEAP8[(HEAP32[i5 + 164 >> 2] | 0) + ((i6 * 7 | 0) + i7) >> 0] = 95;
   i7 = i7 + 1 | 0;
   i8 = HEAP32[12936] | 0;
   i6 = HEAP32[i8 + 56 >> 2] | 0;
   if ((i7 | 0) >= (i6 | 0)) {
    i9 = i8;
    break;
   } else {
    i5 = i8;
   }
  }
 } else {
  i9 = i4;
 }
 i4 = HEAP32[i9 + 60 >> 2] | 0;
 i5 = i1 + -9 | 0;
 if ((i5 + i4 | 0) > (i1 | 0)) {
  i6 = 9 - i1 | 0;
  i7 = i9;
  i8 = 0;
  i10 = i1;
  while (1) {
   L9 : do {
    if ((i10 | 0) < (HEAP32[41716] | 0)) {
     i11 = 126864 + (i10 << 2) | 0;
     i12 = HEAP32[i11 >> 2] | 0;
     i13 = HEAP8[i12 >> 0] | 0;
     if (i13 << 24 >> 24 == 0) {
      i14 = i8;
     } else {
      i15 = i6 + i10 | 0;
      i16 = i13;
      i13 = i12;
      i12 = i8;
      i17 = 0;
      i18 = 0;
      while (1) {
       if ((i16 & 255) < 20) {
        i19 = i16;
        i20 = i17;
        while (1) {
         i20 = i20 + 1 | 0;
         i21 = HEAP8[i13 + i20 >> 0] | 0;
         if (!((i21 & 255) < 20)) {
          break;
         } else {
          i19 = i21;
         }
        }
        i22 = i21;
        i23 = (i19 << 24 >> 24) + -1 | 0;
        i24 = i20;
       } else {
        i22 = i16;
        i23 = i12;
        i24 = i17;
       }
       if (i24 >>> 0 < (_strlen(i13 | 0) | 0) >>> 0) {
        HEAP8[i3 >> 0] = i22;
        _aa_puts(HEAP32[12936] | 0, i18, i15, i23, i3);
        i25 = HEAP32[i11 >> 2] | 0;
       } else {
        i25 = i13;
       }
       i26 = i24 + 1 | 0;
       if (!(i26 >>> 0 < (_strlen(i25 | 0) | 0) >>> 0)) {
        i14 = i23;
        break L9;
       }
       i16 = HEAP8[i25 + i26 >> 0] | 0;
       i13 = i25;
       i12 = i23;
       i17 = i26;
       i18 = i18 + 1 | 0;
      }
     }
    } else {
     _aa_puts(i7, 0, i6 + i10 | 0, 0, 523512);
     i14 = i8;
    }
   } while (0);
   i10 = i10 + 1 | 0;
   i18 = HEAP32[12936] | 0;
   i17 = HEAP32[i18 + 60 >> 2] | 0;
   if ((i10 | 0) >= (i5 + i17 | 0)) {
    i27 = i18;
    i28 = i17;
    i29 = i14;
    break;
   } else {
    i7 = i18;
    i8 = i14;
   }
  }
 } else {
  i27 = i9;
  i28 = i4;
  i29 = 0;
 }
 if ((HEAP32[68184] | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i4 = i28 + -9 | 0;
 if ((i5 + i28 | 0) <= (i1 | 0)) {
  STACKTOP = i2;
  return;
 }
 i28 = 9 - i1 | 0;
 i9 = i27;
 i27 = i29;
 i29 = i1;
 while (1) {
  i1 = i4 + i29 | 0;
  L34 : do {
   if ((i1 | 0) < (HEAP32[41716] | 0)) {
    i14 = 126864 + (i1 << 2) | 0;
    i8 = HEAP32[i14 >> 2] | 0;
    i7 = HEAP8[i8 >> 0] | 0;
    if (i7 << 24 >> 24 == 0) {
     i30 = i27;
    } else {
     i10 = i28 + i29 | 0;
     i6 = i7;
     i7 = i8;
     i8 = i27;
     i23 = 0;
     i25 = 0;
     while (1) {
      if ((i6 & 255) < 20) {
       i24 = i6;
       i22 = i23;
       while (1) {
        i22 = i22 + 1 | 0;
        i31 = HEAP8[i7 + i22 >> 0] | 0;
        if (!((i31 & 255) < 20)) {
         break;
        } else {
         i24 = i31;
        }
       }
       i32 = i31;
       i33 = (i24 << 24 >> 24) + -1 | 0;
       i34 = i22;
      } else {
       i32 = i6;
       i33 = i8;
       i34 = i23;
      }
      if (i34 >>> 0 < (_strlen(i7 | 0) | 0) >>> 0) {
       HEAP8[i3 >> 0] = i32;
       i20 = HEAP32[12936] | 0;
       _aa_puts(i20, ((HEAP32[i20 + 56 >> 2] | 0) / 2 | 0) + i25 | 0, i10, i33, i3);
       i35 = HEAP32[i14 >> 2] | 0;
      } else {
       i35 = i7;
      }
      i20 = i34 + 1 | 0;
      if (!(i20 >>> 0 < (_strlen(i35 | 0) | 0) >>> 0)) {
       i30 = i33;
       break L34;
      }
      i6 = HEAP8[i35 + i20 >> 0] | 0;
      i7 = i35;
      i8 = i33;
      i23 = i20;
      i25 = i25 + 1 | 0;
     }
    }
   } else {
    _aa_puts(i9, (HEAP32[i9 + 56 >> 2] | 0) / 2 | 0, i28 + i29 | 0, 0, 523512);
    i30 = i27;
   }
  } while (0);
  i29 = i29 + 1 | 0;
  i9 = HEAP32[12936] | 0;
  if ((i29 | 0) >= (i5 + (HEAP32[i9 + 60 >> 2] | 0) | 0)) {
   break;
  } else {
   i27 = i30;
  }
 }
 STACKTOP = i2;
 return;
}
function _tl_process_group(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0;
 i2 = STACKTOP;
 do {
  _gettimeofday(56, 64) | 0;
  i3 = HEAP32[60 >> 2] | 0;
 } while ((i3 | 0) > 999999);
 i4 = i1 + 24 | 0;
 i1 = i3;
 L4 : while (1) {
  i3 = HEAP32[i4 >> 2] | 0;
  if ((i3 | 0) == 0) {
   i5 = -1;
   i6 = 29;
   break;
  } else {
   i7 = i1;
   i8 = 0;
   i9 = 2147483647;
   i10 = i3;
  }
  L6 : while (1) {
   i3 = i7;
   i11 = i9;
   i12 = i10;
   L8 : while (1) {
    i13 = i12;
    while (1) {
     i14 = i13 + 16 | 0;
     if ((HEAP32[i14 >> 2] | 0) != 0 ? (i15 = i13 + 8 | 0, (HEAP32[i15 >> 2] | 0) > 0) : 0) {
      break L8;
     }
     i16 = i13 + 20 | 0;
     if ((HEAP32[i16 >> 2] | 0) != 0 ? (i17 = i13 + 8 | 0, (HEAP32[i17 >> 2] | 0) > 0) : 0) {
      break;
     }
     i18 = HEAP32[i13 + 24 >> 2] | 0;
     if ((i18 | 0) == 0) {
      i19 = i3;
      i20 = i8;
      i21 = i11;
      break L6;
     } else {
      i13 = i18;
     }
    }
    i18 = i13 + 12 | 0;
    i22 = (HEAP32[i13 + 4 >> 2] | 0) + (HEAP32[i18 >> 2] | 0) - i3 + (Math_imul((HEAP32[14] | 0) - (HEAP32[i13 >> 2] | 0) | 0, -1e6) | 0) | 0;
    if ((i22 | 0) < 500) {
     do {
      _gettimeofday(56, 64) | 0;
     } while ((HEAP32[60 >> 2] | 0) > 999999);
     i23 = 56;
     i24 = HEAP32[i23 + 4 >> 2] | 0;
     i25 = i13;
     HEAP32[i25 >> 2] = HEAP32[i23 >> 2];
     HEAP32[i25 + 4 >> 2] = i24;
     i24 = (i22 | 0) < -2e8 ? 0 : i22;
     i25 = HEAP32[i17 >> 2] | 0;
     i23 = ((-500 - i24 | 0) / (i25 | 0) | 0) + 1 | 0;
     i26 = (Math_imul(i23, i25) | 0) + i24 | 0;
     HEAP32[i18 >> 2] = i26;
     i24 = HEAP32[i16 >> 2] | 0;
     i27 = _emscripten_alloc_async_context(24) | 0;
     HEAP32[___async_cur_frame + 4 >> 2] = i2;
     FUNCTION_TABLE_vi[i24 & 511](i23);
     if (___async) {
      i6 = 23;
      break L4;
     }
     _emscripten_free_async_context(i27 | 0);
     do {
      _gettimeofday(56, 64) | 0;
      i23 = HEAP32[60 >> 2] | 0;
     } while ((i23 | 0) > 999999);
     i28 = i23;
     i29 = i26;
    } else {
     i28 = i3;
     i29 = i22;
    }
    i18 = (i29 | 0) < (i11 | 0) ? i29 : i11;
    i12 = HEAP32[i13 + 24 >> 2] | 0;
    if ((i12 | 0) == 0) {
     i19 = i28;
     i20 = i8;
     i21 = i18;
     break L6;
    } else {
     i3 = i28;
     i11 = i18;
    }
   }
   i12 = i13 + 12 | 0;
   i18 = (HEAP32[i13 + 4 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) - i3 + (Math_imul((HEAP32[14] | 0) - (HEAP32[i13 >> 2] | 0) | 0, -1e6) | 0) | 0;
   if ((i18 | 0) < 500) {
    do {
     _gettimeofday(56, 64) | 0;
    } while ((HEAP32[60 >> 2] | 0) > 999999);
    i23 = 56;
    i24 = HEAP32[i23 + 4 >> 2] | 0;
    i25 = i13;
    HEAP32[i25 >> 2] = HEAP32[i23 >> 2];
    HEAP32[i25 + 4 >> 2] = i24;
    i30 = (HEAP32[i15 >> 2] | 0) + ((i18 | 0) < -2e8 ? 0 : i18) | 0;
    HEAP32[i12 >> 2] = i30;
    i24 = HEAP32[i14 >> 2] | 0;
    i31 = _emscripten_alloc_async_context(20) | 0;
    HEAP32[___async_cur_frame + 4 >> 2] = i2;
    FUNCTION_TABLE_v[i24 & 63]();
    if (___async) {
     i6 = 13;
     break L4;
    }
    _emscripten_free_async_context(i31 | 0);
    do {
     _gettimeofday(56, 64) | 0;
     i24 = HEAP32[60 >> 2] | 0;
    } while ((i24 | 0) > 999999);
    i32 = i24;
    i33 = 1;
    i34 = i30;
   } else {
    i32 = i3;
    i33 = i8;
    i34 = i18;
   }
   i12 = (i34 | 0) < (i11 | 0) ? i34 : i11;
   i10 = HEAP32[i13 + 24 >> 2] | 0;
   if ((i10 | 0) == 0) {
    i19 = i32;
    i20 = i33;
    i21 = i12;
    break;
   } else {
    i7 = i32;
    i8 = i33;
    i9 = i12;
   }
  }
  if ((i20 | 0) == 0) {
   i6 = 27;
   break;
  } else {
   i1 = i19;
  }
 }
 if ((i6 | 0) == 13) {
  HEAP32[i31 >> 2] = 5;
  HEAP32[i31 + 4 >> 2] = i4;
  HEAP32[i31 + 8 >> 2] = i30;
  HEAP32[i31 + 12 >> 2] = i11;
  HEAP32[i31 + 16 >> 2] = i13;
  i2 = STACKTOP;
  STACKTOP = i2;
  return 0;
 } else if ((i6 | 0) == 23) {
  HEAP32[i27 >> 2] = 6;
  HEAP32[i27 + 4 >> 2] = i4;
  HEAP32[i27 + 8 >> 2] = i26;
  HEAP32[i27 + 12 >> 2] = i11;
  HEAP32[i27 + 16 >> 2] = i13;
  HEAP32[i27 + 20 >> 2] = i8;
  i2 = STACKTOP;
  STACKTOP = i2;
  return 0;
 } else if ((i6 | 0) == 27) {
  if ((i21 | 0) == 2147483647) {
   i5 = -1;
   STACKTOP = i2;
   return i5 | 0;
  }
  i5 = (i21 | 0) < 0 ? 0 : i21;
  STACKTOP = i2;
  return i5 | 0;
 } else if ((i6 | 0) == 29) {
  STACKTOP = i2;
  return i5 | 0;
 }
 return 0;
}
function _scene4__async_cb43(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 i7 = HEAP32[i1 + 8 >> 2] | 0;
 i8 = HEAP32[i1 + 12 >> 2] | 0;
 i9 = HEAP32[i1 + 16 >> 2] | 0;
 i10 = HEAP32[i1 + 20 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i5 >> 2] = i8;
 HEAP32[i4 >> 2] = i9;
 HEAP32[i3 >> 2] = i10;
 i10 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
 i9 = HEAP32[i5 >> 2] | 0;
 i8 = HEAP32[i4 >> 2] | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i10 | 0) != 20) {
  HEAP32[i6 >> 2] = i10;
  i10 = (i1 | 0) > 7;
  HEAP32[i3 >> 2] = i10 ? 0 : i1 + 1 | 0;
  i1 = i10 & 1;
  HEAP32[i4 >> 2] = i1 ^ i8;
  i10 = HEAP32[12936] | 0;
  if (((HEAP32[i10 + 56 >> 2] | 0) + -25 | 0) > 0) {
   i11 = (i8 | 0) != (i1 | 0) ? 179504 : 179512;
   i1 = i10;
   i8 = 0;
   while (1) {
    i12 = i8 + (HEAP32[i6 >> 2] | 0) | 0;
    _aa_puts(i1, i12, i7, 0, i11);
    _aa_puts(HEAP32[12936] | 0, i12, i7 + 3 | 0, 0, i11);
    _aa_puts(HEAP32[12936] | 0, i12, i7 + 6 | 0, 0, i11);
    _aa_puts(HEAP32[12936] | 0, i12, i7 + 9 | 0, 0, i11);
    i8 = i8 + 6 | 0;
    i12 = HEAP32[12936] | 0;
    if ((i8 | 0) >= ((HEAP32[i12 + 56 >> 2] | 0) + -25 | 0)) {
     i13 = i12;
     break;
    } else {
     i1 = i12;
    }
   }
  } else {
   i13 = i10;
  }
  _aa_puts(i13, i9, (HEAP32[i13 + 60 >> 2] | 0) + -1 | 0, 0, 179520);
  HEAP32[i5 >> 2] = i9 + -1 + ((_rand() | 0) % 3 | 0);
  i9 = _emscripten_realloc_async_context(24) | 0;
  _bbflushwait(2e4);
  if (___async) {
   HEAP32[i9 >> 2] = 96;
   i14 = i9 + 4 | 0;
   i15 = HEAP32[i6 >> 2] | 0;
   HEAP32[i14 >> 2] = i15;
   i16 = i9 + 8 | 0;
   HEAP32[i16 >> 2] = i7;
   i17 = i9 + 12 | 0;
   i18 = HEAP32[i5 >> 2] | 0;
   HEAP32[i17 >> 2] = i18;
   i19 = i9 + 16 | 0;
   i20 = HEAP32[i4 >> 2] | 0;
   HEAP32[i19 >> 2] = i20;
   i21 = i9 + 20 | 0;
   i22 = HEAP32[i3 >> 2] | 0;
   HEAP32[i21 >> 2] = i22;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i9 >> 2] = 96;
  i14 = i9 + 4 | 0;
  i15 = HEAP32[i6 >> 2] | 0;
  HEAP32[i14 >> 2] = i15;
  i16 = i9 + 8 | 0;
  HEAP32[i16 >> 2] = i7;
  i17 = i9 + 12 | 0;
  i18 = HEAP32[i5 >> 2] | 0;
  HEAP32[i17 >> 2] = i18;
  i19 = i9 + 16 | 0;
  i20 = HEAP32[i4 >> 2] | 0;
  HEAP32[i19 >> 2] = i20;
  i21 = i9 + 20 | 0;
  i22 = HEAP32[i3 >> 2] | 0;
  HEAP32[i21 >> 2] = i22;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i22 = i7 | 1;
 i21 = HEAP32[12936] | 0;
 i9 = HEAP32[i21 + 60 >> 2] | 0;
 _memset(HEAP32[i21 + 164 >> 2] | 0, 32, Math_imul((i9 | 0) > 15 ? 15 : i9, HEAP32[i21 + 56 >> 2] | 0) | 0) | 0;
 i21 = HEAP32[i5 >> 2] | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i3 = (i4 | 0) > 7;
 i9 = i3 ? 0 : i4 + 1 | 0;
 i4 = i3 & 1;
 i3 = i4 ^ i5;
 i20 = HEAP32[12936] | 0;
 if (((HEAP32[i20 + 56 >> 2] | 0) + -25 | 0) > 0) {
  i19 = (i5 | 0) != (i4 | 0) ? 179504 : 179512;
  i4 = i20;
  i5 = 0;
  while (1) {
   i18 = i5 + 20 | 0;
   _aa_puts(i4, i18, i22, 0, i19);
   _aa_puts(HEAP32[12936] | 0, i18, i22 + 3 | 0, 0, i19);
   _aa_puts(HEAP32[12936] | 0, i18, i22 + 6 | 0, 0, i19);
   _aa_puts(HEAP32[12936] | 0, i18, i22 + 9 | 0, 0, i19);
   i5 = i5 + 6 | 0;
   i18 = HEAP32[12936] | 0;
   if ((i5 | 0) >= ((HEAP32[i18 + 56 >> 2] | 0) + -25 | 0)) {
    i23 = i18;
    break;
   } else {
    i4 = i18;
   }
  }
 } else {
  i23 = i20;
 }
 _aa_puts(i23, i21, (HEAP32[i23 + 60 >> 2] | 0) + -1 | 0, 0, 179520);
 i23 = i21 + -1 + ((_rand() | 0) % 3 | 0) | 0;
 i21 = _emscripten_realloc_async_context(28) | 0;
 _bbflushwait(2e4);
 if (___async) {
  HEAP32[i21 >> 2] = 97;
  i24 = i21 + 4 | 0;
  HEAP32[i24 >> 2] = i23;
  i25 = i21 + 8 | 0;
  HEAP32[i25 >> 2] = i3;
  i26 = i21 + 12 | 0;
  HEAP32[i26 >> 2] = i9;
  i27 = i21 + 16 | 0;
  HEAP32[i27 >> 2] = i7;
  i28 = i21 + 20 | 0;
  HEAP32[i28 >> 2] = i22;
  i29 = i21 + 24 | 0;
  HEAP32[i29 >> 2] = 20;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i21 >> 2] = 97;
 i24 = i21 + 4 | 0;
 HEAP32[i24 >> 2] = i23;
 i25 = i21 + 8 | 0;
 HEAP32[i25 >> 2] = i3;
 i26 = i21 + 12 | 0;
 HEAP32[i26 >> 2] = i9;
 i27 = i21 + 16 | 0;
 HEAP32[i27 >> 2] = i7;
 i28 = i21 + 20 | 0;
 HEAP32[i28 >> 2] = i22;
 i29 = i21 + 24 | 0;
 HEAP32[i29 >> 2] = 20;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _aa_flush__async_cb54(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 i5 = HEAP32[i1 + 8 >> 2] | 0;
 i6 = HEAP32[i1 + 16 >> 2] | 0;
 i7 = HEAP32[i1 + 20 >> 2] | 0;
 i8 = HEAP32[i1 + 24 >> 2] | 0;
 i9 = HEAP32[i1 + 28 >> 2] | 0;
 i10 = HEAP32[i1 + 32 >> 2] | 0;
 i11 = HEAP32[i1 + 36 >> 2] | 0;
 i12 = HEAP32[i1 + 40 >> 2] | 0;
 i13 = HEAP8[i1 + 44 >> 0] & 1;
 i14 = HEAP32[i1 + 48 >> 2] | 0;
 i15 = HEAP32[i1 + 52 >> 2] | 0;
 i16 = HEAP8[i1 + 56 >> 0] & 1;
 i17 = HEAP32[i1 + 60 >> 2] | 0;
 i18 = HEAP32[i1 + 64 >> 2] | 0;
 i19 = HEAP32[i1 + 68 >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[i1 + 12 >> 2];
 i1 = (HEAP32[i3 >> 2] | 0) + 1 | 0;
 if ((i1 | 0) != (i6 | 0)) {
  i20 = HEAP32[i17 >> 2] | 0;
  i21 = HEAP32[i7 >> 2] | 0;
  HEAP32[i3 >> 2] = i1;
  i1 = HEAP32[i21 + 28 >> 2] | 0;
  i21 = _emscripten_realloc_async_context(76) | 0;
  FUNCTION_TABLE_viii[i1 & 3](i5, 0, HEAP32[i3 >> 2] | 0);
  if (!___async) {
   ___async_unwind = 0;
  }
  HEAP32[i21 >> 2] = 271;
  HEAP32[i21 + 4 >> 2] = i5;
  HEAP32[i21 + 8 >> 2] = i4;
  HEAP32[i21 + 12 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i21 + 16 >> 2] = i6;
  HEAP32[i21 + 20 >> 2] = i19;
  HEAP32[i21 + 24 >> 2] = i7;
  HEAP32[i21 + 28 >> 2] = i8;
  HEAP32[i21 + 32 >> 2] = i9;
  HEAP32[i21 + 36 >> 2] = i10;
  HEAP32[i21 + 40 >> 2] = i11;
  HEAP32[i21 + 44 >> 2] = i12;
  HEAP8[i21 + 48 >> 0] = i13 & 1;
  HEAP32[i21 + 52 >> 2] = i14;
  HEAP32[i21 + 56 >> 2] = i20;
  HEAP32[i21 + 60 >> 2] = i15;
  HEAP8[i21 + 64 >> 0] = i16 & 1;
  HEAP32[i21 + 68 >> 2] = i17;
  HEAP32[i21 + 72 >> 2] = i18;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 if (((!((i19 | 0) == 0 | i13) ? (HEAP32[i4 >> 2] | 0) == 0 : 0) ? (HEAP32[i4 >> 2] = 1, i4 = HEAP32[i14 >> 2] | 0, (i4 | 0) != 0) : 0) ? (i14 = HEAP32[i4 + 24 >> 2] | 0, (i14 | 0) != 0) : 0) {
  i4 = _emscripten_realloc_async_context(12) | 0;
  FUNCTION_TABLE_vii[i14 & 3](i5, 1);
  if (___async) {
   HEAP32[i4 >> 2] = 276;
   i22 = i4 + 4 | 0;
   HEAP32[i22 >> 2] = i5;
   i23 = i4 + 8 | 0;
   HEAP32[i23 >> 2] = i7;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i4 >> 2] = 276;
  i22 = i4 + 4 | 0;
  HEAP32[i22 >> 2] = i5;
  i23 = i4 + 8 | 0;
  HEAP32[i23 >> 2] = i7;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i23 = HEAP32[i7 >> 2] | 0;
 i4 = HEAP32[i23 + 32 >> 2] | 0;
 if ((i4 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i22 = i5 + 208 | 0;
 if ((HEAP32[i22 >> 2] | 0) == 0) {
  i14 = _emscripten_realloc_async_context(4) | 0;
  FUNCTION_TABLE_vi[i4 & 511](i5);
  if (___async) {
   HEAP32[i14 >> 2] = 280;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i14 >> 2] = 280;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i14 = i5 + 8 | 0;
 i4 = HEAP32[i14 >> 2] | 0;
 if (((i4 | 0) != 0 ? (HEAP32[i4 + 8 >> 2] & 8 | 0) != 0 : 0) ? (HEAP32[i22 >> 2] = 0, i13 = HEAP32[i4 + 24 >> 2] | 0, (i13 | 0) != 0) : 0) {
  i4 = _emscripten_realloc_async_context(20) | 0;
  FUNCTION_TABLE_vii[i13 & 3](i5, 0);
  if (___async) {
   HEAP32[i4 >> 2] = 277;
   i24 = i4 + 4 | 0;
   HEAP32[i24 >> 2] = i7;
   i25 = i4 + 8 | 0;
   HEAP32[i25 >> 2] = i5;
   i26 = i4 + 12 | 0;
   HEAP32[i26 >> 2] = i14;
   i27 = i4 + 16 | 0;
   HEAP32[i27 >> 2] = i22;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i4 >> 2] = 277;
  i24 = i4 + 4 | 0;
  HEAP32[i24 >> 2] = i7;
  i25 = i4 + 8 | 0;
  HEAP32[i25 >> 2] = i5;
  i26 = i4 + 12 | 0;
  HEAP32[i26 >> 2] = i14;
  i27 = i4 + 16 | 0;
  HEAP32[i27 >> 2] = i22;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i27 = HEAP32[i23 + 32 >> 2] | 0;
 i23 = _emscripten_realloc_async_context(16) | 0;
 FUNCTION_TABLE_vi[i27 & 511](i5);
 if (___async) {
  HEAP32[i23 >> 2] = 278;
  i28 = i23 + 4 | 0;
  HEAP32[i28 >> 2] = i14;
  i29 = i23 + 8 | 0;
  HEAP32[i29 >> 2] = i22;
  i30 = i23 + 12 | 0;
  HEAP32[i30 >> 2] = i5;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i23 >> 2] = 278;
 i28 = i23 + 4 | 0;
 HEAP32[i28 >> 2] = i14;
 i29 = i23 + 8 | 0;
 HEAP32[i29 >> 2] = i22;
 i30 = i23 + 12 | 0;
 HEAP32[i30 >> 2] = i5;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _moveoldpoints() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[71600] | 0;
 i3 = HEAP32[i2 + 36 >> 2] | 0;
 i4 = i2 + 128 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i6 = i5 << 2;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i6 | 0) + 15 & -16) | 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i6 | 0) + 15 & -16) | 0;
 i6 = HEAP32[i2 + 52 >> 2] | 0;
 i9 = i6 + (i5 * 40 | 0) | 0;
 L1 : do {
  if ((i5 | 0) > 0) {
   i10 = 0;
   i11 = i6;
   while (1) {
    if ((HEAP32[i11 + 20 >> 2] | 0) == 0) {
     i12 = i10;
     i13 = i11;
     break L1;
    }
    if ((i10 | 0) >= ((HEAP32[i4 >> 2] | 0) + 1 | 0)) {
     i12 = i10;
     i13 = i11;
     break L1;
    }
    i14 = i10 + 1 | 0;
    i15 = i11 + 40 | 0;
    if (i15 >>> 0 < i9 >>> 0) {
     i10 = i14;
     i11 = i15;
    } else {
     i12 = i14;
     i13 = i15;
     break;
    }
   }
  } else {
   i12 = 0;
   i13 = i6;
  }
 } while (0);
 i5 = HEAP32[i6 + 16 >> 2] | 0;
 HEAP32[i8 >> 2] = i5;
 HEAP32[i7 >> 2] = 0;
 L7 : do {
  if (i13 >>> 0 < i9 >>> 0) {
   i6 = i5;
   i11 = 0;
   i10 = i13;
   i15 = i7;
   i14 = i8;
   L8 : while (1) {
    i16 = (HEAP32[i10 + 20 >> 2] | 0) == 0;
    if (i16) {
     i17 = i11 + i6 | 0;
     if ((HEAP32[i10 + 16 >> 2] | 0) == (i17 | 0)) {
      i18 = i17;
      i19 = 10;
     } else {
      i20 = i14 + 4 | 0;
      i21 = i15 + 4 | 0;
      i19 = 18;
     }
    } else {
     i18 = i11 + i6 | 0;
     i19 = 10;
    }
    do {
     if ((i19 | 0) == 10) {
      i19 = 0;
      if ((i18 | 0) < (HEAP32[i4 >> 2] | 0)) {
       i17 = i11 + 1 | 0;
       HEAP32[i15 >> 2] = i17;
       i22 = i6;
       i23 = i17;
       i24 = i15;
       i25 = i14;
       break;
      }
      i17 = i15 + 4 | 0;
      i26 = i14 + 4 | 0;
      if (i16) {
       i20 = i26;
       i21 = i17;
       i19 = 18;
      } else {
       HEAP32[i26 >> 2] = 0;
       i27 = 0;
       i28 = i10;
       while (1) {
        if ((HEAP32[i28 + 20 >> 2] | 0) == 0) {
         break;
        }
        i29 = i27 + -1 | 0;
        HEAP32[i26 >> 2] = i29;
        i30 = i28 + 40 | 0;
        if (i30 >>> 0 < i9 >>> 0) {
         i27 = i29;
         i28 = i30;
        } else {
         break L8;
        }
       }
       HEAP32[i26 >> 2] = i27 + (HEAP32[i28 + 16 >> 2] | 0);
       i20 = i26;
       i21 = i17;
       i19 = 18;
      }
     }
    } while (0);
    if ((i19 | 0) == 18) {
     i19 = 0;
     i16 = HEAP32[i10 + 16 >> 2] | 0;
     HEAP32[i20 >> 2] = i16;
     HEAP32[i21 >> 2] = 1;
     i22 = i16;
     i23 = 1;
     i24 = i21;
     i25 = i20;
    }
    i10 = i10 + 40 | 0;
    if (!(i10 >>> 0 < i9 >>> 0)) {
     i31 = i23;
     i32 = 0;
     i33 = i24;
     break L7;
    } else {
     i6 = i22;
     i11 = i23;
     i15 = i24;
     i14 = i25;
    }
   }
   i31 = i11;
   i32 = 1 - i27 | 0;
   i33 = i15;
  } else {
   i31 = 0;
   i32 = 0;
   i33 = i7;
  }
 } while (0);
 i27 = (i31 | 0) == 0 ? i33 : i33 + 4 | 0;
 i33 = HEAP32[i2 + 136 >> 2] | 0;
 i31 = i33 + i32 - (HEAP32[i4 >> 2] | 0) | 0;
 i4 = HEAP32[i2 + 56 >> 2] | 0;
 i32 = HEAP32[i2 + 132 >> 2] | 0;
 i25 = i4 + (i32 * 40 | 0) | 0;
 if ((i32 | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i32 = i7 >>> 0 < i27 >>> 0;
 i24 = i2;
 i2 = i33;
 i33 = i4;
 i4 = i3;
 while (1) {
  i3 = HEAP32[i24 + 40 >> 2] | 0;
  i23 = Math_imul(i2, HEAP32[i33 + 16 >> 2] | 0) | 0;
  if ((HEAP32[i33 + 20 >> 2] | 0) == 0) {
   i22 = i4 + i12 | 0;
   L37 : do {
    if (i32) {
     i9 = i7;
     i20 = i8;
     i21 = i22;
     while (1) {
      _memcpy(i21 | 0, i3 + ((HEAP32[i20 >> 2] | 0) + i23) | 0, HEAP32[i9 >> 2] | 0) | 0;
      i19 = i21 + (HEAP32[i9 >> 2] | 0) | 0;
      i18 = i9 + 4 | 0;
      if (!(i18 >>> 0 < i27 >>> 0)) {
       i34 = i19;
       break L37;
      }
      i9 = i18;
      i20 = i20 + 4 | 0;
      i21 = i19;
     }
    } else {
     i34 = i22;
    }
   } while (0);
   i35 = i34 + i31 | 0;
  } else {
   i35 = i4 + i2 | 0;
  }
  i22 = i33 + 40 | 0;
  if (!(i22 >>> 0 < i25 >>> 0)) {
   break;
  }
  i23 = HEAP32[71600] | 0;
  i24 = i23;
  i2 = HEAP32[i23 + 136 >> 2] | 0;
  i33 = i22;
  i4 = i35;
 }
 STACKTOP = i1;
 return;
}
function _values(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, d16 = 0.0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i6 = STACKTOP;
 i7 = (i1 | 0) / 256 | 0;
 i8 = HEAP32[133052] | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 i10 = i8 + 4 | 0;
 i8 = Math_imul(HEAP32[i10 >> 2] | 0, (i1 | 0) % 256 | 0) | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 i1 = HEAP32[i10 >> 2] | 0;
 if ((i1 | 0) > 1) {
  i11 = 0;
  while (1) {
   i12 = i9 + (i11 + i8) | 0;
   i13 = HEAPU8[i12 >> 0] | 0;
   HEAP32[i2 >> 2] = (i13 & 1) + (HEAP32[i2 >> 2] | 0) + (i13 >>> 1 & 1) + (i13 >>> 2 & 1) + (i13 >>> 3 & 1);
   i13 = HEAPU8[i12 >> 0] | 0;
   HEAP32[i3 >> 2] = (i13 >>> 7) + (HEAP32[i3 >> 2] | 0) + (i13 >>> 5 & 1) + (i13 >>> 4 & 1) + (i13 >>> 6 & 1);
   i13 = i11 + 1 | 0;
   i12 = HEAP32[i10 >> 2] | 0;
   if ((i13 | 0) < ((i12 | 0) / 2 | 0 | 0)) {
    i11 = i13;
   } else {
    i14 = i12;
    i15 = i13;
    break;
   }
  }
 } else {
  i14 = i1;
  i15 = 0;
 }
 if ((i15 | 0) < (i14 | 0)) {
  i14 = i15;
  do {
   i15 = i9 + (i14 + i8) | 0;
   i1 = HEAPU8[i15 >> 0] | 0;
   HEAP32[i4 >> 2] = (i1 & 1) + (HEAP32[i4 >> 2] | 0) + (i1 >>> 1 & 1) + (i1 >>> 2 & 1) + (i1 >>> 3 & 1);
   i1 = HEAPU8[i15 >> 0] | 0;
   HEAP32[i5 >> 2] = (i1 >>> 7) + (HEAP32[i5 >> 2] | 0) + (i1 >>> 5 & 1) + (i1 >>> 4 & 1) + (i1 >>> 6 & 1);
   i14 = i14 + 1 | 0;
  } while ((i14 | 0) < (HEAP32[i10 >> 2] | 0));
 }
 HEAP32[i2 >> 2] = HEAP32[i2 >> 2] << 3;
 HEAP32[i3 >> 2] = HEAP32[i3 >> 2] << 3;
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] << 3;
 HEAP32[i5 >> 2] = HEAP32[i5 >> 2] << 3;
 if ((i7 | 0) == 1) {
  d16 = +HEAPF64[66524];
  HEAP32[i2 >> 2] = ~~(+((HEAP32[i2 >> 2] | 0) + 1 | 0) / d16);
  HEAP32[i3 >> 2] = ~~(+((HEAP32[i3 >> 2] | 0) + 1 | 0) / d16);
  HEAP32[i4 >> 2] = ~~(+((HEAP32[i4 >> 2] | 0) + 1 | 0) / d16);
  HEAP32[i5 >> 2] = ~~(+((HEAP32[i5 >> 2] | 0) + 1 | 0) / d16);
  STACKTOP = i6;
  return;
 } else if ((i7 | 0) == 3) {
  i14 = HEAP32[i10 >> 2] | 0;
  if ((i14 | 0) > 1) {
   i1 = 0;
   while (1) {
    i15 = i9 + (i1 + i8) | 0;
    i11 = HEAPU8[i15 >> 0] | 0;
    if ((i11 & 8 | 0) == 0) {
     i17 = (i11 & 4 | 0) != 0;
    } else {
     i17 = 0;
    }
    HEAP32[i2 >> 2] = (((i11 & 3 | 0) == 1 & 1) + (i11 & 1) + ((i11 & 6 | 0) == 2 & 1) + (i17 & 1) << 3) + (HEAP32[i2 >> 2] | 0);
    i11 = HEAPU8[i15 >> 0] | 0;
    if ((i11 & 128 | 0) == 0) {
     i18 = (i11 & 64 | 0) != 0;
    } else {
     i18 = 0;
    }
    HEAP32[i3 >> 2] = (((i11 & 48 | 0) == 16 & 1) + (i11 >>> 4 & 1) + ((i11 & 96 | 0) == 32 & 1) + (i18 & 1) << 3) + (HEAP32[i3 >> 2] | 0);
    i11 = i1 + 1 | 0;
    i15 = HEAP32[i10 >> 2] | 0;
    if ((i11 | 0) < ((i15 | 0) / 2 | 0 | 0)) {
     i1 = i11;
    } else {
     i19 = i15;
     i20 = i11;
     break;
    }
   }
  } else {
   i19 = i14;
   i20 = 0;
  }
  if ((i20 | 0) < (i19 | 0)) {
   i21 = i20;
  } else {
   STACKTOP = i6;
   return;
  }
  do {
   i20 = i9 + (i21 + i8) | 0;
   i19 = HEAPU8[i20 >> 0] | 0;
   if ((i19 & 8 | 0) == 0) {
    i22 = (i19 & 4 | 0) != 0;
   } else {
    i22 = 0;
   }
   HEAP32[i4 >> 2] = (((i19 & 3 | 0) == 1 & 1) + (i19 & 1) + ((i19 & 6 | 0) == 2 & 1) + (i22 & 1) << 3) + (HEAP32[i4 >> 2] | 0);
   i19 = HEAPU8[i20 >> 0] | 0;
   if ((i19 & 128 | 0) == 0) {
    i23 = (i19 & 64 | 0) != 0;
   } else {
    i23 = 0;
   }
   HEAP32[i5 >> 2] = (((i19 & 48 | 0) == 16 & 1) + (i19 >>> 4 & 1) + ((i19 & 96 | 0) == 32 & 1) + (i23 & 1) << 3) + (HEAP32[i5 >> 2] | 0);
   i21 = i21 + 1 | 0;
  } while ((i21 | 0) < (HEAP32[i10 >> 2] | 0));
  STACKTOP = i6;
  return;
 } else if ((i7 | 0) == 2) {
  d16 = +HEAPF64[66525];
  HEAP32[i2 >> 2] = ~~(+(HEAP32[i2 >> 2] | 0) * d16);
  HEAP32[i3 >> 2] = ~~(+(HEAP32[i3 >> 2] | 0) * d16);
  HEAP32[i4 >> 2] = ~~(+(HEAP32[i4 >> 2] | 0) * d16);
  HEAP32[i5 >> 2] = ~~(+(HEAP32[i5 >> 2] | 0) * d16);
  STACKTOP = i6;
  return;
 } else if ((i7 | 0) == 4) {
  HEAP32[i2 >> 2] = (HEAP32[i10 >> 2] << 4) - (HEAP32[i2 >> 2] | 0);
  HEAP32[i3 >> 2] = (HEAP32[i10 >> 2] << 4) - (HEAP32[i3 >> 2] | 0);
  HEAP32[i4 >> 2] = (HEAP32[i10 >> 2] << 4) - (HEAP32[i4 >> 2] | 0);
  HEAP32[i5 >> 2] = (HEAP32[i10 >> 2] << 4) - (HEAP32[i5 >> 2] | 0);
  STACKTOP = i6;
  return;
 } else {
  STACKTOP = i6;
  return;
 }
}
function _do_fractal__async_cb144(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 i7 = HEAP32[i1 + 8 >> 2] | 0;
 i8 = HEAP32[i1 + 12 >> 2] | 0;
 i9 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i5 >> 2] = i7;
 HEAP32[i4 >> 2] = i8;
 HEAP32[i3 >> 2] = i9;
 i9 = HEAP32[71600] | 0;
 if ((HEAP32[i9 + 140 >> 2] | 0) == 0) {
  i8 = i9;
  L4 : while (1) {
   i7 = (HEAP32[i4 >> 2] | 0) + 80 | 0;
   if (i7 >>> 0 < (HEAP32[i3 >> 2] | 0) >>> 0) {
    i10 = i8;
    i11 = i7;
    i12 = (HEAP32[i5 >> 2] | 0) + 2 | 0;
   } else {
    i13 = i8;
    do {
     i7 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
     if ((i7 | 0) >= 2) {
      break L4;
     }
     i14 = HEAP32[i13 + 52 >> 2] | 0;
     i1 = HEAP32[i13 + 128 >> 2] | 0;
     HEAP32[i6 >> 2] = i7;
     HEAP32[i3 >> 2] = i14 + (i1 * 40 | 0);
    } while ((HEAP32[i6 >> 2] | 0) >= (i1 | 0));
    i10 = i13;
    i11 = i14 + ((HEAP32[i6 >> 2] | 0) * 40 | 0) | 0;
    i12 = (HEAP32[i13 + 36 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0;
   }
   HEAP32[i4 >> 2] = i11;
   HEAP32[i5 >> 2] = i12;
   if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] | 0) == 0) {
    i8 = i10;
   } else {
    i15 = 5;
    break;
   }
  }
  if ((i15 | 0) == 5) {
   i15 = _emscripten_realloc_async_context(20) | 0;
   _calccolumn(HEAP32[i5 >> 2] | 0, HEAP32[i4 >> 2] | 0);
   if (___async) {
    HEAP32[i15 >> 2] = 223;
    i16 = i15 + 4 | 0;
    i17 = HEAP32[i6 >> 2] | 0;
    HEAP32[i16 >> 2] = i17;
    i18 = i15 + 8 | 0;
    i19 = HEAP32[i5 >> 2] | 0;
    HEAP32[i18 >> 2] = i19;
    i20 = i15 + 12 | 0;
    i21 = HEAP32[i4 >> 2] | 0;
    HEAP32[i20 >> 2] = i21;
    i22 = i15 + 16 | 0;
    i23 = HEAP32[i3 >> 2] | 0;
    HEAP32[i22 >> 2] = i23;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   ___async_unwind = 0;
   HEAP32[i15 >> 2] = 223;
   i16 = i15 + 4 | 0;
   i17 = HEAP32[i6 >> 2] | 0;
   HEAP32[i16 >> 2] = i17;
   i18 = i15 + 8 | 0;
   i19 = HEAP32[i5 >> 2] | 0;
   HEAP32[i18 >> 2] = i19;
   i20 = i15 + 12 | 0;
   i21 = HEAP32[i4 >> 2] | 0;
   HEAP32[i20 >> 2] = i21;
   i22 = i15 + 16 | 0;
   i23 = HEAP32[i3 >> 2] | 0;
   HEAP32[i22 >> 2] = i23;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  if ((HEAP32[i13 + 140 >> 2] | 0) == 0) {
   i23 = HEAP32[i13 + 28 >> 2] | 0;
   if ((i23 | 0) != 0) {
    i22 = _emscripten_realloc_async_context(4) | 0;
    FUNCTION_TABLE_v[i23 & 63]();
    if (___async) {
     HEAP32[i22 >> 2] = 225;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i22 >> 2] = 225;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   HEAP32[i13 + 64 >> 2] = 0;
   HEAP32[i13 + 68 >> 2] = 0;
   HEAP32[i13 + 72 >> 2] = 286552;
   _dosymetry();
   i22 = HEAP32[71600] | 0;
   i23 = HEAP32[i22 + 28 >> 2] | 0;
   if ((i23 | 0) != 0) {
    i3 = _emscripten_realloc_async_context(4) | 0;
    FUNCTION_TABLE_v[i23 & 63]();
    if (___async) {
     HEAP32[i3 >> 2] = 226;
     i2 = STACKTOP;
     STACKTOP = i2;
     return;
    }
    ___async_unwind = 0;
    HEAP32[i3 >> 2] = 226;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   i3 = HEAP32[i22 + 52 >> 2] | 0;
   i23 = HEAP32[i22 + 128 >> 2] | 0;
   i15 = i3 + (i23 * 40 | 0) | 0;
   if ((i23 | 0) > 0) {
    i23 = HEAP32[i22 + 16 >> 2] | 0;
    i21 = i3;
    while (1) {
     HEAPF64[i23 >> 3] = +HEAPF64[i21 >> 3];
     i21 = i21 + 40 | 0;
     if (!(i21 >>> 0 < i15 >>> 0)) {
      break;
     } else {
      i23 = i23 + 8 | 0;
     }
    }
   }
   i23 = HEAP32[i22 + 56 >> 2] | 0;
   i15 = HEAP32[i22 + 132 >> 2] | 0;
   i21 = i23 + (i15 * 40 | 0) | 0;
   if ((i15 | 0) <= 0) {
    STACKTOP = i2;
    return;
   }
   i15 = HEAP32[i22 + 20 >> 2] | 0;
   i22 = i23;
   while (1) {
    HEAPF64[i15 >> 3] = +HEAPF64[i22 >> 3];
    i22 = i22 + 40 | 0;
    if (!(i22 >>> 0 < i21 >>> 0)) {
     break;
    } else {
     i15 = i15 + 8 | 0;
    }
   }
   STACKTOP = i2;
   return;
  } else {
   i24 = i13;
  }
 } else {
  i24 = i9;
 }
 _init_tables(i24);
 STACKTOP = i2;
 return;
}
function _outputline(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i5 = STACKTOP;
 i6 = HEAP32[31714] | 0;
 if ((i6 & 3 | 0) == 1) {
  i7 = (i4 - i2 | 0) / 2 | 0;
 } else {
  i7 = 0;
 }
 i8 = HEAP32[41716] | 0;
 if ((i6 & 2 | 0) == 0) {
  i9 = _malloc(i2 + 20 + i7 | 0) | 0;
  HEAP32[126864 + (i8 << 2) >> 2] = i9;
  i10 = i9;
 } else {
  i9 = _malloc(i4 + 20 | 0) | 0;
  HEAP32[126864 + (i8 << 2) >> 2] = i9;
  i10 = i9;
 }
 i9 = 126864 + (i8 << 2) | 0;
 HEAP8[i10 >> 0] = HEAP32[41718];
 if ((i7 | 0) > 0) {
  i8 = i10;
  i10 = 1;
  while (1) {
   HEAP8[i8 + i10 >> 0] = 32;
   if ((i10 | 0) == (i7 | 0)) {
    break;
   }
   i8 = HEAP32[i9 >> 2] | 0;
   i10 = i10 + 1 | 0;
  }
  i11 = HEAP32[31714] | 0;
 } else {
  i11 = i6;
 }
 if ((i11 & 2 | 0) == 0) {
  i12 = 1;
  i13 = 1;
 } else {
  if ((i3 | 0) > 0) {
   i11 = 0;
   i6 = 0;
   while (1) {
    i10 = ((HEAP8[i1 + i6 >> 0] | 0) == 32 & 1) + i11 | 0;
    i6 = i6 + 1 | 0;
    if ((i6 | 0) == (i3 | 0)) {
     i14 = i10;
     break;
    } else {
     i11 = i10;
    }
   }
  } else {
   i14 = 0;
  }
  i11 = (i14 | 0) == 0 ? 1 : i14;
  i12 = i11;
  i13 = i11 + ((HEAP8[i1 + i3 >> 0] | 0) == 10 ? 0 : 1 - i2 + i4 | 0) | 0;
 }
 i4 = i7 + 1 | 0;
 if ((i3 | 0) > 0) {
  i15 = 0;
  i16 = i4;
  i17 = 0;
 } else {
  i18 = i4;
  i19 = HEAP32[i9 >> 2] | 0;
  i20 = i19 + i18 | 0;
  HEAP8[i20 >> 0] = 0;
  i21 = HEAP32[41716] | 0;
  i22 = i21 + 1 | 0;
  i23 = (i22 | 0) > 9999;
  i24 = i23 ? 9999 : i22;
  HEAP32[41716] = i24;
  STACKTOP = i5;
  return;
 }
 while (1) {
  i4 = i16;
  i7 = i17;
  while (1) {
   if ((HEAP8[i1 + i7 >> 0] | 0) != 35) {
    i25 = i4;
    i26 = i7;
    break;
   }
   i2 = HEAP8[i1 + (i7 + 1) >> 0] | 0;
   if ((i2 | 0) == 114) {
    if ((HEAP32[(HEAP32[12936] | 0) + 84 >> 2] | 0) == 0) {
     i27 = i4;
    } else {
     HEAP8[(HEAP32[i9 >> 2] | 0) + i4 >> 0] = 5;
     HEAP32[41718] = 5;
     i27 = i4 + 1 | 0;
    }
   } else if ((i2 | 0) == 110) {
    HEAP8[(HEAP32[i9 >> 2] | 0) + i4 >> 0] = 1;
    HEAP32[41718] = 1;
    i27 = i4 + 1 | 0;
   } else if ((i2 | 0) == 100) {
    if ((HEAP32[(HEAP32[12936] | 0) + 84 >> 2] | 0) == 0) {
     i27 = i4;
    } else {
     HEAP8[(HEAP32[i9 >> 2] | 0) + i4 >> 0] = 2;
     HEAP32[41718] = 2;
     i27 = i4 + 1 | 0;
    }
   } else if ((i2 | 0) == 98 ? (HEAP32[(HEAP32[12936] | 0) + 84 >> 2] | 0) != 0 : 0) {
    HEAP8[(HEAP32[i9 >> 2] | 0) + i4 >> 0] = 3;
    HEAP32[41718] = 3;
    i27 = i4 + 1 | 0;
   } else {
    i27 = i4;
   }
   i2 = i7 + 2 | 0;
   if ((i2 | 0) < (i3 | 0)) {
    i4 = i27;
    i7 = i2;
   } else {
    i25 = i27;
    i26 = i2;
    break;
   }
  }
  if ((i26 | 0) >= (i3 | 0)) {
   i18 = i25;
   i28 = 34;
   break;
  }
  i7 = i1 + i26 | 0;
  i4 = HEAP8[i7 >> 0] | 0;
  if (i4 << 24 >> 24 == 32) {
   i2 = i15 + 1 | 0;
   i11 = (Math_imul(i2, i13) | 0) / (i12 | 0) | 0;
   i14 = (Math_imul(i15, i13) | 0) / (i12 | 0) | 0;
   i6 = i11 + -1 - i14 | 0;
   if ((i6 | 0) > 0) {
    i10 = i25 + -1 + i11 | 0;
    i11 = i25;
    i8 = 1;
    while (1) {
     HEAP8[(HEAP32[i9 >> 2] | 0) + i11 >> 0] = 32;
     if ((i8 | 0) == (i6 | 0)) {
      break;
     }
     i11 = i11 + 1 | 0;
     i8 = i8 + 1 | 0;
    }
    i29 = HEAP8[i7 >> 0] | 0;
    i30 = i2;
    i31 = i10 - i14 | 0;
   } else {
    i29 = 32;
    i30 = i2;
    i31 = i25;
   }
  } else {
   i29 = i4;
   i30 = i15;
   i31 = i25;
  }
  HEAP8[(HEAP32[i9 >> 2] | 0) + i31 >> 0] = i29;
  i17 = i26 + 1 | 0;
  i8 = i31 + 1 | 0;
  if ((i17 | 0) >= (i3 | 0)) {
   i18 = i8;
   i28 = 34;
   break;
  } else {
   i15 = i30;
   i16 = i8;
  }
 }
 if ((i28 | 0) == 34) {
  i19 = HEAP32[i9 >> 2] | 0;
  i20 = i19 + i18 | 0;
  HEAP8[i20 >> 0] = 0;
  i21 = HEAP32[41716] | 0;
  i22 = i21 + 1 | 0;
  i23 = (i22 | 0) > 9999;
  i24 = i23 ? 9999 : i22;
  HEAP32[41716] = i24;
  STACKTOP = i5;
  return;
 }
}
function _scene4__async_cb37(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 i5 = HEAP32[i1 + 4 >> 2] | 0;
 i6 = HEAP32[i1 + 12 >> 2] | 0;
 HEAP32[i4 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i3 >> 2] = i6;
 i6 = (HEAP32[i3 >> 2] | 0) + 1 | 0;
 i1 = HEAP32[12936] | 0;
 i7 = HEAP32[i1 + 60 >> 2] | 0;
 i8 = HEAP32[i4 >> 2] | 0;
 i9 = HEAP32[i4 >> 2] | 0;
 if ((i6 | 0) < ((i7 | 0) / 2 | 0 | 0)) {
  HEAP32[i3 >> 2] = i6;
  if (((HEAP32[i1 + 56 >> 2] | 0) + -25 | 0) > 0) {
   i10 = i1;
   i11 = 0;
   while (1) {
    i12 = i11 + 10 | 0;
    i13 = i10;
    i14 = 0;
    while (1) {
     i15 = i14 + (HEAP32[i3 >> 2] | 0) | 0;
     _aa_puts(i13, i12, i15, 0, 179544);
     _aa_puts(HEAP32[12936] | 0, i12, i15 + 1 | 0, 0, 179552);
     i15 = i14 + 3 | 0;
     if ((i15 | 0) >= 10) {
      break;
     }
     i13 = HEAP32[12936] | 0;
     i14 = i15;
    }
    i11 = i11 + 6 | 0;
    i14 = HEAP32[12936] | 0;
    if ((i11 | 0) >= ((HEAP32[i14 + 56 >> 2] | 0) + -25 | 0)) {
     i16 = i14;
     break;
    } else {
     i10 = i14;
    }
   }
  } else {
   i16 = i1;
  }
  i10 = i9 + -2 | 0;
  _aa_puts(i16, i10, (HEAP32[i16 + 60 >> 2] | 0) + -1 | 0, 0, 179560);
  HEAP32[i4 >> 2] = i10 + ((_rand() | 0) % 5 | 0);
  i10 = _emscripten_realloc_async_context(16) | 0;
  _bbflushwait(i5);
  if (___async) {
   HEAP32[i10 >> 2] = 102;
   i17 = i10 + 4 | 0;
   HEAP32[i17 >> 2] = i5;
   i18 = i10 + 8 | 0;
   i19 = HEAP32[i4 >> 2] | 0;
   HEAP32[i18 >> 2] = i19;
   i20 = i10 + 12 | 0;
   i21 = HEAP32[i3 >> 2] | 0;
   HEAP32[i20 >> 2] = i21;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i10 >> 2] = 102;
  i17 = i10 + 4 | 0;
  HEAP32[i17 >> 2] = i5;
  i18 = i10 + 8 | 0;
  i19 = HEAP32[i4 >> 2] | 0;
  HEAP32[i18 >> 2] = i19;
  i20 = i10 + 12 | 0;
  i21 = HEAP32[i3 >> 2] | 0;
  HEAP32[i20 >> 2] = i21;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 if ((i6 | 0) >= (i7 + -10 | 0)) {
  _free(HEAP32[i1 + 160 >> 2] | 0);
  i7 = HEAP32[12936] | 0;
  HEAP32[i7 + 160 >> 2] = _malloc(Math_imul((HEAP32[i7 + 156 >> 2] | 0) + 4 | 0, HEAP32[i7 + 152 >> 2] | 0) | 0) | 0;
  i7 = HEAP32[12936] | 0;
  _backconvert(0, 0, HEAP32[i7 + 56 >> 2] | 0, HEAP32[i7 + 60 >> 2] | 0);
  HEAP32[HEAP32[22682] >> 2] = 120;
  HEAP32[34] = 0;
  i7 = _emscripten_realloc_async_context(4) | 0;
  _draw();
  if (___async) {
   HEAP32[i7 >> 2] = 104;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i7 >> 2] = 104;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 if (((HEAP32[i1 + 56 >> 2] | 0) + -25 | 0) > 0) {
  i7 = i1;
  i21 = 0;
  while (1) {
   i20 = i21 + 10 | 0;
   i3 = i7;
   i10 = 0;
   while (1) {
    i19 = i10 + i6 | 0;
    _aa_puts(i3, i20, i19, 0, 179544);
    _aa_puts(HEAP32[12936] | 0, i20, i19 + 1 | 0, 0, 179576);
    i19 = i10 + 3 | 0;
    if ((i19 | 0) >= 10) {
     break;
    }
    i3 = HEAP32[12936] | 0;
    i10 = i19;
   }
   i21 = i21 + 6 | 0;
   i10 = HEAP32[12936] | 0;
   if ((i21 | 0) >= ((HEAP32[i10 + 56 >> 2] | 0) + -25 | 0)) {
    i22 = i10;
    break;
   } else {
    i7 = i10;
   }
  }
 } else {
  i22 = i1;
 }
 _aa_puts(i22, i8 + -2 | 0, (HEAP32[i22 + 60 >> 2] | 0) + -1 | 0, 0, 179584);
 i22 = i8 + -3 + ((_rand() | 0) % 7 | 0) | 0;
 i8 = _emscripten_realloc_async_context(16) | 0;
 _bbflushwait(i5);
 if (___async) {
  HEAP32[i8 >> 2] = 103;
  i23 = i8 + 4 | 0;
  HEAP32[i23 >> 2] = i6;
  i24 = i8 + 8 | 0;
  HEAP32[i24 >> 2] = i22;
  i25 = i8 + 12 | 0;
  HEAP32[i25 >> 2] = i5;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i8 >> 2] = 103;
 i23 = i8 + 4 | 0;
 HEAP32[i23 >> 2] = i6;
 i24 = i8 + 8 | 0;
 HEAP32[i24 >> 2] = i22;
 i25 = i8 + 12 | 0;
 HEAP32[i25 >> 2] = i5;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _timestuff(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i5 = STACKTOP;
 i6 = _emscripten_alloc_async_context(20) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i5;
 _bbupdate() | 0;
 if (___async) {
  HEAP32[i6 >> 2] = 119;
  HEAP32[i6 + 4 >> 2] = i3;
  HEAP32[i6 + 8 >> 2] = i2;
  HEAP32[i6 + 12 >> 2] = i4;
  HEAP32[i6 + 16 >> 2] = i1;
  i5 = STACKTOP;
  STACKTOP = i5;
  return;
 }
 _emscripten_free_async_context(i6 | 0);
 HEAP32[68196] = (HEAP32[68194] | 0) + i4;
 i4 = _tl_create_timer() | 0;
 i6 = (i2 | 0) == 0;
 i7 = i6 ? -40 : i1;
 if ((i7 | 0) < 0) {
  HEAP32[68198] = i2;
  _tl_set_multihandler(i4, 120);
  i8 = 0 - i7 | 0;
  i9 = 1;
 } else {
  _tl_set_multihandler(i4, i2);
  i8 = i7;
  i9 = 0;
 }
 _tl_set_interval(i4, 1e6 / (i8 | 0) | 0);
 _tl_add_timer(HEAP32[12] | 0, i4);
 _tl_reset_timer(i4);
 do {
  if (!i6) {
   i8 = _emscripten_alloc_async_context(16) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i5;
   FUNCTION_TABLE_vi[i2 & 511](1);
   if (___async) {
    HEAP32[i8 >> 2] = 121;
    HEAP32[i8 + 4 >> 2] = i4;
    HEAP32[i8 + 8 >> 2] = i3;
    HEAP32[i8 + 12 >> 2] = i9;
    i5 = STACKTOP;
    STACKTOP = i5;
    return;
   } else {
    _emscripten_free_async_context(i8 | 0);
    break;
   }
  }
 } while (0);
 if ((HEAP32[68190] | 0) != 0) {
  i10 = HEAP32[68196] | 0;
  HEAP32[68194] = i10;
  _tl_free_timer(i4);
  STACKTOP = i5;
  return;
 }
 i2 = (i9 | 0) == 0;
 i9 = (i3 | 0) == 0;
 while (1) {
  if ((HEAP32[68188] | 0) >= (HEAP32[68196] | 0)) {
   i11 = 27;
   break;
  }
  HEAP32[68200] = 0;
  i6 = HEAP32[12] | 0;
  i12 = _emscripten_alloc_async_context(20) | 0;
  HEAP32[___async_cur_frame + 4 >> 2] = i5;
  i13 = _tl_process_group(i6) | 0;
  if (___async) {
   i11 = 14;
   break;
  }
  _emscripten_free_async_context(i12 | 0);
  i14 = _emscripten_alloc_async_context(24) | 0;
  HEAP32[___async_cur_frame + 4 >> 2] = i5;
  _bbupdate() | 0;
  if (___async) {
   i11 = 16;
   break;
  }
  _emscripten_free_async_context(i14 | 0);
  if ((HEAP32[68188] | 0) > (HEAP32[68196] | 0)) {
   i11 = 27;
   break;
  }
  if ((HEAP32[68200] | 0) != 0 | i2) {
   if (!i9) {
    i15 = _emscripten_alloc_async_context(20) | 0;
    HEAP32[___async_cur_frame + 4 >> 2] = i5;
    FUNCTION_TABLE_v[i3 & 63]();
    if (___async) {
     i11 = 24;
     break;
    }
    _emscripten_free_async_context(i15 | 0);
   }
  } else {
   i16 = _emscripten_alloc_async_context(20) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i5;
   _tl_sleep(i13);
   if (___async) {
    i11 = 20;
    break;
   }
   _emscripten_free_async_context(i16 | 0);
  }
  if ((HEAP32[68190] | 0) != 0) {
   i11 = 27;
   break;
  }
 }
 if ((i11 | 0) == 14) {
  HEAP32[i12 >> 2] = 122;
  HEAP32[i12 + 4 >> 2] = i4;
  HEAP8[i12 + 8 >> 0] = i9 & 1;
  HEAP32[i12 + 12 >> 2] = i3;
  HEAP8[i12 + 16 >> 0] = i2 & 1;
  i5 = STACKTOP;
  STACKTOP = i5;
  return;
 } else if ((i11 | 0) == 16) {
  HEAP32[i14 >> 2] = 123;
  HEAP32[i14 + 4 >> 2] = i4;
  HEAP8[i14 + 8 >> 0] = i9 & 1;
  HEAP32[i14 + 12 >> 2] = i13;
  HEAP32[i14 + 16 >> 2] = i3;
  HEAP8[i14 + 20 >> 0] = i2 & 1;
  i5 = STACKTOP;
  STACKTOP = i5;
  return;
 } else if ((i11 | 0) == 20) {
  HEAP32[i16 >> 2] = 124;
  HEAP32[i16 + 4 >> 2] = i4;
  HEAP8[i16 + 8 >> 0] = i9 & 1;
  HEAP32[i16 + 12 >> 2] = i3;
  HEAP8[i16 + 16 >> 0] = i2 & 1;
  i5 = STACKTOP;
  STACKTOP = i5;
  return;
 } else if ((i11 | 0) == 24) {
  HEAP32[i15 >> 2] = 125;
  HEAP32[i15 + 4 >> 2] = i4;
  HEAP8[i15 + 8 >> 0] = i9 & 1;
  HEAP32[i15 + 12 >> 2] = i3;
  HEAP8[i15 + 16 >> 0] = i2 & 1;
  i5 = STACKTOP;
  STACKTOP = i5;
  return;
 } else if ((i11 | 0) == 27) {
  i10 = HEAP32[68196] | 0;
  HEAP32[68194] = i10;
  _tl_free_timer(i4);
  STACKTOP = i5;
  return;
 }
}
function _drawfire(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i3 = i1;
 i1 = HEAP32[12936] | 0;
 while (1) {
  i4 = HEAP32[44900] | 0;
  i5 = HEAP32[68196] | 0;
  i6 = HEAP32[68188] | 0;
  HEAP32[44900] = ((i4 | 0) > (i5 - i4 - i6 | 0) ? -6 : 6) + i4;
  i4 = HEAP32[i1 + 152 >> 2] | 0;
  i7 = i4 << 2;
  i8 = HEAP32[44902] | 0;
  i9 = HEAP32[i1 + 156 >> 2] | 0;
  i10 = Math_imul(i9, i4) | 0;
  if ((i5 - i6 | 0) > 2e6) {
   if ((i10 | 0) < (Math_imul(i9 + 1 | 0, i4) | 0)) {
    i4 = 1;
    i9 = i7 | 1;
    i6 = i8 + i10 | 0;
    while (1) {
     i5 = _rand() | 0;
     i11 = HEAP32[44900] | 0;
     i12 = i9 >>> 0 < i11 >>> 0 ? i9 : i11;
     i11 = (i5 >>> 0) % ((i4 >>> 0 < i12 >>> 0 ? i4 : i12) >>> 0) | 0;
     i12 = (_rand() | 0) % 6 | 0;
     i5 = HEAP32[12936] | 0;
     i13 = HEAP32[i5 + 152 >> 2] | 0;
     i14 = i11 & 255;
     if ((i12 | 0) != 0 ? i6 >>> 0 < ((HEAP32[44902] | 0) + (Math_imul((HEAP32[i5 + 156 >> 2] | 0) + 1 | 0, i13) | 0) | 0) >>> 0 : 0) {
      i5 = i14;
      i15 = i12;
      i12 = i4;
      i16 = i9;
      i17 = i11;
      i11 = i6;
      while (1) {
       HEAP8[i11 >> 0] = i5;
       i18 = i17 + -2 + ((_rand() | 0) % 6 | 0) | 0;
       HEAP8[i11 + (HEAP32[(HEAP32[12936] | 0) + 152 >> 2] | 0) >> 0] = i18;
       i17 = i18 + -2 + ((_rand() | 0) % 6 | 0) | 0;
       i18 = i11 + 1 | 0;
       i15 = i15 + -1 | 0;
       i19 = i12 + 4 | 0;
       i20 = i16 + -4 | 0;
       i21 = HEAP32[12936] | 0;
       i22 = HEAP32[i21 + 152 >> 2] | 0;
       i23 = i17 & 255;
       if (!((i15 | 0) != 0 ? i18 >>> 0 < ((HEAP32[44902] | 0) + (Math_imul((HEAP32[i21 + 156 >> 2] | 0) + 1 | 0, i22) | 0) | 0) >>> 0 : 0)) {
        i24 = i22;
        i25 = i23;
        i26 = i19;
        i27 = i20;
        i28 = i18;
        break;
       } else {
        i5 = i23;
        i12 = i19;
        i16 = i20;
        i11 = i18;
       }
      }
     } else {
      i24 = i13;
      i25 = i14;
      i26 = i4;
      i27 = i9;
      i28 = i6;
     }
     HEAP8[i28 + (i24 << 1) >> 0] = i25;
     _rand() | 0;
     i6 = i28 + 1 | 0;
     i11 = HEAP32[12936] | 0;
     if (!(i6 >>> 0 < ((HEAP32[44902] | 0) + (Math_imul((HEAP32[i11 + 156 >> 2] | 0) + 1 | 0, HEAP32[i11 + 152 >> 2] | 0) | 0) | 0) >>> 0)) {
      i29 = i11;
      break;
     } else {
      i4 = i26 + 4 | 0;
      i9 = i27 + -4 | 0;
     }
    }
   } else {
    i29 = i1;
   }
  } else {
   _memset(i8 + i10 | 0, 0, i7 | 0) | 0;
   i29 = HEAP32[12936] | 0;
  }
  i9 = HEAP32[i29 + 152 >> 2] | 0;
  if ((Math_imul(HEAP32[i29 + 156 >> 2] | 0, i9) | 0) < 0) {
   i30 = i29;
  } else {
   i4 = i9;
   i9 = HEAP32[44902] | 0;
   do {
    i6 = i4 << 1;
    HEAP8[i9 >> 0] = HEAP32[(HEAP32[44868] | 0) + ((HEAPU8[i9 + (i4 + 1) >> 0] | 0) + (HEAPU8[i9 + (i4 + -1) >> 0] | 0) + (HEAPU8[i9 + i4 >> 0] | 0) + (HEAPU8[i9 + (i6 + -1) >> 0] | 0) + (HEAPU8[i9 + (i6 | 1) >> 0] | 0) << 2) >> 2];
    i9 = i9 + 1 | 0;
    i6 = HEAP32[12936] | 0;
    i4 = HEAP32[i6 + 152 >> 2] | 0;
   } while (!(i9 >>> 0 > ((HEAP32[44902] | 0) + (Math_imul(HEAP32[i6 + 156 >> 2] | 0, i4) | 0) | 0) >>> 0));
   i30 = i6;
  }
  i4 = HEAP32[22682] | 0;
  i9 = (HEAP32[i4 >> 2] | 0) + -12 | 0;
  HEAP32[i4 >> 2] = (i9 | 0) < 0 ? 0 : i9;
  i3 = i3 + -1 | 0;
  if ((i3 | 0) == 0) {
   break;
  } else {
   i1 = i30;
  }
 }
 STACKTOP = i2;
 return;
}
function _scene8() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 _decompressimg(272712) | 0;
 HEAP32[34] = 11;
 HEAP32[44904] = HEAP32[68194];
 HEAP32[44906] = -255;
 HEAP32[44908] = 0;
 HEAP32[44910] = 100;
 HEAP32[44912] = 100;
 HEAP32[44914] = 100;
 HEAP32[44916] = 100;
 HEAP32[44918] = 300;
 HEAP32[44920] = 300;
 HEAP32[44922] = 400;
 HEAP32[44924] = 400;
 HEAP32[44926] = 100;
 HEAP32[44928] = 100;
 HEAP32[44930] = 100;
 HEAP32[44932] = 100;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 1, 2e6);
 if (___async) {
  HEAP32[i2 >> 2] = 110;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[44906] = HEAP32[44908];
 HEAP32[44912] = 0;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 1, 1e6);
 if (___async) {
  HEAP32[i2 >> 2] = 111;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[44910] = HEAP32[44912];
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 1, 5e6);
 if (___async) {
  HEAP32[i2 >> 2] = 112;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[44928] = 200;
 HEAP32[44926] = 200;
 HEAP32[44920] = HEAP32[44918];
 HEAP32[44924] = HEAP32[44922];
 HEAP32[44918] = 750;
 HEAP32[44922] = 300;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 1, 3e6);
 if (___async) {
  HEAP32[i2 >> 2] = 113;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[44920] = HEAP32[44918];
 HEAP32[44924] = HEAP32[44922];
 HEAP32[44932] = HEAP32[44928];
 HEAP32[44930] = HEAP32[44926];
 HEAP32[44916] = 20;
 HEAP32[44928] = 300;
 HEAP32[44926] = 300;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 1, 1e6);
 if (___async) {
  HEAP32[i2 >> 2] = 114;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[44914] = HEAP32[44916];
 HEAP32[44920] = HEAP32[44918];
 HEAP32[44924] = HEAP32[44922];
 HEAP32[44932] = HEAP32[44928];
 HEAP32[44930] = HEAP32[44926];
 HEAP32[44922] = 400;
 HEAP32[44928] = 600;
 HEAP32[44926] = 600;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 1, 2e6);
 if (___async) {
  HEAP32[i2 >> 2] = 115;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[44920] = HEAP32[44918];
 HEAP32[44924] = HEAP32[44922];
 HEAP32[44932] = HEAP32[44928];
 HEAP32[44930] = HEAP32[44926];
 HEAP32[44928] = 200;
 HEAP32[44926] = 200;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 1, 1e6);
 if (___async) {
  HEAP32[i2 >> 2] = 116;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[44920] = HEAP32[44918];
 HEAP32[44924] = HEAP32[44922];
 HEAP32[44932] = HEAP32[44928];
 HEAP32[44930] = HEAP32[44926];
 HEAP32[44908] = 255;
 HEAP32[44928] = 120;
 HEAP32[44926] = 120;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 1, 2e5);
 if (___async) {
  HEAP32[i2 >> 2] = 117;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else {
  _emscripten_free_async_context(i2 | 0);
  _free(HEAP32[272728 >> 2] | 0);
  i2 = HEAP32[22682] | 0;
  HEAP32[i2 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
  STACKTOP = i1;
  return;
 }
}
function _credits2__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[___async_retval >> 2];
 switch (HEAP32[i3 >> 2] | 0) {
 case 49:
  {
   _load_song(523496) | 0;
   i1 = _emscripten_realloc_async_context(8) | 0;
   _bbupdate() | 0;
   if (___async) {
    HEAP32[i1 >> 2] = 255;
    i5 = i1 + 4 | 0;
    HEAP32[i5 >> 2] = i4;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   ___async_unwind = 0;
   HEAP32[i1 >> 2] = 255;
   i5 = i1 + 4 | 0;
   HEAP32[i5 >> 2] = i4;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
 case 305:
 case 81:
 case 113:
  {
   HEAP32[68190] = 0;
   i5 = HEAP32[12936] | 0;
   _backconvert(0, 0, HEAP32[i5 + 56 >> 2] | 0, HEAP32[i5 + 60 >> 2] | 0);
   i5 = _emscripten_realloc_async_context(4) | 0;
   _bbupdate() | 0;
   if (___async) {
    HEAP32[i5 >> 2] = 258;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   ___async_unwind = 0;
   HEAP32[i5 >> 2] = 258;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
 case 74:
 case 106:
 case 32:
 case 70:
 case 102:
 case 302:
 case 301:
  {
   i5 = (Math_imul((HEAP32[68184] | 0) + 1 | 0, ((HEAP32[(HEAP32[12936] | 0) + 60 >> 2] | 0) + -9 | 0) / 2 | 0) | 0) + i4 | 0;
   i1 = HEAP32[41716] | 0;
   i6 = (i5 | 0) > (i1 | 0) ? i1 : i5;
   break;
  }
 case 51:
  {
   _load_song(523440) | 0;
   i5 = _emscripten_realloc_async_context(8) | 0;
   _bbupdate() | 0;
   if (___async) {
    HEAP32[i5 >> 2] = 257;
    i7 = i5 + 4 | 0;
    HEAP32[i7 >> 2] = i4;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   ___async_unwind = 0;
   HEAP32[i5 >> 2] = 257;
   i7 = i5 + 4 | 0;
   HEAP32[i7 >> 2] = i4;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
 case 300:
 case 304:
 case 75:
 case 66:
 case 107:
 case 98:
  {
   i7 = i4 - (Math_imul((HEAP32[68184] | 0) + 1 | 0, ((HEAP32[(HEAP32[12936] | 0) + 60 >> 2] | 0) + -9 | 0) / 2 | 0) | 0) | 0;
   i6 = (i7 | 0) < 0 ? 0 : i7;
   break;
  }
 case 50:
  {
   _load_song(523504) | 0;
   i7 = _emscripten_realloc_async_context(8) | 0;
   _bbupdate() | 0;
   if (___async) {
    HEAP32[i7 >> 2] = 256;
    i8 = i7 + 4 | 0;
    HEAP32[i8 >> 2] = i4;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   ___async_unwind = 0;
   HEAP32[i7 >> 2] = 256;
   i8 = i7 + 4 | 0;
   HEAP32[i8 >> 2] = i4;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
 default:
  {
   i8 = HEAP32[12936] | 0;
   i7 = _emscripten_realloc_async_context(8) | 0;
   HEAP32[i3 >> 2] = _aa_getkey(i8, 1) | 0;
   if (___async) {
    HEAP32[i7 >> 2] = 254;
    i9 = i7 + 4 | 0;
    HEAP32[i9 >> 2] = i4;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
   HEAP32[___async_retval >> 2] = HEAP32[i3 >> 2];
   ___async_unwind = 0;
   HEAP32[i7 >> 2] = 254;
   i9 = i7 + 4 | 0;
   HEAP32[i9 >> 2] = i4;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
 }
 i9 = _emscripten_realloc_async_context(12) | 0;
 _bbupdate() | 0;
 if (___async) {
  HEAP32[i9 >> 2] = 260;
  i10 = i9 + 4 | 0;
  HEAP32[i10 >> 2] = i6;
  i11 = i9 + 8 | 0;
  HEAP32[i11 >> 2] = i4;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i9 >> 2] = 260;
 i10 = i9 + 4 | 0;
 HEAP32[i10 >> 2] = i6;
 i11 = i9 + 8 | 0;
 HEAP32[i11 >> 2] = i4;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _scene4__async_cb41(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 i7 = HEAP32[i1 + 8 >> 2] | 0;
 i8 = HEAP32[i1 + 12 >> 2] | 0;
 i9 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i5 >> 2] = i7;
 HEAP32[i4 >> 2] = i8;
 HEAP32[i3 >> 2] = i9;
 i9 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
 i8 = HEAP32[i6 >> 2] | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i9 | 0) == 10) {
  i10 = HEAP32[12936] | 0;
  if (((HEAP32[i10 + 56 >> 2] | 0) + -25 | 0) > 0) {
   i11 = i10;
   i10 = 0;
   do {
    i12 = i10 + 10 | 0;
    _aa_puts(i11, i12, 6, 0, 179528);
    _aa_puts(HEAP32[12936] | 0, i12, 9, 0, 179528);
    _aa_puts(HEAP32[12936] | 0, i12, 12, 0, 179528);
    _aa_puts(HEAP32[12936] | 0, i12, 15, 0, 179528);
    i10 = i10 + 6 | 0;
    i11 = HEAP32[12936] | 0;
   } while ((i10 | 0) < ((HEAP32[i11 + 56 >> 2] | 0) + -25 | 0));
  }
  i11 = _emscripten_realloc_async_context(12) | 0;
  _bbflushwait(1e5);
  if (___async) {
   HEAP32[i11 >> 2] = 99;
   i13 = i11 + 4 | 0;
   i14 = HEAP32[i6 >> 2] | 0;
   HEAP32[i13 >> 2] = i14;
   i15 = i11 + 8 | 0;
   HEAP32[i15 >> 2] = 0;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i11 >> 2] = 99;
  i13 = i11 + 4 | 0;
  i14 = HEAP32[i6 >> 2] | 0;
  HEAP32[i13 >> 2] = i14;
  i15 = i11 + 8 | 0;
  HEAP32[i15 >> 2] = 0;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 HEAP32[i5 >> 2] = i9;
 i9 = (i1 | 0) > 7;
 HEAP32[i3 >> 2] = i9 ? 0 : i1 + 1 | 0;
 i1 = i9 & 1;
 HEAP32[i4 >> 2] = i1 ^ i7;
 i9 = HEAP32[12936] | 0;
 if (((HEAP32[i9 + 56 >> 2] | 0) + -25 | 0) > 0) {
  i15 = (i7 | 0) != (i1 | 0) ? 179504 : 179512;
  i1 = i9;
  i7 = 0;
  while (1) {
   i11 = i7 + (HEAP32[i5 >> 2] | 0) | 0;
   _aa_puts(i1, i11, 6, 0, i15);
   _aa_puts(HEAP32[12936] | 0, i11, 9, 0, i15);
   _aa_puts(HEAP32[12936] | 0, i11, 12, 0, i15);
   _aa_puts(HEAP32[12936] | 0, i11, 15, 0, i15);
   i7 = i7 + 6 | 0;
   i11 = HEAP32[12936] | 0;
   if ((i7 | 0) >= ((HEAP32[i11 + 56 >> 2] | 0) + -25 | 0)) {
    i16 = i11;
    break;
   } else {
    i1 = i11;
   }
  }
 } else {
  i16 = i9;
 }
 _aa_puts(i16, i8, (HEAP32[i16 + 60 >> 2] | 0) + -1 | 0, 0, 179520);
 HEAP32[i6 >> 2] = i8 + -1 + ((_rand() | 0) % 3 | 0);
 i8 = _emscripten_realloc_async_context(20) | 0;
 _bbflushwait(1e4);
 if (___async) {
  HEAP32[i8 >> 2] = 98;
  i17 = i8 + 4 | 0;
  i18 = HEAP32[i6 >> 2] | 0;
  HEAP32[i17 >> 2] = i18;
  i19 = i8 + 8 | 0;
  i20 = HEAP32[i5 >> 2] | 0;
  HEAP32[i19 >> 2] = i20;
  i21 = i8 + 12 | 0;
  i22 = HEAP32[i4 >> 2] | 0;
  HEAP32[i21 >> 2] = i22;
  i23 = i8 + 16 | 0;
  i24 = HEAP32[i3 >> 2] | 0;
  HEAP32[i23 >> 2] = i24;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i8 >> 2] = 98;
 i17 = i8 + 4 | 0;
 i18 = HEAP32[i6 >> 2] | 0;
 HEAP32[i17 >> 2] = i18;
 i19 = i8 + 8 | 0;
 i20 = HEAP32[i5 >> 2] | 0;
 HEAP32[i19 >> 2] = i20;
 i21 = i8 + 12 | 0;
 i22 = HEAP32[i4 >> 2] | 0;
 HEAP32[i21 >> 2] = i22;
 i23 = i8 + 16 | 0;
 i24 = HEAP32[i3 >> 2] | 0;
 HEAP32[i23 >> 2] = i24;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _timestuff__async_cb82(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 i5 = HEAP8[i1 + 8 >> 0] & 1;
 i6 = HEAP32[i1 + 16 >> 2] | 0;
 i7 = HEAP8[i1 + 20 >> 0] & 1;
 HEAP32[i3 >> 2] = HEAP32[i1 + 12 >> 2];
 if ((HEAP32[68188] | 0) > (HEAP32[68196] | 0)) {
  i8 = HEAP32[68196] | 0;
  HEAP32[68194] = i8;
  _tl_free_timer(i4);
  STACKTOP = i2;
  return;
 }
 if (!((HEAP32[68200] | 0) != 0 | i7)) {
  i1 = _emscripten_realloc_async_context(20) | 0;
  _tl_sleep(HEAP32[i3 >> 2] | 0);
  if (___async) {
   HEAP32[i1 >> 2] = 124;
   i9 = i1 + 4 | 0;
   HEAP32[i9 >> 2] = i4;
   i10 = i1 + 8 | 0;
   i11 = i5 & 1;
   HEAP8[i10 >> 0] = i11;
   i12 = i1 + 12 | 0;
   HEAP32[i12 >> 2] = i6;
   i13 = i1 + 16 | 0;
   i14 = i7 & 1;
   HEAP8[i13 >> 0] = i14;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i1 >> 2] = 124;
  i9 = i1 + 4 | 0;
  HEAP32[i9 >> 2] = i4;
  i10 = i1 + 8 | 0;
  i11 = i5 & 1;
  HEAP8[i10 >> 0] = i11;
  i12 = i1 + 12 | 0;
  HEAP32[i12 >> 2] = i6;
  i13 = i1 + 16 | 0;
  i14 = i7 & 1;
  HEAP8[i13 >> 0] = i14;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 if (!i5) {
  i14 = _emscripten_realloc_async_context(20) | 0;
  FUNCTION_TABLE_v[i6 & 63]();
  if (___async) {
   HEAP32[i14 >> 2] = 125;
   i15 = i14 + 4 | 0;
   HEAP32[i15 >> 2] = i4;
   i16 = i14 + 8 | 0;
   i17 = i5 & 1;
   HEAP8[i16 >> 0] = i17;
   i18 = i14 + 12 | 0;
   HEAP32[i18 >> 2] = i6;
   i19 = i14 + 16 | 0;
   i20 = i7 & 1;
   HEAP8[i19 >> 0] = i20;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i14 >> 2] = 125;
  i15 = i14 + 4 | 0;
  HEAP32[i15 >> 2] = i4;
  i16 = i14 + 8 | 0;
  i17 = i5 & 1;
  HEAP8[i16 >> 0] = i17;
  i18 = i14 + 12 | 0;
  HEAP32[i18 >> 2] = i6;
  i19 = i14 + 16 | 0;
  i20 = i7 & 1;
  HEAP8[i19 >> 0] = i20;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[68190] | 0) != 0) {
  i8 = HEAP32[68196] | 0;
  HEAP32[68194] = i8;
  _tl_free_timer(i4);
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[68188] | 0) >= (HEAP32[68196] | 0)) {
  i8 = HEAP32[68196] | 0;
  HEAP32[68194] = i8;
  _tl_free_timer(i4);
  STACKTOP = i2;
  return;
 }
 HEAP32[68200] = 0;
 i8 = HEAP32[12] | 0;
 i20 = _emscripten_realloc_async_context(20) | 0;
 HEAP32[i3 >> 2] = _tl_process_group(i8) | 0;
 if (___async) {
  HEAP32[i20 >> 2] = 122;
  i21 = i20 + 4 | 0;
  HEAP32[i21 >> 2] = i4;
  i22 = i20 + 8 | 0;
  i23 = i5 & 1;
  HEAP8[i22 >> 0] = i23;
  i24 = i20 + 12 | 0;
  HEAP32[i24 >> 2] = i6;
  i25 = i20 + 16 | 0;
  i26 = i7 & 1;
  HEAP8[i25 >> 0] = i26;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 HEAP32[___async_retval >> 2] = HEAP32[i3 >> 2];
 ___async_unwind = 0;
 HEAP32[i20 >> 2] = 122;
 i21 = i20 + 4 | 0;
 HEAP32[i21 >> 2] = i4;
 i22 = i20 + 8 | 0;
 i23 = i5 & 1;
 HEAP8[i22 >> 0] = i23;
 i24 = i20 + 12 | 0;
 HEAP32[i24 >> 2] = i6;
 i25 = i20 + 16 | 0;
 i26 = i7 & 1;
 HEAP8[i25 >> 0] = i26;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _aa_resize(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 i5 = i1 + 56 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 HEAP32[i3 >> 2] = (i6 | 0) > -1 ? i6 : 0 - i6 | 0;
 i6 = i1 + 60 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 HEAP32[i4 >> 2] = (i7 | 0) > -1 ? i7 : 0 - i7 | 0;
 i7 = HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] | 0;
 i8 = _emscripten_alloc_async_context(24) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i2;
 FUNCTION_TABLE_viii[i7 & 3](i1, i3, i4);
 if (___async) {
  HEAP32[i8 >> 2] = 294;
  HEAP32[i8 + 4 >> 2] = i4;
  HEAP32[i8 + 8 >> 2] = i1;
  HEAP32[i8 + 12 >> 2] = i5;
  HEAP32[i8 + 16 >> 2] = i6;
  HEAP32[i8 + 20 >> 2] = i3;
  i2 = STACKTOP;
  STACKTOP = i2;
  return 0;
 }
 _emscripten_free_async_context(i8 | 0);
 i8 = HEAP32[i3 >> 2] | 0;
 if ((i8 | 0) < 1) {
  _puts(525976) | 0;
  _exit(-1);
 }
 i7 = HEAP32[i4 >> 2] | 0;
 if ((i7 | 0) < 1) {
  _puts(525976) | 0;
  _exit(-1);
 }
 if ((i8 | 0) == (HEAP32[i5 >> 2] | 0) ? (i7 | 0) == (HEAP32[i1 + 156 >> 2] | 0) : 0) {
  i9 = i8;
 } else {
  i8 = i1 + 160 | 0;
  i7 = HEAP32[i8 >> 2] | 0;
  if ((i7 | 0) != 0) {
   _free(i7);
  }
  i7 = i1 + 164 | 0;
  i10 = HEAP32[i7 >> 2] | 0;
  if ((i10 | 0) != 0) {
   _free(i10);
  }
  i10 = i1 + 168 | 0;
  i11 = HEAP32[i10 >> 2] | 0;
  if ((i11 | 0) != 0) {
   _free(i11);
  }
  i11 = HEAP32[i3 >> 2] | 0;
  HEAP32[i5 >> 2] = i11;
  i5 = HEAP32[i4 >> 2] | 0;
  HEAP32[i6 >> 2] = i5;
  i4 = HEAP32[i1 + 144 >> 2] | 0;
  i3 = Math_imul(i4, i11) | 0;
  HEAP32[i1 + 152 >> 2] = i3;
  i12 = Math_imul(i4, i5) | 0;
  HEAP32[i1 + 156 >> 2] = i12;
  i4 = _calloc(1, Math_imul(i3, i12) | 0) | 0;
  HEAP32[i8 >> 2] = i4;
  if ((i4 | 0) == 0) {
   i13 = 0;
   STACKTOP = i2;
   return i13 | 0;
  }
  i8 = Math_imul(i5, i11) | 0;
  i5 = _calloc(1, i8) | 0;
  HEAP32[i7 >> 2] = i5;
  if ((i5 | 0) == 0) {
   _free(i4);
   i13 = 0;
   STACKTOP = i2;
   return i13 | 0;
  }
  _memset(i5 | 0, 32, i8 | 0) | 0;
  i5 = _calloc(1, i8) | 0;
  HEAP32[i10 >> 2] = i5;
  if ((i5 | 0) == 0) {
   _free(i4);
   _free(HEAP32[i7 >> 2] | 0);
   i13 = 0;
   STACKTOP = i2;
   return i13 | 0;
  } else {
   i9 = i11;
  }
 }
 i11 = HEAP32[i1 + 112 >> 2] | 0;
 HEAP32[i1 + 48 >> 2] = (i11 | 0) == 0 ? 290 : i11;
 i11 = HEAP32[i1 + 116 >> 2] | 0;
 HEAP32[i1 + 52 >> 2] = (i11 | 0) == 0 ? 215 : i11;
 i11 = HEAP32[i1 + 88 >> 2] | 0;
 HEAP32[i1 + 24 >> 2] = (i11 | 0) == 0 ? i9 : i11;
 i11 = HEAP32[i1 + 92 >> 2] | 0;
 if ((i11 | 0) == 0) {
  HEAP32[i1 + 28 >> 2] = HEAP32[i6 >> 2];
 } else {
  HEAP32[i1 + 28 >> 2] = i11;
 }
 i11 = HEAP32[i1 + 96 >> 2] | 0;
 HEAP32[i1 + 32 >> 2] = (i11 | 0) == 0 ? i9 : i11;
 i11 = HEAP32[i1 + 100 >> 2] | 0;
 if ((i11 | 0) == 0) {
  HEAP32[i1 + 36 >> 2] = HEAP32[i6 >> 2];
  i13 = 1;
  STACKTOP = i2;
  return i13 | 0;
 } else {
  HEAP32[i1 + 36 >> 2] = i11;
  i13 = 1;
  STACKTOP = i2;
  return i13 | 0;
 }
 return 0;
}
function _scanexp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i3 = STACKTOP;
 i4 = i1 + 4 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i6 = i1 + 100 | 0;
 if (i5 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
  HEAP32[i4 >> 2] = i5 + 1;
  i7 = HEAPU8[i5 >> 0] | 0;
 } else {
  i7 = ___shgetc(i1) | 0;
 }
 if ((i7 | 0) == 43 | (i7 | 0) == 45) {
  i5 = (i7 | 0) == 45 & 1;
  i8 = HEAP32[i4 >> 2] | 0;
  if (i8 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
   HEAP32[i4 >> 2] = i8 + 1;
   i9 = HEAPU8[i8 >> 0] | 0;
  } else {
   i9 = ___shgetc(i1) | 0;
  }
  if (!((i9 + -48 | 0) >>> 0 < 10 | (i2 | 0) == 0) ? (HEAP32[i6 >> 2] | 0) != 0 : 0) {
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + -1;
   i10 = i9;
   i11 = i5;
  } else {
   i10 = i9;
   i11 = i5;
  }
 } else {
  i10 = i7;
  i11 = 0;
 }
 if ((i10 + -48 | 0) >>> 0 > 9) {
  if ((HEAP32[i6 >> 2] | 0) == 0) {
   i12 = -2147483648;
   i13 = 0;
   tempRet0 = i12;
   STACKTOP = i3;
   return i13 | 0;
  }
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + -1;
  i12 = -2147483648;
  i13 = 0;
  tempRet0 = i12;
  STACKTOP = i3;
  return i13 | 0;
 } else {
  i14 = i10;
  i15 = 0;
 }
 while (1) {
  i16 = i14 + -48 + i15 | 0;
  i10 = HEAP32[i4 >> 2] | 0;
  if (i10 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
   HEAP32[i4 >> 2] = i10 + 1;
   i17 = HEAPU8[i10 >> 0] | 0;
  } else {
   i17 = ___shgetc(i1) | 0;
  }
  if (!((i17 + -48 | 0) >>> 0 < 10 & (i16 | 0) < 214748364)) {
   break;
  }
  i14 = i17;
  i15 = i16 * 10 | 0;
 }
 i15 = ((i16 | 0) < 0) << 31 >> 31;
 if ((i17 + -48 | 0) >>> 0 < 10) {
  i14 = i16;
  i10 = i15;
  i7 = i17;
  while (1) {
   i5 = ___muldi3(i14 | 0, i10 | 0, 10, 0) | 0;
   i9 = tempRet0;
   i2 = _i64Add(i7 | 0, ((i7 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
   i8 = _i64Add(i2 | 0, tempRet0 | 0, i5 | 0, i9 | 0) | 0;
   i9 = tempRet0;
   i5 = HEAP32[i4 >> 2] | 0;
   if (i5 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
    HEAP32[i4 >> 2] = i5 + 1;
    i18 = HEAPU8[i5 >> 0] | 0;
   } else {
    i18 = ___shgetc(i1) | 0;
   }
   if ((i18 + -48 | 0) >>> 0 < 10 & ((i9 | 0) < 21474836 | (i9 | 0) == 21474836 & i8 >>> 0 < 2061584302)) {
    i14 = i8;
    i10 = i9;
    i7 = i18;
   } else {
    i19 = i8;
    i20 = i9;
    i21 = i18;
    break;
   }
  }
 } else {
  i19 = i16;
  i20 = i15;
  i21 = i17;
 }
 if ((i21 + -48 | 0) >>> 0 < 10) {
  do {
   i21 = HEAP32[i4 >> 2] | 0;
   if (i21 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
    HEAP32[i4 >> 2] = i21 + 1;
    i22 = HEAPU8[i21 >> 0] | 0;
   } else {
    i22 = ___shgetc(i1) | 0;
   }
  } while ((i22 + -48 | 0) >>> 0 < 10);
 }
 if ((HEAP32[i6 >> 2] | 0) != 0) {
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + -1;
 }
 i4 = (i11 | 0) != 0;
 i11 = _i64Subtract(0, 0, i19 | 0, i20 | 0) | 0;
 i12 = i4 ? tempRet0 : i20;
 i13 = i4 ? i11 : i19;
 tempRet0 = i12;
 STACKTOP = i3;
 return i13 | 0;
}
function _ui_do_fractal(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, i9 = 0, d10 = 0.0, d11 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[68726] = (HEAP32[68724] | 0) >= (i1 | 0) & 1;
 if ((HEAP32[68720] | 0) != 0) {
  _tl_reset_timer(HEAP32[68734] | 0);
 }
 HEAP32[68834] = 0;
 HEAP32[68836] = 0;
 i1 = HEAP32[68736] | 0;
 _set_view(i1, i1 + 1184 | 0);
 i1 = HEAP32[68736] | 0;
 i4 = HEAP32[68726] | 0;
 i5 = _emscripten_alloc_async_context(12) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i2;
 _do_fractal(i1, i4);
 if (___async) {
  HEAP32[i5 >> 2] = 195;
  HEAP32[i5 + 4 >> 2] = i3;
  HEAP32[i5 + 8 >> 2] = i3;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 _emscripten_free_async_context(i5 | 0);
 i5 = _emscripten_alloc_async_context(12) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i2;
 _bbupdate() | 0;
 if (___async) {
  HEAP32[i5 >> 2] = 196;
  HEAP32[i5 + 4 >> 2] = i3;
  HEAP32[i5 + 8 >> 2] = i3;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 _emscripten_free_async_context(i5 | 0);
 if ((HEAP32[68726] | 0) != 0) {
  i5 = _emscripten_alloc_async_context(12) | 0;
  HEAP32[___async_cur_frame + 4 >> 2] = i2;
  _bbupdate() | 0;
  if (___async) {
   HEAP32[i5 >> 2] = 197;
   HEAP32[i5 + 4 >> 2] = i3;
   HEAP32[i5 + 8 >> 2] = i3;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  _emscripten_free_async_context(i5 | 0);
  i5 = _tl_lookup_timer(HEAP32[68734] | 0) | 0;
  i4 = HEAP32[68836] | 0;
  i1 = (HEAP32[68834] | 0) - i4 + i5 | 0;
  i6 = i1 * 5 | 0;
  if ((i6 | 0) > 1e5) {
   i7 = i1 * 3 | 0;
  } else {
   i7 = i6;
  }
  HEAP32[68838] = i4 - i5 + ((i7 | 0) < 33333 ? 33333 : i7);
 }
 i7 = HEAP32[68736] | 0;
 i5 = HEAP32[i7 + 60 >> 2] | 0;
 d8 = (+HEAPF64[i5 + 16 >> 3] - +HEAPF64[i5 + 24 >> 3]) / (+HEAPF64[i7 + 1184 >> 3] - +HEAPF64[i7 + 1192 >> 3]);
 _ui_display();
 HEAPF64[tempDoublePtr >> 3] = d8;
 HEAP32[i3 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 _sprintf(275e3, 275360, i3) | 0;
 i3 = HEAP32[12] | 0;
 i7 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i2;
 _tl_process_group(i3) | 0;
 if (___async) {
  HEAP32[i7 >> 2] = 198;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 _emscripten_free_async_context(i7 | 0);
 i7 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i2;
 _bbupdate() | 0;
 if (___async) {
  HEAP32[i7 >> 2] = 199;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 _emscripten_free_async_context(i7 | 0);
 HEAP32[68842] = _tl_lookup_timer(HEAP32[68734] | 0) | 0;
 _tl_reset_timer(HEAP32[68734] | 0);
 i7 = HEAP32[68842] | 0;
 if ((i7 | 0) <= 2e5) {
  i9 = i7;
  d10 = +(i9 | 0);
  d11 = d10 / 5.0e4;
  HEAPF64[34413] = d11;
  STACKTOP = i2;
  return;
 }
 HEAP32[68842] = 2e5;
 i9 = 2e5;
 d10 = +(i9 | 0);
 d11 = d10 / 5.0e4;
 HEAPF64[34413] = d11;
 STACKTOP = i2;
 return;
}
function _credits2__async_cb113(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = HEAP32[i1 + 4 >> 2];
 i1 = (HEAP32[i3 >> 2] | 0) + -1 | 0;
 i4 = HEAP32[12936] | 0;
 if ((i1 | 0) > 1) {
  i5 = HEAP32[i4 + 60 >> 2] | 0;
  HEAP32[i3 >> 2] = i1;
  _memset(HEAP32[i4 + 164 >> 2] | 0, 32, Math_imul(i5, HEAP32[i4 + 56 >> 2] | 0) | 0) | 0;
  i5 = HEAP32[12936] | 0;
  _memset(HEAP32[i5 + 168 >> 2] | 0, 0, Math_imul(HEAP32[i5 + 60 >> 2] | 0, HEAP32[i5 + 56 >> 2] | 0) | 0) | 0;
  _displogo(HEAP32[i3 >> 2] | 0);
  i5 = _emscripten_realloc_async_context(8) | 0;
  _bbflushwait(3e4);
  if (___async) {
   HEAP32[i5 >> 2] = 252;
   i6 = i5 + 4 | 0;
   i7 = HEAP32[i3 >> 2] | 0;
   HEAP32[i6 >> 2] = i7;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i5 >> 2] = 252;
  i6 = i5 + 4 | 0;
  i7 = HEAP32[i3 >> 2] | 0;
  HEAP32[i6 >> 2] = i7;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 HEAP32[130870] = _malloc(Math_imul(HEAP32[i4 + 156 >> 2] | 0, HEAP32[i4 + 152 >> 2] | 0) | 0) | 0;
 HEAP32[130872] = _malloc(Math_imul(HEAP32[i4 + 156 >> 2] | 0, HEAP32[i4 + 152 >> 2] | 0) | 0) | 0;
 HEAP32[(HEAP32[22682] | 0) + 12 >> 2] = 0;
 i7 = HEAP32[i4 + 56 >> 2] | 0;
 if ((HEAP32[68184] | 0) == 0) {
  i8 = i7;
 } else {
  i8 = (i7 | 0) / 2 | 0;
 }
 _format(i8);
 if (0 == -1) {
  i8 = HEAP32[12936] | 0;
  i7 = _emscripten_realloc_async_context(8) | 0;
  i4 = _aa_getkey(i8, 1) | 0;
  if (___async) {
   HEAP32[i7 >> 2] = 254;
   i9 = i7 + 4 | 0;
   HEAP32[i9 >> 2] = 0;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i4;
  ___async_unwind = 0;
  HEAP32[i7 >> 2] = 254;
  i9 = i7 + 4 | 0;
  HEAP32[i9 >> 2] = 0;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  i9 = HEAP32[12936] | 0;
  _backconvert(0, 9, HEAP32[i9 + 56 >> 2] | 0, HEAP32[i9 + 60 >> 2] | 0);
  i9 = HEAP32[12936] | 0;
  i7 = HEAP32[i9 + 152 >> 2] | 0;
  _memcpy(HEAP32[130870] | 0, (HEAP32[i9 + 160 >> 2] | 0) + (i7 * 18 | 0) | 0, Math_imul((HEAP32[i9 + 156 >> 2] | 0) + -18 | 0, i7) | 0) | 0;
  _displaytext(0);
  i7 = HEAP32[12936] | 0;
  _backconvert(0, 9, HEAP32[i7 + 56 >> 2] | 0, HEAP32[i7 + 60 >> 2] | 0);
  i7 = HEAP32[12936] | 0;
  i9 = HEAP32[i7 + 152 >> 2] | 0;
  _memcpy(HEAP32[130872] | 0, (HEAP32[i7 + 160 >> 2] | 0) + (i9 * 18 | 0) | 0, Math_imul((HEAP32[i7 + 156 >> 2] | 0) + -18 | 0, i9) | 0) | 0;
  HEAP32[(HEAP32[22682] | 0) + 12 >> 2] = 0;
  i9 = _emscripten_realloc_async_context(8) | 0;
  _timestuff(0, 0, 32, 1e6);
  if (___async) {
   HEAP32[i9 >> 2] = 253;
   i10 = i9 + 4 | 0;
   HEAP32[i10 >> 2] = 0;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i9 >> 2] = 253;
  i10 = i9 + 4 | 0;
  HEAP32[i10 >> 2] = 0;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
}
function _messager(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = STACKTOP;
 i3 = _strlen(i1 | 0) | 0;
 i4 = (HEAP32[(HEAP32[12936] | 0) + 60 >> 2] | 0) + -1 | 0;
 HEAP32[130912] = i4;
 HEAP32[130914] = i4;
 HEAP32[130916] = 0;
 L1 : do {
  if ((i3 | 0) > 0) {
   i4 = 0;
   while (1) {
    i5 = HEAP8[i1 + i4 >> 0] | 0;
    if (!(!(i5 << 24 >> 24 == 10) ? (i6 = HEAP32[12936] | 0, i7 = (Math_imul(HEAP32[i6 + 56 >> 2] | 0, HEAP32[130912] | 0) | 0) + (HEAP32[130916] | 0) | 0, HEAP8[(HEAP32[i6 + 164 >> 2] | 0) + i7 >> 0] = i5, i5 = HEAP32[12936] | 0, i7 = (Math_imul(HEAP32[i5 + 56 >> 2] | 0, HEAP32[130912] | 0) | 0) + (HEAP32[130916] | 0) | 0, HEAP8[(HEAP32[i5 + 168 >> 2] | 0) + i7 >> 0] = 0, i7 = (HEAP32[130916] | 0) + 1 | 0, HEAP32[130916] = i7, (i7 | 0) != (HEAP32[(HEAP32[12936] | 0) + 56 >> 2] | 0)) : 0)) {
     _newline();
    }
    i7 = HEAP32[12936] | 0;
    i5 = (Math_imul(HEAP32[i7 + 56 >> 2] | 0, HEAP32[130912] | 0) | 0) + (HEAP32[130916] | 0) | 0;
    HEAP8[(HEAP32[i7 + 168 >> 2] | 0) + i5 >> 0] = 4;
    i5 = HEAP32[12936] | 0;
    i7 = (Math_imul(HEAP32[i5 + 56 >> 2] | 0, HEAP32[130912] | 0) | 0) + (HEAP32[130916] | 0) | 0;
    HEAP8[(HEAP32[i5 + 164 >> 2] | 0) + i7 >> 0] = 32;
    i7 = HEAP32[12936] | 0;
    i5 = HEAP32[130916] | 0;
    i6 = HEAP32[130912] | 0;
    i8 = _emscripten_alloc_async_context(16) | 0;
    HEAP32[___async_cur_frame + 4 >> 2] = i2;
    _aa_gotoxy(i7, i5, i6);
    if (___async) {
     i9 = 7;
     break;
    }
    _emscripten_free_async_context(i8 | 0);
    i10 = _emscripten_alloc_async_context(16) | 0;
    HEAP32[___async_cur_frame + 4 >> 2] = i2;
    _bbflushwait(3e4);
    if (___async) {
     i9 = 9;
     break;
    }
    _emscripten_free_async_context(i10 | 0);
    i6 = i4 + 1 | 0;
    if ((i6 | 0) == (i3 | 0)) {
     break L1;
    } else {
     i4 = i6;
    }
   }
   if ((i9 | 0) == 7) {
    HEAP32[i8 >> 2] = 261;
    HEAP32[i8 + 4 >> 2] = i4;
    HEAP32[i8 + 8 >> 2] = i3;
    HEAP32[i8 + 12 >> 2] = i1;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   } else if ((i9 | 0) == 9) {
    HEAP32[i10 >> 2] = 262;
    HEAP32[i10 + 4 >> 2] = i4;
    HEAP32[i10 + 8 >> 2] = i3;
    HEAP32[i10 + 12 >> 2] = i1;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 i1 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i2;
 _bbflushwait(1e6);
 if (___async) {
  HEAP32[i1 >> 2] = 263;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 _emscripten_free_async_context(i1 | 0);
 i1 = HEAP32[12936] | 0;
 i10 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i2;
 _aa_gotoxy(i1, 0, 0);
 if (___async) {
  HEAP32[i10 >> 2] = 264;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  _emscripten_free_async_context(i10 | 0);
  STACKTOP = i2;
  return;
 }
}
function ___aa_calcparams(i1, i2, i3, d4, d5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 d4 = +d4;
 d5 = +d5;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i6 + 12 | 0;
 i8 = i6 + 8 | 0;
 i9 = i6 + 4 | 0;
 i10 = i6;
 HEAPF64[66524] = d4;
 HEAPF64[66525] = d5;
 HEAP32[133052] = i1;
 i1 = (i3 & 256 | 0) == 0;
 i11 = (i3 & 128 | 0) == 0;
 i12 = 0;
 i13 = 5e4;
 i14 = 0;
 while (1) {
  i15 = i12 & 255;
  if (!((_isgraph(i15) | 0) != 0 | (i15 | 0) == 32) ? (i15 >>> 0 < 161 | i1) & (i11 | (i15 | 0) == 0) : 0) {
   i16 = i13;
   i17 = i14;
  } else {
   if ((1 << (i12 >> 8) & i3 | 0) == 0) {
    i16 = i13;
    i17 = i14;
   } else {
    _values(i12, i7, i8, i9, i10);
    i15 = (HEAP32[i8 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) | 0;
    i16 = (i15 | 0) < (i13 | 0) ? i15 : i13;
    i17 = (i15 | 0) > (i14 | 0) ? i15 : i14;
   }
  }
  i12 = i12 + 1 | 0;
  if ((i12 | 0) == 1280) {
   break;
  } else {
   i13 = i16;
   i14 = i17;
  }
 }
 i14 = i17 - i16 | 0;
 i17 = (i16 | 0) / 4 | 0;
 d5 = 1020.0 / +(i14 | 0);
 d4 = 255.0 / +((i14 | 0) / 4 | 0 | 0);
 i14 = 0;
 do {
  _values(i14, i7, i8, i9, i10);
  i13 = HEAP32[i7 >> 2] | 0;
  i12 = HEAP32[i8 >> 2] | 0;
  i3 = HEAP32[i9 >> 2] | 0;
  i11 = HEAP32[i10 >> 2] | 0;
  i1 = ~~(+(i13 - i17 | 0) * d4 + .5);
  HEAP32[i7 >> 2] = i1;
  i15 = ~~(d4 * +(i12 - i17 | 0) + .5);
  HEAP32[i8 >> 2] = i15;
  i18 = ~~(d4 * +(i3 - i17 | 0) + .5);
  HEAP32[i9 >> 2] = i18;
  i19 = ~~(d4 * +(i11 - i17 | 0) + .5);
  HEAP32[i10 >> 2] = i19;
  if ((i1 | 0) > 255) {
   HEAP32[i7 >> 2] = 255;
   i20 = 255;
  } else {
   i20 = i1;
  }
  if ((i15 | 0) > 255) {
   HEAP32[i8 >> 2] = 255;
   i21 = 255;
  } else {
   i21 = i15;
  }
  if ((i18 | 0) > 255) {
   HEAP32[i9 >> 2] = 255;
   i22 = 255;
  } else {
   i22 = i18;
  }
  if ((i19 | 0) > 255) {
   HEAP32[i10 >> 2] = 255;
   i23 = 255;
  } else {
   i23 = i19;
  }
  if ((i20 | 0) < 0) {
   HEAP32[i7 >> 2] = 0;
   i24 = 0;
  } else {
   i24 = i20;
  }
  if ((i21 | 0) < 0) {
   HEAP32[i8 >> 2] = 0;
   i25 = 0;
  } else {
   i25 = i21;
  }
  if ((i22 | 0) < 0) {
   HEAP32[i9 >> 2] = 0;
   i26 = 0;
  } else {
   i26 = i22;
  }
  if ((i23 | 0) < 0) {
   HEAP32[i10 >> 2] = 0;
   i27 = 0;
  } else {
   i27 = i23;
  }
  HEAP32[i2 + (i14 * 20 | 0) >> 2] = i24;
  HEAP32[i2 + (i14 * 20 | 0) + 4 >> 2] = i25;
  HEAP32[i2 + (i14 * 20 | 0) + 8 >> 2] = i26;
  HEAP32[i2 + (i14 * 20 | 0) + 12 >> 2] = i27;
  HEAP32[i2 + (i14 * 20 | 0) + 16 >> 2] = ~~(d5 * +(i13 - i16 + i12 + i3 + i11 | 0) + .5);
  i14 = i14 + 1 | 0;
 } while ((i14 | 0) != 1280);
 STACKTOP = i6;
 return;
}
function _scene7() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 _signal(8, 1) | 0;
 i2 = HEAP32[12936] | 0;
 i3 = HEAP32[i2 + 152 >> 2] | 0;
 i4 = HEAP32[i2 + 156 >> 2] | 0;
 i5 = HEAP32[i2 + 160 >> 2] | 0;
 i6 = HEAP32[22682] | 0;
 HEAP32[i6 >> 2] = -255;
 HEAP32[i6 + 12 >> 2] = 0;
 i6 = _make_context(i3, i4, i3, 0, 1, 22, 23, i5, i5, +(HEAP32[i2 + 48 >> 2] | 0), +(HEAP32[i2 + 52 >> 2] | 0)) | 0;
 HEAP32[68736] = i6;
 if ((i6 | 0) == 0) {
  _exit(-1);
 }
 _set_formula(i6, 0);
 i6 = 0;
 do {
  HEAP8[(HEAP32[68736] | 0) + i6 + 144 >> 0] = ((i6 * 15 | 0) % 255 | 0) + 1;
  i6 = i6 + 1 | 0;
 } while ((i6 | 0) != 255);
 HEAP8[(HEAP32[68736] | 0) + 144 >> 0] = 0;
 i6 = HEAP32[68736] | 0;
 HEAP32[i6 + 124 >> 2] = 255;
 HEAP32[68720] = 2;
 HEAP32[i6 + 80 >> 2] = 255;
 HEAP32[68724] = (HEAP32[68724] | 0) + -1;
 HEAP32[i6 + 108 >> 2] = 8;
 HEAP32[i6 + 88 >> 2] = 0;
 HEAP32[i6 + 84 >> 2] = 0;
 HEAP32[i6 + 100 >> 2] = 0;
 HEAP32[68194] = HEAP32[68196];
 HEAP32[68738] = 1;
 HEAP32[68740] = 0;
 HEAPF64[34371] = -2.0;
 HEAPF64[34372] = -2.0;
 HEAPF64[34373] = 2.0;
 HEAPF64[34374] = 2.0;
 i6 = _emscripten_alloc_async_context(8) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 27, 2e6);
 if (___async) {
  HEAP32[i6 >> 2] = 200;
  HEAP32[i6 + 4 >> 2] = i5;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i6 | 0);
 HEAP32[68738] = 0;
 HEAP32[68740] = 0;
 HEAPF64[34371] = 2.0;
 HEAPF64[34372] = 2.0;
 HEAPF64[34373] = 0.0;
 HEAPF64[34374] = -2.0;
 i6 = _emscripten_alloc_async_context(8) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 27, 2e6);
 if (___async) {
  HEAP32[i6 >> 2] = 201;
  HEAP32[i6 + 4 >> 2] = i5;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i6 | 0);
 HEAP32[68738] = 0;
 HEAP32[68740] = 0;
 HEAPF64[34371] = 0.0;
 HEAPF64[34372] = -2.0;
 HEAPF64[34373] = 0.0;
 HEAPF64[34374] = 2.0;
 i6 = _emscripten_alloc_async_context(8) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 27, 2e6);
 if (___async) {
  HEAP32[i6 >> 2] = 202;
  HEAP32[i6 + 4 >> 2] = i5;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i6 | 0);
 HEAP32[68738] = 0;
 HEAP32[68740] = 1;
 HEAPF64[34371] = 0.0;
 HEAPF64[34372] = 2.0;
 HEAPF64[34373] = -1.0;
 HEAPF64[34374] = -5.0;
 i6 = _emscripten_alloc_async_context(8) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 27, 2e6);
 if (___async) {
  HEAP32[i6 >> 2] = 203;
  HEAP32[i6 + 4 >> 2] = i5;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else {
  _emscripten_free_async_context(i6 | 0);
  HEAP32[(HEAP32[12936] | 0) + 160 >> 2] = i5;
  i5 = HEAP32[22682] | 0;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 12 >> 2] = 2;
  STACKTOP = i1;
  return;
 }
}
function _credits() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = STACKTOP;
 HEAP32[68844] = 0;
 HEAP32[68846] = -30;
 HEAP32[68848] = 1;
 HEAPF32[68850] = 0.0;
 HEAPF32[68852] = 0.0;
 HEAPF32[68854] = 0.0;
 HEAPF32[68856] = 0.0;
 i2 = HEAP32[12936] | 0;
 _memset(HEAP32[i2 + 164 >> 2] | 0, 32, Math_imul(HEAP32[i2 + 60 >> 2] | 0, HEAP32[i2 + 56 >> 2] | 0) | 0) | 0;
 i2 = HEAP32[12936] | 0;
 _memset(HEAP32[i2 + 168 >> 2] | 0, 0, Math_imul(HEAP32[i2 + 60 >> 2] | 0, HEAP32[i2 + 56 >> 2] | 0) | 0) | 0;
 _aa_flush(HEAP32[12936] | 0);
 _load_song(275432) | 0;
 i2 = _malloc(480) | 0;
 HEAP32[68860] = i2;
 i3 = _malloc(480) | 0;
 HEAP32[68862] = i3;
 i4 = 0;
 i5 = -6375;
 do {
  i6 = i5;
  i5 = ~~(+Math_cos(+(+(i4 | 0) * 2.0 * 3.141592653589793 / 119.0)) * -255.0e3 / 40.0);
  HEAP32[i2 + (i4 << 2) >> 2] = i5 - i6;
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != 120);
 i7 = 0;
 i8 = 0;
 do {
  i4 = i8;
  i8 = ~~(+(i7 * 600 | 0) + +Math_abs(+(+Math_sin(+(+(i7 | 0) * 2.0 * 3.141592653589793 / 120.0)) * -255.0e3 / 50.0)));
  HEAP32[i3 + (i7 << 2) >> 2] = i8 - i4;
  i7 = i7 + 1 | 0;
 } while ((i7 | 0) != 120);
 i7 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _bbupdate() | 0;
 if (___async) {
  HEAP32[i7 >> 2] = 204;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i7 | 0);
 i7 = HEAP32[68188] | 0;
 HEAP32[68196] = i7;
 HEAP32[68194] = i7;
 _play();
 i7 = HEAP32[22682] | 0;
 HEAP32[i7 >> 2] = -255;
 HEAP32[34] = 28;
 HEAP32[i7 + 12 >> 2] = 0;
 HEAP32[68848] = 1;
 i7 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(-60, 205, 1, 6e6);
 if (___async) {
  HEAP32[i7 >> 2] = 206;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i7 | 0);
 HEAP32[68848] = 2;
 i7 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(-60, 205, 1, 4e6);
 if (___async) {
  HEAP32[i7 >> 2] = 207;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i7 | 0);
 HEAP32[68848] = 3;
 i7 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(-60, 205, 1, 8e6);
 if (___async) {
  HEAP32[i7 >> 2] = 208;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i7 | 0);
 HEAP32[68848] = 4;
 HEAP32[HEAP32[22682] >> 2] = 0;
 HEAP32[34] = 29;
 i7 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(-60, 205, 1, 86e6);
 if (___async) {
  HEAP32[i7 >> 2] = 209;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else {
  _emscripten_free_async_context(i7 | 0);
  _free(HEAP32[68860] | 0);
  _free(HEAP32[68862] | 0);
  STACKTOP = i1;
  return;
 }
}
function _credits2__async_cb111(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 i3 = HEAP32[i2 + 60 >> 2] | 0;
 i4 = i3 + -6 | 0;
 if ((i4 | 0) > 3) {
  i5 = (i4 | 0) / 2 | 0;
  _memset(HEAP32[i2 + 164 >> 2] | 0, 32, Math_imul(i3, HEAP32[i2 + 56 >> 2] | 0) | 0) | 0;
  i3 = HEAP32[12936] | 0;
  _memset(HEAP32[i3 + 168 >> 2] | 0, 0, Math_imul(HEAP32[i3 + 60 >> 2] | 0, HEAP32[i3 + 56 >> 2] | 0) | 0) | 0;
  _displogo(i5);
  i3 = _emscripten_realloc_async_context(8) | 0;
  _bbflushwait(3e4);
  if (___async) {
   HEAP32[i3 >> 2] = 252;
   i6 = i3 + 4 | 0;
   HEAP32[i6 >> 2] = i5;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i3 >> 2] = 252;
  i6 = i3 + 4 | 0;
  HEAP32[i6 >> 2] = i5;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 HEAP32[130870] = _malloc(Math_imul(HEAP32[i2 + 156 >> 2] | 0, HEAP32[i2 + 152 >> 2] | 0) | 0) | 0;
 HEAP32[130872] = _malloc(Math_imul(HEAP32[i2 + 156 >> 2] | 0, HEAP32[i2 + 152 >> 2] | 0) | 0) | 0;
 HEAP32[(HEAP32[22682] | 0) + 12 >> 2] = 0;
 i5 = HEAP32[i2 + 56 >> 2] | 0;
 if ((HEAP32[68184] | 0) == 0) {
  i7 = i5;
 } else {
  i7 = (i5 | 0) / 2 | 0;
 }
 _format(i7);
 if (0 == -1) {
  i7 = HEAP32[12936] | 0;
  i5 = _emscripten_realloc_async_context(8) | 0;
  i2 = _aa_getkey(i7, 1) | 0;
  if (___async) {
   HEAP32[i5 >> 2] = 254;
   i8 = i5 + 4 | 0;
   HEAP32[i8 >> 2] = 0;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  }
  HEAP32[___async_retval >> 2] = i2;
  ___async_unwind = 0;
  HEAP32[i5 >> 2] = 254;
  i8 = i5 + 4 | 0;
  HEAP32[i8 >> 2] = 0;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else {
  i8 = HEAP32[12936] | 0;
  _backconvert(0, 9, HEAP32[i8 + 56 >> 2] | 0, HEAP32[i8 + 60 >> 2] | 0);
  i8 = HEAP32[12936] | 0;
  i5 = HEAP32[i8 + 152 >> 2] | 0;
  _memcpy(HEAP32[130870] | 0, (HEAP32[i8 + 160 >> 2] | 0) + (i5 * 18 | 0) | 0, Math_imul((HEAP32[i8 + 156 >> 2] | 0) + -18 | 0, i5) | 0) | 0;
  _displaytext(0);
  i5 = HEAP32[12936] | 0;
  _backconvert(0, 9, HEAP32[i5 + 56 >> 2] | 0, HEAP32[i5 + 60 >> 2] | 0);
  i5 = HEAP32[12936] | 0;
  i8 = HEAP32[i5 + 152 >> 2] | 0;
  _memcpy(HEAP32[130872] | 0, (HEAP32[i5 + 160 >> 2] | 0) + (i8 * 18 | 0) | 0, Math_imul((HEAP32[i5 + 156 >> 2] | 0) + -18 | 0, i8) | 0) | 0;
  HEAP32[(HEAP32[22682] | 0) + 12 >> 2] = 0;
  i8 = _emscripten_realloc_async_context(8) | 0;
  _timestuff(0, 0, 32, 1e6);
  if (___async) {
   HEAP32[i8 >> 2] = 253;
   i9 = i8 + 4 | 0;
   HEAP32[i9 >> 2] = 0;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i8 >> 2] = 253;
  i9 = i8 + 4 | 0;
  HEAP32[i9 >> 2] = 0;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
}
function _aa_resize__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = HEAP32[i1 + 12 >> 2] | 0;
 i6 = HEAP32[i1 + 16 >> 2] | 0;
 i7 = HEAP32[i1 + 20 >> 2] | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 1) {
  _puts(525976) | 0;
  _exit(-1);
 }
 i8 = HEAP32[i3 >> 2] | 0;
 if ((i8 | 0) < 1) {
  _puts(525976) | 0;
  _exit(-1);
 }
 if ((i1 | 0) == (HEAP32[i5 >> 2] | 0) ? (i8 | 0) == (HEAP32[i4 + 156 >> 2] | 0) : 0) {
  i9 = i1;
 } else {
  i1 = i4 + 160 | 0;
  i8 = HEAP32[i1 >> 2] | 0;
  if ((i8 | 0) != 0) {
   _free(i8);
  }
  i8 = i4 + 164 | 0;
  i10 = HEAP32[i8 >> 2] | 0;
  if ((i10 | 0) != 0) {
   _free(i10);
  }
  i10 = i4 + 168 | 0;
  i11 = HEAP32[i10 >> 2] | 0;
  if ((i11 | 0) != 0) {
   _free(i11);
  }
  i11 = HEAP32[i7 >> 2] | 0;
  HEAP32[i5 >> 2] = i11;
  i5 = HEAP32[i3 >> 2] | 0;
  HEAP32[i6 >> 2] = i5;
  i3 = HEAP32[i4 + 144 >> 2] | 0;
  i7 = Math_imul(i3, i11) | 0;
  HEAP32[i4 + 152 >> 2] = i7;
  i12 = Math_imul(i3, i5) | 0;
  HEAP32[i4 + 156 >> 2] = i12;
  i3 = _calloc(1, Math_imul(i7, i12) | 0) | 0;
  HEAP32[i1 >> 2] = i3;
  if ((i3 | 0) == 0) {
   i13 = 0;
   i14 = ___async_retval;
   HEAP32[i14 >> 2] = i13;
   STACKTOP = i2;
   return;
  }
  i1 = Math_imul(i5, i11) | 0;
  i5 = _calloc(1, i1) | 0;
  HEAP32[i8 >> 2] = i5;
  if ((i5 | 0) == 0) {
   _free(i3);
   i13 = 0;
   i14 = ___async_retval;
   HEAP32[i14 >> 2] = i13;
   STACKTOP = i2;
   return;
  }
  _memset(i5 | 0, 32, i1 | 0) | 0;
  i5 = _calloc(1, i1) | 0;
  HEAP32[i10 >> 2] = i5;
  if ((i5 | 0) == 0) {
   _free(i3);
   _free(HEAP32[i8 >> 2] | 0);
   i13 = 0;
   i14 = ___async_retval;
   HEAP32[i14 >> 2] = i13;
   STACKTOP = i2;
   return;
  } else {
   i9 = i11;
  }
 }
 i11 = HEAP32[i4 + 112 >> 2] | 0;
 HEAP32[i4 + 48 >> 2] = (i11 | 0) == 0 ? 290 : i11;
 i11 = HEAP32[i4 + 116 >> 2] | 0;
 HEAP32[i4 + 52 >> 2] = (i11 | 0) == 0 ? 215 : i11;
 i11 = HEAP32[i4 + 88 >> 2] | 0;
 HEAP32[i4 + 24 >> 2] = (i11 | 0) == 0 ? i9 : i11;
 i11 = HEAP32[i4 + 92 >> 2] | 0;
 if ((i11 | 0) == 0) {
  HEAP32[i4 + 28 >> 2] = HEAP32[i6 >> 2];
 } else {
  HEAP32[i4 + 28 >> 2] = i11;
 }
 i11 = HEAP32[i4 + 96 >> 2] | 0;
 HEAP32[i4 + 32 >> 2] = (i11 | 0) == 0 ? i9 : i11;
 i11 = HEAP32[i4 + 100 >> 2] | 0;
 if ((i11 | 0) == 0) {
  HEAP32[i4 + 36 >> 2] = HEAP32[i6 >> 2];
  i13 = 1;
  i14 = ___async_retval;
  HEAP32[i14 >> 2] = i13;
  STACKTOP = i2;
  return;
 } else {
  HEAP32[i4 + 36 >> 2] = i11;
  i13 = 1;
  i14 = ___async_retval;
  HEAP32[i14 >> 2] = i13;
  STACKTOP = i2;
  return;
 }
}
function _toblack1() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[68194] | 0;
 i3 = HEAP32[12936] | 0;
 i4 = HEAP32[i3 + 156 >> 2] | 0;
 i5 = Math_imul((HEAP32[68188] | 0) - i2 << 1, i4) | 0;
 i6 = ((i5 | 0) / ((HEAP32[68196] | 0) - i2 | 0) | 0) - i4 | 0;
 if ((i4 | 0) <= 0) {
  i7 = i3;
  i8 = i4;
  i9 = i8 * 3 | 0;
  i10 = (i9 | 0) / 4 | 0;
  i11 = i10 + i6 | 0;
  i12 = (i11 | 0) < 0;
  i13 = i12 ? 0 : i11;
  i14 = (i13 | 0) > (i8 | 0);
  i15 = i14 ? i8 : i13;
  i16 = HEAP32[22682] | 0;
  i17 = i7 + 152 | 0;
  i18 = HEAP32[i17 >> 2] | 0;
  _aa_render(i7, i16, 0, 0, i18, i15);
  i19 = HEAP32[12936] | 0;
  _aa_flush(i19);
  STACKTOP = i1;
  return;
 }
 i2 = i4;
 i4 = i3;
 i3 = HEAP32[130918] | 0;
 i5 = HEAP32[130920] | 0;
 i20 = 0;
 while (1) {
  i21 = i20 - i6 | 0;
  if ((i21 | 0) < 0) {
   i22 = 0;
  } else {
   i22 = (i21 << 10 | 0) / (i2 | 0) | 0;
  }
  i23 = i21 - i2 | 0;
  if ((i23 | 0) < 0) {
   i24 = 0;
  } else {
   i24 = (i23 << 11 | 0) / (i2 | 0) | 0;
  }
  i23 = (i24 | 0) > 256 ? 256 : i24;
  i21 = ((i22 | 0) > 256 ? 256 : i22) - i23 | 0;
  i25 = HEAP32[i4 + 152 >> 2] | 0;
  if ((i25 | 0) > 0) {
   i26 = i25;
   i25 = i4;
   i27 = i3;
   i28 = i5;
   i29 = 0;
   do {
    i30 = Math_imul(HEAPU8[i27 >> 0] | 0, i21) | 0;
    i31 = (((Math_imul(HEAPU8[i28 >> 0] | 0, i23) | 0) + i30 | 0) / 256 | 0) & 255;
    i30 = (Math_imul(i26, i20) | 0) + i29 | 0;
    HEAP8[(HEAP32[i25 + 160 >> 2] | 0) + i30 >> 0] = i31;
    i27 = i27 + 1 | 0;
    i28 = i28 + 1 | 0;
    i29 = i29 + 1 | 0;
    i25 = HEAP32[12936] | 0;
    i26 = HEAP32[i25 + 152 >> 2] | 0;
   } while ((i29 | 0) < (i26 | 0));
   i32 = HEAP32[i25 + 156 >> 2] | 0;
   i33 = i25;
   i34 = i27;
   i35 = i28;
  } else {
   i32 = i2;
   i33 = i4;
   i34 = i3;
   i35 = i5;
  }
  i20 = i20 + 1 | 0;
  if ((i20 | 0) >= (i32 | 0)) {
   i7 = i33;
   i8 = i32;
   break;
  } else {
   i2 = i32;
   i4 = i33;
   i3 = i34;
   i5 = i35;
  }
 }
 i9 = i8 * 3 | 0;
 i10 = (i9 | 0) / 4 | 0;
 i11 = i10 + i6 | 0;
 i12 = (i11 | 0) < 0;
 i13 = i12 ? 0 : i11;
 i14 = (i13 | 0) > (i8 | 0);
 i15 = i14 ? i8 : i13;
 i16 = HEAP32[22682] | 0;
 i17 = i7 + 152 | 0;
 i18 = HEAP32[i17 >> 2] | 0;
 _aa_render(i7, i16, 0, 0, i18, i15);
 i19 = HEAP32[12936] | 0;
 _aa_flush(i19);
 STACKTOP = i1;
 return;
}
function _mydraw134() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 i3 = HEAP32[i2 + 160 >> 2] | 0;
 i4 = HEAP32[68666] | 0;
 if (!((i4 | 0) > -1)) {
  _memset(i3 | 0, 0, Math_imul(HEAP32[i2 + 156 >> 2] | 0, HEAP32[i2 + 152 >> 2] | 0) | 0) | 0;
  i5 = HEAP32[68674] | 0;
  i6 = HEAP32[68194] | 0;
  _drawprujezd(i5, i6);
  STACKTOP = i1;
  return;
 }
 if ((HEAP32[i2 + 156 >> 2] | 0) <= 0) {
  i5 = HEAP32[68674] | 0;
  i6 = HEAP32[68194] | 0;
  _drawprujezd(i5, i6);
  STACKTOP = i1;
  return;
 }
 i7 = i4;
 i4 = i2;
 i2 = i3;
 i3 = HEAP32[68668] | 0;
 i8 = 0;
 while (1) {
  i9 = i7 + (0 - i8 << 3) | 0;
  i10 = (i9 | 0) < 0 ? 0 : i9;
  i9 = (i10 | 0) > 255 ? 255 : i10;
  i10 = HEAP32[i4 + 152 >> 2] | 0;
  if ((i10 | 0) > 0) {
   i11 = 255 - i9 | 0;
   i12 = i10;
   i13 = i2;
   i14 = i3;
   i15 = 0;
   while (1) {
    i16 = HEAP8[i14 >> 0] | 0;
    i17 = i14 + 1 | 0;
    if ((i16 << 24 >> 24 == 0 ? (HEAP8[i17 >> 0] | 0) == 0 : 0) ? (HEAP8[i14 + i12 >> 0] | 0) == 0 : 0) {
     i18 = (HEAP8[i14 + (i12 + 1) >> 0] | 0) == 0 ? 0 : 255;
    } else {
     i18 = 255;
    }
    i19 = Math_imul(i18, i11) | 0;
    HEAP8[i13 >> 0] = ((Math_imul(i16 << 24 >> 24 != 0 ? 255 : 0, i9) | 0) + i19 | 0) >>> 8;
    HEAP8[i13 + 1 >> 0] = ((Math_imul((HEAP8[i17 >> 0] | 0) != 0 ? 255 : 0, i9) | 0) + i19 | 0) >>> 8;
    i17 = HEAP32[(HEAP32[12936] | 0) + 152 >> 2] | 0;
    HEAP8[i13 + i17 >> 0] = ((Math_imul((HEAP8[i14 + i17 >> 0] | 0) != 0 ? 255 : 0, i9) | 0) + i19 | 0) >>> 8;
    i17 = (HEAP32[(HEAP32[12936] | 0) + 152 >> 2] | 0) + 1 | 0;
    HEAP8[i13 + i17 >> 0] = ((Math_imul((HEAP8[i14 + i17 >> 0] | 0) != 0 ? 255 : 0, i9) | 0) + i19 | 0) >>> 8;
    i19 = i13 + 2 | 0;
    i17 = i14 + 2 | 0;
    i15 = i15 + 2 | 0;
    i16 = HEAP32[12936] | 0;
    i20 = HEAP32[i16 + 152 >> 2] | 0;
    if ((i15 | 0) >= (i20 | 0)) {
     i21 = i20;
     i22 = i16;
     i23 = i19;
     i24 = i17;
     break;
    } else {
     i12 = i20;
     i13 = i19;
     i14 = i17;
    }
   }
  } else {
   i21 = i10;
   i22 = i4;
   i23 = i2;
   i24 = i3;
  }
  i14 = i8 + 2 | 0;
  if ((i14 | 0) >= (HEAP32[i22 + 156 >> 2] | 0)) {
   break;
  }
  i7 = HEAP32[68666] | 0;
  i4 = i22;
  i2 = i23 + i21 | 0;
  i3 = i24 + i21 | 0;
  i8 = i14;
 }
 i5 = HEAP32[68674] | 0;
 i6 = HEAP32[68194] | 0;
 _drawprujezd(i5, i6);
 STACKTOP = i1;
 return;
}
function _scene4__async_cb36(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 i5 = HEAP32[i1 + 8 >> 2] | 0;
 i6 = HEAP32[i1 + 12 >> 2] | 0;
 HEAP32[i4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i3 >> 2] = i5;
 i5 = (HEAP32[i4 >> 2] | 0) + 1 | 0;
 i1 = HEAP32[12936] | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 if ((i5 | 0) >= ((HEAP32[i1 + 60 >> 2] | 0) + -10 | 0)) {
  _free(HEAP32[i1 + 160 >> 2] | 0);
  i8 = HEAP32[12936] | 0;
  HEAP32[i8 + 160 >> 2] = _malloc(Math_imul((HEAP32[i8 + 156 >> 2] | 0) + 4 | 0, HEAP32[i8 + 152 >> 2] | 0) | 0) | 0;
  i8 = HEAP32[12936] | 0;
  _backconvert(0, 0, HEAP32[i8 + 56 >> 2] | 0, HEAP32[i8 + 60 >> 2] | 0);
  HEAP32[HEAP32[22682] >> 2] = 120;
  HEAP32[34] = 0;
  i8 = _emscripten_realloc_async_context(4) | 0;
  _draw();
  if (___async) {
   HEAP32[i8 >> 2] = 104;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i8 >> 2] = 104;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 >> 2] = i5;
 if (((HEAP32[i1 + 56 >> 2] | 0) + -25 | 0) > 0) {
  i5 = i1;
  i8 = 0;
  while (1) {
   i9 = i8 + 10 | 0;
   i10 = i5;
   i11 = 0;
   while (1) {
    i12 = i11 + (HEAP32[i4 >> 2] | 0) | 0;
    _aa_puts(i10, i9, i12, 0, 179544);
    _aa_puts(HEAP32[12936] | 0, i9, i12 + 1 | 0, 0, 179576);
    i12 = i11 + 3 | 0;
    if ((i12 | 0) >= 10) {
     break;
    }
    i10 = HEAP32[12936] | 0;
    i11 = i12;
   }
   i8 = i8 + 6 | 0;
   i11 = HEAP32[12936] | 0;
   if ((i8 | 0) >= ((HEAP32[i11 + 56 >> 2] | 0) + -25 | 0)) {
    i13 = i11;
    break;
   } else {
    i5 = i11;
   }
  }
 } else {
  i13 = i1;
 }
 _aa_puts(i13, i7 + -2 | 0, (HEAP32[i13 + 60 >> 2] | 0) + -1 | 0, 0, 179584);
 HEAP32[i3 >> 2] = i7 + -3 + ((_rand() | 0) % 7 | 0);
 i7 = _emscripten_realloc_async_context(16) | 0;
 _bbflushwait(i6);
 if (___async) {
  HEAP32[i7 >> 2] = 103;
  i14 = i7 + 4 | 0;
  i15 = HEAP32[i4 >> 2] | 0;
  HEAP32[i14 >> 2] = i15;
  i16 = i7 + 8 | 0;
  i17 = HEAP32[i3 >> 2] | 0;
  HEAP32[i16 >> 2] = i17;
  i18 = i7 + 12 | 0;
  HEAP32[i18 >> 2] = i6;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i7 >> 2] = 103;
 i14 = i7 + 4 | 0;
 i15 = HEAP32[i4 >> 2] | 0;
 HEAP32[i14 >> 2] = i15;
 i16 = i7 + 8 | 0;
 i17 = HEAP32[i3 >> 2] | 0;
 HEAP32[i16 >> 2] = i17;
 i18 = i7 + 12 | 0;
 HEAP32[i18 >> 2] = i6;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _aa_getevent__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = HEAP32[i1 + 12 >> 2] | 0;
 i6 = HEAP32[i1 + 16 >> 2] | 0;
 i7 = HEAP32[i1 + 20 >> 2] | 0;
 i8 = HEAP32[i1 + 24 >> 2] | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 i9 = i3 + 196 | 0;
 i10 = HEAP32[i6 >> 2] | 0;
 i11 = i3 + 200 | 0;
 if (((i1 | 0) == (HEAP32[i9 >> 2] | 0) ? (i10 | 0) == (HEAP32[i11 >> 2] | 0) : 0) ? (HEAP32[i7 >> 2] | 0) == (HEAP32[i3 + 204 >> 2] | 0) : 0) {
  i12 = i3 + 4 | 0;
  i13 = HEAP32[i12 >> 2] | 0;
  if ((i13 | 0) == 0) {
   i14 = 400;
   i15 = ___async_retval;
   HEAP32[i15 >> 2] = i14;
   STACKTOP = i2;
   return;
  }
  i16 = HEAP32[i13 + 20 >> 2] | 0;
  if ((i8 | 0) != 0) {
   i13 = _emscripten_realloc_async_context(32) | 0;
   i17 = FUNCTION_TABLE_iii[i16 & 3](i3, 1) | 0;
   if (!___async) {
    HEAP32[___async_retval >> 2] = i17;
    ___async_unwind = 0;
   }
   HEAP32[i13 >> 2] = 283;
   HEAP32[i13 + 4 >> 2] = i3;
   HEAP32[i13 + 8 >> 2] = i4;
   HEAP32[i13 + 12 >> 2] = i5;
   HEAP32[i13 + 16 >> 2] = i6;
   HEAP32[i13 + 20 >> 2] = i7;
   HEAP32[i13 + 24 >> 2] = i8;
   HEAP32[i13 + 28 >> 2] = i12;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  i12 = _emscripten_realloc_async_context(28) | 0;
  i13 = FUNCTION_TABLE_iii[i16 & 3](i3, 0) | 0;
  if (___async) {
   HEAP32[i12 >> 2] = 286;
   i18 = i12 + 4 | 0;
   HEAP32[i18 >> 2] = i3;
   i19 = i12 + 8 | 0;
   HEAP32[i19 >> 2] = i4;
   i20 = i12 + 12 | 0;
   HEAP32[i20 >> 2] = i5;
   i21 = i12 + 16 | 0;
   HEAP32[i21 >> 2] = i6;
   i22 = i12 + 20 | 0;
   HEAP32[i22 >> 2] = i7;
   i23 = i12 + 24 | 0;
   HEAP32[i23 >> 2] = i8;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i13;
  ___async_unwind = 0;
  HEAP32[i12 >> 2] = 286;
  i18 = i12 + 4 | 0;
  HEAP32[i18 >> 2] = i3;
  i19 = i12 + 8 | 0;
  HEAP32[i19 >> 2] = i4;
  i20 = i12 + 12 | 0;
  HEAP32[i20 >> 2] = i5;
  i21 = i12 + 16 | 0;
  HEAP32[i21 >> 2] = i6;
  i22 = i12 + 20 | 0;
  HEAP32[i22 >> 2] = i7;
  i23 = i12 + 24 | 0;
  HEAP32[i23 >> 2] = i8;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 HEAP32[i9 >> 2] = i1;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i3 + 204 >> 2] = HEAP32[i7 >> 2];
 i14 = 259;
 i15 = ___async_retval;
 HEAP32[i15 >> 2] = i14;
 STACKTOP = i2;
 return;
}
function _aa_init__async_cb3(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 i5 = HEAP32[i1 + 8 >> 2] | 0;
 i6 = HEAP32[i1 + 12 >> 2] | 0;
 i7 = HEAP32[i1 + 16 >> 2] | 0;
 i8 = HEAP32[i1 + 20 >> 2] | 0;
 i9 = HEAP32[i1 + 24 >> 2] | 0;
 i10 = HEAP32[i1 + 28 >> 2] | 0;
 i11 = HEAP32[i1 + 32 >> 2] | 0;
 i12 = HEAP32[i1 + 36 >> 2] | 0;
 i13 = HEAP32[i1 + 40 >> 2] | 0;
 i14 = HEAP32[i1 + 44 >> 2] | 0;
 i15 = HEAP32[i1 + 48 >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[___async_retval >> 2];
 if ((HEAP32[i3 >> 2] | 0) == 0) {
  i3 = HEAP32[i4 + 12 >> 2] | 0;
  i4 = _emscripten_realloc_async_context(12) | 0;
  FUNCTION_TABLE_vi[i3 & 511](i5);
  if (___async) {
   HEAP32[i4 >> 2] = 297;
   i16 = i4 + 4 | 0;
   HEAP32[i16 >> 2] = i15;
   i17 = i4 + 8 | 0;
   HEAP32[i17 >> 2] = i6;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i4 >> 2] = 297;
  i16 = i4 + 4 | 0;
  HEAP32[i16 >> 2] = i15;
  i17 = i4 + 8 | 0;
  HEAP32[i17 >> 2] = i6;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i6 = HEAP32[i10 >> 2] | 0;
 i10 = (i6 | 0) == 0;
 if (!((i10 ? (HEAP32[i9 >> 2] | 0) == 0 : 0) ? (i17 = HEAP32[i7 >> 2] | 0, !((i17 | 0) == 0 ? 1 : (i17 | 0) == (HEAP32[i8 >> 2] | 0))) : 0)) {
  i18 = 9;
 }
 do {
  if ((i18 | 0) == 9) {
   i17 = HEAP32[i14 >> 2] | 0;
   i7 = (i17 | 0) == 0;
   if ((i7 ? (HEAP32[i13 >> 2] | 0) == 0 : 0) ? (i4 = HEAP32[i11 >> 2] | 0, !((i4 | 0) == 0 ? 1 : (i4 | 0) == (HEAP32[i12 >> 2] | 0))) : 0) {
    break;
   }
   if (!i10 ? (i6 | 0) > (HEAP32[i8 >> 2] | 0) : 0) {
    break;
   }
   if (!i7 ? (i17 | 0) > (HEAP32[i8 >> 2] | 0) : 0) {
    break;
   }
   i17 = HEAP32[i9 >> 2] | 0;
   if ((i17 | 0) != 0 ? (i17 | 0) < (HEAP32[i8 >> 2] | 0) : 0) {
    break;
   }
   i17 = HEAP32[i13 >> 2] | 0;
   if ((i17 | 0) == 0) {
    i19 = ___async_retval;
    HEAP32[i19 >> 2] = i5;
    STACKTOP = i2;
    return;
   }
   if ((i17 | 0) >= (HEAP32[i8 >> 2] | 0)) {
    i19 = ___async_retval;
    HEAP32[i19 >> 2] = i5;
    STACKTOP = i2;
    return;
   }
  }
 } while (0);
 i19 = _emscripten_realloc_async_context(4) | 0;
 _aa_close(i5);
 if (___async) {
  HEAP32[i19 >> 2] = 298;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i19 >> 2] = 298;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _print(i1, i2, d3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, d10 = 0.0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, d15 = 0.0, i16 = 0, d17 = 0.0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, d28 = 0.0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0;
 i8 = STACKTOP;
 i9 = HEAP8[i7 >> 0] | 0;
 if (i9 << 24 >> 24 == 0) {
  STACKTOP = i8;
  return;
 }
 d10 = +(i1 | 0);
 i1 = i4 + i2 | 0;
 i11 = i5 + 8 | 0;
 i12 = i5 + 4 | 0;
 i13 = (i2 | 0) > -1;
 i14 = (i1 | 0) < 1;
 d15 = +(i4 | 0);
 i16 = (i2 | 0) < 0;
 d17 = +(i2 | 0);
 i18 = i9;
 i9 = 0;
 do {
  i19 = ~~(d10 + +(i9 | 0) * d3);
  i9 = i9 + 1 | 0;
  i20 = ~~(d10 + +(i9 | 0) * d3);
  i21 = HEAP32[i11 >> 2] | 0;
  i22 = HEAP32[i5 >> 2] | 0;
  i23 = HEAP32[i12 >> 2] | 0;
  i24 = Math_imul(Math_imul(i22, i18 << 24 >> 24) | 0, i23) | 0;
  i25 = i21 + i24 | 0;
  if (((i19 | 0) > -1 ? (i26 = HEAP32[12936] | 0, i27 = HEAP32[i26 + 152 >> 2] | 0, (i27 | 0) > (i20 | 0) & i13) : 0) ? (HEAP32[i26 + 156 >> 2] | 0) >= (i1 | 0) : 0) {
   _fastscale(i25, (HEAP32[i26 + 160 >> 2] | 0) + ((Math_imul(i27, i2) | 0) + i19) | 0, i22, i20 - i19 | 0, i23, i4, i22, i27, i6);
  }
  if (((i20 | 0) >= 1 ? (i27 = HEAP32[12936] | 0, i26 = HEAP32[i27 + 152 >> 2] | 0, !((i26 | 0) <= (i19 | 0) | i14)) : 0) ? (i25 = HEAP32[i27 + 156 >> 2] | 0, (i25 | 0) > (i2 | 0)) : 0) {
   d28 = +(i22 | 0) / +(i20 - i19 | 0);
   if ((i19 | 0) < 0) {
    i29 = 0;
    i30 = ~~-(+(i19 | 0) * d28);
   } else {
    i29 = i19;
    i30 = 0;
   }
   if ((i26 | 0) < (i20 | 0)) {
    i31 = i26 + -1 | 0;
    i32 = ~~(d28 * +(i26 - i29 | 0));
   } else {
    i31 = i20;
    i32 = i22;
   }
   d28 = +(i23 | 0) / d15;
   if (i16) {
    i33 = 0;
    i34 = ~~-(d17 * d28);
   } else {
    i33 = i2;
    i34 = 0;
   }
   if ((i25 | 0) < (i1 | 0)) {
    i35 = i25 + -1 | 0;
    i36 = ~~(d28 * +(i25 - i33 | 0));
   } else {
    i35 = i1;
    i36 = i23;
   }
   i23 = i21 + (i30 + i24 + (Math_imul(i34, i22) | 0)) | 0;
   _fastscale(i23, (HEAP32[i27 + 160 >> 2] | 0) + ((Math_imul(i33, i26) | 0) + i29) | 0, i32 - i30 | 0, i31 - i29 | 0, i36 - i34 | 0, i35 - i33 | 0, i22, i26, i6);
  }
  i18 = HEAP8[i7 + i9 >> 0] | 0;
 } while (!(i18 << 24 >> 24 == 0));
 STACKTOP = i8;
 return;
}
function _scale(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, d22 = 0.0, d23 = 0.0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i6 = STACKTOP;
 i7 = HEAP32[12936] | 0;
 i8 = i7 + 152 | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 i10 = i7 + 156 | 0;
 i11 = HEAP32[i10 >> 2] | 0;
 i12 = HEAP32[i1 + 8 >> 2] | 0;
 i13 = HEAP32[i1 + 12 >> 2] | 0;
 if (!((i13 | 0) > (i3 | 0) & (((i12 | 0) <= (i2 | 0) | (i4 | 0) < 0 | (i5 | 0) < 0) ^ 1))) {
  _memset(HEAP32[i7 + 160 >> 2] | 0, 0, Math_imul(i11, i9) | 0) | 0;
  STACKTOP = i6;
  return;
 }
 i14 = i1 + 16 | 0;
 i15 = HEAP32[i14 >> 2] | 0;
 if ((i15 | 0) == 0) {
  _decompressimg(i1) | 0;
  i16 = HEAP32[i14 >> 2] | 0;
  i17 = 1;
 } else {
  i16 = i15;
  i17 = 0;
 }
 i15 = (i2 | 0) < 0;
 i1 = (i3 | 0) < 0;
 i18 = (i12 | 0) > (i4 | 0);
 i19 = (i13 | 0) > (i5 | 0);
 if ((i3 | i2 | 0) > -1 & i18 & i19) {
  i20 = i16 + ((Math_imul(i12, i3) | 0) + i2) | 0;
  i21 = HEAP32[i8 >> 2] | 0;
  _fastcscale(i20, HEAP32[i7 + 160 >> 2] | 0, i4 - i2 | 0, i21, i5 - i3 | 0, HEAP32[i10 >> 2] | 0, i12, i21);
  if ((i17 | 0) == 0) {
   STACKTOP = i6;
   return;
  }
  _free(HEAP32[i14 >> 2] | 0);
  HEAP32[i14 >> 2] = 0;
  STACKTOP = i6;
  return;
 }
 i14 = HEAP32[i8 >> 2] | 0;
 i17 = HEAP32[i10 >> 2] | 0;
 i10 = i7 + 160 | 0;
 _memset(HEAP32[i10 >> 2] | 0, 0, Math_imul(i17, i14) | 0) | 0;
 d22 = +(i9 | 0) / +(~i2 + i4 | 0);
 HEAPF64[65418] = d22;
 d23 = +(i11 | 0) / +(~i3 + i5 | 0);
 HEAPF64[65419] = d23;
 if (i18) {
  i24 = i4;
  i25 = i14 + -1 | 0;
 } else {
  i14 = i12 + -1 | 0;
  i24 = i14;
  i25 = ~~(+(i14 - i2 | 0) * d22);
 }
 if (i19) {
  i26 = i5;
  i27 = i17 + -1 | 0;
 } else {
  i17 = i13 + -1 | 0;
  i26 = i17;
  i27 = ~~(+(i17 - i3 | 0) * d23);
 }
 if (i15) {
  i28 = 0;
  i29 = ~~-(+(i2 | 0) * d22);
 } else {
  i28 = i2;
  i29 = 0;
 }
 if (i1) {
  i30 = 0;
  i31 = ~~-(+(i3 | 0) * d23);
 } else {
  i30 = i3;
  i31 = 0;
 }
 i3 = i16 + ((Math_imul(i30, i12) | 0) + i28) | 0;
 i16 = (HEAP32[i10 >> 2] | 0) + ((Math_imul(i31, i9) | 0) + i29) | 0;
 _fastcscale(i3, i16, i24 - i28 | 0, i25 - i29 | 0, i26 - i30 | 0, i27 - i31 | 0, i12, HEAP32[i8 >> 2] | 0);
 STACKTOP = i6;
 return;
}
function _credits2__async_cb120(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = HEAP32[i1 + 4 >> 2];
 i1 = (HEAP32[i3 >> 2] | 0) + 1 | 0;
 i4 = HEAP32[12936] | 0;
 i5 = ((HEAP32[i4 + 56 >> 2] | 0) / 2 | 0) + -2 | 0;
 i6 = ((HEAP32[i4 + 60 >> 2] | 0) + -6 | 0) / 2 | 0;
 if ((i1 | 0) != 6) {
  HEAP32[i3 >> 2] = i1;
  _aa_puts(i4, i5, i6 + i1 | 0, 2, 523448);
  if ((HEAP32[i3 >> 2] | 0) != 0) {
   i1 = HEAP32[12936] | 0;
   _aa_puts(i1, ((HEAP32[i1 + 56 >> 2] | 0) / 2 | 0) + -2 | 0, (HEAP32[i3 >> 2] | 0) + -1 + (((HEAP32[i1 + 60 >> 2] | 0) + -6 | 0) / 2 | 0) | 0, 0, 523448);
  }
  i1 = _emscripten_realloc_async_context(8) | 0;
  _bbflushwait(1e5);
  if (___async) {
   HEAP32[i1 >> 2] = 244;
   i7 = i1 + 4 | 0;
   i8 = HEAP32[i3 >> 2] | 0;
   HEAP32[i7 >> 2] = i8;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i1 >> 2] = 244;
  i7 = i1 + 4 | 0;
  i8 = HEAP32[i3 >> 2] | 0;
  HEAP32[i7 >> 2] = i8;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 _aa_puts(i4, i5, i6 + 5 | 0, 0, 523448);
 i6 = HEAP32[12936] | 0;
 i5 = HEAP32[i6 + 56 >> 2] | 0;
 if ((i5 + 1 | 0) >>> 0 < 3) {
  _memset(HEAP32[i6 + 164 >> 2] | 0, 32, Math_imul(HEAP32[i6 + 60 >> 2] | 0, HEAP32[i6 + 56 >> 2] | 0) | 0) | 0;
  i6 = HEAP32[12936] | 0;
  _memset(HEAP32[i6 + 168 >> 2] | 0, 0, Math_imul(HEAP32[i6 + 60 >> 2] | 0, HEAP32[i6 + 56 >> 2] | 0) | 0) | 0;
  _displaya(~~(+Math_sin(+(0.0 * 3.141592653589793 / 100.0)) * 10.0));
  _display8();
  i6 = _emscripten_realloc_async_context(8) | 0;
  _bbflushwait(1e4);
  if (___async) {
   HEAP32[i6 >> 2] = 246;
   i9 = i6 + 4 | 0;
   HEAP32[i9 >> 2] = 0;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i6 >> 2] = 246;
  i9 = i6 + 4 | 0;
  HEAP32[i9 >> 2] = 0;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i9 = (i5 | 0) / 2 | 0;
 _display8();
 _displaya(i9);
 i5 = _emscripten_realloc_async_context(8) | 0;
 _bbflushwait(1e4);
 if (___async) {
  HEAP32[i5 >> 2] = 245;
  i10 = i5 + 4 | 0;
  HEAP32[i10 >> 2] = i9;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i5 >> 2] = 245;
 i10 = i5 + 4 | 0;
 HEAP32[i10 >> 2] = i9;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _scene4__async_cb47(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[i1 + 8 >> 2];
 i1 = (HEAP32[i3 >> 2] | 0) + 6 | 0;
 i5 = HEAP32[12936] | 0;
 i6 = HEAP32[i5 + 56 >> 2] | 0;
 if ((i1 | 0) < (i6 + -25 | 0)) {
  HEAP32[i3 >> 2] = i1;
  _aa_puts(i5, HEAP32[i3 >> 2] | 0, 0, 0, 179480);
  _aa_puts(HEAP32[12936] | 0, HEAP32[i3 >> 2] | 0, 3, 0, 179480);
  _aa_puts(HEAP32[12936] | 0, HEAP32[i3 >> 2] | 0, 6, 0, 179480);
  _aa_puts(HEAP32[12936] | 0, HEAP32[i3 >> 2] | 0, 9, 0, 179480);
  i1 = _emscripten_realloc_async_context(12) | 0;
  _bbflushwait(i4);
  if (___async) {
   HEAP32[i1 >> 2] = 92;
   i7 = i1 + 4 | 0;
   HEAP32[i7 >> 2] = i4;
   i8 = i1 + 8 | 0;
   i9 = HEAP32[i3 >> 2] | 0;
   HEAP32[i8 >> 2] = i9;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i1 >> 2] = 92;
  i7 = i1 + 4 | 0;
  HEAP32[i7 >> 2] = i4;
  i8 = i1 + 8 | 0;
  i9 = HEAP32[i3 >> 2] | 0;
  HEAP32[i8 >> 2] = i9;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i9 = ~~(1.0e6 / +((i6 | 0) / 8 | 0 | 0));
 if ((i6 + -7 | 0) > 0) {
  _aa_puts(i5, 0, (HEAP32[i5 + 60 >> 2] | 0) + -3 | 0, 0, 179488);
  i6 = _emscripten_realloc_async_context(12) | 0;
  _bbflushwait(i9);
  if (___async) {
   HEAP32[i6 >> 2] = 93;
   i10 = i6 + 4 | 0;
   HEAP32[i10 >> 2] = i9;
   i11 = i6 + 8 | 0;
   HEAP32[i11 >> 2] = 0;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i6 >> 2] = 93;
  i10 = i6 + 4 | 0;
  HEAP32[i10 >> 2] = i9;
  i11 = i6 + 8 | 0;
  HEAP32[i11 >> 2] = 0;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 if (((HEAP32[i5 + 56 >> 2] | 0) + -25 | 0) > 0) {
  i11 = i5;
  i5 = 0;
  do {
   _aa_puts(i11, i5, 0, 0, 179496);
   i5 = i5 + 6 | 0;
   i11 = HEAP32[12936] | 0;
  } while ((i5 | 0) < ((HEAP32[i11 + 56 >> 2] | 0) + -25 | 0));
 }
 i11 = _emscripten_realloc_async_context(8) | 0;
 _bbflushwait(1e5);
 if (___async) {
  HEAP32[i11 >> 2] = 94;
  i12 = i11 + 4 | 0;
  HEAP32[i12 >> 2] = 0;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i11 >> 2] = 94;
 i12 = i11 + 4 | 0;
 HEAP32[i12 >> 2] = 0;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _juliov() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[68188] | 0;
 i3 = HEAP32[68194] | 0;
 i4 = i2 - i3 | 0;
 d5 = +(i4 | 0) / +((HEAP32[68196] | 0) - i3 | 0);
 do {
  if ((HEAP32[68738] | 0) != 0) {
   if ((i2 | 0) < (i3 + 2e5 | 0)) {
    HEAP32[HEAP32[22682] >> 2] = 255 - ((i4 * 255 | 0) / 2e5 | 0);
    break;
   } else {
    HEAP32[HEAP32[22682] >> 2] = 0;
    break;
   }
  }
 } while (0);
 if ((HEAP32[68740] | 0) != 0 ? (i4 = HEAP32[68188] | 0, i3 = HEAP32[68196] | 0, (i4 | 0) > (i3 + -2e5 | 0)) : 0) {
  HEAP32[HEAP32[22682] >> 2] = (((i3 - i4 | 0) * 255 | 0) / 2e5 | 0) + -255;
 }
 d6 = +HEAPF64[34372];
 d7 = +HEAPF64[34371];
 d8 = d7 + d5 * (+HEAPF64[34373] - d7);
 i4 = HEAP32[68736] | 0;
 i3 = i4 + 128 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 i9 = i4 + 132 | 0;
 i10 = HEAP32[i9 >> 2] | 0;
 i11 = i4 + 36 | 0;
 i12 = HEAP32[i11 >> 2] | 0;
 HEAPF64[i4 >> 3] = d6 + d5 * (+HEAPF64[34374] - d6);
 HEAPF64[i4 + 8 >> 3] = d8;
 d8 = +HEAPF32[i4 + 1176 >> 2];
 d6 = +HEAPF32[i4 + 1180 >> 2];
 d5 = d8 > d6 ? d6 : d8;
 i4 = ~~(+(i2 | 0) * d5 / d8 + -1.0);
 HEAP32[i3 >> 2] = i4;
 HEAP32[i9 >> 2] = ~~(+(i10 | 0) * d5 / d6 + -1.0);
 if ((HEAP32[68184] | 0) == 0) {
  i13 = i2;
 } else {
  i13 = (i2 | 0) / 2 | 0;
 }
 HEAP32[i11 >> 2] = i12 + ((i13 - i4 | 0) / 2 | 0);
 i4 = HEAP32[68736] | 0;
 _do_julia(i4, +HEAPF64[i4 >> 3], +HEAPF64[i4 + 8 >> 3]);
 if ((HEAP32[68184] | 0) == 0) {
  i14 = HEAP32[68736] | 0;
  i15 = i14 + 128 | 0;
  HEAP32[i15 >> 2] = i2;
  i16 = i14 + 132 | 0;
  HEAP32[i16 >> 2] = i10;
  i17 = i14 + 36 | 0;
  HEAP32[i17 >> 2] = i12;
  _ui_display();
  STACKTOP = i1;
  return;
 }
 HEAP32[(HEAP32[68736] | 0) + 60 >> 2] = 290216;
 i4 = (HEAP32[68736] | 0) + 36 | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + ((HEAP32[(HEAP32[12936] | 0) + 152 >> 2] | 0) / 2 | 0);
 i4 = HEAP32[68736] | 0;
 _do_julia(i4, +HEAPF64[i4 >> 3], +HEAPF64[i4 + 8 >> 3]);
 HEAP32[(HEAP32[68736] | 0) + 60 >> 2] = 289920;
 i14 = HEAP32[68736] | 0;
 i15 = i14 + 128 | 0;
 HEAP32[i15 >> 2] = i2;
 i16 = i14 + 132 | 0;
 HEAP32[i16 >> 2] = i10;
 i17 = i14 + 36 | 0;
 HEAP32[i17 >> 2] = i12;
 _ui_display();
 STACKTOP = i1;
 return;
}
function _dosymetry() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[71600] | 0;
 i3 = HEAP32[i2 + 56 >> 2] | 0;
 i4 = HEAP32[i2 + 132 >> 2] | 0;
 i5 = i3 + (i4 * 40 | 0) | 0;
 if ((i4 | 0) > 0) {
  i4 = i2;
  i6 = i3;
  i3 = HEAP32[i2 + 36 >> 2] | 0;
  while (1) {
   i7 = HEAP32[i6 + 24 >> 2] | 0;
   if (!((i7 | 0) == -1) ? (HEAP32[(HEAP32[i4 + 56 >> 2] | 0) + (i7 * 40 | 0) + 32 >> 2] | 0) == 0 : 0) {
    i8 = (HEAP32[i4 + 36 >> 2] | 0) + (Math_imul(HEAP32[i4 + 136 >> 2] | 0, i7) | 0) | 0;
    _memcpy(i3 | 0, i8 | 0, HEAP32[i4 + 128 >> 2] | 0) | 0;
    HEAP32[i6 + 32 >> 2] = 0;
    i9 = HEAP32[71600] | 0;
   } else {
    i9 = i4;
   }
   i6 = i6 + 40 | 0;
   if (!(i6 >>> 0 < i5 >>> 0)) {
    i10 = i9;
    break;
   } else {
    i4 = i9;
    i3 = i3 + (HEAP32[i9 + 136 >> 2] | 0) | 0;
   }
  }
 } else {
  i10 = i2;
 }
 i2 = HEAP32[i10 + 52 >> 2] | 0;
 i9 = HEAP32[i10 + 128 >> 2] | 0;
 i3 = i2 + (i9 * 40 | 0) | 0;
 if ((i9 | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i9 = i10;
 i4 = i2;
 i2 = HEAP32[i10 + 36 >> 2] | 0;
 while (1) {
  i10 = HEAP32[i4 + 24 >> 2] | 0;
  if (!((i10 | 0) == -1) ? (HEAP32[(HEAP32[i9 + 52 >> 2] | 0) + (i10 * 40 | 0) + 32 >> 2] | 0) == 0 : 0) {
   i5 = HEAP32[i9 + 136 >> 2] | 0;
   i6 = HEAP32[i9 + 132 >> 2] | 0;
   i8 = Math_imul(i6, i5) | 0;
   i7 = i2 + i8 | 0;
   if ((i8 | 0) > 0) {
    i8 = i2;
    i11 = (HEAP32[i9 + 36 >> 2] | 0) + i10 | 0;
    while (1) {
     HEAP8[i8 >> 0] = HEAP8[i11 >> 0] | 0;
     i12 = HEAP32[71600] | 0;
     i13 = HEAP32[i12 + 136 >> 2] | 0;
     i8 = i8 + i13 | 0;
     if (!(i8 >>> 0 < i7 >>> 0)) {
      break;
     } else {
      i11 = i11 + i13 | 0;
     }
    }
    i14 = i13;
    i15 = HEAP32[i12 + 132 >> 2] | 0;
    i16 = i12;
    i17 = i8;
   } else {
    i14 = i5;
    i15 = i6;
    i16 = i9;
    i17 = i2;
   }
   i11 = i17 + (Math_imul(i15, 0 - i14 | 0) | 0) | 0;
   HEAP32[i4 + 32 >> 2] = 0;
   i18 = i16;
   i19 = i11;
  } else {
   i18 = i9;
   i19 = i2;
  }
  i4 = i4 + 40 | 0;
  if (!(i4 >>> 0 < i3 >>> 0)) {
   break;
  } else {
   i9 = i18;
   i2 = i19 + 1 | 0;
  }
 }
 STACKTOP = i1;
 return;
}
function _messager__async_cb89(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = HEAP32[i1 + 12 >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[i1 + 4 >> 2];
 i1 = (HEAP32[i3 >> 2] | 0) + 1 | 0;
 if ((i1 | 0) == (i4 | 0)) {
  i6 = _emscripten_realloc_async_context(4) | 0;
  _bbflushwait(1e6);
  if (___async) {
   HEAP32[i6 >> 2] = 263;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i6 >> 2] = 263;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP8[i5 + (HEAP32[i3 >> 2] | 0) >> 0] | 0;
 if (!(!(i1 << 24 >> 24 == 10) ? (i6 = HEAP32[12936] | 0, i7 = (Math_imul(HEAP32[i6 + 56 >> 2] | 0, HEAP32[130912] | 0) | 0) + (HEAP32[130916] | 0) | 0, HEAP8[(HEAP32[i6 + 164 >> 2] | 0) + i7 >> 0] = i1, i1 = HEAP32[12936] | 0, i7 = (Math_imul(HEAP32[i1 + 56 >> 2] | 0, HEAP32[130912] | 0) | 0) + (HEAP32[130916] | 0) | 0, HEAP8[(HEAP32[i1 + 168 >> 2] | 0) + i7 >> 0] = 0, i7 = (HEAP32[130916] | 0) + 1 | 0, HEAP32[130916] = i7, (i7 | 0) != (HEAP32[(HEAP32[12936] | 0) + 56 >> 2] | 0)) : 0)) {
  _newline();
 }
 i7 = HEAP32[12936] | 0;
 i1 = (Math_imul(HEAP32[i7 + 56 >> 2] | 0, HEAP32[130912] | 0) | 0) + (HEAP32[130916] | 0) | 0;
 HEAP8[(HEAP32[i7 + 168 >> 2] | 0) + i1 >> 0] = 4;
 i1 = HEAP32[12936] | 0;
 i7 = (Math_imul(HEAP32[i1 + 56 >> 2] | 0, HEAP32[130912] | 0) | 0) + (HEAP32[130916] | 0) | 0;
 HEAP8[(HEAP32[i1 + 164 >> 2] | 0) + i7 >> 0] = 32;
 i7 = HEAP32[12936] | 0;
 i1 = HEAP32[130916] | 0;
 i6 = HEAP32[130912] | 0;
 i8 = _emscripten_realloc_async_context(16) | 0;
 _aa_gotoxy(i7, i1, i6);
 if (___async) {
  HEAP32[i8 >> 2] = 261;
  i9 = i8 + 4 | 0;
  i10 = HEAP32[i3 >> 2] | 0;
  HEAP32[i9 >> 2] = i10;
  i11 = i8 + 8 | 0;
  HEAP32[i11 >> 2] = i4;
  i12 = i8 + 12 | 0;
  HEAP32[i12 >> 2] = i5;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i8 >> 2] = 261;
 i9 = i8 + 4 | 0;
 i10 = HEAP32[i3 >> 2] | 0;
 HEAP32[i9 >> 2] = i10;
 i11 = i8 + 8 | 0;
 HEAP32[i11 >> 2] = i4;
 i12 = i8 + 12 | 0;
 HEAP32[i12 >> 2] = i5;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _scale2(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, d23 = 0.0, d24 = 0.0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i6 = STACKTOP;
 i7 = HEAP32[12936] | 0;
 i8 = i7 + 152 | 0;
 i9 = (HEAP32[i8 >> 2] | 0) / 2 | 0;
 i10 = i7 + 156 | 0;
 i11 = HEAP32[i10 >> 2] | 0;
 i12 = HEAP32[i1 + 8 >> 2] | 0;
 i13 = HEAP32[i1 + 12 >> 2] | 0;
 HEAP32[130840] = HEAP32[130840] ^ 1;
 i14 = i1 + 16 | 0;
 i15 = HEAP32[i14 >> 2] | 0;
 if ((i15 | 0) == 0) {
  _decompressimg(i1) | 0;
  i16 = HEAP32[i14 >> 2] | 0;
  i17 = 1;
 } else {
  i16 = i15;
  i17 = 0;
 }
 i15 = (i2 | 0) < 0;
 i1 = (i3 | 0) < 0;
 i18 = (i12 | 0) > (i4 | 0);
 i19 = (i13 | 0) > (i5 | 0);
 if ((i3 | i2 | 0) > -1 & i18 & i19) {
  i20 = i16 + ((Math_imul(i12, i3) | 0) + i2) | 0;
  i21 = (HEAP32[i7 + 160 >> 2] | 0) + (Math_imul(HEAP32[130840] | 0, i9) | 0) | 0;
  i22 = HEAP32[i8 >> 2] | 0;
  _fastcscale(i20, i21, i4 - i2 | 0, (i22 | 0) / 2 | 0, i5 - i3 | 0, HEAP32[i10 >> 2] | 0, i12, i22);
  if ((i17 | 0) == 0) {
   STACKTOP = i6;
   return;
  }
  _free(HEAP32[i14 >> 2] | 0);
  HEAP32[i14 >> 2] = 0;
  STACKTOP = i6;
  return;
 }
 i14 = HEAP32[i8 >> 2] | 0;
 i8 = (HEAP32[i10 >> 2] | 0) + -1 | 0;
 d23 = +(i9 | 0) / +(~i2 + i4 | 0);
 HEAPF64[65421] = d23;
 d24 = +(i11 | 0) / +(~i3 + i5 | 0);
 HEAPF64[65422] = d24;
 if (i18) {
  i25 = i4;
  i26 = ((i14 | 0) / 2 | 0) + -1 | 0;
 } else {
  i4 = i12 + -1 | 0;
  i25 = i4;
  i26 = ~~(+(i4 - i2 | 0) * d23);
 }
 if (i19) {
  i27 = i5;
  i28 = i8;
 } else {
  i8 = i13 + -1 | 0;
  i27 = i8;
  i28 = ~~(+(i8 - i3 | 0) * d24);
 }
 if (i15) {
  i29 = 0;
  i30 = ~~-(+(i2 | 0) * d23);
 } else {
  i29 = i2;
  i30 = 0;
 }
 if (i1) {
  i31 = 0;
  i32 = ~~-(+(i3 | 0) * d24);
 } else {
  i31 = i3;
  i32 = 0;
 }
 i3 = i16 + ((Math_imul(i31, i12) | 0) + i29) | 0;
 _fastcscale(i3, (HEAP32[i7 + 160 >> 2] | 0) + ((Math_imul((HEAP32[130840] | 0) + i32 | 0, i9) | 0) + i30) | 0, i25 - i29 | 0, i26 - i30 | 0, i27 - i31 | 0, i28 - i32 | 0, i12, i14);
 STACKTOP = i6;
 return;
}
function _memchr(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i4 = STACKTOP;
 i5 = i2 & 255;
 i6 = (i3 | 0) == 0;
 L1 : do {
  if ((i1 & 3 | 0) == 0 | i6) {
   i7 = i3;
   i8 = i6;
   i9 = i1;
   i10 = 5;
  } else {
   i11 = i2 & 255;
   i12 = i3;
   i13 = i1;
   while (1) {
    if ((HEAP8[i13 >> 0] | 0) == i11 << 24 >> 24) {
     i14 = i12;
     i15 = i13;
     i10 = 6;
     break L1;
    }
    i16 = i13 + 1 | 0;
    i17 = i12 + -1 | 0;
    i18 = (i17 | 0) == 0;
    if ((i16 & 3 | 0) == 0 | i18) {
     i7 = i17;
     i8 = i18;
     i9 = i16;
     i10 = 5;
     break;
    } else {
     i12 = i17;
     i13 = i16;
    }
   }
  }
 } while (0);
 if ((i10 | 0) == 5) {
  if (i8) {
   i19 = 0;
   i20 = i9;
  } else {
   i14 = i7;
   i15 = i9;
   i10 = 6;
  }
 }
 L8 : do {
  if ((i10 | 0) == 6) {
   i9 = i2 & 255;
   if (!((HEAP8[i15 >> 0] | 0) == i9 << 24 >> 24)) {
    i7 = Math_imul(i5, 16843009) | 0;
    L11 : do {
     if (i14 >>> 0 > 3) {
      i8 = i14;
      i1 = i15;
      while (1) {
       i3 = HEAP32[i1 >> 2] ^ i7;
       if (((i3 & -2139062144 ^ -2139062144) & i3 + -16843009 | 0) != 0) {
        i21 = i8;
        i22 = i1;
        break L11;
       }
       i3 = i1 + 4 | 0;
       i6 = i8 + -4 | 0;
       if (i6 >>> 0 > 3) {
        i8 = i6;
        i1 = i3;
       } else {
        i21 = i6;
        i22 = i3;
        break;
       }
      }
     } else {
      i21 = i14;
      i22 = i15;
     }
    } while (0);
    if ((i21 | 0) == 0) {
     i19 = 0;
     i20 = i22;
    } else {
     i7 = i21;
     i1 = i22;
     while (1) {
      if ((HEAP8[i1 >> 0] | 0) == i9 << 24 >> 24) {
       i19 = i7;
       i20 = i1;
       break L8;
      }
      i8 = i1 + 1 | 0;
      i7 = i7 + -1 | 0;
      if ((i7 | 0) == 0) {
       i19 = 0;
       i20 = i8;
       break;
      } else {
       i1 = i8;
      }
     }
    }
   } else {
    i19 = i14;
    i20 = i15;
   }
  }
 } while (0);
 STACKTOP = i4;
 return ((i19 | 0) != 0 ? i20 : 0) | 0;
}
function _aa_flush__async_cb55(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i5 = HEAP32[i1 + 32 >> 2] | 0;
 if ((i5 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i6 = i3 + 208 | 0;
 if ((HEAP32[i6 >> 2] | 0) == 0) {
  i7 = _emscripten_realloc_async_context(4) | 0;
  FUNCTION_TABLE_vi[i5 & 511](i3);
  if (___async) {
   HEAP32[i7 >> 2] = 280;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i7 >> 2] = 280;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i7 = i3 + 8 | 0;
 i5 = HEAP32[i7 >> 2] | 0;
 if (((i5 | 0) != 0 ? (HEAP32[i5 + 8 >> 2] & 8 | 0) != 0 : 0) ? (HEAP32[i6 >> 2] = 0, i8 = HEAP32[i5 + 24 >> 2] | 0, (i8 | 0) != 0) : 0) {
  i5 = _emscripten_realloc_async_context(20) | 0;
  FUNCTION_TABLE_vii[i8 & 3](i3, 0);
  if (___async) {
   HEAP32[i5 >> 2] = 277;
   i9 = i5 + 4 | 0;
   HEAP32[i9 >> 2] = i4;
   i10 = i5 + 8 | 0;
   HEAP32[i10 >> 2] = i3;
   i11 = i5 + 12 | 0;
   HEAP32[i11 >> 2] = i7;
   i12 = i5 + 16 | 0;
   HEAP32[i12 >> 2] = i6;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i5 >> 2] = 277;
  i9 = i5 + 4 | 0;
  HEAP32[i9 >> 2] = i4;
  i10 = i5 + 8 | 0;
  HEAP32[i10 >> 2] = i3;
  i11 = i5 + 12 | 0;
  HEAP32[i11 >> 2] = i7;
  i12 = i5 + 16 | 0;
  HEAP32[i12 >> 2] = i6;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i12 = HEAP32[i1 + 32 >> 2] | 0;
 i1 = _emscripten_realloc_async_context(16) | 0;
 FUNCTION_TABLE_vi[i12 & 511](i3);
 if (___async) {
  HEAP32[i1 >> 2] = 278;
  i13 = i1 + 4 | 0;
  HEAP32[i13 >> 2] = i7;
  i14 = i1 + 8 | 0;
  HEAP32[i14 >> 2] = i6;
  i15 = i1 + 12 | 0;
  HEAP32[i15 >> 2] = i3;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i1 >> 2] = 278;
 i13 = i1 + 4 | 0;
 HEAP32[i13 >> 2] = i7;
 i14 = i1 + 8 | 0;
 HEAP32[i14 >> 2] = i6;
 i15 = i1 + 12 | 0;
 HEAP32[i15 >> 2] = i3;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _credits2__async_cb105(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[i1 + 8 >> 2];
 i1 = HEAP32[68188] | 0;
 HEAP32[68196] = i1;
 HEAP32[68194] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = i4;
 if ((HEAP32[i3 >> 2] | 0) == (i1 | 0)) {
  i1 = HEAP32[12936] | 0;
  i4 = _emscripten_realloc_async_context(8) | 0;
  i5 = _aa_getkey(i1, 1) | 0;
  if (___async) {
   HEAP32[i4 >> 2] = 254;
   i6 = i4 + 4 | 0;
   i7 = HEAP32[i3 >> 2] | 0;
   HEAP32[i6 >> 2] = i7;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i5;
  ___async_unwind = 0;
  HEAP32[i4 >> 2] = 254;
  i6 = i4 + 4 | 0;
  i7 = HEAP32[i3 >> 2] | 0;
  HEAP32[i6 >> 2] = i7;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  i7 = HEAP32[12936] | 0;
  _backconvert(0, 9, HEAP32[i7 + 56 >> 2] | 0, HEAP32[i7 + 60 >> 2] | 0);
  i7 = HEAP32[12936] | 0;
  i6 = HEAP32[i7 + 152 >> 2] | 0;
  _memcpy(HEAP32[130870] | 0, (HEAP32[i7 + 160 >> 2] | 0) + (i6 * 18 | 0) | 0, Math_imul((HEAP32[i7 + 156 >> 2] | 0) + -18 | 0, i6) | 0) | 0;
  _displaytext(HEAP32[i3 >> 2] | 0);
  i6 = HEAP32[12936] | 0;
  _backconvert(0, 9, HEAP32[i6 + 56 >> 2] | 0, HEAP32[i6 + 60 >> 2] | 0);
  i6 = HEAP32[12936] | 0;
  i7 = HEAP32[i6 + 152 >> 2] | 0;
  _memcpy(HEAP32[130872] | 0, (HEAP32[i6 + 160 >> 2] | 0) + (i7 * 18 | 0) | 0, Math_imul((HEAP32[i6 + 156 >> 2] | 0) + -18 | 0, i7) | 0) | 0;
  HEAP32[(HEAP32[22682] | 0) + 12 >> 2] = 0;
  i7 = _emscripten_realloc_async_context(8) | 0;
  _timestuff(0, 0, 32, 1e6);
  if (___async) {
   HEAP32[i7 >> 2] = 253;
   i8 = i7 + 4 | 0;
   i9 = HEAP32[i3 >> 2] | 0;
   HEAP32[i8 >> 2] = i9;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i7 >> 2] = 253;
  i8 = i7 + 4 | 0;
  i9 = HEAP32[i3 >> 2] | 0;
  HEAP32[i8 >> 2] = i9;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
}
function _newline() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[130916] | 0;
 i3 = HEAP32[12936] | 0;
 i4 = HEAP32[i3 + 56 >> 2] | 0;
 if ((i2 | 0) < (i4 | 0)) {
  i5 = i3;
  i6 = i4;
  i4 = i2;
  while (1) {
   i2 = (Math_imul(HEAP32[130912] | 0, i6) | 0) + i4 | 0;
   HEAP8[(HEAP32[i5 + 164 >> 2] | 0) + i2 >> 0] = 32;
   i2 = HEAP32[12936] | 0;
   i7 = (Math_imul(HEAP32[i2 + 56 >> 2] | 0, HEAP32[130912] | 0) | 0) + (HEAP32[130916] | 0) | 0;
   HEAP8[(HEAP32[i2 + 168 >> 2] | 0) + i7 >> 0] = 0;
   i4 = (HEAP32[130916] | 0) + 1 | 0;
   HEAP32[130916] = i4;
   i7 = HEAP32[12936] | 0;
   i6 = HEAP32[i7 + 56 >> 2] | 0;
   if ((i4 | 0) >= (i6 | 0)) {
    i8 = i7;
    break;
   } else {
    i5 = i7;
   }
  }
 } else {
  i8 = i3;
 }
 i3 = (HEAP32[130914] | 0) + -1 | 0;
 i5 = (i3 | 0) < 0 ? 0 : i3;
 HEAP32[130914] = i5;
 i3 = (HEAP32[130912] | 0) + 1 | 0;
 HEAP32[130912] = i3;
 HEAP32[130916] = 0;
 i6 = HEAP32[i8 + 60 >> 2] | 0;
 if ((i3 | 0) < (i6 | 0)) {
  STACKTOP = i1;
  return;
 }
 i3 = HEAP32[i8 + 164 >> 2] | 0;
 i4 = HEAP32[i8 + 56 >> 2] | 0;
 _memcpy(i3 + (Math_imul(i4, i5) | 0) | 0, i3 + (Math_imul(i5 + 1 | 0, i4) | 0) | 0, Math_imul(i4, i6 + -1 - i5 | 0) | 0) | 0;
 i5 = HEAP32[12936] | 0;
 i6 = HEAP32[i5 + 168 >> 2] | 0;
 i4 = HEAP32[130914] | 0;
 i3 = HEAP32[i5 + 56 >> 2] | 0;
 i8 = i6 + (Math_imul(i3, i4) | 0) | 0;
 i7 = i6 + (Math_imul(i4 + 1 | 0, i3) | 0) | 0;
 _memcpy(i8 | 0, i7 | 0, Math_imul((HEAP32[i5 + 60 >> 2] | 0) + ~i4 | 0, i3) | 0) | 0;
 i3 = HEAP32[12936] | 0;
 i4 = HEAP32[i3 + 56 >> 2] | 0;
 _memset((HEAP32[i3 + 164 >> 2] | 0) + (Math_imul((HEAP32[i3 + 60 >> 2] | 0) + -1 | 0, i4) | 0) | 0, 32, i4 | 0) | 0;
 i4 = HEAP32[12936] | 0;
 i3 = HEAP32[i4 + 56 >> 2] | 0;
 _memset((HEAP32[i4 + 168 >> 2] | 0) + (Math_imul((HEAP32[i4 + 60 >> 2] | 0) + -1 | 0, i3) | 0) | 0, 0, i3 | 0) | 0;
 HEAP32[130912] = (HEAP32[130912] | 0) + -1;
 STACKTOP = i1;
 return;
}
function _timestuff__async_cb83(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[68196] = (HEAP32[68194] | 0) + (HEAP32[i1 + 12 >> 2] | 0);
 i1 = _tl_create_timer() | 0;
 i6 = (i4 | 0) == 0;
 i7 = i6 ? -40 : i5;
 if ((i7 | 0) < 0) {
  HEAP32[68198] = i4;
  _tl_set_multihandler(i1, 120);
  i8 = 0 - i7 | 0;
  i9 = 1;
 } else {
  _tl_set_multihandler(i1, i4);
  i8 = i7;
  i9 = 0;
 }
 _tl_set_interval(i1, 1e6 / (i8 | 0) | 0);
 _tl_add_timer(HEAP32[12] | 0, i1);
 _tl_reset_timer(i1);
 if (!i6) {
  i6 = _emscripten_realloc_async_context(16) | 0;
  FUNCTION_TABLE_vi[i4 & 511](1);
  if (___async) {
   HEAP32[i6 >> 2] = 121;
   i10 = i6 + 4 | 0;
   HEAP32[i10 >> 2] = i1;
   i11 = i6 + 8 | 0;
   HEAP32[i11 >> 2] = i3;
   i12 = i6 + 12 | 0;
   HEAP32[i12 >> 2] = i9;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i6 >> 2] = 121;
  i10 = i6 + 4 | 0;
  HEAP32[i10 >> 2] = i1;
  i11 = i6 + 8 | 0;
  HEAP32[i11 >> 2] = i3;
  i12 = i6 + 12 | 0;
  HEAP32[i12 >> 2] = i9;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[68190] | 0) != 0) {
  i13 = HEAP32[68196] | 0;
  HEAP32[68194] = i13;
  _tl_free_timer(i1);
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[68188] | 0) >= (HEAP32[68196] | 0)) {
  i13 = HEAP32[68196] | 0;
  HEAP32[68194] = i13;
  _tl_free_timer(i1);
  STACKTOP = i2;
  return;
 }
 HEAP32[68200] = 0;
 i13 = HEAP32[12] | 0;
 i12 = _emscripten_realloc_async_context(20) | 0;
 i6 = _tl_process_group(i13) | 0;
 if (!___async) {
  HEAP32[___async_retval >> 2] = i6;
  ___async_unwind = 0;
 }
 HEAP32[i12 >> 2] = 122;
 HEAP32[i12 + 4 >> 2] = i1;
 HEAP8[i12 + 8 >> 0] = (i3 | 0) == 0 & 1;
 HEAP32[i12 + 12 >> 2] = i3;
 HEAP8[i12 + 16 >> 0] = (i9 | 0) == 0 & 1;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _draw_plasma() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 if ((HEAP32[i2 + 152 >> 2] | 0) > 0) {
  i3 = i2;
  i2 = 0;
  i4 = HEAP8[176064] | 0;
  i5 = HEAP8[176072] | 0;
  while (1) {
   if ((HEAP32[i3 + 156 >> 2] | 0) > 0) {
    i6 = i4 & 255;
    i7 = i5 & 255;
    i8 = i2 & 255;
    i9 = i3;
    i10 = 0;
    i11 = HEAP8[176048] | 0;
    i12 = HEAP8[176056] | 0;
    while (1) {
     i13 = HEAP32[44008] << 8;
     i14 = i11 & 255;
     i15 = HEAP32[44010] | 0;
     i16 = i12 & 255;
     i17 = (Math_imul(HEAP32[i9 + 152 >> 2] | 0, i10) | 0) + i2 | 0;
     HEAP8[(HEAP32[i9 + 160 >> 2] | 0) + i17 >> 0] = (HEAP8[i15 + (i13 | i16) >> 0] | 0) + (HEAP8[i15 + (i13 | i14) >> 0] | 0) + (HEAPU8[i15 + (i13 | i6) >> 0] | 0) + (HEAPU8[i15 + (i13 | i7) >> 0] | 0) + (HEAPU8[i15 + (i13 | i8) >> 0] | 0) + (HEAPU8[i15 + (i13 | i10 & 255) >> 0] | 0);
     i10 = i10 + 1 | 0;
     i13 = HEAP32[12936] | 0;
     if ((i10 | 0) >= (HEAP32[i13 + 156 >> 2] | 0)) {
      i18 = i7;
      i19 = i6;
      i20 = i13;
      break;
     } else {
      i9 = i13;
      i11 = i14 + 3 & 255;
      i12 = i16 + 1 & 255;
     }
    }
   } else {
    i18 = i5 & 255;
    i19 = i4 & 255;
    i20 = i3;
   }
   i2 = i2 + 1 | 0;
   if ((i2 | 0) >= (HEAP32[i20 + 152 >> 2] | 0)) {
    i21 = 0;
    break;
   } else {
    i3 = i20;
    i4 = i19 + 2 & 255;
    i5 = i18 + 3 & 255;
   }
  }
 } else {
  i21 = 0;
 }
 do {
  _message(HEAP32[176280 + (i21 << 2) >> 2] | 0, (i21 * 1e6 | 0) + 11e6 + (HEAP32[68194] | 0) | 0);
  i21 = i21 + 1 | 0;
 } while ((i21 | 0) != 24);
 i21 = HEAP32[12936] | 0;
 _aa_renderpalette(i21, 176376, HEAP32[22682] | 0, 0, 0, HEAP32[i21 + 152 >> 2] | 0, HEAP32[i21 + 156 >> 2] | 0);
 _aa_flush(HEAP32[12936] | 0);
 STACKTOP = i1;
 return;
}
function _aa_fastrender(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i6 = STACKTOP;
 i7 = HEAP32[i1 + 152 >> 2] | 0;
 if ((i5 | i4 | 0) < 0) {
  STACKTOP = i6;
  return;
 }
 i8 = i1 + 56 | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 if ((i9 | 0) < (i2 | 0)) {
  STACKTOP = i6;
  return;
 }
 i10 = HEAP32[i1 + 60 >> 2] | 0;
 if ((i10 | 0) < (i3 | 0)) {
  STACKTOP = i6;
  return;
 }
 i11 = (i2 | 0) < 0 ? 0 : i2;
 i2 = (i3 | 0) < 0 ? 0 : i3;
 i3 = i1 + 172 | 0;
 if ((HEAP32[i3 >> 2] | 0) == 0) {
  _aa_mktable(i1) | 0;
 }
 if ((i2 | 0) >= (((i10 | 0) > (i5 | 0) ? i5 : i10) | 0)) {
  STACKTOP = i6;
  return;
 }
 i12 = i7 << 1;
 i13 = (i11 | 0) < (((i9 | 0) > (i4 | 0) ? i4 : i9) | 0);
 i14 = i1 + 160 | 0;
 i15 = i1 + 168 | 0;
 i16 = i1 + 164 | 0;
 i1 = ~i9;
 i9 = ~i4;
 i4 = ~((i1 | 0) > (i9 | 0) ? i1 : i9);
 i9 = ~i10;
 i10 = ~i5;
 i5 = ~((i9 | 0) > (i10 | 0) ? i9 : i10);
 i10 = i2;
 do {
  L18 : do {
   if (i13) {
    i2 = Math_imul(i12, i10) | 0;
    i9 = Math_imul(HEAP32[i8 >> 2] | 0, i10) | 0;
    i1 = i11;
    while (1) {
     i17 = HEAP32[i14 >> 2] | 0;
     i18 = i2 + 1 | 0;
     i19 = HEAP16[(HEAP32[i3 >> 2] | 0) + (((HEAPU8[i17 + i18 >> 0] | 0) >>> 4 << 12 | (HEAPU8[i17 + i2 >> 0] | 0) >>> 4 << 8 | (HEAPU8[i17 + (i2 + i7) >> 0] | 0) >>> 4 | HEAP8[i17 + (i18 + i7) >> 0] & 240) << 1) >> 1] | 0;
     HEAP8[(HEAP32[i15 >> 2] | 0) + i9 >> 0] = (i19 & 65535) >>> 8;
     HEAP8[(HEAP32[i16 >> 2] | 0) + i9 >> 0] = i19;
     i19 = i1 + 1 | 0;
     if ((i19 | 0) == (i4 | 0)) {
      break L18;
     }
     i2 = i2 + 2 | 0;
     i9 = i9 + 1 | 0;
     i1 = i19;
    }
   }
  } while (0);
  i10 = i10 + 1 | 0;
 } while ((i10 | 0) != (i5 | 0));
 STACKTOP = i6;
 return;
}
function _make_context(i1, i2, i3, i4, i5, i6, i7, i8, i9, d10, d11) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 d10 = +d10;
 d11 = +d11;
 var i12 = 0, i13 = 0, i14 = 0;
 i12 = STACKTOP;
 i13 = Math_imul(i3, i2) | 0;
 _memset(i8 | 0, 0, i13 | 0) | 0;
 _memset(i9 | 0, 0, i13 | 0) | 0;
 i13 = _calloc(1216, 1) | 0;
 if ((i13 | 0) == 0) {
  i14 = 0;
  STACKTOP = i12;
  return i14 | 0;
 }
 HEAP32[i13 + 32 >> 2] = 1122;
 HEAP32[i13 + 96 >> 2] = i5;
 HEAPF32[i13 + 1168 >> 2] = d10 / +(i1 | 0);
 HEAPF32[i13 + 1172 >> 2] = d11 / +(i2 | 0);
 HEAPF32[i13 + 1176 >> 2] = d10;
 HEAPF32[i13 + 1180 >> 2] = d11;
 HEAP32[i13 + 136 >> 2] = i3;
 HEAP32[i13 + 128 >> 2] = i1;
 HEAP32[i13 + 80 >> 2] = 170;
 HEAP32[i13 + 84 >> 2] = 0;
 HEAP32[i13 + 132 >> 2] = i2;
 HEAP32[i13 + 108 >> 2] = 3;
 HEAP32[i13 + 76 >> 2] = 0;
 HEAP32[i13 + 36 >> 2] = i8;
 HEAP32[i13 + 40 >> 2] = i9;
 HEAP32[i13 + 24 >> 2] = i6;
 HEAP32[i13 + 28 >> 2] = i7;
 i7 = _malloc((i1 << 3) + 8 | 0) | 0;
 HEAP32[i13 + 16 >> 2] = i7;
 if ((i7 | 0) == 0) {
  i14 = 0;
  STACKTOP = i12;
  return i14 | 0;
 }
 i6 = _malloc((i2 << 3) + 8 | 0) | 0;
 i9 = i13 + 20 | 0;
 HEAP32[i9 >> 2] = i6;
 if ((i6 | 0) == 0) {
  _free(i7);
  i14 = 0;
  STACKTOP = i12;
  return i14 | 0;
 }
 i6 = _malloc((i1 * 40 | 0) + 40 | 0) | 0;
 i1 = i13 + 52 | 0;
 HEAP32[i1 >> 2] = i6;
 if ((i6 | 0) == 0) {
  _free(i7);
  _free(HEAP32[i9 >> 2] | 0);
  i14 = 0;
  STACKTOP = i12;
  return i14 | 0;
 }
 i6 = _malloc((i2 * 40 | 0) + 40 | 0) | 0;
 HEAP32[i13 + 56 >> 2] = i6;
 if ((i6 | 0) == 0) {
  _free(i7);
  _free(HEAP32[i9 >> 2] | 0);
  _free(HEAP32[i1 >> 2] | 0);
  i14 = 0;
  STACKTOP = i12;
  return i14 | 0;
 } else {
  _set_formula(i13, i4);
  i14 = i13;
  STACKTOP = i12;
  return i14 | 0;
 }
 return 0;
}
function _displaya(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i2 = STACKTOP;
 i3 = (HEAP32[(HEAP32[12936] | 0) + 56 >> 2] | 0) / 2 | 0;
 i4 = i3 - i1 | 0;
 i5 = i4 + -5 | 0;
 i6 = i4 + -4 | 0;
 i7 = i4 + -3 | 0;
 i4 = i3 + i1 | 0;
 i1 = i4 + 4 | 0;
 i3 = i4 + 3 | 0;
 i8 = i4 + 2 | 0;
 i4 = 0;
 i9 = 0;
 while (1) {
  i10 = i5 + i4 | 0;
  if ((i10 | 0) > -1) {
   i11 = HEAP32[12936] | 0;
   _aa_puts(i11, i10, (((HEAP32[i11 + 60 >> 2] | 0) + -6 | 0) / 2 | 0) + i9 | 0, 0, 523616);
  }
  i11 = i6 + i4 | 0;
  if ((i11 | 0) > -1) {
   i10 = HEAP32[12936] | 0;
   _aa_puts(i10, i11, (((HEAP32[i10 + 60 >> 2] | 0) + -6 | 0) / 2 | 0) + i9 | 0, 0, 523624);
  }
  i10 = i7 + i4 | 0;
  if ((i10 | 0) > -1) {
   i11 = HEAP32[12936] | 0;
   _aa_puts(i11, i10, (((HEAP32[i11 + 60 >> 2] | 0) + -6 | 0) / 2 | 0) + i9 | 0, 0, 523632);
  }
  i11 = i1 + i9 | 0;
  i10 = HEAP32[12936] | 0;
  i12 = HEAP32[i10 + 56 >> 2] | 0;
  if ((i11 | 0) < (i12 | 0)) {
   _aa_puts(i10, i11, (((HEAP32[i10 + 60 >> 2] | 0) + -6 | 0) / 2 | 0) + i9 | 0, 0, 523616);
   i11 = HEAP32[12936] | 0;
   i13 = HEAP32[i11 + 56 >> 2] | 0;
   i14 = i11;
  } else {
   i13 = i12;
   i14 = i10;
  }
  i10 = i3 + i9 | 0;
  if ((i10 | 0) < (i13 | 0)) {
   _aa_puts(i14, i10, (((HEAP32[i14 + 60 >> 2] | 0) + -6 | 0) / 2 | 0) + i9 | 0, 0, 523640);
   i10 = HEAP32[12936] | 0;
   i15 = HEAP32[i10 + 56 >> 2] | 0;
   i16 = i10;
  } else {
   i15 = i13;
   i16 = i14;
  }
  i10 = i8 + i9 | 0;
  if ((i10 | 0) < (i15 | 0)) {
   _aa_puts(i16, i10, (((HEAP32[i16 + 60 >> 2] | 0) + -6 | 0) / 2 | 0) + i9 | 0, 0, 523632);
  }
  i10 = i9 + 1 | 0;
  if ((i10 | 0) == 6) {
   break;
  } else {
   i4 = ~i9;
   i9 = i10;
  }
 }
 STACKTOP = i2;
 return;
}
function _bb__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 _introscreen();
 i2 = _aa_getrenderparams() | 0;
 HEAP32[22682] = i2;
 _aa_render(HEAP32[12936] | 0, i2, 0, 0, 1, 1);
 HEAP32[70] = _uncompressfont(532176) | 0;
 HEAP32[68186] = _tl_create_timer() | 0;
 _srand(_time(0) | 0);
 if ((HEAP32[68226] | 0) == 1) {
  i3 = 1;
 } else {
  HEAP32[68190] = 1;
  i4 = 4;
 }
 while (1) {
  if ((i4 | 0) == 4) {
   i4 = 0;
   i3 = HEAP32[68226] | 0;
  }
  if ((i3 | 0) == 2) {
   i4 = 9;
   break;
  } else if ((i3 | 0) != 3) {
   i4 = 6;
   break;
  }
  if ((HEAP32[68224] | 0) == 0) {
   i4 = 14;
   break;
  } else {
   i4 = 4;
  }
 }
 if ((i4 | 0) == 6) {
  _load_song(272912) | 0;
  i3 = _emscripten_realloc_async_context(4) | 0;
  _bbupdate() | 0;
  if (___async) {
   HEAP32[i3 >> 2] = 132;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i3 >> 2] = 132;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else if ((i4 | 0) == 9) {
  if ((HEAP32[68192] | 0) != 0) {
   _aa_close(HEAP32[12936] | 0);
   HEAP32[___async_retval >> 2] = 0;
   STACKTOP = i1;
   return;
  }
  i3 = _emscripten_realloc_async_context(4) | 0;
  _vezen(416440, 431904, 448008, 462848);
  if (___async) {
   HEAP32[i3 >> 2] = 145;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i3 >> 2] = 145;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else if ((i4 | 0) == 14) {
  i4 = _emscripten_realloc_async_context(4) | 0;
  _credits2();
  if (___async) {
   HEAP32[i4 >> 2] = 156;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i4 >> 2] = 156;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
}
function _aa_flush__async_cb52(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = HEAP32[i1 + 12 >> 2] | 0;
 i6 = HEAP32[i1 + 16 >> 2] | 0;
 i7 = HEAP32[i1 + 20 >> 2] | 0;
 i8 = HEAP32[i1 + 24 >> 2] | 0;
 i9 = HEAP32[i1 + 28 >> 2] | 0;
 i10 = HEAP32[i1 + 32 >> 2] | 0;
 i11 = HEAP32[i1 + 36 >> 2] | 0;
 i12 = HEAP32[i1 + 40 >> 2] | 0;
 i13 = HEAP32[i1 + 44 >> 2] | 0;
 i14 = HEAP8[i1 + 48 >> 0] & 1;
 i15 = HEAP32[i1 + 52 >> 2] | 0;
 i16 = HEAP32[i1 + 56 >> 2] | 0;
 i17 = HEAP8[i1 + 60 >> 0] & 1;
 i18 = HEAP32[i1 + 64 >> 2] | 0;
 i19 = HEAP32[i1 + 68 >> 2] | 0;
 i20 = HEAP32[i1 + 72 >> 2] | 0;
 i21 = HEAP32[i1 + 76 >> 2] | 0;
 i1 = HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] | 0;
 i22 = _emscripten_realloc_async_context(80) | 0;
 FUNCTION_TABLE_vii[i1 & 3](i3, i19);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i22 >> 2] = 274;
 HEAP32[i22 + 4 >> 2] = i3;
 HEAP32[i22 + 8 >> 2] = i4;
 HEAP32[i22 + 12 >> 2] = i5;
 HEAP32[i22 + 16 >> 2] = i6;
 HEAP32[i22 + 20 >> 2] = i7;
 HEAP32[i22 + 24 >> 2] = i8;
 HEAP32[i22 + 28 >> 2] = i9;
 HEAP32[i22 + 32 >> 2] = i10;
 HEAP32[i22 + 36 >> 2] = i11;
 HEAP32[i22 + 40 >> 2] = i12;
 HEAP32[i22 + 44 >> 2] = i13;
 HEAP8[i22 + 48 >> 0] = i14 & 1;
 HEAP32[i22 + 52 >> 2] = i15;
 HEAP32[i22 + 56 >> 2] = i16;
 HEAP8[i22 + 60 >> 0] = i17 & 1;
 HEAP32[i22 + 64 >> 2] = i18;
 HEAP32[i22 + 68 >> 2] = i19;
 HEAP32[i22 + 72 >> 2] = i20;
 HEAP32[i22 + 76 >> 2] = i21;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _aa_flush__async_cb51(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = HEAP32[i1 + 12 >> 2] | 0;
 i6 = HEAP32[i1 + 16 >> 2] | 0;
 i7 = HEAP32[i1 + 20 >> 2] | 0;
 i8 = HEAP32[i1 + 24 >> 2] | 0;
 i9 = HEAP32[i1 + 28 >> 2] | 0;
 i10 = HEAP32[i1 + 32 >> 2] | 0;
 i11 = HEAP32[i1 + 36 >> 2] | 0;
 i12 = HEAP32[i1 + 40 >> 2] | 0;
 i13 = HEAP32[i1 + 44 >> 2] | 0;
 i14 = HEAP8[i1 + 48 >> 0] & 1;
 i15 = HEAP32[i1 + 52 >> 2] | 0;
 i16 = HEAP32[i1 + 56 >> 2] | 0;
 i17 = HEAP8[i1 + 60 >> 0] & 1;
 i18 = HEAP32[i1 + 64 >> 2] | 0;
 i19 = HEAP32[i1 + 68 >> 2] | 0;
 i20 = HEAP32[i1 + 72 >> 2] | 0;
 i21 = HEAP32[i1 + 76 >> 2] | 0;
 i1 = HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] | 0;
 i22 = _emscripten_realloc_async_context(80) | 0;
 FUNCTION_TABLE_vii[i1 & 3](i3, i10);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i22 >> 2] = 273;
 HEAP32[i22 + 4 >> 2] = i3;
 HEAP32[i22 + 8 >> 2] = i4;
 HEAP32[i22 + 12 >> 2] = i5;
 HEAP32[i22 + 16 >> 2] = i6;
 HEAP32[i22 + 20 >> 2] = 1;
 HEAP32[i22 + 24 >> 2] = i7;
 HEAP32[i22 + 28 >> 2] = i8;
 HEAP32[i22 + 32 >> 2] = i9;
 HEAP32[i22 + 36 >> 2] = i11;
 HEAP32[i22 + 40 >> 2] = i12;
 HEAP32[i22 + 44 >> 2] = i13;
 HEAP8[i22 + 48 >> 0] = i14 & 1;
 HEAP32[i22 + 52 >> 2] = i15;
 HEAP32[i22 + 56 >> 2] = i16;
 HEAP8[i22 + 60 >> 0] = i17 & 1;
 HEAP32[i22 + 64 >> 2] = i18;
 HEAP32[i22 + 68 >> 2] = i19;
 HEAP32[i22 + 72 >> 2] = i20;
 HEAP32[i22 + 76 >> 2] = i21;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _scene4__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 i3 = HEAP32[i2 + 152 >> 2] | 0;
 if ((i3 + -20 | 0) > 20) {
  i4 = i3;
  i3 = i2;
  i2 = 20;
  do {
   i5 = (Math_imul((HEAP32[i3 + 156 >> 2] | 0) + -10 | 0, i4) | 0) + i2 | 0;
   HEAP8[(HEAP32[i3 + 160 >> 2] | 0) + i5 >> 0] = -1;
   i5 = HEAP32[12936] | 0;
   i6 = (Math_imul((HEAP32[i5 + 156 >> 2] | 0) + -11 | 0, HEAP32[i5 + 152 >> 2] | 0) | 0) + i2 | 0;
   HEAP8[(HEAP32[i5 + 160 >> 2] | 0) + i6 >> 0] = -1;
   i6 = HEAP32[12936] | 0;
   i5 = (Math_imul((HEAP32[i6 + 156 >> 2] | 0) + -12 | 0, HEAP32[i6 + 152 >> 2] | 0) | 0) + i2 | 0;
   HEAP8[(HEAP32[i6 + 160 >> 2] | 0) + i5 >> 0] = -1;
   i5 = HEAP32[12936] | 0;
   i6 = (Math_imul((HEAP32[i5 + 156 >> 2] | 0) + -13 | 0, HEAP32[i5 + 152 >> 2] | 0) | 0) + i2 | 0;
   HEAP8[(HEAP32[i5 + 160 >> 2] | 0) + i6 >> 0] = -1;
   i3 = HEAP32[12936] | 0;
   i6 = 800 / (HEAP32[i3 + 156 >> 2] | 0) | 0;
   HEAP32[44902] = HEAP32[i3 + 160 >> 2];
   i5 = (i6 | 0) == 0 ? 1 : i6;
   i6 = HEAP32[44868] | 0;
   i7 = 0;
   do {
    if (i7 >>> 0 > i5 >>> 0) {
     HEAP32[i6 + (i7 << 2) >> 2] = ((i7 - i5 | 0) >>> 0) / 5 | 0;
    } else {
     HEAP32[i6 + (i7 << 2) >> 2] = 0;
    }
    i7 = i7 + 1 | 0;
   } while ((i7 | 0) != 1280);
   i2 = i2 + 1 | 0;
   i4 = HEAP32[i3 + 152 >> 2] | 0;
  } while ((i2 | 0) < (i4 + -20 | 0));
 }
 i4 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(-25, 108, 10, 7e6);
 if (___async) {
  HEAP32[i4 >> 2] = 109;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i4 >> 2] = 109;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _aa_close(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 do {
  if ((HEAP32[i1 + 192 >> 2] | 0) < 0 ? (i3 = HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] | 0, (i3 | 0) != 0) : 0) {
   i4 = _emscripten_alloc_async_context(8) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i2;
   FUNCTION_TABLE_vii[i3 & 3](i1, 1);
   if (___async) {
    HEAP32[i4 >> 2] = 299;
    HEAP32[i4 + 4 >> 2] = i1;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   } else {
    _emscripten_free_async_context(i4 | 0);
    break;
   }
  }
 } while (0);
 do {
  if ((HEAP32[i1 + 4 >> 2] | 0) != 0) {
   i4 = _emscripten_alloc_async_context(8) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i2;
   _aa_uninitkbd(i1);
   if (___async) {
    HEAP32[i4 >> 2] = 300;
    HEAP32[i4 + 4 >> 2] = i1;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   } else {
    _emscripten_free_async_context(i4 | 0);
    break;
   }
  }
 } while (0);
 i4 = HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] | 0;
 i3 = _emscripten_alloc_async_context(8) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i2;
 FUNCTION_TABLE_vi[i4 & 511](i1);
 if (___async) {
  HEAP32[i3 >> 2] = 301;
  HEAP32[i3 + 4 >> 2] = i1;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 _aa_invalidate(i1);
 i3 = HEAP32[i1 + 160 >> 2] | 0;
 if ((i3 | 0) != 0) {
  _free(i3);
 }
 i3 = HEAP32[i1 + 164 >> 2] | 0;
 if ((i3 | 0) != 0) {
  _free(i3);
 }
 i3 = HEAP32[i1 + 168 >> 2] | 0;
 if ((i3 | 0) != 0) {
  _free(i3);
 }
 i3 = HEAP32[i1 + 216 >> 2] | 0;
 if ((i3 | 0) == 0) {
  _free(i1);
  STACKTOP = i2;
  return;
 }
 _free(i3);
 _free(i1);
 STACKTOP = i2;
 return;
}
function _format(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i2 = STACKTOP;
 i3 = i1 + 2 | 0;
 i4 = i1 + 1 | 0;
 i5 = 0;
 i6 = 0;
 i7 = 0;
 i8 = 0;
 i9 = 0;
 while (1) {
  i10 = i5;
  while (1) {
   i11 = HEAP8[166880 + i10 >> 0] | 0;
   if (i11 << 24 >> 24 == 32) {
    i12 = 0;
    i13 = i10;
    i14 = i8;
    break;
   } else if (!(i11 << 24 >> 24 == 35)) {
    i15 = 9;
    break;
   }
   i16 = HEAP8[i10 + 166881 >> 0] | 0;
   if ((i16 | 0) == 99) {
    HEAP32[31714] = HEAP32[31714] ^ 1;
   } else if ((i16 | 0) == 102) {
    HEAP32[31714] = HEAP32[31714] ^ 2;
   } else if ((i16 | 0) == 108) {
    i16 = HEAP32[41716] | 0;
    i17 = _malloc(i3) | 0;
    HEAP32[126864 + (i16 << 2) >> 2] = i17;
    HEAP8[i17 >> 0] = 1;
    _memset(i17 + 1 | 0, 126, i1 | 0) | 0;
    HEAP8[i17 + i4 >> 0] = 0;
    HEAP32[41716] = i16 + 1;
   }
   i10 = i10 + 2 | 0;
  }
  if ((i15 | 0) == 9) {
   i15 = 0;
   i12 = i11 << 24 >> 24 == 10;
   i13 = i6;
   i14 = i7;
  }
  i16 = i12 ? i10 : i13;
  i7 = i12 ? i8 : i14;
  if ((i8 | 0) > (i1 | 0) | i12) {
   i17 = (i16 | 0) < (i9 | 0) ? i9 : i16;
   _outputline(166880 + i9 | 0, i7, i17 - i9 | 0, i1);
   i18 = i17;
   i19 = i17;
   i20 = 0;
   i21 = i17 + 1 | 0;
  } else {
   i18 = i10;
   i19 = i16;
   i20 = i8;
   i21 = i9;
  }
  i8 = i20 + 1 | 0;
  i5 = i18 + 1 | 0;
  if ((i5 | 0) >= 9151) {
   break;
  } else {
   i6 = i19;
   i9 = i21;
  }
 }
 _outputline(166880 + i21 | 0, i8, i5 - i21 | 0, i1);
 STACKTOP = i2;
 return;
}
function _mydraw78() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0;
 i1 = STACKTOP;
 i2 = HEAP32[68188] | 0;
 i3 = HEAP32[68194] | 0;
 i4 = (i2 | 0) < (i3 | 0) ? i3 : i2;
 i5 = HEAP32[68196] | 0;
 i6 = (i4 | 0) > (i5 | 0) ? i5 : i4;
 i4 = i5 - i6 >> 8;
 i7 = (i4 | 0) < 0;
 i8 = i7 ? 0 : i4;
 d9 = +((i6 - i3 >> 8) - (i7 ? i4 : 0) | 0);
 d10 = +(i5 - i3 >> 8 | 0);
 d11 = (+(Math_imul(i8, HEAP32[44920] | 0) | 0) + +(HEAP32[44918] | 0) * d9) / d10;
 d12 = +(i2 - (HEAP32[44904] | 0) | 0);
 i2 = ~~(d11 + +Math_sin(+(d12 / 3.0e5)) * 40.0);
 i3 = ~~((+(HEAP32[44922] | 0) * d9 + +(Math_imul(HEAP32[44924] | 0, i8) | 0)) / d10 + +Math_cos(+(d12 / 5.0e5)) * 40.0);
 i5 = ~~((d9 * +(HEAP32[44928] | 0) + +(Math_imul(HEAP32[44932] | 0, i8) | 0)) / d10 + +Math_sin(+(d12 / 52.0e4)) * 70.0);
 i4 = ~~((d9 * +(HEAP32[44926] | 0) + +(Math_imul(HEAP32[44930] | 0, i8) | 0)) / d10 + +Math_cos(+(d12 / 7.0e5)) * 70.0);
 i7 = ~~((d9 * +(HEAP32[44916] | 0) + +(Math_imul(HEAP32[44914] | 0, i8) | 0)) / d10);
 i6 = HEAP32[22682] | 0;
 HEAP32[i6 + 4 >> 2] = i7;
 HEAP32[i6 >> 2] = ~~((d9 * +(HEAP32[44908] | 0) + +(Math_imul(HEAP32[44906] | 0, i8) | 0)) / d10);
 HEAP32[i6 + 20 >> 2] = ~~((d9 * +(HEAP32[44912] | 0) + +(Math_imul(HEAP32[44910] | 0, i8) | 0)) / d10);
 i8 = HEAP32[272720 >> 2] | 0;
 i6 = (Math_imul(i8, i2 - i5 | 0) | 0) / 1e3 | 0;
 i7 = HEAP32[272724 >> 2] | 0;
 _scale(272712, i6, (Math_imul(i7, i3 - i4 | 0) | 0) / 1e3 | 0, (Math_imul(i8, i5 + i2 | 0) | 0) / 1e3 | 0, (Math_imul(i7, i4 + i3 | 0) | 0) / 1e3 | 0);
 STACKTOP = i1;
 return;
}
function _backconvert(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i5 = STACKTOP;
 if ((i2 | 0) >= (i4 | 0)) {
  STACKTOP = i5;
  return;
 }
 i6 = (i1 | 0) < (i3 | 0);
 i7 = i2;
 do {
  if (i6) {
   i2 = i7 << 1;
   i8 = i2 | 1;
   i9 = i1;
   do {
    i10 = HEAP32[12936] | 0;
    i11 = (Math_imul(HEAP32[i10 + 56 >> 2] | 0, i7) | 0) + i9 | 0;
    i12 = (HEAPU8[(HEAP32[i10 + 168 >> 2] | 0) + i11 >> 0] | 0) << 8 | (HEAPU8[(HEAP32[i10 + 164 >> 2] | 0) + i11 >> 0] | 0);
    i11 = i9 << 1;
    i13 = (Math_imul(HEAP32[i10 + 152 >> 2] | 0, i2) | 0) + i11 | 0;
    HEAP8[(HEAP32[i10 + 160 >> 2] | 0) + i13 >> 0] = HEAP32[(HEAP32[i10 + 180 >> 2] | 0) + (i12 * 20 | 0) + 4 >> 2];
    i10 = HEAP32[12936] | 0;
    i13 = i11 | 1;
    i14 = (Math_imul(HEAP32[i10 + 152 >> 2] | 0, i2) | 0) + i13 | 0;
    HEAP8[(HEAP32[i10 + 160 >> 2] | 0) + i14 >> 0] = HEAP32[(HEAP32[i10 + 180 >> 2] | 0) + (i12 * 20 | 0) >> 2];
    i10 = HEAP32[12936] | 0;
    i14 = (Math_imul(HEAP32[i10 + 152 >> 2] | 0, i8) | 0) + i11 | 0;
    HEAP8[(HEAP32[i10 + 160 >> 2] | 0) + i14 >> 0] = HEAP32[(HEAP32[i10 + 180 >> 2] | 0) + (i12 * 20 | 0) + 12 >> 2];
    i10 = HEAP32[12936] | 0;
    i14 = (Math_imul(HEAP32[i10 + 152 >> 2] | 0, i8) | 0) + i13 | 0;
    HEAP8[(HEAP32[i10 + 160 >> 2] | 0) + i14 >> 0] = HEAP32[(HEAP32[i10 + 180 >> 2] | 0) + (i12 * 20 | 0) + 8 >> 2];
    i9 = i9 + 1 | 0;
   } while ((i9 | 0) != (i3 | 0));
  }
  i7 = i7 + 1 | 0;
 } while ((i7 | 0) != (i4 | 0));
 STACKTOP = i5;
 return;
}
function _mydraw1() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 i3 = HEAP32[i2 + 160 >> 2] | 0;
 i4 = (255 - (HEAP32[68688] | 0) | 0) * 255 | 0;
 if (!((HEAP32[68666] | 0) > -1)) {
  _memset(i3 | 0, 0, Math_imul(HEAP32[i2 + 156 >> 2] | 0, HEAP32[i2 + 152 >> 2] | 0) | 0) | 0;
  i5 = HEAP32[68674] | 0;
  i6 = HEAP32[68194] | 0;
  _drawprujezd(i5, i6);
  STACKTOP = i1;
  return;
 }
 if ((HEAP32[i2 + 156 >> 2] | 0) <= 0) {
  i5 = HEAP32[68674] | 0;
  i6 = HEAP32[68194] | 0;
  _drawprujezd(i5, i6);
  STACKTOP = i1;
  return;
 }
 i7 = i2;
 i2 = i3;
 i3 = HEAP32[68668] | 0;
 i8 = 0;
 while (1) {
  L10 : do {
   if ((HEAP32[i7 + 152 >> 2] | 0) > 0) {
    i9 = i2;
    i10 = i3;
    i11 = 1;
    while (1) {
     i12 = HEAP8[i10 >> 0] | 0;
     i13 = Math_imul(i12 & 255, HEAP32[68688] | 0) | 0;
     HEAP8[i9 >> 0] = (i13 + (i12 << 24 >> 24 != 0 ? i4 : 0) | 0) >>> 8;
     i12 = i9 + 1 | 0;
     i13 = i10 + 1 | 0;
     i14 = HEAP32[12936] | 0;
     if ((i11 | 0) >= (HEAP32[i14 + 152 >> 2] | 0)) {
      i15 = i14;
      i16 = i12;
      i17 = i13;
      break L10;
     }
     i9 = i12;
     i10 = i13;
     i11 = i11 + 1 | 0;
    }
   } else {
    i15 = i7;
    i16 = i2;
    i17 = i3;
   }
  } while (0);
  i8 = i8 + 1 | 0;
  if ((i8 | 0) >= (HEAP32[i15 + 156 >> 2] | 0)) {
   break;
  } else {
   i7 = i15;
   i2 = i16;
   i3 = i17;
  }
 }
 i5 = HEAP32[68674] | 0;
 i6 = HEAP32[68194] | 0;
 _drawprujezd(i5, i6);
 STACKTOP = i1;
 return;
}
function _aa_getevent__async_cb175(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 i5 = HEAP32[i1 + 8 >> 2] | 0;
 i6 = HEAP32[i1 + 12 >> 2] | 0;
 i7 = HEAP32[i1 + 16 >> 2] | 0;
 i8 = HEAP32[i1 + 20 >> 2] | 0;
 i9 = HEAP32[i1 + 24 >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[___async_retval >> 2];
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) == 259) {
  i3 = HEAP32[i5 >> 2] | 0;
  if ((i3 | 0) == 0) {
   i10 = 400;
   i11 = ___async_retval;
   HEAP32[i11 >> 2] = i10;
   STACKTOP = i2;
   return;
  }
  i5 = HEAP32[i3 + 20 >> 2] | 0;
  i3 = _emscripten_realloc_async_context(24) | 0;
  FUNCTION_TABLE_viiii[i5 & 0](i4, i6, i7, i8);
  if (!___async) {
   ___async_unwind = 0;
  }
  HEAP32[i3 >> 2] = 288;
  HEAP32[i3 + 4 >> 2] = i6;
  HEAP32[i3 + 8 >> 2] = i4;
  HEAP32[i3 + 12 >> 2] = i7;
  HEAP32[i3 + 16 >> 2] = i8;
  HEAP32[i3 + 20 >> 2] = i9;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else if ((i1 | 0) == 258) {
  i9 = HEAP32[i4 + 212 >> 2] | 0;
  if ((i9 | 0) == 0) {
   i10 = 258;
   i11 = ___async_retval;
   HEAP32[i11 >> 2] = i10;
   STACKTOP = i2;
   return;
  }
  i3 = _emscripten_realloc_async_context(4) | 0;
  FUNCTION_TABLE_vi[i9 & 511](i4);
  if (___async) {
   HEAP32[i3 >> 2] = 287;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i3 >> 2] = 287;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  i10 = i1;
  i11 = ___async_retval;
  HEAP32[i11 >> 2] = i10;
  STACKTOP = i2;
  return;
 }
}
function _scene2() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = STACKTOP;
 HEAP32[(HEAP32[22682] | 0) + 20 >> 2] = 0;
 HEAP32[34] = 6;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(60, 0, 1, 275e4);
 if (___async) {
  HEAP32[i2 >> 2] = 69;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[34] = 7;
 HEAP32[212] = 776;
 HEAP8[856] = 2;
 HEAP8[864] = 1;
 i2 = 2;
 i3 = 776;
 i4 = 0;
 while (1) {
  HEAP8[864] = i2;
  i5 = i2 + 1 << 24 >> 24;
  HEAP8[856] = i5 << 24 >> 24 > 4 ? 2 : i5;
  HEAP32[218] = i3;
  HEAP32[212] = HEAP32[792 + (i4 << 2) >> 2];
  if ((i4 | 0) == 13) {
   i6 = 5;
   break;
  }
  i7 = _emscripten_alloc_async_context(8) | 0;
  HEAP32[___async_cur_frame + 4 >> 2] = i1;
  _timestuff(0, 0, 1, 65e4);
  if (___async) {
   i6 = 9;
   break;
  }
  _emscripten_free_async_context(i7 | 0);
  i5 = i4 + 1 | 0;
  if ((i5 | 0) == 14) {
   i6 = 12;
   break;
  }
  i2 = HEAP8[856] | 0;
  i3 = HEAP32[212] | 0;
  i4 = i5;
 }
 if ((i6 | 0) == 5) {
  i3 = _emscripten_alloc_async_context(4) | 0;
  HEAP32[___async_cur_frame + 4 >> 2] = i1;
  _timestuff(0, 0, 1, 195e4);
  if (___async) {
   HEAP32[i3 >> 2] = 70;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  }
  _emscripten_free_async_context(i3 | 0);
  STACKTOP = i1;
  return;
 } else if ((i6 | 0) == 9) {
  HEAP32[i7 >> 2] = 71;
  HEAP32[i7 + 4 >> 2] = i4;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else if ((i6 | 0) == 12) {
  STACKTOP = i1;
  return;
 }
}
function _bbinit(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 i5 = i3 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[525916 >> 2] = HEAP32[525916 >> 2] | 7;
 _aa_parseoptions(0, 0, i5, i2) | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if ((i1 | 0) == 2) {
  i6 = 2;
 } else if ((i1 | 0) != 1) {
  _puts(274632) | 0;
  i7 = HEAP32[131470] | 0;
  HEAP32[i4 >> 2] = i7;
  _printf(272816, i4 | 0) | 0;
  _exit(1);
 }
 if (((i6 | 0) == 2 ? (i6 = HEAP32[i2 + 4 >> 2] | 0, ((HEAP8[i6 >> 0] | 0) + -49 << 24 >> 24 & 255) > 7) : 0) ? (_strcmp(i6, 272808) | 0) != 0 : 0) {
  _puts(274632) | 0;
  i7 = HEAP32[131470] | 0;
  HEAP32[i4 >> 2] = i7;
  _printf(272816, i4 | 0) | 0;
  _exit(1);
 }
 i4 = _aa_autoinit(525912) | 0;
 HEAP32[12936] = i4;
 if ((i4 | 0) == 0) {
  _puts(274568) | 0;
  _exit(2);
 }
 if ((_aa_autoinitkbd(i4, 0) | 0) == 0) {
  _aa_close(HEAP32[12936] | 0);
  _puts(274600) | 0;
  _exit(3);
 }
 do {
  if ((HEAP32[i5 >> 2] | 0) == 2) {
   i4 = HEAP32[i2 + 4 >> 2] | 0;
   if ((_strcmp(i4, 272808) | 0) == 0) {
    HEAP32[68224] = 1;
    break;
   } else {
    HEAP32[68226] = _atol(i4) | 0;
    break;
   }
  }
 } while (0);
 i2 = HEAP32[12936] | 0;
 i5 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i3;
 _aa_hidecursor(i2);
 if (___async) {
  HEAP32[i5 >> 2] = 130;
  i3 = STACKTOP;
  STACKTOP = i3;
  return 0;
 } else {
  _emscripten_free_async_context(i5 | 0);
  STACKTOP = i3;
  return 1;
 }
 return 0;
}
function _scene4__async_cb46(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[i1 + 8 >> 2];
 i1 = (HEAP32[i3 >> 2] | 0) + 8 | 0;
 i5 = HEAP32[12936] | 0;
 if ((i1 | 0) < ((HEAP32[i5 + 56 >> 2] | 0) + -7 | 0)) {
  HEAP32[i3 >> 2] = i1;
  _aa_puts(i5, HEAP32[i3 >> 2] | 0, (HEAP32[i5 + 60 >> 2] | 0) + -3 | 0, 0, 179488);
  i1 = _emscripten_realloc_async_context(12) | 0;
  _bbflushwait(i4);
  if (___async) {
   HEAP32[i1 >> 2] = 93;
   i6 = i1 + 4 | 0;
   HEAP32[i6 >> 2] = i4;
   i7 = i1 + 8 | 0;
   i8 = HEAP32[i3 >> 2] | 0;
   HEAP32[i7 >> 2] = i8;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i1 >> 2] = 93;
  i6 = i1 + 4 | 0;
  HEAP32[i6 >> 2] = i4;
  i7 = i1 + 8 | 0;
  i8 = HEAP32[i3 >> 2] | 0;
  HEAP32[i7 >> 2] = i8;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 if (((HEAP32[i5 + 56 >> 2] | 0) + -25 | 0) > 0) {
  i8 = i5;
  i5 = 0;
  do {
   _aa_puts(i8, i5, 0, 0, 179496);
   i5 = i5 + 6 | 0;
   i8 = HEAP32[12936] | 0;
  } while ((i5 | 0) < ((HEAP32[i8 + 56 >> 2] | 0) + -25 | 0));
 }
 i8 = _emscripten_realloc_async_context(8) | 0;
 _bbflushwait(1e5);
 if (___async) {
  HEAP32[i8 >> 2] = 94;
  i9 = i8 + 4 | 0;
  HEAP32[i9 >> 2] = 0;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i8 >> 2] = 94;
 i9 = i8 + 4 | 0;
 HEAP32[i9 >> 2] = 0;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _bb__async_cb201(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 if ((HEAP32[68224] | 0) == 0) {
  i2 = HEAP32[12936] | 0;
  _aa_close(i2);
  i3 = ___async_retval;
  HEAP32[i3 >> 2] = 0;
  STACKTOP = i1;
  return;
 }
 while (1) {
  i4 = HEAP32[68226] | 0;
  if ((i4 | 0) == 2) {
   i5 = 7;
   break;
  } else if ((i4 | 0) != 3) {
   i5 = 4;
   break;
  }
  if ((HEAP32[68224] | 0) == 0) {
   i5 = 12;
   break;
  }
 }
 if ((i5 | 0) == 4) {
  _load_song(272912) | 0;
  i4 = _emscripten_realloc_async_context(4) | 0;
  _bbupdate() | 0;
  if (___async) {
   HEAP32[i4 >> 2] = 132;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i4 >> 2] = 132;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else if ((i5 | 0) == 7) {
  if ((HEAP32[68192] | 0) != 0) {
   i2 = HEAP32[12936] | 0;
   _aa_close(i2);
   i3 = ___async_retval;
   HEAP32[i3 >> 2] = 0;
   STACKTOP = i1;
   return;
  }
  i3 = _emscripten_realloc_async_context(4) | 0;
  _vezen(416440, 431904, 448008, 462848);
  if (___async) {
   HEAP32[i3 >> 2] = 145;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i3 >> 2] = 145;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else if ((i5 | 0) == 12) {
  i5 = _emscripten_realloc_async_context(4) | 0;
  _credits2();
  if (___async) {
   HEAP32[i5 >> 2] = 156;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i5 >> 2] = 156;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
}
function _bb__async_cb200(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 if ((HEAP32[68192] | 0) != 0) {
  i2 = HEAP32[12936] | 0;
  _aa_close(i2);
  i3 = ___async_retval;
  HEAP32[i3 >> 2] = 0;
  STACKTOP = i1;
  return;
 }
 while (1) {
  if ((HEAP32[68224] | 0) == 0) {
   i4 = 13;
   break;
  }
  i5 = HEAP32[68226] | 0;
  if ((i5 | 0) == 2) {
   i4 = 7;
   break;
  } else if ((i5 | 0) != 3) {
   i4 = 4;
   break;
  }
 }
 if ((i4 | 0) == 4) {
  _load_song(272912) | 0;
  i5 = _emscripten_realloc_async_context(4) | 0;
  _bbupdate() | 0;
  if (___async) {
   HEAP32[i5 >> 2] = 132;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i5 >> 2] = 132;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else if ((i4 | 0) == 7) {
  if ((HEAP32[68192] | 0) != 0) {
   i2 = HEAP32[12936] | 0;
   _aa_close(i2);
   i3 = ___async_retval;
   HEAP32[i3 >> 2] = 0;
   STACKTOP = i1;
   return;
  }
  i3 = _emscripten_realloc_async_context(4) | 0;
  _vezen(416440, 431904, 448008, 462848);
  if (___async) {
   HEAP32[i3 >> 2] = 145;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i3 >> 2] = 145;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else if ((i4 | 0) == 13) {
  i4 = _emscripten_realloc_async_context(4) | 0;
  _credits2();
  if (___async) {
   HEAP32[i4 >> 2] = 156;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i4 >> 2] = 156;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
}
function _do_plasma(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[22682] | 0;
 i4 = (HEAP32[i3 >> 2] | 0) - (i1 << 1) | 0;
 HEAP32[i3 >> 2] = ((i4 | 0) < 0 ? (HEAP32[68188] | 0) <= ((HEAP32[68196] | 0) + -3657142 | 0) : 0) ? 0 : i4;
 i4 = (HEAP32[44354] | 0) + i1 | 0;
 HEAP32[44354] = i4;
 if ((i4 | 0) > 64) {
  HEAP32[44354] = 0;
  HEAP32[44350] = HEAP32[44352];
  i3 = (_rand() | 0) % 2 | 0;
  HEAP32[44352] = i3;
  i5 = HEAP32[44354] | 0;
  i6 = i3;
 } else {
  i5 = i4;
  i6 = HEAP32[44352] | 0;
 }
 i4 = HEAP32[44350] | 0;
 d7 = +(i5 | 0);
 i5 = 0;
 do {
  i3 = HEAP32[177424 + (i4 << 10) + (i5 << 2) >> 2] | 0;
  HEAP32[176376 + (i5 << 2) >> 2] = ~~(+(i3 | 0) + d7 * +((HEAP32[177424 + (i6 << 10) + (i5 << 2) >> 2] | 0) - i3 | 0) * .015625);
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) != 256);
 if ((i1 | 0) > 0) {
  i8 = 0;
 } else {
  STACKTOP = i2;
  return;
 }
 do {
  i5 = (_rand() | 0) % 2 | 0;
  HEAP8[176048] = -4 - i5 + (HEAPU8[176048] | 0);
  _rand() | 0;
  HEAP8[176064] = (HEAPU8[176064] | 0) + 4;
  i5 = (_rand() | 0) % 2 | 0;
  HEAP8[176056] = (HEAPU8[176056] | 0) - i5;
  i5 = (_rand() | 0) % 2 | 0;
  HEAP8[176072] = (HEAPU8[176072] | 0) - i5;
  i5 = (HEAP32[44008] | 0) + (HEAP32[44020] | 0) | 0;
  HEAP32[44008] = i5;
  if (!(i5 >>> 0 > 187)) {
   if ((i5 | 0) == 0) {
    HEAP32[44020] = 1;
   }
  } else {
   HEAP32[44020] = -1;
  }
  i8 = i8 + 1 | 0;
 } while ((i8 | 0) != (i1 | 0));
 STACKTOP = i2;
 return;
}
function _aa_getevent__async_cb174(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = HEAP32[i1 + 12 >> 2] | 0;
 i6 = HEAP32[i1 + 16 >> 2] | 0;
 i7 = HEAP32[i1 + 20 >> 2] | 0;
 i8 = HEAP32[i1 + 24 >> 2] | 0;
 i9 = HEAP32[i1 + 28 >> 2] | 0;
 i10 = HEAP32[i1 + 32 >> 2] | 0;
 i11 = HEAP32[i1 + 36 >> 2] | 0;
 i12 = HEAP32[i1 + 40 >> 2] | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 i13 = HEAP32[i6 >> 2] | 0;
 if (((i1 | 0) == (HEAP32[i9 >> 2] | 0) ? (i13 | 0) == (HEAP32[i11 >> 2] | 0) : 0) ? (HEAP32[i7 >> 2] | 0) == (HEAP32[i12 >> 2] | 0) : 0) {
  i14 = HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] | 0;
  i15 = _emscripten_realloc_async_context(44) | 0;
  i16 = FUNCTION_TABLE_iii[i14 & 3](i3, 1) | 0;
  if (!___async) {
   HEAP32[___async_retval >> 2] = i16;
   ___async_unwind = 0;
  }
  HEAP32[i15 >> 2] = 284;
  HEAP32[i15 + 4 >> 2] = i3;
  HEAP32[i15 + 8 >> 2] = i4;
  HEAP32[i15 + 12 >> 2] = i5;
  HEAP32[i15 + 16 >> 2] = i6;
  HEAP32[i15 + 20 >> 2] = i7;
  HEAP32[i15 + 24 >> 2] = i8;
  HEAP32[i15 + 28 >> 2] = i9;
  HEAP32[i15 + 32 >> 2] = i10;
  HEAP32[i15 + 36 >> 2] = i11;
  HEAP32[i15 + 40 >> 2] = i12;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 HEAP32[i9 >> 2] = i1;
 HEAP32[i11 >> 2] = i13;
 HEAP32[i12 >> 2] = HEAP32[i7 >> 2];
 HEAP32[___async_retval >> 2] = 259;
 STACKTOP = i2;
 return;
}
function _credits2__async_cb118(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = HEAP32[i1 + 4 >> 2];
 i1 = (HEAP32[i3 >> 2] | 0) + 1 | 0;
 i4 = HEAP32[12936] | 0;
 if ((i1 | 0) == 100) {
  _aa_puts(i4, ((HEAP32[i4 + 56 >> 2] | 0) / 2 | 0) + -9 | 0, (((HEAP32[i4 + 60 >> 2] | 0) + -6 | 0) / 2 | 0) + 3 | 0, 1, 523456);
  i5 = _emscripten_realloc_async_context(4) | 0;
  _bbflushwait(1e5);
  if (___async) {
   HEAP32[i5 >> 2] = 247;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i5 >> 2] = 247;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  HEAP32[i3 >> 2] = i1;
  _memset(HEAP32[i4 + 164 >> 2] | 0, 32, Math_imul(HEAP32[i4 + 60 >> 2] | 0, HEAP32[i4 + 56 >> 2] | 0) | 0) | 0;
  i4 = HEAP32[12936] | 0;
  _memset(HEAP32[i4 + 168 >> 2] | 0, 0, Math_imul(HEAP32[i4 + 60 >> 2] | 0, HEAP32[i4 + 56 >> 2] | 0) | 0) | 0;
  _displaya(~~(+Math_sin(+(+(HEAP32[i3 >> 2] | 0) * 3.141592653589793 / 100.0)) * 10.0));
  _display8();
  i4 = _emscripten_realloc_async_context(8) | 0;
  _bbflushwait(1e4);
  if (___async) {
   HEAP32[i4 >> 2] = 246;
   i6 = i4 + 4 | 0;
   i7 = HEAP32[i3 >> 2] | 0;
   HEAP32[i6 >> 2] = i7;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i4 >> 2] = 246;
  i6 = i4 + 4 | 0;
  i7 = HEAP32[i3 >> 2] | 0;
  HEAP32[i6 >> 2] = i7;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
}
function _fastscale(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i10 = STACKTOP;
 if ((i3 | 0) == 0 | (i4 | 0) == 0 | (i5 | 0) == 0 | (i6 | 0) == 0) {
  STACKTOP = i10;
  return;
 }
 i11 = i3 << 1;
 i3 = i4 << 1;
 if ((i3 | 0) < (i11 | 0)) {
  i12 = (i11 | 0) % (i3 | 0) | 0;
  i13 = (i11 | 0) / (i3 | 0) | 0;
 } else {
  i12 = i11;
  i13 = 0;
 }
 i11 = i5 << 1;
 i5 = i6 << 1;
 if ((i5 | 0) < (i11 | 0)) {
  i14 = (i11 | 0) % (i5 | 0) | 0;
  i15 = Math_imul((i11 | 0) / (i5 | 0) | 0, i7) | 0;
 } else {
  i14 = i11;
  i15 = 0;
 }
 i11 = 0 - i3 | 0;
 i16 = i9 & 255;
 i9 = i2;
 i2 = i1;
 i1 = i6;
 i6 = 0 - i5 | 0;
 while (1) {
  i17 = i9;
  i18 = i2;
  i19 = i11;
  i20 = i4;
  while (1) {
   if ((HEAP8[i18 >> 0] | 0) != 0) {
    HEAP8[i17 >> 0] = i16;
   }
   i21 = i19 + i12 | 0;
   i22 = (i21 | 0) > 0;
   i20 = i20 + -1 | 0;
   if ((i20 | 0) == 0) {
    break;
   } else {
    i17 = i17 + 1 | 0;
    i18 = i18 + (i13 + (i22 & 1)) | 0;
    i19 = i21 - (i22 ? i3 : 0) | 0;
   }
  }
  i19 = i6 + i14 | 0;
  i18 = (i19 | 0) > 0;
  i1 = i1 + -1 | 0;
  if ((i1 | 0) == 0) {
   break;
  } else {
   i9 = i9 + i8 | 0;
   i2 = i2 + (i15 + (i18 ? i7 : 0)) | 0;
   i6 = i19 - (i18 ? i5 : 0) | 0;
  }
 }
 STACKTOP = i10;
 return;
}
function _centerprint(i1, i2, d3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0;
 i7 = STACKTOP;
 if ((HEAP32[68184] | 0) == 0 | (i6 | 0) == 0) {
  i8 = HEAP32[12936] | 0;
  d9 = +(HEAP32[i8 + 156 >> 2] | 0);
  d10 = d9 / d3;
  d11 = d10 * +(HEAP32[i8 + 152 >> 2] | 0) * .75 / d9 * +(HEAP32[i8 + 52 >> 2] | 0) / +(HEAP32[i8 + 48 >> 2] | 0);
  i8 = ~~(+(i1 | 0) - d11 * +((_strlen(i5 | 0) | 0) >>> 0) * .5);
  _print(i8, ~~(+(i2 | 0) - d10 * .5), d11, ~~d10, HEAP32[70] | 0, i4, i5);
  STACKTOP = i7;
  return;
 }
 if ((i6 & 1 | 0) != 0) {
  i8 = HEAP32[12936] | 0;
  d10 = +(HEAP32[i8 + 156 >> 2] | 0);
  d11 = d10 / d3;
  d9 = d11 * +(HEAP32[i8 + 152 >> 2] | 0) * .75 / d10 * +(HEAP32[i8 + 52 >> 2] | 0) / +(HEAP32[i8 + 48 >> 2] | 0);
  i8 = ~~(+((i1 | 0) / 2 | 0 | 0) - d9 * +((_strlen(i5 | 0) | 0) >>> 0) * .5);
  _print(i8, ~~(+(i2 | 0) - d11 * .5), d9, ~~d11, HEAP32[70] | 0, i4, i5);
 }
 if ((i6 & 2 | 0) == 0) {
  STACKTOP = i7;
  return;
 }
 i6 = HEAP32[12936] | 0;
 d11 = +(HEAP32[i6 + 156 >> 2] | 0);
 d9 = d11 / d3;
 i8 = HEAP32[i6 + 152 >> 2] | 0;
 d3 = d9 * +(i8 | 0) * .75 / d11 * +(HEAP32[i6 + 52 >> 2] | 0) / +(HEAP32[i6 + 48 >> 2] | 0);
 i6 = ~~(+(((i1 | 0) / 2 | 0) + ((i8 | 0) / 2 | 0) | 0) - d3 * +((_strlen(i5 | 0) | 0) >>> 0) * .5);
 _print(i6, ~~(+(i2 | 0) - d9 * .5), d3, ~~d9, HEAP32[70] | 0, i4, i5);
 STACKTOP = i7;
 return;
}
function _centerprinth(i1, i2, d3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0;
 i7 = STACKTOP;
 if (!((i6 | 0) != 0 & (HEAP32[68184] | 0) != 0)) {
  i8 = HEAP32[12936] | 0;
  d9 = +(HEAP32[i8 + 152 >> 2] | 0);
  d10 = d9 / d3;
  d11 = d10 * +(HEAP32[i8 + 156 >> 2] | 0) * 1.333 / d9 * +(HEAP32[i8 + 48 >> 2] | 0) / +(HEAP32[i8 + 52 >> 2] | 0);
  i8 = ~~(+(i1 | 0) - d10 * +((_strlen(i5 | 0) | 0) >>> 0) * .5);
  _print(i8, ~~(+(i2 | 0) - d11 * .5), d10, ~~d11, HEAP32[70] | 0, i4, i5);
  STACKTOP = i7;
  return;
 }
 if ((i6 & 1 | 0) == 0) {
  STACKTOP = i7;
  return;
 }
 i6 = HEAP32[12936] | 0;
 d11 = +(HEAP32[i6 + 152 >> 2] | 0);
 d10 = d11 / d3 * .5;
 d9 = d10 * +(HEAP32[i6 + 156 >> 2] | 0) * 1.333 / d11 * +(HEAP32[i6 + 48 >> 2] | 0) / +(HEAP32[i6 + 52 >> 2] | 0);
 i6 = (i1 | 0) / 2 | 0;
 i1 = ~~(+(i6 | 0) - d10 * +((_strlen(i5 | 0) | 0) >>> 0) * .5);
 d11 = +(i2 | 0);
 _print(i1, ~~(d11 - d9 * .5), d10, ~~d9, HEAP32[70] | 0, i4, i5);
 i1 = HEAP32[12936] | 0;
 i2 = HEAP32[i1 + 152 >> 2] | 0;
 d9 = +(i2 | 0);
 d10 = d9 / d3 * .5;
 d3 = d10 * +(HEAP32[i1 + 156 >> 2] | 0) * 1.333 / d9 * +(HEAP32[i1 + 48 >> 2] | 0) / +(HEAP32[i1 + 52 >> 2] | 0);
 i1 = ~~(+(((i2 | 0) / 2 | 0) + i6 | 0) - d10 * +((_strlen(i5 | 0) | 0) >>> 0) * .5);
 _print(i1, ~~(d11 - d3 * .5), d10, ~~d3, HEAP32[70] | 0, i4, i5);
 STACKTOP = i7;
 return;
}
function _do_fractal__async_cb139(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = HEAP32[i1 + 12 >> 2] | 0;
 i6 = HEAP32[i1 + 16 >> 2] | 0;
 i7 = HEAP32[i1 + 20 >> 2] | 0;
 i8 = HEAP32[i1 + 24 >> 2] | 0;
 i9 = HEAP32[i1 + 28 >> 2] | 0;
 i1 = HEAP32[71600] | 0;
 i10 = HEAP32[i1 + 52 >> 2] | 0;
 i11 = HEAP32[i1 + 36 >> 2] | 0;
 if (i3 >>> 0 >= i10 >>> 0 & i3 >>> 0 < i4 >>> 0) {
  i12 = _emscripten_realloc_async_context(28) | 0;
  _calccolumn(i11 + ((i3 - i10 | 0) / 40 | 0) | 0, i3);
  if (!___async) {
   ___async_unwind = 0;
  }
  HEAP32[i12 >> 2] = 216;
  HEAP32[i12 + 4 >> 2] = i5;
  HEAP32[i12 + 8 >> 2] = i4;
  HEAP32[i12 + 12 >> 2] = i9;
  HEAP32[i12 + 16 >> 2] = i7;
  HEAP32[i12 + 20 >> 2] = i6 + -1;
  HEAP32[i12 + 24 >> 2] = i8;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  i12 = i11 + (Math_imul(HEAP32[i1 + 136 >> 2] | 0, (i3 - (HEAP32[i1 + 56 >> 2] | 0) | 0) / 40 | 0) | 0) | 0;
  i1 = _emscripten_realloc_async_context(28) | 0;
  _calcline(i12, i3);
  if (!___async) {
   ___async_unwind = 0;
  }
  HEAP32[i1 >> 2] = 217;
  HEAP32[i1 + 4 >> 2] = i5;
  HEAP32[i1 + 8 >> 2] = i4;
  HEAP32[i1 + 12 >> 2] = i9;
  HEAP32[i1 + 16 >> 2] = i7 + -1;
  HEAP32[i1 + 20 >> 2] = i6;
  HEAP32[i1 + 24 >> 2] = i8;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
}
function _credits2__async_cb119(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = HEAP32[i1 + 4 >> 2];
 i1 = (HEAP32[i3 >> 2] | 0) + -1 | 0;
 if ((i1 | 0) != 0) {
  HEAP32[i3 >> 2] = i1;
  _display8();
  _displaya(HEAP32[i3 >> 2] | 0);
  i1 = _emscripten_realloc_async_context(8) | 0;
  _bbflushwait(1e4);
  if (___async) {
   HEAP32[i1 >> 2] = 245;
   i4 = i1 + 4 | 0;
   i5 = HEAP32[i3 >> 2] | 0;
   HEAP32[i4 >> 2] = i5;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i1 >> 2] = 245;
  i4 = i1 + 4 | 0;
  i5 = HEAP32[i3 >> 2] | 0;
  HEAP32[i4 >> 2] = i5;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i5 = HEAP32[12936] | 0;
 _memset(HEAP32[i5 + 164 >> 2] | 0, 32, Math_imul(HEAP32[i5 + 60 >> 2] | 0, HEAP32[i5 + 56 >> 2] | 0) | 0) | 0;
 i5 = HEAP32[12936] | 0;
 _memset(HEAP32[i5 + 168 >> 2] | 0, 0, Math_imul(HEAP32[i5 + 60 >> 2] | 0, HEAP32[i5 + 56 >> 2] | 0) | 0) | 0;
 _displaya(~~(+Math_sin(+(0.0 * 3.141592653589793 / 100.0)) * 10.0));
 _display8();
 i5 = _emscripten_realloc_async_context(8) | 0;
 _bbflushwait(1e4);
 if (___async) {
  HEAP32[i5 >> 2] = 246;
  i6 = i5 + 4 | 0;
  HEAP32[i6 >> 2] = 0;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i5 >> 2] = 246;
 i6 = i5 + 4 | 0;
 HEAP32[i6 >> 2] = 0;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function ___fwritex(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = STACKTOP;
 i5 = i3 + 16 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 do {
  if ((i6 | 0) == 0) {
   if ((___towrite(i3) | 0) == 0) {
    i7 = HEAP32[i5 >> 2] | 0;
    break;
   } else {
    i8 = 0;
    STACKTOP = i4;
    return i8 | 0;
   }
  } else {
   i7 = i6;
  }
 } while (0);
 i6 = i3 + 20 | 0;
 i5 = HEAP32[i6 >> 2] | 0;
 if ((i7 - i5 | 0) >>> 0 < i2 >>> 0) {
  i8 = FUNCTION_TABLE_iiii[HEAP32[i3 + 36 >> 2] & 1](i3, i1, i2) | 0;
  STACKTOP = i4;
  return i8 | 0;
 }
 L11 : do {
  if ((HEAP8[i3 + 75 >> 0] | 0) > -1) {
   i7 = i2;
   while (1) {
    if ((i7 | 0) == 0) {
     i9 = i2;
     i10 = i1;
     i11 = i5;
     i12 = 0;
     break L11;
    }
    i13 = i7 + -1 | 0;
    if ((HEAP8[i1 + i13 >> 0] | 0) == 10) {
     break;
    } else {
     i7 = i13;
    }
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[i3 + 36 >> 2] & 1](i3, i1, i7) | 0) >>> 0 < i7 >>> 0) {
    i8 = i7;
    STACKTOP = i4;
    return i8 | 0;
   } else {
    i9 = i2 - i7 | 0;
    i10 = i1 + i7 | 0;
    i11 = HEAP32[i6 >> 2] | 0;
    i12 = i7;
    break;
   }
  } else {
   i9 = i2;
   i10 = i1;
   i11 = i5;
   i12 = 0;
  }
 } while (0);
 _memcpy(i11 | 0, i10 | 0, i9 | 0) | 0;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i9;
 i8 = i12 + i9 | 0;
 STACKTOP = i4;
 return i8 | 0;
}
function _fastcscale(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i9 = STACKTOP;
 if ((i3 | 0) == 0 | (i4 | 0) == 0 | (i5 | 0) == 0 | (i6 | 0) == 0) {
  STACKTOP = i9;
  return;
 }
 i10 = i3 << 1;
 i3 = i4 << 1;
 if ((i3 | 0) < (i10 | 0)) {
  i11 = (i10 | 0) % (i3 | 0) | 0;
  i12 = (i10 | 0) / (i3 | 0) | 0;
 } else {
  i11 = i10;
  i12 = 0;
 }
 i10 = i5 << 1;
 i5 = i6 << 1;
 if ((i5 | 0) < (i10 | 0)) {
  i13 = (i10 | 0) % (i5 | 0) | 0;
  i14 = Math_imul((i10 | 0) / (i5 | 0) | 0, i7) | 0;
 } else {
  i13 = i10;
  i14 = 0;
 }
 i10 = 0 - i3 | 0;
 i15 = i2;
 i2 = i1;
 i1 = i6;
 i6 = 0 - i5 | 0;
 while (1) {
  i16 = i15;
  i17 = i2;
  i18 = i10;
  i19 = i4;
  while (1) {
   HEAP8[i16 >> 0] = HEAP8[i17 >> 0] | 0;
   i20 = i18 + i11 | 0;
   i21 = (i20 | 0) > 0;
   i19 = i19 + -1 | 0;
   if ((i19 | 0) == 0) {
    break;
   } else {
    i16 = i16 + 1 | 0;
    i17 = i17 + (i12 + (i21 & 1)) | 0;
    i18 = i20 - (i21 ? i3 : 0) | 0;
   }
  }
  i18 = i6 + i13 | 0;
  i17 = (i18 | 0) > 0;
  i1 = i1 + -1 | 0;
  if ((i1 | 0) == 0) {
   break;
  } else {
   i15 = i15 + i8 | 0;
   i2 = i2 + (i14 + (i17 ? i7 : 0)) | 0;
   i6 = i18 - (i17 ? i5 : 0) | 0;
  }
 }
 STACKTOP = i9;
 return;
}
function _set_view(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, d5 = 0.0, d6 = 0.0, i7 = 0, d8 = 0.0, i9 = 0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0;
 i3 = STACKTOP;
 i4 = i1 + 1184 | 0;
 HEAP32[i4 + 0 >> 2] = HEAP32[i2 + 0 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i4 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i4 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i4 + 24 >> 2] = HEAP32[i2 + 24 >> 2];
 HEAP32[i4 + 28 >> 2] = HEAP32[i2 + 28 >> 2];
 i2 = i1 + 1184 | 0;
 d5 = +HEAPF64[i2 >> 3];
 i4 = i1 + 1192 | 0;
 d6 = +HEAPF64[i4 >> 3];
 i7 = i1 + 1200 | 0;
 d8 = +HEAPF64[i7 >> 3];
 i9 = i1 + 1208 | 0;
 d10 = +HEAPF64[i9 >> 3];
 d11 = +HEAPF32[i1 + 1176 >> 2];
 d12 = +HEAPF32[i1 + 1180 >> 2];
 d13 = (d5 + d6) * .5;
 d14 = (d8 + d10) * .5;
 d15 = +Math_abs(+(d5 - d6));
 d6 = +Math_abs(+((d8 - d10) * d11 / d12));
 d10 = d15 > d6 ? d15 : d6;
 d6 = d10 * .5;
 d15 = d13 - d6;
 HEAPF64[i4 >> 3] = d15;
 d8 = d13 + d6;
 HEAPF64[i2 >> 3] = d8;
 d6 = d12 * d10 / d11 * .5;
 d11 = d14 - d6;
 HEAPF64[i9 >> 3] = d11;
 d10 = d14 + d6;
 HEAPF64[i7 >> 3] = d10;
 if (d15 > d8) {
  HEAPF64[i4 >> 3] = d8;
  HEAPF64[i2 >> 3] = d15;
 }
 if (!(d11 > d10)) {
  STACKTOP = i3;
  return;
 }
 HEAPF64[i9 >> 3] = d10;
 HEAPF64[i7 >> 3] = d11;
 STACKTOP = i3;
 return;
}
function _drawline(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 i3 = (_rand() | 0) % 800 | 0;
 if ((i3 | 0) < (HEAP32[66] | 0)) {
  i4 = _rand() | 0;
 } else {
  i4 = -1;
 }
 i3 = HEAP32[12936] | 0;
 i5 = HEAP32[i3 + 56 >> 2] | 0;
 i6 = Math_imul(i5, i1) | 0;
 if ((i5 | 0) > 0) {
  i7 = i3;
  i8 = 0;
 } else {
  STACKTOP = i2;
  return;
 }
 do {
  if ((HEAP32[62] | 0) != 0) {
   i3 = (_rand() | 0) % 40 | 0;
   if ((i3 | 0) >= (HEAP32[62] | 0)) {
    i9 = HEAP32[12936] | 0;
    i10 = 7;
   }
  } else {
   i9 = i7;
   i10 = 7;
  }
  do {
   if ((i10 | 0) == 7) {
    i10 = 0;
    i3 = i8 + i6 | 0;
    HEAP8[(HEAP32[i9 + 168 >> 2] | 0) + i3 >> 0] = 0;
    if ((HEAP32[64] | 0) != 0 ? (i5 = (_rand() | 0) % 40 | 0, (i5 | 0) < (HEAP32[64] | 0)) : 0) {
     break;
    }
    do {
     if (((i8 - i4 | 0) % 3 | 0 | 0) != 0) {
      i5 = ((_rand() | 0) & 2 | 0) == 0;
      i1 = _rand() | 0;
      if (i5) {
       i11 = ((i1 | 0) % 10 | 0) + 48 | 0;
       break;
      } else {
       i11 = ((i1 | 0) % 6 | 0) + 65 | 0;
       break;
      }
     } else {
      i11 = 32;
     }
    } while (0);
    HEAP8[(HEAP32[(HEAP32[12936] | 0) + 164 >> 2] | 0) + i3 >> 0] = i11;
   }
  } while (0);
  i8 = i8 + 1 | 0;
  i7 = HEAP32[12936] | 0;
 } while ((i8 | 0) < (HEAP32[i7 + 56 >> 2] | 0));
 STACKTOP = i2;
 return;
}
function _scene4__async_cb44(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 i3 = HEAP32[i2 + 56 >> 2] | 0;
 i4 = (i3 | 0) / 2 | 0;
 i5 = HEAP32[i2 + 60 >> 2] | 0;
 _memset(HEAP32[i2 + 164 >> 2] | 0, 32, Math_imul((i5 | 0) > 15 ? 15 : i5, i3) | 0) | 0;
 i3 = 0 > 7;
 i5 = i3 ? 0 : 1 | 0;
 i2 = i3 & 1;
 i3 = i2 ^ 0;
 i6 = HEAP32[12936] | 0;
 if (((HEAP32[i6 + 56 >> 2] | 0) + -25 | 0) > 0) {
  i7 = 0 != (i2 | 0) ? 179504 : 179512;
  i2 = i6;
  i8 = 0;
  while (1) {
   i9 = i8 + 0 | 0;
   _aa_puts(i2, i9, 0, 0, i7);
   _aa_puts(HEAP32[12936] | 0, i9, 3 | 0, 0, i7);
   _aa_puts(HEAP32[12936] | 0, i9, 6 | 0, 0, i7);
   _aa_puts(HEAP32[12936] | 0, i9, 9 | 0, 0, i7);
   i8 = i8 + 6 | 0;
   i9 = HEAP32[12936] | 0;
   if ((i8 | 0) >= ((HEAP32[i9 + 56 >> 2] | 0) + -25 | 0)) {
    i10 = i9;
    break;
   } else {
    i2 = i9;
   }
  }
 } else {
  i10 = i6;
 }
 _aa_puts(i10, i4, (HEAP32[i10 + 60 >> 2] | 0) + -1 | 0, 0, 179520);
 i10 = i4 + -1 + ((_rand() | 0) % 3 | 0) | 0;
 i4 = _emscripten_realloc_async_context(24) | 0;
 _bbflushwait(2e4);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i4 >> 2] = 96;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = i10;
 HEAP32[i4 + 16 >> 2] = i3;
 HEAP32[i4 + 20 >> 2] = i5;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _initscene3() {
 var i1 = 0, i2 = 0, d3 = 0.0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i1 = STACKTOP;
 HEAP32[44008] = 0;
 i2 = 0;
 d3 = .800000011920929;
 while (1) {
  d4 = d3 * d3 * d3 * d3;
  i5 = i2;
  i6 = 0;
  while (1) {
   i7 = ~~(+Math_cos(+(+(i6 | 0) * 256.0 / 180.0 * 3.141592653589793 / 180.0)) * 256.0 / d4);
   HEAP8[(HEAP32[44010] | 0) + ((i5 << 8) + i6) >> 0] = i7;
   i7 = i6 + 1 | 0;
   if ((i7 | 0) == 256) {
    break;
   }
   i5 = HEAP32[44008] | 0;
   i6 = i7;
  }
  i2 = (HEAP32[44008] | 0) + 1 | 0;
  HEAP32[44008] = i2;
  if (!(i2 >>> 0 < 189)) {
   i8 = 0;
   break;
  } else {
   d3 = d3 + .01;
  }
 }
 do {
  HEAP32[177424 + (i8 << 2) >> 2] = i8 << 2;
  HEAP32[178448 + (i8 << 2) >> 2] = i8;
  i8 = i8 + 1 | 0;
 } while ((i8 | 0) != 64);
 i9 = 64;
 do {
  i8 = 128 - i9 | 0;
  HEAP32[177424 + (i9 << 2) >> 2] = i8 << 2;
  HEAP32[178448 + (i9 << 2) >> 2] = i8;
  i9 = i9 + 1 | 0;
 } while ((i9 | 0) != 128);
 i10 = 128;
 do {
  i9 = i10 + -128 | 0;
  HEAP32[177424 + (i10 << 2) >> 2] = i9;
  HEAP32[178448 + (i10 << 2) >> 2] = i9 << 2;
  i10 = i10 + 1 | 0;
 } while ((i10 | 0) != 192);
 i11 = 192;
 do {
  i10 = 256 - i11 | 0;
  HEAP32[177424 + (i11 << 2) >> 2] = i10;
  HEAP32[178448 + (i11 << 2) >> 2] = i10 << 2;
  i11 = i11 + 1 | 0;
 } while ((i11 | 0) != 256);
 HEAP32[44008] = 0;
 STACKTOP = i1;
 return;
}
function _ui_do_fractal__async_cb180(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 if ((HEAP32[68726] | 0) == 0) {
  i1 = HEAP32[68736] | 0;
  i5 = HEAP32[i1 + 60 >> 2] | 0;
  d6 = (+HEAPF64[i5 + 16 >> 3] - +HEAPF64[i5 + 24 >> 3]) / (+HEAPF64[i1 + 1184 >> 3] - +HEAPF64[i1 + 1192 >> 3]);
  _ui_display();
  HEAPF64[tempDoublePtr >> 3] = d6;
  HEAP32[i4 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  _sprintf(275e3, 275360, i4) | 0;
  i1 = HEAP32[12] | 0;
  i5 = _emscripten_realloc_async_context(4) | 0;
  _tl_process_group(i1) | 0;
  if (___async) {
   HEAP32[i5 >> 2] = 198;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i5 >> 2] = 198;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  i5 = _emscripten_realloc_async_context(12) | 0;
  _bbupdate() | 0;
  if (___async) {
   HEAP32[i5 >> 2] = 197;
   i7 = i5 + 4 | 0;
   HEAP32[i7 >> 2] = i3;
   i8 = i5 + 8 | 0;
   HEAP32[i8 >> 2] = i4;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i5 >> 2] = 197;
  i7 = i5 + 4 | 0;
  HEAP32[i7 >> 2] = i3;
  i8 = i5 + 8 | 0;
  HEAP32[i8 >> 2] = i4;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
}
function _MUSL_vfprintf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i5 = i4 + 120 | 0;
 i6 = i4 + 80 | 0;
 i7 = i4;
 i8 = i4 + 136 | 0;
 i9 = i6 + 0 | 0;
 i10 = i9 + 40 | 0;
 do {
  HEAP32[i9 >> 2] = 0;
  i9 = i9 + 4 | 0;
 } while ((i9 | 0) < (i10 | 0));
 HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
 if ((_printf_core(0, i2, i5, i7, i6) | 0) < 0) {
  i11 = -1;
  STACKTOP = i4;
  return i11 | 0;
 }
 i3 = i1 + 48 | 0;
 if ((HEAP32[i3 >> 2] | 0) == 0) {
  i9 = i1 + 44 | 0;
  i10 = HEAP32[i9 >> 2] | 0;
  HEAP32[i9 >> 2] = i8;
  i12 = i1 + 28 | 0;
  HEAP32[i12 >> 2] = i8;
  i13 = i1 + 20 | 0;
  HEAP32[i13 >> 2] = i8;
  HEAP32[i3 >> 2] = 80;
  i14 = i1 + 16 | 0;
  HEAP32[i14 >> 2] = i8 + 80;
  i8 = _printf_core(i1, i2, i5, i7, i6) | 0;
  if ((i10 | 0) == 0) {
   i15 = i8;
  } else {
   FUNCTION_TABLE_iiii[HEAP32[i1 + 36 >> 2] & 1](i1, 0, 0) | 0;
   i16 = (HEAP32[i13 >> 2] | 0) == 0 ? -1 : i8;
   HEAP32[i9 >> 2] = i10;
   HEAP32[i3 >> 2] = 0;
   HEAP32[i14 >> 2] = 0;
   HEAP32[i12 >> 2] = 0;
   HEAP32[i13 >> 2] = 0;
   i15 = i16;
  }
 } else {
  i15 = _printf_core(i1, i2, i5, i7, i6) | 0;
 }
 i11 = i15;
 STACKTOP = i4;
 return i11 | 0;
}
function _aa_puts(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i6 = STACKTOP;
 if ((i3 | i2 | 0) < 0) {
  STACKTOP = i6;
  return;
 }
 i7 = i1 + 56 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 if ((i8 | 0) <= (i2 | 0)) {
  STACKTOP = i6;
  return;
 }
 i9 = i1 + 60 | 0;
 if ((HEAP32[i9 >> 2] | 0) <= (i3 | 0)) {
  STACKTOP = i6;
  return;
 }
 i10 = HEAP8[i5 >> 0] | 0;
 if (i10 << 24 >> 24 == 0) {
  STACKTOP = i6;
  return;
 }
 i11 = i1 + 164 | 0;
 i12 = i4 & 255;
 i4 = i1 + 168 | 0;
 i1 = i8;
 i8 = i10;
 i10 = 0;
 i13 = i2;
 i2 = i3;
 while (1) {
  i3 = (Math_imul(i1, i2) | 0) + i13 | 0;
  HEAP8[(HEAP32[i11 >> 2] | 0) + i3 >> 0] = i8;
  HEAP8[(HEAP32[i4 >> 2] | 0) + i3 >> 0] = i12;
  i3 = i13 + 1 | 0;
  i1 = HEAP32[i7 >> 2] | 0;
  if ((i3 | 0) >= (i1 | 0)) {
   i14 = i2 + 1 | 0;
   if ((i14 | 0) < (HEAP32[i9 >> 2] | 0)) {
    i15 = 0;
    i16 = i14;
   } else {
    i17 = 9;
    break;
   }
  } else {
   i15 = i3;
   i16 = i2;
  }
  i10 = i10 + 1 | 0;
  i8 = HEAP8[i5 + i10 >> 0] | 0;
  if (!(i8 << 24 >> 24 != 0 & (i10 | 0) < 1e4)) {
   i17 = 9;
   break;
  } else {
   i13 = i15;
   i2 = i16;
  }
 }
 if ((i17 | 0) == 9) {
  STACKTOP = i6;
  return;
 }
}
function _morphdraw() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i1 = STACKTOP;
 i2 = (HEAP32[68188] | 0) - (HEAP32[68194] | 0) | 0;
 if ((i2 | 0) > 0) {
  if ((i2 | 0) < 1e6) {
   i3 = (i2 << 8 | 0) / 1e6 | 0;
  } else {
   i3 = 256;
  }
 } else {
  i3 = 0;
 }
 i2 = 256 - i3 | 0;
 i4 = HEAP32[12936] | 0;
 i5 = HEAP32[i4 + 152 >> 2] | 0;
 i6 = Math_imul((HEAP32[i4 + 156 >> 2] | 0) + -18 | 0, i5) | 0;
 if ((i6 | 0) <= 0) {
  i7 = i4;
  i8 = i7 + 56 | 0;
  i9 = HEAP32[i8 >> 2] | 0;
  i10 = i7 + 60 | 0;
  i11 = HEAP32[i10 >> 2] | 0;
  _aa_fastrender(i7, 0, 9, i9, i11);
  i12 = HEAP32[12936] | 0;
  _aa_flush(i12);
  STACKTOP = i1;
  return;
 }
 i13 = (HEAP32[i4 + 160 >> 2] | 0) + (i5 * 18 | 0) | 0;
 i5 = 0;
 while (1) {
  i4 = Math_imul(HEAPU8[(HEAP32[130870] | 0) + i5 >> 0] | 0, i2) | 0;
  HEAP8[i13 >> 0] = ((Math_imul(HEAPU8[(HEAP32[130872] | 0) + i5 >> 0] | 0, i3) | 0) + i4 | 0) >>> 8;
  i5 = i5 + 1 | 0;
  if ((i5 | 0) == (i6 | 0)) {
   break;
  } else {
   i13 = i13 + 1 | 0;
  }
 }
 i7 = HEAP32[12936] | 0;
 i8 = i7 + 56 | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 i10 = i7 + 60 | 0;
 i11 = HEAP32[i10 >> 2] | 0;
 _aa_fastrender(i7, 0, 9, i9, i11);
 i12 = HEAP32[12936] | 0;
 _aa_flush(i12);
 STACKTOP = i1;
 return;
}
function _do_fractal__async_cb145(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[71600] | 0;
 HEAP32[i2 + 64 >> 2] = 0;
 HEAP32[i2 + 68 >> 2] = 0;
 HEAP32[i2 + 72 >> 2] = 286552;
 _dosymetry();
 i2 = HEAP32[71600] | 0;
 i3 = HEAP32[i2 + 28 >> 2] | 0;
 if ((i3 | 0) != 0) {
  i4 = _emscripten_realloc_async_context(4) | 0;
  FUNCTION_TABLE_v[i3 & 63]();
  if (___async) {
   HEAP32[i4 >> 2] = 226;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i4 >> 2] = 226;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 i4 = HEAP32[i2 + 52 >> 2] | 0;
 i3 = HEAP32[i2 + 128 >> 2] | 0;
 i5 = i4 + (i3 * 40 | 0) | 0;
 if ((i3 | 0) > 0) {
  i3 = HEAP32[i2 + 16 >> 2] | 0;
  i6 = i4;
  while (1) {
   HEAPF64[i3 >> 3] = +HEAPF64[i6 >> 3];
   i6 = i6 + 40 | 0;
   if (!(i6 >>> 0 < i5 >>> 0)) {
    break;
   } else {
    i3 = i3 + 8 | 0;
   }
  }
 }
 i3 = HEAP32[i2 + 56 >> 2] | 0;
 i5 = HEAP32[i2 + 132 >> 2] | 0;
 i6 = i3 + (i5 * 40 | 0) | 0;
 if ((i5 | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i5 = HEAP32[i2 + 20 >> 2] | 0;
 i2 = i3;
 while (1) {
  HEAPF64[i5 >> 3] = +HEAPF64[i2 >> 3];
  i2 = i2 + 40 | 0;
  if (!(i2 >>> 0 < i6 >>> 0)) {
   break;
  } else {
   i5 = i5 + 8 | 0;
  }
 }
 STACKTOP = i1;
 return;
}
function _scene2__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = HEAP32[i1 + 4 >> 2];
 i1 = (HEAP32[i3 >> 2] | 0) + 1 | 0;
 if ((i1 | 0) == 14) {
  STACKTOP = i2;
  return;
 }
 i4 = HEAP8[856] | 0;
 i5 = HEAP32[212] | 0;
 HEAP32[i3 >> 2] = i1;
 HEAP8[864] = i4;
 i1 = i4 + 1 << 24 >> 24;
 HEAP8[856] = i1 << 24 >> 24 > 4 ? 2 : i1;
 HEAP32[218] = i5;
 HEAP32[212] = HEAP32[792 + (HEAP32[i3 >> 2] << 2) >> 2];
 if ((HEAP32[i3 >> 2] | 0) == 13) {
  i5 = _emscripten_realloc_async_context(4) | 0;
  _timestuff(0, 0, 1, 195e4);
  if (___async) {
   HEAP32[i5 >> 2] = 70;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i5 >> 2] = 70;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  i5 = _emscripten_realloc_async_context(8) | 0;
  _timestuff(0, 0, 1, 65e4);
  if (___async) {
   HEAP32[i5 >> 2] = 71;
   i6 = i5 + 4 | 0;
   i7 = HEAP32[i3 >> 2] | 0;
   HEAP32[i6 >> 2] = i7;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i5 >> 2] = 71;
  i6 = i5 + 4 | 0;
  i7 = HEAP32[i3 >> 2] | 0;
  HEAP32[i6 >> 2] = i7;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
}
function _calculateslow(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 i3 = (HEAP32[52] | 0) + 1 | 0;
 HEAP32[52] = i3;
 i4 = HEAP32[12936] | 0;
 i5 = HEAP32[50] | 0;
 if ((i3 | 0) >= (HEAP32[i4 + 56 >> 2] | 0)) {
  i6 = i5 + 1 | 0;
  HEAP32[50] = i6;
  HEAP32[52] = 1;
  if ((i6 | 0) < (HEAP32[i4 + 60 >> 2] | 0)) {
   i7 = 1;
   i8 = i6;
  } else {
   HEAP32[50] = 0;
   i7 = 1;
   i8 = 0;
  }
 } else {
  i7 = i3;
  i8 = i5;
 }
 i5 = _emscripten_alloc_async_context(8) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _aa_gotoxy(i4, i7, i8);
 if (___async) {
  HEAP32[i5 >> 2] = 67;
  HEAP32[i5 + 4 >> 2] = i2;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i5 | 0);
 do {
  if (((HEAP32[52] | 0) % 3 | 0 | 0) != 0) {
   i5 = ((_rand() | 0) & 2 | 0) == 0;
   i8 = _rand() | 0;
   if (i5) {
    i9 = ((i8 | 0) % 10 | 0) + 48 | 0;
    break;
   } else {
    i9 = ((i8 | 0) % 6 | 0) + 65 | 0;
    break;
   }
  } else {
   i9 = 32;
  }
 } while (0);
 HEAP8[i2 >> 0] = i9;
 HEAP8[i2 + 1 >> 0] = 0;
 _aa_puts(HEAP32[12936] | 0, (HEAP32[52] | 0) + -1 | 0, HEAP32[50] | 0, 0, i2);
 STACKTOP = i1;
 return;
}
function _mand_calc(d1, d2, d3, d4) {
 d1 = +d1;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 var i5 = 0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, i11 = 0, d12 = 0.0, d13 = 0.0, d14 = 0.0, i15 = 0, i16 = 0;
 i5 = STACKTOP;
 i6 = HEAP32[71598] | 0;
 if ((HEAP32[72630] | 0) == 0 & d3 == d1 & d4 == d2) {
  d7 = d1 * d1 + d2 * d2;
  d8 = +Math_sqrt(+(d7 - d1 * .5 + .0625));
  d9 = d1 + 1.0;
  if (!(d9 * d9 + d2 * d2 < .0625) ? !((i6 | 0) == 0 ? 1 : d7 * 16.0 * d8 < d8 * 5.0 - d1 * 4.0 + 1.0) : 0) {
   d10 = 0.0;
   i11 = i6;
   d12 = 0.0;
   d13 = d2;
   d14 = d1;
   i15 = 5;
  } else {
   i16 = 0;
  }
 } else {
  if ((i6 | 0) == 0) {
   i16 = 0;
  } else {
   d10 = 0.0;
   i11 = i6;
   d12 = 0.0;
   d13 = d2;
   d14 = d1;
   i15 = 5;
  }
 }
 L5 : do {
  if ((i15 | 0) == 5) {
   while (1) {
    i15 = 0;
    if (!(d12 + d10 < 4.0)) {
     i16 = i11;
     break L5;
    }
    d1 = d13 * d13;
    d2 = d14 * d14;
    i11 = i11 + -1 | 0;
    if ((i11 | 0) == 0) {
     i16 = 0;
     break;
    } else {
     d10 = d1;
     d12 = d2;
     d13 = d14 * d13 * 2.0 + d4;
     d14 = d2 - d1 + d3;
     i15 = 5;
    }
   }
  }
 } while (0);
 i15 = i6 - i16 | 0;
 STACKTOP = i5;
 return (i15 >>> 0 < i6 >>> 0 ? i15 : 2147483647) | 0;
}
function _aa_recommendhi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 i4 = _malloc(12) | 0;
 i5 = HEAP32[i1 >> 2] | 0;
 L1 : do {
  if ((i5 | 0) != 0) {
   i6 = i5;
   while (1) {
    if ((_strcmp(HEAP32[i6 >> 2] | 0, i2) | 0) == 0) {
     break;
    }
    i7 = HEAP32[i6 + 4 >> 2] | 0;
    if ((i7 | 0) == (i5 | 0)) {
     break L1;
    } else {
     i6 = i7;
    }
   }
   if ((i6 | 0) != 0 ? (i7 = i6 + 8 | 0, i8 = i6 + 4 | 0, HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] = HEAP32[i7 >> 2], HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] = HEAP32[i8 >> 2], (HEAP32[i1 >> 2] | 0) == (i6 | 0)) : 0) {
    i7 = HEAP32[i8 >> 2] | 0;
    HEAP32[i1 >> 2] = (i7 | 0) == (i6 | 0) ? 0 : i7;
   }
  }
 } while (0);
 HEAP32[i4 >> 2] = ___strdup(i2) | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i5 = i4 + 4 | 0;
 if ((i2 | 0) == 0) {
  HEAP32[i5 >> 2] = i4;
  HEAP32[i4 + 8 >> 2] = i4;
  HEAP32[i1 >> 2] = i4;
  HEAP32[i1 >> 2] = i4;
  STACKTOP = i3;
  return;
 } else {
  HEAP32[i5 >> 2] = i2;
  i5 = i2 + 8 | 0;
  i2 = i4 + 8 | 0;
  HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i5 >> 2] = i4;
  HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] = i4;
  HEAP32[i1 >> 2] = i4;
  STACKTOP = i3;
  return;
 }
}
function _scene1__async_cb24(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, d5 = 0.0, i6 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i1 = HEAP32[22682] | 0;
 if ((i3 | 0) == 19) {
  HEAP32[i1 + 12 >> 2] = 2;
  i4 = _emscripten_realloc_async_context(4) | 0;
  _draw();
  if (___async) {
   HEAP32[i4 >> 2] = 66;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i4 >> 2] = 66;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  HEAP32[i1 + 20 >> 2] = 0;
  i1 = HEAP32[432 + (i3 << 2) >> 2] | 0;
  d5 = +HEAPF32[512 + (i3 << 2) >> 2];
  i4 = HEAP32[12936] | 0;
  _memset(HEAP32[i4 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i4 + 156 >> 2] | 0, HEAP32[i4 + 152 >> 2] | 0) | 0) | 0;
  i4 = HEAP32[12936] | 0;
  _centerprint((HEAP32[i4 + 152 >> 2] | 0) / 2 | 0, (HEAP32[i4 + 156 >> 2] | 0) / 2 | 0, d5, 255, i1, 3);
  i1 = _emscripten_realloc_async_context(8) | 0;
  _timestuff(-60, 13, 1, 285714);
  if (___async) {
   HEAP32[i1 >> 2] = 63;
   i6 = i1 + 4 | 0;
   HEAP32[i6 >> 2] = i3;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i1 >> 2] = 63;
  i6 = i1 + 4 | 0;
  HEAP32[i6 >> 2] = i3;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
}
function _draw3d() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0;
 i1 = STACKTOP;
 i2 = HEAP32[68188] | 0;
 i3 = HEAP32[68196] | 0;
 i4 = HEAP32[68194] | 0;
 i5 = (i2 | 0) < (i4 + -1 | 0) ? i4 + 1 | 0 : i2;
 d6 = +Math_pow(+(+(((i5 | 0) > (i3 | 0) ? i3 : i5) - i4 | 0) / +(i3 - i4 | 0)), +(+HEAPF32[31684]));
 d7 = 1.0 - d6;
 i4 = d7 < 0.0;
 d8 = i4 ? 1.0 : d6;
 i3 = d8 < 0.0;
 d6 = i3 ? 0.0 : d8;
 d8 = i3 ? 1.0 : i4 ? 0.0 : d7;
 HEAP32[12950] = (~~(+(HEAP32[31710] | 0) * d6 + +(HEAP32[31696] | 0) * d8) | 0) % 360 | 0;
 HEAP32[22676] = (~~(+(HEAP32[31708] | 0) * d6 + d8 * +(HEAP32[31694] | 0)) | 0) % 360 | 0;
 HEAP32[22678] = (~~(d6 * +(HEAP32[31706] | 0) + d8 * +(HEAP32[31692] | 0)) | 0) % 360 | 0;
 HEAP32[12944] = ~~(d6 * +(HEAP32[31704] | 0) + d8 * +(HEAP32[31690] | 0));
 HEAP32[12946] = ~~(d6 * +(HEAP32[31702] | 0) + d8 * +(HEAP32[31688] | 0));
 HEAP32[12948] = ~~(d6 * +(HEAP32[31700] | 0) + d8 * +(HEAP32[31686] | 0));
 HEAPF32[226] = d6 * +HEAPF32[31712] + d8 * +HEAPF32[31698];
 _disp3d();
 i4 = HEAP32[12936] | 0;
 _aa_render(i4, HEAP32[22682] | 0, 0, 0, HEAP32[i4 + 56 >> 2] | 0, HEAP32[i4 + 60 >> 2] | 0);
 _aa_flush(HEAP32[12936] | 0);
 STACKTOP = i1;
 return;
}
function _aa_uninitkbd(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 i3 = i1 + 4 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((i4 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 do {
  if ((HEAP32[i1 + 8 >> 2] | 0) != 0) {
   i5 = _emscripten_alloc_async_context(12) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i2;
   _aa_uninitmouse(i1);
   if (___async) {
    HEAP32[i5 >> 2] = 292;
    HEAP32[i5 + 4 >> 2] = i3;
    HEAP32[i5 + 8 >> 2] = i1;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   } else {
    _emscripten_free_async_context(i5 | 0);
    i6 = HEAP32[i3 >> 2] | 0;
    break;
   }
  } else {
   i6 = i4;
  }
 } while (0);
 HEAP32[i1 + 224 >> 2] = 0;
 i4 = HEAP32[i6 + 16 >> 2] | 0;
 i6 = _emscripten_alloc_async_context(12) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i2;
 FUNCTION_TABLE_vi[i4 & 511](i1);
 if (___async) {
  HEAP32[i6 >> 2] = 293;
  HEAP32[i6 + 4 >> 2] = i1;
  HEAP32[i6 + 8 >> 2] = i3;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 _emscripten_free_async_context(i6 | 0);
 i6 = i1 + 220 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) != 0) {
  _free(i1);
 }
 HEAP32[i6 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function _scene4__async_cb45(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = HEAP32[i1 + 4 >> 2];
 i1 = (HEAP32[i3 >> 2] | 0) + 3 | 0;
 if ((i1 | 0) >= 10) {
  i4 = _emscripten_realloc_async_context(4) | 0;
  _bbflushwait(2e5);
  if (___async) {
   HEAP32[i4 >> 2] = 95;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i4 >> 2] = 95;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 i4 = HEAP32[12936] | 0;
 HEAP32[i3 >> 2] = i1;
 if (((HEAP32[i4 + 56 >> 2] | 0) + -25 | 0) > 0) {
  i1 = i4;
  i4 = 0;
  do {
   _aa_puts(i1, i4, HEAP32[i3 >> 2] | 0, 0, 179496);
   i4 = i4 + 6 | 0;
   i1 = HEAP32[12936] | 0;
  } while ((i4 | 0) < ((HEAP32[i1 + 56 >> 2] | 0) + -25 | 0));
 }
 i1 = _emscripten_realloc_async_context(8) | 0;
 _bbflushwait(1e5);
 if (___async) {
  HEAP32[i1 >> 2] = 94;
  i5 = i1 + 4 | 0;
  i6 = HEAP32[i3 >> 2] | 0;
  HEAP32[i5 >> 2] = i6;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i1 >> 2] = 94;
 i5 = i1 + 4 | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 HEAP32[i5 >> 2] = i6;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _ui_waitfunc() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _bbupdate() | 0;
 if (___async) {
  HEAP32[i2 >> 2] = 193;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 i2 = HEAP32[12] | 0;
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _tl_process_group(i2) | 0;
 if (___async) {
  HEAP32[i3 >> 2] = 194;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 i3 = _tl_lookup_timer(HEAP32[68734] | 0) | 0;
 if ((HEAP32[68726] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 i2 = HEAP32[68736] | 0;
 i4 = HEAP32[i2 + 112 >> 2] | 0;
 i5 = (HEAP32[68834] | 0) != 0;
 if ((i4 | 0) == 0 | i5) {
  if (i5 ? (HEAP32[68836] | i4 | 0) == 0 : 0) {
   HEAP32[68836] = i3;
  }
 } else {
  HEAP32[68834] = i3;
 }
 i4 = HEAP32[68838] | 0;
 if (!((i4 | 0) != 0 & (i3 | 0) > (i4 | 0))) {
  STACKTOP = i1;
  return;
 }
 if ((HEAP32[i2 + 116 >> 2] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 HEAP32[i2 + 140 >> 2] = 1;
 HEAP32[68836] = i3;
 STACKTOP = i1;
 return;
}
function _vsnprintf(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i6 = i5 + 112 | 0;
 i7 = i5;
 i8 = i7 + 0 | 0;
 i9 = 558848 | 0;
 i10 = i8 + 112 | 0;
 do {
  HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
  i8 = i8 + 4 | 0;
  i9 = i9 + 4 | 0;
 } while ((i8 | 0) < (i10 | 0));
 if ((i2 + -1 | 0) >>> 0 > 2147483646) {
  if ((i2 | 0) == 0) {
   i11 = i6;
   i12 = 1;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75;
   i13 = -1;
   STACKTOP = i5;
   return i13 | 0;
  }
 } else {
  i11 = i1;
  i12 = i2;
 }
 i2 = -2 - i11 | 0;
 i1 = i12 >>> 0 > i2 >>> 0 ? i2 : i12;
 HEAP32[i7 + 48 >> 2] = i1;
 i12 = i7 + 20 | 0;
 HEAP32[i12 >> 2] = i11;
 HEAP32[i7 + 44 >> 2] = i11;
 i2 = i11 + i1 | 0;
 i11 = i7 + 16 | 0;
 HEAP32[i11 >> 2] = i2;
 HEAP32[i7 + 28 >> 2] = i2;
 i2 = _MUSL_vfprintf(i7, i3, i4) | 0;
 if ((i1 | 0) == 0) {
  i13 = i2;
  STACKTOP = i5;
  return i13 | 0;
 }
 i1 = HEAP32[i12 >> 2] | 0;
 HEAP8[i1 + (((i1 | 0) == (HEAP32[i11 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
 i13 = i2;
 STACKTOP = i5;
 return i13 | 0;
}
function _drawhorotoc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0, i12 = 0;
 i4 = STACKTOP;
 i5 = HEAP32[68188] | 0;
 i6 = i5 - i3 | 0;
 if ((i6 + -1 | 0) >>> 0 < 999999) {
  i7 = HEAP32[12936] | 0;
  i8 = HEAP32[i7 + 152 >> 2] | 0;
  d9 = +(((i8 >>> 0) / ((_strlen(i1 | 0) | 0) >>> 0) | 0) >>> 0);
  _print(0, 0, d9, ~~(+(HEAP32[i7 + 156 >> 2] | 0) * (+(i6 | 0) / 1.0e6)), HEAP32[70] | 0, 255, i1);
  i6 = HEAP32[12936] | 0;
  d9 = +(HEAP32[i6 + 156 >> 2] | 0);
  d10 = +((HEAP32[68188] | 0) - i3 | 0) / 1.0e6;
  i7 = HEAP32[i6 + 152 >> 2] | 0;
  d11 = +(((i7 >>> 0) / ((_strlen(i2 | 0) | 0) >>> 0) | 0) >>> 0);
  _print(0, ~~(d9 * d10), d11, ~~(d9 * (1.0 - d10)), HEAP32[70] | 0, 255, i2);
  i12 = HEAP32[68188] | 0;
 } else {
  i12 = i5;
 }
 if ((i12 - i3 | 0) <= 1e6) {
  STACKTOP = i4;
  return;
 }
 i3 = HEAP32[12936] | 0;
 i12 = HEAP32[i3 + 152 >> 2] | 0;
 d10 = +(((i12 >>> 0) / ((_strlen(i1 | 0) | 0) >>> 0) | 0) >>> 0);
 _print(0, 0, d10, HEAP32[i3 + 156 >> 2] | 0, HEAP32[70] | 0, 255, i1);
 STACKTOP = i4;
 return;
}
function _drawcredits() {
 var i1 = 0, i2 = 0, d3 = 0.0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i1 = STACKTOP;
 i2 = (HEAP32[68188] | 0) - (HEAP32[68194] | 0) | 0;
 d3 = +Math_sin(+(+(i2 | 0) * 3.141592653589793 / 9.0e5));
 i4 = HEAP32[12936] | 0;
 i5 = HEAP32[i4 + 152 >> 2] | 0;
 d6 = +((i5 | 0) / 2 | 0 | 0);
 d7 = d3 * .16 * +(i5 | 0);
 i5 = (HEAP32[i4 + 156 >> 2] | 0) / 6 | 0;
 _draw_starfield();
 d3 = -d7;
 i4 = i5 << 1;
 i8 = 0;
 i9 = 0;
 while (1) {
  if ((i2 | 0) > (i9 | 0) ? (i10 = i9 + 3e6 | 0, (i2 | 0) < (i10 | 0)) : 0) {
   i11 = ((Math_imul((HEAP32[(HEAP32[12936] | 0) + 156 >> 2] | 0) + i4 | 0, i10 - i2 | 0) | 0) / 3e6 | 0) - i5 | 0;
   _centerprint(~~(d6 + ((i8 & 1 | 0) != 0 ? d7 : d3)), i11, 4.0, 255, HEAP32[275456 + (i8 << 2) >> 2] | 0, 0);
  }
  i8 = i8 + 1 | 0;
  if ((i8 | 0) == 166) {
   break;
  } else {
   i9 = i9 + 5e5 | 0;
  }
 }
 if (!(i2 >>> 0 > 83e6)) {
  STACKTOP = i1;
  return;
 }
 HEAP32[(HEAP32[22682] | 0) + 20 >> 2] = (((i2 * 800 | 0) + -1975490560 | 0) >>> 0) / 3e6 | 0;
 STACKTOP = i1;
 return;
}
function _devezen1() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 i3 = i2 + 152 | 0;
 i4 = i2 + 156 | 0;
 i5 = _malloc(Math_imul(HEAP32[i4 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0) | 0;
 HEAP32[130918] = i5;
 _memcpy(i5 | 0, HEAP32[i2 + 160 >> 2] | 0, Math_imul(HEAP32[i4 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0) | 0;
 _backconvert(0, HEAP32[130914] | 0, HEAP32[i2 + 56 >> 2] | 0, HEAP32[i2 + 60 >> 2] | 0);
 i2 = HEAP32[12936] | 0;
 i3 = i2 + 152 | 0;
 i4 = i2 + 156 | 0;
 i5 = _malloc(Math_imul(HEAP32[i4 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0) | 0;
 HEAP32[130920] = i5;
 _memcpy(i5 | 0, HEAP32[i2 + 160 >> 2] | 0, Math_imul(HEAP32[i4 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0) | 0;
 HEAP32[34] = 34;
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 34, 5e6);
 if (___async) {
  HEAP32[i3 >> 2] = 265;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else {
  _emscripten_free_async_context(i3 | 0);
  _free(HEAP32[130918] | 0);
  _free(HEAP32[130920] | 0);
  STACKTOP = i1;
  return;
 }
}
function _atol(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i2 = STACKTOP;
 i3 = i1;
 while (1) {
  i4 = i3 + 1 | 0;
  if ((_isspace(HEAP8[i3 >> 0] | 0) | 0) == 0) {
   break;
  } else {
   i3 = i4;
  }
 }
 i1 = HEAP8[i3 >> 0] | 0;
 i5 = i1 << 24 >> 24;
 if ((i5 | 0) == 43) {
  i6 = 0;
  i7 = 5;
 } else if ((i5 | 0) == 45) {
  i6 = 1;
  i7 = 5;
 } else {
  i8 = i3;
  i9 = i1;
  i10 = 0;
 }
 if ((i7 | 0) == 5) {
  i8 = i4;
  i9 = HEAP8[i4 >> 0] | 0;
  i10 = i6;
 }
 if ((_isdigit(i9 << 24 >> 24) | 0) == 0) {
  i11 = 0;
  i12 = (i10 | 0) != 0;
  i13 = 0 - i11 | 0;
  i14 = i12 ? i11 : i13;
  STACKTOP = i2;
  return i14 | 0;
 } else {
  i15 = i8;
  i16 = 0;
 }
 while (1) {
  i8 = (i16 * 10 | 0) + 48 - (HEAP8[i15 >> 0] | 0) | 0;
  i15 = i15 + 1 | 0;
  if ((_isdigit(HEAP8[i15 >> 0] | 0) | 0) == 0) {
   i11 = i8;
   break;
  } else {
   i16 = i8;
  }
 }
 i12 = (i10 | 0) != 0;
 i13 = 0 - i11 | 0;
 i14 = i12 ? i11 : i13;
 STACKTOP = i2;
 return i14 | 0;
}
function _ui_do_fractal__async_cb179(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 i1 = _tl_lookup_timer(HEAP32[68734] | 0) | 0;
 i4 = HEAP32[68836] | 0;
 i5 = (HEAP32[68834] | 0) - i4 + i1 | 0;
 i6 = i5 * 5 | 0;
 if ((i6 | 0) > 1e5) {
  i7 = i5 * 3 | 0;
 } else {
  i7 = i6;
 }
 HEAP32[68838] = i4 - i1 + ((i7 | 0) < 33333 ? 33333 : i7);
 i7 = HEAP32[68736] | 0;
 i1 = HEAP32[i7 + 60 >> 2] | 0;
 d8 = (+HEAPF64[i1 + 16 >> 3] - +HEAPF64[i1 + 24 >> 3]) / (+HEAPF64[i7 + 1184 >> 3] - +HEAPF64[i7 + 1192 >> 3]);
 _ui_display();
 HEAPF64[tempDoublePtr >> 3] = d8;
 HEAP32[i3 >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 _sprintf(275e3, 275360, i3) | 0;
 i3 = HEAP32[12] | 0;
 i7 = _emscripten_realloc_async_context(4) | 0;
 _tl_process_group(i3) | 0;
 if (___async) {
  HEAP32[i7 >> 2] = 198;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i7 >> 2] = 198;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _draw_starfield() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 _memset(HEAP32[i2 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i2 + 156 >> 2] | 0, HEAP32[i2 + 152 >> 2] | 0) | 0) | 0;
 i2 = 0;
 do {
  i3 = HEAP32[277396 + (i2 * 20 | 0) >> 2] | 0;
  if ((((i3 | 0) > 0 ? (i4 = HEAP32[12936] | 0, i5 = HEAP32[i4 + 152 >> 2] | 0, (i3 | 0) < (i5 | 0)) : 0) ? (i6 = HEAP32[277400 + (i2 * 20 | 0) >> 2] | 0, (i6 | 0) > 0) : 0) ? (i6 | 0) < (HEAP32[i4 + 156 >> 2] | 0) : 0) {
   i7 = (HEAP32[277392 + (i2 * 20 | 0) >> 2] | 0) + -256 | 0;
   i8 = 1e5 / (((i7 | 0) > 1 ? i7 : 1) | 0) | 0;
   i7 = (Math_imul(i5, i6) | 0) + i3 | 0;
   HEAP8[(HEAP32[i4 + 160 >> 2] | 0) + i7 >> 0] = (i8 | 0) < 255 ? i8 & 255 : -1;
  }
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 450);
 i2 = HEAP32[12936] | 0;
 i8 = HEAP32[i2 + 152 >> 2] | 0;
 i7 = (Math_imul((HEAP32[i2 + 156 >> 2] | 0) / 2 | 0, i8) | 0) + ((i8 | 0) / 2 | 0) | 0;
 HEAP8[(HEAP32[i2 + 160 >> 2] | 0) + i7 >> 0] = 0;
 STACKTOP = i1;
 return;
}
function _drawpravotoc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, d9 = 0.0, i10 = 0;
 i4 = STACKTOP;
 i5 = HEAP32[68188] | 0;
 i6 = i5 - i3 | 0;
 if ((i6 + -1 | 0) >>> 0 < 999999) {
  i7 = HEAP32[12936] | 0;
  d8 = +(HEAP32[i7 + 152 >> 2] | 0);
  d9 = d8 / +((_strlen(i2 | 0) | 0) >>> 0) * (1.0 - +(i6 | 0) / 1.0e6);
  _print(0, 0, d9, HEAP32[i7 + 156 >> 2] | 0, HEAP32[70] | 0, 255, i2);
  i2 = HEAP32[12936] | 0;
  i7 = HEAP32[i2 + 152 >> 2] | 0;
  d9 = +((HEAP32[68188] | 0) - i3 | 0) / 1.0e6;
  d8 = d9 * (+(i7 | 0) / +((_strlen(i1 | 0) | 0) >>> 0));
  _print(~~(+(i7 | 0) * (1.0 - d9)), 0, d8, HEAP32[i2 + 156 >> 2] | 0, HEAP32[70] | 0, 255, i1);
  i10 = HEAP32[68188] | 0;
 } else {
  i10 = i5;
 }
 if ((i10 - i3 | 0) <= 1e6) {
  STACKTOP = i4;
  return;
 }
 i3 = HEAP32[12936] | 0;
 d8 = +(HEAP32[i3 + 152 >> 2] | 0);
 d9 = d8 / +((_strlen(i1 | 0) | 0) >>> 0);
 _print(0, 0, d9, HEAP32[i3 + 156 >> 2] | 0, HEAP32[70] | 0, 255, i1);
 STACKTOP = i4;
 return;
}
function _drawlevotoc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, d9 = 0.0, i10 = 0;
 i4 = STACKTOP;
 i5 = HEAP32[68188] | 0;
 i6 = i5 - i3 | 0;
 if ((i6 + -1 | 0) >>> 0 < 999999) {
  i7 = HEAP32[12936] | 0;
  d8 = +(HEAP32[i7 + 152 >> 2] | 0);
  d9 = d8 / +((_strlen(i1 | 0) | 0) >>> 0) * (+(i6 | 0) / 1.0e6);
  _print(0, 0, d9, HEAP32[i7 + 156 >> 2] | 0, HEAP32[70] | 0, 255, i1);
  i7 = HEAP32[12936] | 0;
  i6 = HEAP32[i7 + 152 >> 2] | 0;
  d9 = +((HEAP32[68188] | 0) - i3 | 0) / 1.0e6;
  d8 = +(i6 | 0) / +((_strlen(i2 | 0) | 0) >>> 0) * (1.0 - d9);
  _print(~~(+(i6 | 0) * d9), 0, d8, HEAP32[i7 + 156 >> 2] | 0, HEAP32[70] | 0, 255, i2);
  i10 = HEAP32[68188] | 0;
 } else {
  i10 = i5;
 }
 if ((i10 - i3 | 0) <= 1e6) {
  STACKTOP = i4;
  return;
 }
 i3 = HEAP32[12936] | 0;
 d8 = +(HEAP32[i3 + 152 >> 2] | 0);
 d9 = d8 / +((_strlen(i1 | 0) | 0) >>> 0);
 _print(0, 0, d9, HEAP32[i3 + 156 >> 2] | 0, HEAP32[70] | 0, 255, i1);
 STACKTOP = i4;
 return;
}
function _calculatefast(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[66] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[66] = i3 + i1;
 }
 if ((i1 | 0) > 0) {
  i3 = HEAP32[50] | 0;
  i4 = 0;
  while (1) {
   _drawline(i3);
   i5 = (HEAP32[50] | 0) + 1 | 0;
   HEAP32[50] = i5;
   HEAP32[52] = 0;
   i6 = HEAP32[12936] | 0;
   if ((i5 | 0) < (HEAP32[i6 + 60 >> 2] | 0)) {
    i7 = i5;
   } else {
    HEAP32[50] = 0;
    i7 = 0;
   }
   i4 = i4 + 1 | 0;
   if ((i4 | 0) == (i1 | 0)) {
    i8 = i6;
    i9 = 0;
    i10 = i7;
    break;
   } else {
    i3 = i7;
   }
  }
 } else {
  i8 = HEAP32[12936] | 0;
  i9 = HEAP32[52] | 0;
  i10 = HEAP32[50] | 0;
 }
 i7 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i2;
 _aa_gotoxy(i8, i9, i10);
 if (___async) {
  HEAP32[i7 >> 2] = 68;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  _emscripten_free_async_context(i7 | 0);
  STACKTOP = i2;
  return;
 }
}
function _wcrtomb(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i3 = STACKTOP;
 if ((i1 | 0) == 0) {
  i4 = 1;
  STACKTOP = i3;
  return i4 | 0;
 }
 if (i2 >>> 0 < 128) {
  HEAP8[i1 >> 0] = i2;
  i4 = 1;
  STACKTOP = i3;
  return i4 | 0;
 }
 if (i2 >>> 0 < 2048) {
  HEAP8[i1 >> 0] = i2 >>> 6 | 192;
  HEAP8[i1 + 1 >> 0] = i2 & 63 | 128;
  i4 = 2;
  STACKTOP = i3;
  return i4 | 0;
 }
 if (i2 >>> 0 < 55296 | (i2 + -57344 | 0) >>> 0 < 8192) {
  HEAP8[i1 >> 0] = i2 >>> 12 | 224;
  HEAP8[i1 + 1 >> 0] = i2 >>> 6 & 63 | 128;
  HEAP8[i1 + 2 >> 0] = i2 & 63 | 128;
  i4 = 3;
  STACKTOP = i3;
  return i4 | 0;
 }
 if ((i2 + -65536 | 0) >>> 0 < 1048576) {
  HEAP8[i1 >> 0] = i2 >>> 18 | 240;
  HEAP8[i1 + 1 >> 0] = i2 >>> 12 & 63 | 128;
  HEAP8[i1 + 2 >> 0] = i2 >>> 6 & 63 | 128;
  HEAP8[i1 + 3 >> 0] = i2 & 63 | 128;
  i4 = 4;
  STACKTOP = i3;
  return i4 | 0;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  i4 = -1;
  STACKTOP = i3;
  return i4 | 0;
 }
 return 0;
}
function _scene3() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 HEAP8[176048] = 0;
 HEAP8[176056] = 0;
 HEAP8[176064] = 0;
 HEAP8[176072] = 0;
 HEAP32[44008] = 0;
 HEAP32[44020] = 1;
 HEAP32[44010] = _malloc(48384) | 0;
 HEAP32[(HEAP32[22682] | 0) + 12 >> 2] = 2;
 _initscene3();
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _bbwait(5e5);
 if (___async) {
  HEAP32[i2 >> 2] = 89;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(-35, 90, 9, 42e6);
 if (___async) {
  HEAP32[i2 >> 2] = 91;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else {
  _emscripten_free_async_context(i2 | 0);
  HEAP32[HEAP32[22682] >> 2] = 0;
  _free(HEAP32[44010] | 0);
  i2 = HEAP32[12936] | 0;
  _memset(HEAP32[i2 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i2 + 156 >> 2] | 0, HEAP32[i2 + 152 >> 2] | 0) | 0) | 0;
  STACKTOP = i1;
  return;
 }
}
function ___shgetc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 i3 = i1 + 104 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (!((i4 | 0) != 0 ? (HEAP32[i1 + 108 >> 2] | 0) >= (i4 | 0) : 0)) {
  i5 = 3;
 }
 if ((i5 | 0) == 3 ? (i5 = ___uflow(i1) | 0, (i5 | 0) >= 0) : 0) {
  i4 = HEAP32[i3 >> 2] | 0;
  i3 = HEAP32[i1 + 8 >> 2] | 0;
  if ((i4 | 0) != 0 ? (i6 = HEAP32[i1 + 4 >> 2] | 0, i7 = i4 - (HEAP32[i1 + 108 >> 2] | 0) + -1 | 0, (i3 - i6 | 0) > (i7 | 0)) : 0) {
   HEAP32[i1 + 100 >> 2] = i6 + i7;
  } else {
   HEAP32[i1 + 100 >> 2] = i3;
  }
  i7 = HEAP32[i1 + 4 >> 2] | 0;
  if ((i3 | 0) != 0) {
   i6 = i1 + 108 | 0;
   HEAP32[i6 >> 2] = i3 + 1 - i7 + (HEAP32[i6 >> 2] | 0);
  }
  i6 = i7 + -1 | 0;
  if ((HEAPU8[i6 >> 0] | 0 | 0) == (i5 | 0)) {
   i8 = i5;
   STACKTOP = i2;
   return i8 | 0;
  }
  HEAP8[i6 >> 0] = i5;
  i8 = i5;
  STACKTOP = i2;
  return i8 | 0;
 }
 HEAP32[i1 + 100 >> 2] = 0;
 i8 = -1;
 STACKTOP = i2;
 return i8 | 0;
}
function _aa_getevent__async_cb177(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 i4 = HEAP32[i1 + 16 >> 2] | 0;
 i5 = HEAP32[i1 + 20 >> 2] | 0;
 i6 = HEAP32[HEAP32[i1 + 4 >> 2] >> 2] | 0;
 i7 = i3 + 196 | 0;
 i8 = HEAP32[HEAP32[i1 + 12 >> 2] >> 2] | 0;
 i1 = i3 + 200 | 0;
 if (((i6 | 0) == (HEAP32[i7 >> 2] | 0) ? (i8 | 0) == (HEAP32[i1 >> 2] | 0) : 0) ? (HEAP32[i4 >> 2] | 0) == (HEAP32[i3 + 204 >> 2] | 0) : 0) {
  i9 = _emscripten_realloc_async_context(4) | 0;
  i10 = _aa_getevent(i3, i5) | 0;
  if (___async) {
   HEAP32[i9 >> 2] = 289;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  HEAP32[___async_retval >> 2] = i10;
  ___async_unwind = 0;
  HEAP32[i9 >> 2] = 289;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 HEAP32[i7 >> 2] = i6;
 HEAP32[i1 >> 2] = i8;
 HEAP32[i3 + 204 >> 2] = HEAP32[i4 >> 2];
 HEAP32[___async_retval >> 2] = 259;
 STACKTOP = i2;
 return;
}
function _aa_showcursor(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i3 = i1 + 192 | 0;
 i4 = (HEAP32[i3 >> 2] | 0) + 1 | 0;
 HEAP32[i3 >> 2] = i4;
 do {
  if ((i4 | 0) == 0 ? (i3 = HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] | 0, (i3 | 0) != 0) : 0) {
   i5 = _emscripten_alloc_async_context(8) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i2;
   FUNCTION_TABLE_vii[i3 & 3](i1, 1);
   if (___async) {
    HEAP32[i5 >> 2] = 303;
    HEAP32[i5 + 4 >> 2] = i1;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   } else {
    _emscripten_free_async_context(i5 | 0);
    break;
   }
  }
 } while (0);
 i4 = HEAP32[i1 + 184 >> 2] | 0;
 i5 = HEAP32[i1 + 188 >> 2] | 0;
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i2;
 _aa_gotoxy(i1, i4, i5);
 if (___async) {
  HEAP32[i3 >> 2] = 304;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  _emscripten_free_async_context(i3 | 0);
  STACKTOP = i2;
  return;
 }
}
function _aa_autoinit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = 0;
 L1 : while (1) {
  i5 = (i4 | 0) == 0;
  do {
   i6 = _aa_getfirst(526824) | 0;
   if ((i6 | 0) == 0) {
    break L1;
   }
  } while (!i5);
  if ((_strcmp(i6, HEAP32[527948 >> 2] | 0) | 0) != 0 ? (_strcmp(i6, HEAP32[131986] | 0) | 0) != 0 : 0) {
   HEAP32[i3 >> 2] = i6;
   _printf(526840, i3 | 0) | 0;
   i7 = 0;
  } else {
   i7 = _aa_init(527944, i1, 0) | 0;
  }
  _free(i6);
  i4 = i7;
 }
 if (i5) {
  i8 = 0;
 } else {
  i9 = i4;
  STACKTOP = i2;
  return i9 | 0;
 }
 while (1) {
  if ((i8 | 0) == 1) {
   i9 = 0;
   i10 = 13;
   break;
  }
  i4 = _aa_init(HEAP32[526832 + (i8 << 2) >> 2] | 0, i1, 0) | 0;
  if ((i4 | 0) == 0) {
   i8 = i8 + 1 | 0;
  } else {
   i9 = i4;
   i10 = 13;
   break;
  }
 }
 if ((i10 | 0) == 13) {
  STACKTOP = i2;
  return i9 | 0;
 }
 return 0;
}
function _pryc() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, d5 = 0.0, i6 = 0, d7 = 0.0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0;
 i1 = STACKTOP;
 i2 = (HEAP32[68188] | 0) - (HEAP32[68194] | 0) | 0;
 i3 = HEAP32[12936] | 0;
 i4 = HEAP32[i3 + 152 >> 2] | 0;
 d5 = +((Math_imul(i4, i2) | 0) / 25e5 | 0 | 0);
 i6 = HEAP32[i3 + 156 >> 2] | 0;
 d7 = +((Math_imul(i6, i2) | 0) / 25e5 | 0 | 0);
 i8 = (i6 | 0) / 3 | 0;
 _memset(HEAP32[i3 + 160 >> 2] | 0, 0, Math_imul(i6, i4) | 0) | 0;
 d9 = +((i4 | 0) / 2 | 0 | 0);
 d10 = d5;
 d5 = +((HEAP32[68188] | 0) - (HEAP32[68194] | 0) | 0);
 d11 = d7;
 d7 = +(i2 | 0) * 10.0 / 25.0e5 + 3.0;
 _centerprint(~~(d9 + d10 * +Math_sin(+(d5 / 1.0e5))), ~~(+(i8 | 0) + d11 * +Math_cos(+(d5 / 3.0e5))), d7, 128, 523424, 0);
 d5 = +((HEAP32[68188] | 0) - (HEAP32[68194] | 0) | 0);
 _centerprint(~~(d9 + d10 * +Math_sin(+(d5 / 15.0e4))), ~~(+(i8 << 1 | 0) + d11 * +Math_cos(+(d5 / 4.0e5))), d7, 128, 523432, 0);
 STACKTOP = i1;
 return;
}
function _aa_close__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 if ((HEAP32[i3 + 4 >> 2] | 0) == 0) {
  i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] | 0;
  i4 = _emscripten_realloc_async_context(8) | 0;
  FUNCTION_TABLE_vi[i1 & 511](i3);
  if (___async) {
   HEAP32[i4 >> 2] = 301;
   i5 = i4 + 4 | 0;
   HEAP32[i5 >> 2] = i3;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i4 >> 2] = 301;
  i5 = i4 + 4 | 0;
  HEAP32[i5 >> 2] = i3;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  i5 = _emscripten_realloc_async_context(8) | 0;
  _aa_uninitkbd(i3);
  if (___async) {
   HEAP32[i5 >> 2] = 300;
   i6 = i5 + 4 | 0;
   HEAP32[i6 >> 2] = i3;
   i2 = STACKTOP;
   STACKTOP = i2;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i5 >> 2] = 300;
  i6 = i5 + 4 | 0;
  HEAP32[i6 >> 2] = i3;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
}
function _scene1__async_cb4(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 _memset(HEAP32[i2 + 164 >> 2] | 0, 32, Math_imul(HEAP32[i2 + 60 >> 2] | 0, HEAP32[i2 + 56 >> 2] | 0) | 0) | 0;
 i2 = HEAP32[12936] | 0;
 _memset(HEAP32[i2 + 168 >> 2] | 0, 0, Math_imul(HEAP32[i2 + 60 >> 2] | 0, HEAP32[i2 + 56 >> 2] | 0) | 0) | 0;
 i2 = HEAP32[12936] | 0;
 _memset(HEAP32[i2 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i2 + 156 >> 2] | 0, HEAP32[i2 + 152 >> 2] | 0) | 0) | 0;
 HEAP32[36] = 160;
 HEAP32[50] = 0;
 HEAP32[52] = 0;
 HEAP32[54] = 255;
 HEAPF64[28] = 0.0;
 HEAPF64[29] = 0.0;
 HEAPF64[30] = 0.0;
 HEAPF64[19] = -10.0;
 HEAP32[62] = 0;
 HEAP32[64] = 0;
 HEAP32[66] = 0;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(-10, 35, 2, 2e6);
 if (___async) {
  HEAP32[i2 >> 2] = 36;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i2 >> 2] = 36;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _bbwait(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 if ((HEAP32[68190] | 0) != 0) {
  STACKTOP = i2;
  return;
 }
 i3 = _emscripten_alloc_async_context(8) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i2;
 _bbupdate() | 0;
 if (___async) {
  HEAP32[i3 >> 2] = 127;
  HEAP32[i3 + 4 >> 2] = i1;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 i3 = (HEAP32[68194] | 0) + i1 | 0;
 HEAP32[68196] = i3;
 i1 = i3 - (HEAP32[68188] | 0) | 0;
 do {
  if ((i1 | 0) > 0) {
   i4 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i2;
   _tl_sleep(i1);
   if (___async) {
    HEAP32[i4 >> 2] = 128;
    i2 = STACKTOP;
    STACKTOP = i2;
    return;
   } else {
    _emscripten_free_async_context(i4 | 0);
    i5 = HEAP32[68196] | 0;
    break;
   }
  } else {
   i5 = i3;
  }
 } while (0);
 HEAP32[68194] = i5;
 STACKTOP = i2;
 return;
}
function _scene2__async_cb62(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i1 = STACKTOP;
 HEAP32[34] = 7;
 HEAP32[212] = 776;
 HEAP8[856] = 2;
 HEAP8[864] = 1;
 HEAP8[864] = 2;
 i2 = 3 << 24 >> 24;
 HEAP8[856] = i2 << 24 >> 24 > 4 ? 2 : i2;
 HEAP32[218] = 776;
 HEAP32[212] = HEAP32[198];
 if (0 == 13) {
  i2 = _emscripten_realloc_async_context(4) | 0;
  _timestuff(0, 0, 1, 195e4);
  if (___async) {
   HEAP32[i2 >> 2] = 70;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i2 >> 2] = 70;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else {
  i2 = _emscripten_realloc_async_context(8) | 0;
  _timestuff(0, 0, 1, 65e4);
  if (___async) {
   HEAP32[i2 >> 2] = 71;
   i3 = i2 + 4 | 0;
   HEAP32[i3 >> 2] = 0;
   i1 = STACKTOP;
   STACKTOP = i1;
   return;
  }
  ___async_unwind = 0;
  HEAP32[i2 >> 2] = 71;
  i3 = i2 + 4 | 0;
  HEAP32[i3 >> 2] = 0;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
}
function _timestuff__async_cb85(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP8[i1 + 8 >> 0] & 1;
 i5 = HEAP32[i1 + 12 >> 2] | 0;
 i6 = HEAP8[i1 + 16 >> 0] & 1;
 if ((HEAP32[68190] | 0) != 0) {
  i7 = HEAP32[68196] | 0;
  HEAP32[68194] = i7;
  _tl_free_timer(i3);
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[68188] | 0) >= (HEAP32[68196] | 0)) {
  i7 = HEAP32[68196] | 0;
  HEAP32[68194] = i7;
  _tl_free_timer(i3);
  STACKTOP = i2;
  return;
 }
 HEAP32[68200] = 0;
 i7 = HEAP32[12] | 0;
 i1 = _emscripten_realloc_async_context(20) | 0;
 i8 = _tl_process_group(i7) | 0;
 if (!___async) {
  HEAP32[___async_retval >> 2] = i8;
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 122;
 HEAP32[i1 + 4 >> 2] = i3;
 HEAP8[i1 + 8 >> 0] = i4 & 1;
 HEAP32[i1 + 12 >> 2] = i5;
 HEAP8[i1 + 16 >> 0] = i6 & 1;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _timestuff__async_cb81(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP8[i1 + 8 >> 0] & 1;
 i5 = HEAP32[i1 + 12 >> 2] | 0;
 i6 = HEAP8[i1 + 16 >> 0] & 1;
 if ((HEAP32[68190] | 0) != 0) {
  i7 = HEAP32[68196] | 0;
  HEAP32[68194] = i7;
  _tl_free_timer(i3);
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[68188] | 0) >= (HEAP32[68196] | 0)) {
  i7 = HEAP32[68196] | 0;
  HEAP32[68194] = i7;
  _tl_free_timer(i3);
  STACKTOP = i2;
  return;
 }
 HEAP32[68200] = 0;
 i7 = HEAP32[12] | 0;
 i1 = _emscripten_realloc_async_context(20) | 0;
 i8 = _tl_process_group(i7) | 0;
 if (!___async) {
  HEAP32[___async_retval >> 2] = i8;
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 122;
 HEAP32[i1 + 4 >> 2] = i3;
 HEAP8[i1 + 8 >> 0] = i4 & 1;
 HEAP32[i1 + 12 >> 2] = i5;
 HEAP8[i1 + 16 >> 0] = i6 & 1;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _aa_recommendlow(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 i4 = HEAP32[i1 >> 2] | 0;
 L1 : do {
  if ((i4 | 0) != 0) {
   i5 = i4;
   while (1) {
    if ((_strcmp(HEAP32[i5 >> 2] | 0, i2) | 0) == 0) {
     break;
    }
    i6 = HEAP32[i5 + 4 >> 2] | 0;
    if ((i6 | 0) == (i4 | 0)) {
     break L1;
    } else {
     i5 = i6;
    }
   }
   if ((i5 | 0) != 0) {
    STACKTOP = i3;
    return;
   }
  }
 } while (0);
 i4 = _malloc(12) | 0;
 HEAP32[i4 >> 2] = ___strdup(i2) | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i6 = i4 + 4 | 0;
 if ((i2 | 0) == 0) {
  HEAP32[i6 >> 2] = i4;
  HEAP32[i4 + 8 >> 2] = i4;
  HEAP32[i1 >> 2] = i4;
  STACKTOP = i3;
  return;
 } else {
  HEAP32[i6 >> 2] = i2;
  i6 = i2 + 8 | 0;
  i2 = i4 + 8 | 0;
  HEAP32[i2 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i6 >> 2] = i4;
  HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] = i4;
  STACKTOP = i3;
  return;
 }
}
function _timestuff__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = HEAP32[i1 + 12 >> 2] | 0;
 if ((HEAP32[68190] | 0) != 0) {
  i6 = HEAP32[68196] | 0;
  HEAP32[68194] = i6;
  _tl_free_timer(i3);
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[68188] | 0) >= (HEAP32[68196] | 0)) {
  i6 = HEAP32[68196] | 0;
  HEAP32[68194] = i6;
  _tl_free_timer(i3);
  STACKTOP = i2;
  return;
 }
 HEAP32[68200] = 0;
 i6 = HEAP32[12] | 0;
 i1 = _emscripten_realloc_async_context(20) | 0;
 i7 = _tl_process_group(i6) | 0;
 if (!___async) {
  HEAP32[___async_retval >> 2] = i7;
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 122;
 HEAP32[i1 + 4 >> 2] = i3;
 HEAP8[i1 + 8 >> 0] = (i4 | 0) == 0 & 1;
 HEAP32[i1 + 12 >> 2] = i4;
 HEAP8[i1 + 16 >> 0] = (i5 | 0) == 0 & 1;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _strobikstart() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[22682] | 0;
 i3 = i2 + 12 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[(HEAP32[HEAP32[12936] >> 2] | 0) + 24 >> 2] | 0) != 0) {
  HEAP32[i3 >> 2] = 0;
 }
 HEAP32[i2 >> 2] = 0;
 i2 = _emscripten_alloc_async_context(8) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(-60, 10, 1, 66666);
 if (___async) {
  HEAP32[i2 >> 2] = 11;
  HEAP32[i2 + 4 >> 2] = i4;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 i2 = HEAP32[22682] | 0;
 HEAP32[i2 >> 2] = 255;
 HEAP32[i2 + 12 >> 2] = i4;
 i4 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _draw();
 if (___async) {
  HEAP32[i4 >> 2] = 12;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else {
  _emscripten_free_async_context(i4 | 0);
  STACKTOP = i1;
  return;
 }
}
function _aa_gotoxy(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 if (!((HEAP32[i1 + 192 >> 2] | 0) > -1)) {
  STACKTOP = i4;
  return;
 }
 i5 = (i2 | 0) < 0 ? 0 : i2;
 i2 = (i3 | 0) < 0 ? 0 : i3;
 i3 = HEAP32[i1 + 56 >> 2] | 0;
 i6 = (i5 | 0) < (i3 | 0) ? i5 : i3 + -1 | 0;
 i3 = HEAP32[i1 + 60 >> 2] | 0;
 i5 = (i2 | 0) < (i3 | 0) ? i2 : i3 + -1 | 0;
 i3 = HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] | 0;
 i2 = _emscripten_alloc_async_context(16) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i4;
 FUNCTION_TABLE_viii[i3 & 3](i1, i6, i5);
 if (___async) {
  HEAP32[i2 >> 2] = 305;
  HEAP32[i2 + 4 >> 2] = i1;
  HEAP32[i2 + 8 >> 2] = i6;
  HEAP32[i2 + 12 >> 2] = i5;
  i4 = STACKTOP;
  STACKTOP = i4;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[i1 + 184 >> 2] = i6;
 HEAP32[i1 + 188 >> 2] = i5;
 STACKTOP = i4;
 return;
}
function _frexp(d1, i2) {
 d1 = +d1;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, d9 = 0.0, i10 = 0, d11 = 0.0;
 i3 = STACKTOP;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i4 = HEAP32[tempDoublePtr >> 2] | 0;
 i5 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i6 = _bitshift64Lshr(i4 | 0, i5 | 0, 52) | 0;
 i7 = i6 & 2047;
 if ((i7 | 0) == 0) {
  if (d1 != 0.0) {
   d8 = +_frexp(d1 * 18446744073709552000.0, i2);
   d9 = d8;
   i10 = (HEAP32[i2 >> 2] | 0) + -64 | 0;
  } else {
   d9 = d1;
   i10 = 0;
  }
  HEAP32[i2 >> 2] = i10;
  d11 = d9;
  STACKTOP = i3;
  return +d11;
 } else if ((i7 | 0) == 2047) {
  d11 = d1;
  STACKTOP = i3;
  return +d11;
 } else {
  HEAP32[i2 >> 2] = i7 + -1022;
  HEAP32[tempDoublePtr >> 2] = i4;
  HEAP32[tempDoublePtr + 4 >> 2] = i5 & -2146435073 | 1071644672;
  d11 = +HEAPF64[tempDoublePtr >> 3];
  STACKTOP = i3;
  return +d11;
 }
 return 0.0;
}
function _scalbn(d1, i2) {
 d1 = +d1;
 i2 = i2 | 0;
 var i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0;
 i3 = STACKTOP;
 if ((i2 | 0) > 1023) {
  d4 = d1 * 8.98846567431158e+307;
  i5 = i2 + -1023 | 0;
  if ((i5 | 0) > 1023) {
   i6 = i2 + -2046 | 0;
   i7 = (i6 | 0) > 1023 ? 1023 : i6;
   d8 = d4 * 8.98846567431158e+307;
  } else {
   i7 = i5;
   d8 = d4;
  }
 } else {
  if ((i2 | 0) < -1022) {
   d4 = d1 * 2.2250738585072014e-308;
   i5 = i2 + 1022 | 0;
   if ((i5 | 0) < -1022) {
    i6 = i2 + 2044 | 0;
    i7 = (i6 | 0) < -1022 ? -1022 : i6;
    d8 = d4 * 2.2250738585072014e-308;
   } else {
    i7 = i5;
    d8 = d4;
   }
  } else {
   i7 = i2;
   d8 = d1;
  }
 }
 i2 = _bitshift64Shl(i7 + 1023 | 0, 0, 52) | 0;
 i7 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = i2;
 HEAP32[tempDoublePtr + 4 >> 2] = i7;
 d1 = d8 * +HEAPF64[tempDoublePtr >> 3];
 STACKTOP = i3;
 return +d1;
}
function _ctrllepic(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0;
 i2 = STACKTOP;
 if ((i1 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i3 = i1;
 d4 = +HEAPF32[156];
 d5 = +HEAPF32[158];
 d6 = +HEAPF32[160];
 while (1) {
  d4 = d4 + 1.0;
  d7 = (d5 + .02) * .96;
  if (d4 < 100.0) {
   d8 = d6 / 40.0;
   if (d4 < 80.0) {
    d9 = d7 - d8;
   } else {
    d9 = d7 - d8 * .5;
   }
   d8 = d9;
   d10 = d6 + d8;
   d11 = d8;
  } else {
   HEAPF32[162] = d7 + +HEAPF32[162];
   d10 = d6 + .02;
   d11 = d7;
  }
  if (d10 < 0.0) {
   d12 = -d11;
   d13 = 0.0;
  } else {
   d12 = d11;
   d13 = d10;
  }
  i3 = i3 + -1 | 0;
  if ((i3 | 0) == 0) {
   break;
  } else {
   d5 = d12;
   d6 = d13;
  }
 }
 HEAPF32[156] = d4;
 HEAPF32[158] = d12;
 HEAPF32[160] = d13;
 STACKTOP = i2;
 return;
}
function _uncompressfont(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 i3 = _malloc(12) | 0;
 HEAP32[i3 >> 2] = 8;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[i3 + 4 >> 2] = i4;
 i5 = _calloc(1, i4 << 11) | 0;
 HEAP32[i3 + 8 >> 2] = i5;
 if ((i4 | 0) <= 0) {
  STACKTOP = i2;
  return i3 | 0;
 }
 i6 = HEAP32[i1 >> 2] | 0;
 i1 = 0;
 i7 = 0;
 while (1) {
  i8 = HEAP8[i6 + i1 >> 0] | 0;
  HEAP8[i5 + i7 >> 0] = i8 & 128;
  HEAP8[i5 + (i7 | 1) >> 0] = i8 & 64;
  HEAP8[i5 + (i7 | 2) >> 0] = i8 & 32;
  HEAP8[i5 + (i7 | 3) >> 0] = i8 & 16;
  HEAP8[i5 + (i7 | 4) >> 0] = i8 & 8;
  HEAP8[i5 + (i7 | 5) >> 0] = i8 & 4;
  HEAP8[i5 + (i7 | 6) >> 0] = i8 & 2;
  HEAP8[i5 + (i7 | 7) >> 0] = i8 & 1;
  i1 = i1 + 1 | 0;
  if ((i1 | 0) >= (i4 << 8 | 0)) {
   break;
  } else {
   i7 = i7 + 8 | 0;
  }
 }
 STACKTOP = i2;
 return i3 | 0;
}
function _devezen3() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 _backconvert(0, HEAP32[130914] | 0, HEAP32[i2 + 56 >> 2] | 0, HEAP32[i2 + 60 >> 2] | 0);
 HEAP32[34] = 36;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 1, 1e6);
 if (___async) {
  HEAP32[i2 >> 2] = 267;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[(HEAP32[22682] | 0) + 20 >> 2] = 100;
 HEAP32[34] = 35;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 1, 1e6);
 if (___async) {
  HEAP32[i2 >> 2] = 268;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else {
  _emscripten_free_async_context(i2 | 0);
  i2 = HEAP32[22682] | 0;
  HEAP32[i2 + 20 >> 2] = 0;
  HEAP32[i2 >> 2] = 0;
  STACKTOP = i1;
  return;
 }
}
function _mydraw() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 _memset(HEAP32[i2 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i2 + 156 >> 2] | 0, HEAP32[i2 + 152 >> 2] | 0) | 0) | 0;
 i2 = HEAP32[68194] | 0;
 i3 = ~~(+_getwidth(2.0) * 9.0 + 1.0);
 i4 = HEAP32[12936] | 0;
 _centerprint(~~(+((i3 | 0) / -2 | 0 | 0) + (+(HEAP32[i4 + 152 >> 2] | 0) + +(i3 | 0) * 1.2) * +((HEAP32[68188] | 0) - i2 | 0) / +((HEAP32[68196] | 0) - i2 | 0)), (HEAP32[i4 + 156 >> 2] | 0) / 3 | 0, 2.0, 255, 880, 0);
 i4 = ~~(+_getwidth(2.0) * 2.0 + 1.0);
 i3 = HEAP32[12936] | 0;
 i5 = HEAP32[i3 + 152 >> 2] | 0;
 _centerprint(~~(+(((i4 | 0) / 2 | 0) + i5 | 0) - (+(i5 | 0) + +(i4 | 0) * 1.2) * +((HEAP32[68188] | 0) - i2 | 0) / +((HEAP32[68196] | 0) - i2 | 0)), (HEAP32[i3 + 156 >> 2] << 1 | 0) / 3 | 0, 2.0, 255, 896, 0);
 STACKTOP = i1;
 return;
}
function _patnikconstructor() {
 var i1 = 0, i2 = 0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i2 = i1;
 i3 = 0;
 do {
  d4 = +(i3 | 0) * .00390625;
  HEAP8[i2 + i3 >> 0] = ~~(d4 * d4 * 256.0);
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 256);
 _precalculate();
 HEAP32[12940] = 450;
 HEAP32[12942] = 912;
 HEAP32[22680] = _malloc(16384) | 0;
 i3 = 0;
 do {
  i5 = i3 + -64 | 0;
  i6 = (Math_imul(i5, i5) | 0) + 2100 | 0;
  i5 = i3 << 7;
  i7 = 0;
  do {
   i8 = i7 + -64 | 0;
   i9 = HEAP8[i2 + ((5e5 / ((i6 + (Math_imul(i8, i8) | 0) | 0) >>> 0) | 0) & 255) >> 0] | 0;
   HEAP8[(HEAP32[22680] | 0) + (i7 + i5) >> 0] = i9;
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != 128);
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 128);
 HEAP32[13676] = HEAP32[12942];
 STACKTOP = i1;
 return;
}
function _torusconstructor() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i2 = i1;
 i3 = 0;
 do {
  HEAP8[i2 + i3 >> 0] = ~~(+Math_pow(+(+(i3 | 0) * .00390625), 3.0) * 200.0);
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 256);
 _precalculate();
 HEAP32[12940] = 256;
 HEAP32[12942] = 33312;
 HEAP32[22680] = _malloc(16384) | 0;
 i3 = 0;
 do {
  i4 = i3 + -64 | 0;
  i5 = (Math_imul(i4, i4) | 0) + 2100 | 0;
  i4 = i3 << 7;
  i6 = 0;
  do {
   i7 = i6 + -64 | 0;
   i8 = HEAP8[i2 + ((5e5 / ((i5 + (Math_imul(i7, i7) | 0) | 0) >>> 0) | 0) & 255) >> 0] | 0;
   HEAP8[(HEAP32[22680] | 0) + (i6 + i4) >> 0] = i8;
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) != 128);
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 128);
 HEAP32[13676] = HEAP32[12942];
 STACKTOP = i1;
 return;
}
function _do_fractal__async_cb146(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[71600] | 0;
 i3 = HEAP32[i2 + 52 >> 2] | 0;
 i4 = HEAP32[i2 + 128 >> 2] | 0;
 i5 = i3 + (i4 * 40 | 0) | 0;
 if ((i4 | 0) > 0) {
  i4 = HEAP32[i2 + 16 >> 2] | 0;
  i6 = i3;
  while (1) {
   HEAPF64[i4 >> 3] = +HEAPF64[i6 >> 3];
   i6 = i6 + 40 | 0;
   if (!(i6 >>> 0 < i5 >>> 0)) {
    break;
   } else {
    i4 = i4 + 8 | 0;
   }
  }
 }
 i4 = HEAP32[i2 + 56 >> 2] | 0;
 i5 = HEAP32[i2 + 132 >> 2] | 0;
 i6 = i4 + (i5 * 40 | 0) | 0;
 if ((i5 | 0) <= 0) {
  STACKTOP = i1;
  return;
 }
 i5 = HEAP32[i2 + 20 >> 2] | 0;
 i2 = i4;
 while (1) {
  HEAPF64[i5 >> 3] = +HEAPF64[i2 >> 3];
  i2 = i2 + 40 | 0;
  if (!(i2 >>> 0 < i6 >>> 0)) {
   break;
  } else {
   i5 = i5 + 8 | 0;
  }
 }
 STACKTOP = i1;
 return;
}
function _scene4__async_cb40(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i1 = HEAP32[12936] | 0;
 if (((HEAP32[i1 + 56 >> 2] | 0) + -25 | 0) > 0) {
  i5 = i1;
  i1 = 0;
  do {
   i6 = i1 + 10 | 0;
   _aa_puts(i5, i6, 6, 0, 179536);
   _aa_puts(HEAP32[12936] | 0, i6, 9, 0, 179536);
   _aa_puts(HEAP32[12936] | 0, i6, 12, 0, 179536);
   _aa_puts(HEAP32[12936] | 0, i6, 15, 0, 179536);
   i1 = i1 + 6 | 0;
   i5 = HEAP32[12936] | 0;
  } while ((i1 | 0) < ((HEAP32[i5 + 56 >> 2] | 0) + -25 | 0));
 }
 i5 = _emscripten_realloc_async_context(12) | 0;
 _bbflushwait(1e5);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i5 >> 2] = 100;
 HEAP32[i5 + 4 >> 2] = i3;
 HEAP32[i5 + 8 >> 2] = i4;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _dvojprujezd(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, d5 = 0.0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 d5 = +_getwidth(2.0);
 i6 = ~~(d5 * +((_strlen(i3 | 0) | 0) >>> 0) + 1.0);
 i7 = HEAP32[12936] | 0;
 _centerprint(~~(+((i6 | 0) / -2 | 0 | 0) + +((HEAP32[68188] | 0) - i1 | 0) * (+(HEAP32[i7 + 152 >> 2] | 0) + +(i6 | 0) * 1.2) / +((HEAP32[68196] | 0) - i1 | 0)), (HEAP32[i7 + 156 >> 2] << 1 | 0) / 3 | 0, 2.0, 255, i3, 0);
 d5 = +_getwidth(2.0);
 i3 = ~~(d5 * +((_strlen(i2 | 0) | 0) >>> 0) + 1.0);
 i7 = HEAP32[12936] | 0;
 i6 = HEAP32[i7 + 152 >> 2] | 0;
 _centerprint(~~(+(((i3 | 0) / 2 | 0) + i6 | 0) - +((HEAP32[68188] | 0) - i1 | 0) * (+(i6 | 0) + +(i3 | 0) * 1.2) / +((HEAP32[68196] | 0) - i1 | 0)), (HEAP32[i7 + 156 >> 2] | 0) / 3 | 0, 2.0, 255, i2, 0);
 STACKTOP = i4;
 return;
}
function _devezen4() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 _backconvert(0, HEAP32[130914] | 0, HEAP32[i2 + 56 >> 2] | 0, HEAP32[i2 + 60 >> 2] | 0);
 HEAP32[34] = 37;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 1, 5e5);
 if (___async) {
  HEAP32[i2 >> 2] = 269;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[34] = 38;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 1, 5e5);
 if (___async) {
  HEAP32[i2 >> 2] = 270;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else {
  _emscripten_free_async_context(i2 | 0);
  i2 = HEAP32[22682] | 0;
  HEAP32[i2 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
  STACKTOP = i1;
  return;
 }
}
function _mand3_calc(d1, d2, d3, d4) {
 d1 = +d1;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 var i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, d9 = 0.0, d10 = 0.0, i11 = 0, d12 = 0.0, i13 = 0;
 i5 = STACKTOP;
 i6 = HEAP32[71598] | 0;
 if ((i6 | 0) == 0) {
  STACKTOP = i5;
  return 2147483647;
 }
 d7 = d2 * d2;
 i8 = i6;
 d9 = d1 * d1;
 d10 = d2;
 d2 = d1;
 while (1) {
  if (!(d9 + d7 < 4.0)) {
   i11 = 5;
   break;
  }
  d1 = d10 * (d2 * d2 * 3.0 - d7) + d4;
  d12 = d2 * (d9 - d7 * 3.0) + d3;
  i13 = i8 + -1 | 0;
  if ((i13 | 0) == 0) {
   i11 = 6;
   break;
  } else {
   d7 = d1 * d1;
   i8 = i13;
   d9 = d12 * d12;
   d10 = d1;
   d2 = d12;
  }
 }
 if ((i11 | 0) == 5) {
  STACKTOP = i5;
  return ((i8 | 0) < 1 ? 2147483647 : i6 - i8 | 0) | 0;
 } else if ((i11 | 0) == 6) {
  STACKTOP = i5;
  return 2147483647;
 }
 return 0;
}
function _draw() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[34] | 0;
 do {
  if ((i2 | 0) != 0) {
   i3 = _emscripten_alloc_async_context(4) | 0;
   HEAP32[___async_cur_frame + 4 >> 2] = i1;
   FUNCTION_TABLE_v[i2 & 63]();
   if (___async) {
    HEAP32[i3 >> 2] = 9;
    i1 = STACKTOP;
    STACKTOP = i1;
    return;
   } else {
    _emscripten_free_async_context(i3 | 0);
    break;
   }
  }
 } while (0);
 i2 = HEAP32[12936] | 0;
 _aa_render(i2, HEAP32[22682] | 0, 0, 0, HEAP32[i2 + 152 >> 2] | 0, HEAP32[i2 + 156 >> 2] | 0);
 i2 = HEAP32[12936] | 0;
 i3 = HEAP32[i2 + 56 >> 2] | 0;
 i4 = HEAP32[36] | 0;
 i5 = (i3 - (_strlen(i4 | 0) | 0) | 0) >>> 1;
 _aa_puts(i2, i5, (HEAP32[i2 + 60 >> 2] | 0) / 2 | 0, 5, i4);
 _aa_flush(HEAP32[12936] | 0);
 STACKTOP = i1;
 return;
}
function _dispimg(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = STACKTOP;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = HEAP32[i1 + 12 >> 2] | 0;
 i6 = HEAP32[12936] | 0;
 i7 = HEAP32[i6 + 48 >> 2] | 0;
 i8 = (i2 | 0) != 0;
 if (i8) {
  i9 = (i7 | 0) / 2 | 0;
 } else {
  i9 = i7;
 }
 i7 = HEAP32[i6 + 52 >> 2] | 0;
 i6 = (Math_imul(i7, i4) | 0) / (i9 | 0) | 0;
 if ((i6 | 0) > (i5 | 0)) {
  i10 = i4;
  i11 = i6;
 } else {
  i10 = (Math_imul(i9, i5) | 0) / (i7 | 0) | 0;
  i11 = i5;
 }
 i7 = (i4 - i10 | 0) / 2 | 0;
 i4 = i7 + i10 | 0;
 i10 = (i5 - i11 | 0) / 2 | 0;
 i5 = i10 + i11 | 0;
 if (i8) {
  _scale2(i1, i7, i10, i4, i5);
  STACKTOP = i3;
  return;
 } else {
  _scale(i1, i7, i10, i4, i5);
  STACKTOP = i3;
  return;
 }
}
function _scene1__async_cb25(i1) {
 i1 = i1 | 0;
 var i2 = 0, d3 = 0.0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 HEAP32[(HEAP32[22682] | 0) + 20 >> 2] = 0;
 i2 = HEAP32[108] | 0;
 d3 = +HEAPF32[128];
 i4 = HEAP32[12936] | 0;
 _memset(HEAP32[i4 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i4 + 156 >> 2] | 0, HEAP32[i4 + 152 >> 2] | 0) | 0) | 0;
 i4 = HEAP32[12936] | 0;
 _centerprint((HEAP32[i4 + 152 >> 2] | 0) / 2 | 0, (HEAP32[i4 + 156 >> 2] | 0) / 2 | 0, d3, 255, i2, 3);
 i2 = _emscripten_realloc_async_context(8) | 0;
 _timestuff(-60, 13, 1, 285714);
 if (___async) {
  HEAP32[i2 >> 2] = 63;
  i5 = i2 + 4 | 0;
  HEAP32[i5 >> 2] = 0;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i2 >> 2] = 63;
 i5 = i2 + 4 | 0;
 HEAP32[i5 >> 2] = 0;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _decompressimg(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2;
 i4 = i2 + 16 | 0;
 i5 = i1 + 8 | 0;
 i6 = i1 + 12 | 0;
 i7 = Math_imul(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 i8 = _malloc(i7 + 5 | 0) | 0;
 HEAP32[i4 >> 2] = i7;
 i7 = i1 + 4 | 0;
 i9 = _lzo1x_decompress(HEAP32[i1 >> 2] | 0, HEAP32[i7 >> 2] | 0, i8, i4, 0) | 0;
 if ((i9 | 0) == 0) {
  HEAP32[i1 + 16 >> 2] = i8;
  STACKTOP = i2;
  return i8 | 0;
 } else {
  i8 = HEAP32[i7 >> 2] | 0;
  i7 = HEAP32[i5 >> 2] | 0;
  i5 = HEAP32[i6 >> 2] | 0;
  HEAP32[i3 >> 2] = i9;
  HEAP32[i3 + 4 >> 2] = i8;
  HEAP32[i3 + 8 >> 2] = i7;
  HEAP32[i3 + 12 >> 2] = i5;
  _printf(523384, i3 | 0) | 0;
  _exit(-1);
 }
 return 0;
}
function _aa_flush__async_cb57(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 i4 = HEAP32[i1 + 12 >> 2] | 0;
 i5 = HEAP32[HEAP32[i1 + 4 >> 2] >> 2] | 0;
 if ((i5 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i5 + 8 >> 2] & 8 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i3 >> 2] | 0) != 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i3 >> 2] = 1;
 i3 = HEAP32[i5 + 24 >> 2] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i5 = _emscripten_realloc_async_context(4) | 0;
 FUNCTION_TABLE_vii[i3 & 3](i4, 1);
 if (___async) {
  HEAP32[i5 >> 2] = 279;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i5 >> 2] = 279;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function ___toread(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 i3 = i1 + 74 | 0;
 i4 = HEAP8[i3 >> 0] | 0;
 HEAP8[i3 >> 0] = i4 + 255 | i4;
 i4 = i1 + 20 | 0;
 i3 = i1 + 44 | 0;
 if ((HEAP32[i4 >> 2] | 0) >>> 0 > (HEAP32[i3 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[i1 + 36 >> 2] & 1](i1, 0, 0) | 0;
 }
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 i4 = HEAP32[i1 >> 2] | 0;
 if ((i4 & 20 | 0) == 0) {
  i5 = HEAP32[i3 >> 2] | 0;
  HEAP32[i1 + 8 >> 2] = i5;
  HEAP32[i1 + 4 >> 2] = i5;
  i6 = 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 if ((i4 & 4 | 0) == 0) {
  i6 = -1;
  STACKTOP = i2;
  return i6 | 0;
 }
 HEAP32[i1 >> 2] = i4 | 32;
 i6 = -1;
 STACKTOP = i2;
 return i6 | 0;
}
function _init_tables(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 HEAP32[i1 + 104 >> 2] = 2;
 i3 = HEAP32[i1 + 128 >> 2] | 0;
 if ((i3 | 0) > -1) {
  i4 = i1 + 1184 | 0;
  i5 = HEAP32[i1 + 16 >> 2] | 0;
  i6 = 0;
  while (1) {
   HEAPF64[i5 + (i6 << 3) >> 3] = +HEAPF64[i4 >> 3] + 2147483647.0;
   if ((i6 | 0) < (i3 | 0)) {
    i6 = i6 + 1 | 0;
   } else {
    break;
   }
  }
 }
 i6 = HEAP32[i1 + 132 >> 2] | 0;
 if (!((i6 | 0) > -1)) {
  STACKTOP = i2;
  return;
 }
 i3 = i1 + 1200 | 0;
 i4 = HEAP32[i1 + 20 >> 2] | 0;
 i1 = 0;
 while (1) {
  HEAPF64[i4 + (i1 << 3) >> 3] = +HEAPF64[i3 >> 3] + 2147483647.0;
  if ((i1 | 0) < (i6 | 0)) {
   i1 = i1 + 1 | 0;
  } else {
   break;
  }
 }
 STACKTOP = i2;
 return;
}
function ___remdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 i6 = i5 | 0;
 i7 = i2 >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i8 = ((i2 | 0) < 0 ? -1 : 0) >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i9 = i4 >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i10 = ((i4 | 0) < 0 ? -1 : 0) >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i11 = _i64Subtract(i7 ^ i1, i8 ^ i2, i7, i8) | 0;
 i2 = tempRet0;
 ___udivmoddi4(i11, i2, _i64Subtract(i9 ^ i3, i10 ^ i4, i9, i10) | 0, tempRet0, i6) | 0;
 i10 = _i64Subtract(HEAP32[i6 >> 2] ^ i7, HEAP32[i6 + 4 >> 2] ^ i8, i7, i8) | 0;
 i8 = tempRet0;
 STACKTOP = i5;
 return (tempRet0 = i8, i10) | 0;
}
function _do3d(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i2;
 _timestuff(0, 0, 8, i1);
 if (___async) {
  HEAP32[i3 >> 2] = 88;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  _emscripten_free_async_context(i3 | 0);
  i3 = (HEAP32[31710] | 0) % 360 | 0;
  HEAP32[31710] = i3;
  i1 = (HEAP32[31708] | 0) % 360 | 0;
  HEAP32[31708] = i1;
  i4 = (HEAP32[31706] | 0) % 360 | 0;
  HEAP32[31706] = i4;
  HEAP32[31696] = i3;
  HEAP32[31694] = i1;
  HEAP32[31692] = i4;
  HEAPF32[31698] = +HEAPF32[31712];
  HEAP32[31690] = HEAP32[31704];
  HEAP32[31688] = HEAP32[31702];
  HEAP32[31686] = HEAP32[31700];
  STACKTOP = i2;
  return;
 }
}
function _strtod(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i4 = i3;
 i5 = i4 + 0 | 0;
 i6 = i5 + 112 | 0;
 do {
  HEAP32[i5 >> 2] = 0;
  i5 = i5 + 4 | 0;
 } while ((i5 | 0) < (i6 | 0));
 i5 = i4 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 i6 = i4 + 8 | 0;
 HEAP32[i6 >> 2] = -1;
 HEAP32[i4 + 44 >> 2] = i1;
 HEAP32[i4 + 76 >> 2] = -1;
 ___shlim(i4, 0);
 d7 = +___floatscan(i4, 1, 1);
 i8 = (HEAP32[i5 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) + (HEAP32[i4 + 108 >> 2] | 0) | 0;
 if ((i2 | 0) == 0) {
  STACKTOP = i3;
  return +d7;
 }
 if ((i8 | 0) == 0) {
  i9 = i1;
 } else {
  i9 = i1 + i8 | 0;
 }
 HEAP32[i2 >> 2] = i9;
 STACKTOP = i3;
 return +d7;
}
function _bbupdate() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 _tl_update_time();
 _update_sound();
 HEAP32[68188] = _tl_lookup_timer(HEAP32[68186] | 0) | 0;
 i2 = HEAP32[12936] | 0;
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 i4 = _aa_getkey(i2, 0) | 0;
 if (___async) {
  HEAP32[i3 >> 2] = 118;
  i1 = STACKTOP;
  STACKTOP = i1;
  return 0;
 }
 _emscripten_free_async_context(i3 | 0);
 switch (i4 | 0) {
 case 304:
 case 83:
 case 115:
  {
   HEAP32[68190] = 1;
   STACKTOP = i1;
   return i4 | 0;
  }
 case 113:
 case 305:
  {
   HEAP32[68190] = 1;
   HEAP32[68192] = 1;
   STACKTOP = i1;
   return i4 | 0;
  }
 default:
  {
   STACKTOP = i1;
   return i4 | 0;
  }
 }
 return 0;
}
function _credits2__async_cb112(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 _aa_puts(i2, ((HEAP32[i2 + 56 >> 2] | 0) / 2 | 0) + -2 | 0, ((HEAP32[i2 + 60 >> 2] | 0) + -6 | 0) / 2 | 0, 2, 523448);
 if (0 != 0) {
  i2 = HEAP32[12936] | 0;
  _aa_puts(i2, ((HEAP32[i2 + 56 >> 2] | 0) / 2 | 0) + -2 | 0, 0 + -1 + (((HEAP32[i2 + 60 >> 2] | 0) + -6 | 0) / 2 | 0) | 0, 0, 523448);
 }
 i2 = _emscripten_realloc_async_context(8) | 0;
 _bbflushwait(1e5);
 if (___async) {
  HEAP32[i2 >> 2] = 244;
  i3 = i2 + 4 | 0;
  HEAP32[i3 >> 2] = 0;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i2 >> 2] = 244;
 i3 = i2 + 4 | 0;
 HEAP32[i3 >> 2] = 0;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _aa_autoinitkbd(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 i5 = 0;
 L1 : while (1) {
  i6 = (i5 | 0) == 0;
  do {
   i7 = _aa_getfirst(526808) | 0;
   if ((i7 | 0) == 0) {
    break L1;
   }
  } while (!i6);
  if ((_strcmp(i7, HEAP32[528028 >> 2] | 0) | 0) != 0 ? (_strcmp(i7, HEAP32[132006] | 0) | 0) != 0 : 0) {
   HEAP32[i4 >> 2] = i7;
   _printf(525888, i4 | 0) | 0;
   i8 = 0;
  } else {
   i8 = _aa_initkbd(i1, 528024, i2) | 0;
  }
  _free(i7);
  i5 = i8;
 }
 if (!i6) {
  i9 = i5;
  STACKTOP = i3;
  return i9 | 0;
 }
 i9 = (_aa_initkbd(i1, 528024, i2) | 0) != 0 & 1;
 STACKTOP = i3;
 return i9 | 0;
}
function _aa_getkey__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 i5 = HEAP32[i1 + 8 >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[___async_retval >> 2];
 if (!((HEAP32[i3 >> 2] | 0) > 65535 ? 1 : (HEAP32[i3 >> 2] & -2 | 0) == 258)) {
  HEAP32[___async_retval >> 2] = HEAP32[i3 >> 2];
  STACKTOP = i2;
  return;
 }
 i1 = _emscripten_realloc_async_context(12) | 0;
 HEAP32[i3 >> 2] = _aa_getevent(i4, i5) | 0;
 if (!___async) {
  HEAP32[___async_retval >> 2] = HEAP32[i3 >> 2];
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 290;
 HEAP32[i1 + 4 >> 2] = i4;
 HEAP32[i1 + 8 >> 2] = i5;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _main(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 i4 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i3;
 _bbinit(i1, i2) | 0;
 if (___async) {
  HEAP32[i4 >> 2] = 7;
  i3 = STACKTOP;
  STACKTOP = i3;
  return 0;
 }
 _emscripten_free_async_context(i4 | 0);
 i4 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i3;
 i2 = _bb() | 0;
 if (___async) {
  HEAP32[i4 >> 2] = 8;
  i3 = STACKTOP;
  STACKTOP = i3;
  return 0;
 }
 _emscripten_free_async_context(i4 | 0);
 if ((HEAP32[18] | 0) == 0) {
  STACKTOP = i3;
  return i2 | 0;
 }
 _write(0, 128, 1) | 0;
 _close(0) | 0;
 _close(0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}
function _aa_uninitmouse(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i3 = i1 + 8 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((i4 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i5 = HEAP32[i4 + 16 >> 2] | 0;
 i4 = _emscripten_alloc_async_context(12) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i2;
 FUNCTION_TABLE_vi[i5 & 511](i1);
 if (___async) {
  HEAP32[i4 >> 2] = 291;
  HEAP32[i4 + 4 >> 2] = i1;
  HEAP32[i4 + 8 >> 2] = i3;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 _emscripten_free_async_context(i4 | 0);
 i4 = i1 + 224 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if ((i5 | 0) != 0) {
  _free(i5);
 }
 HEAP32[i4 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i1 + 208 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function _update_sound() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i2 = i1 + 8 | 0;
 i3 = i1 + 136 | 0;
 i4 = i1;
 if ((HEAP32[18] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 i5 = i2 + 0 | 0;
 i6 = i5 + 128 | 0;
 do {
  HEAP32[i5 >> 2] = 0;
  i5 = i5 + 4 | 0;
 } while ((i5 | 0) < (i6 | 0));
 HEAP32[i2 >> 2] = 1;
 do {
  if ((_select(1, i2 | 0, 0, 0, i4 | 0) | 0) == 0) {
   i7 = 6;
   break;
  }
  HEAP32[30] = (HEAP32[30] | 0) + 1;
  _read(0, i3 | 0, 1) | 0;
 } while ((HEAP8[i3 >> 0] | 0) != 33);
 if ((i7 | 0) == 6) {
  STACKTOP = i1;
  return;
 }
 HEAP32[18] = 0;
 STACKTOP = i1;
 return;
}
function _drawwait3() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 _aa_render(i2, HEAP32[22682] | 0, 0, 0, HEAP32[i2 + 152 >> 2] | 0, HEAP32[i2 + 156 >> 2] | 0);
 i2 = HEAP32[12936] | 0;
 i3 = HEAP32[i2 + 60 >> 2] | 0;
 if ((i3 | 0) > 0) {
  i4 = 0;
  do {
   _drawline(i4);
   i4 = i4 + 1 | 0;
   i5 = HEAP32[12936] | 0;
   i6 = HEAP32[i5 + 60 >> 2] | 0;
  } while ((i4 | 0) < (i6 | 0));
  i7 = i5;
  i8 = i6;
 } else {
  i7 = i2;
  i8 = i3;
 }
 i3 = HEAP32[i7 + 56 >> 2] | 0;
 i2 = HEAP32[36] | 0;
 _aa_puts(i7, (i3 - (_strlen(i2 | 0) | 0) | 0) >>> 1, (i8 | 0) / 2 | 0, 5, i2);
 _aa_flush(HEAP32[12936] | 0);
 STACKTOP = i1;
 return;
}
function _ui_waitfunc__async_cb100(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 i2 = _tl_lookup_timer(HEAP32[68734] | 0) | 0;
 if ((HEAP32[68726] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 i3 = HEAP32[68736] | 0;
 i4 = HEAP32[i3 + 112 >> 2] | 0;
 i5 = (HEAP32[68834] | 0) != 0;
 if ((i4 | 0) == 0 | i5) {
  if (i5 ? (HEAP32[68836] | i4 | 0) == 0 : 0) {
   HEAP32[68836] = i2;
  }
 } else {
  HEAP32[68834] = i2;
 }
 i4 = HEAP32[68838] | 0;
 if (!((i4 | 0) != 0 & (i2 | 0) > (i4 | 0))) {
  STACKTOP = i1;
  return;
 }
 if ((HEAP32[i3 + 116 >> 2] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 HEAP32[i3 + 140 >> 2] = 1;
 HEAP32[68836] = i2;
 STACKTOP = i1;
 return;
}
function _vezen__async_cb74(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = HEAP32[i1 + 12 >> 2] | 0;
 i6 = HEAP32[i1 + 16 >> 2] | 0;
 i1 = HEAP32[12936] | 0;
 _memset(HEAP32[i1 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i1 + 156 >> 2] | 0, HEAP32[i1 + 152 >> 2] | 0) | 0) | 0;
 _dispimg(i6, HEAP32[68184] | 0);
 i6 = _emscripten_realloc_async_context(16) | 0;
 _timestuff(-60, 13, 1, 285714);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i6 >> 2] = 17;
 HEAP32[i6 + 4 >> 2] = i3;
 HEAP32[i6 + 8 >> 2] = i4;
 HEAP32[i6 + 12 >> 2] = i5;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _timestuff__async_cb84(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 i5 = HEAP8[i1 + 8 >> 0] & 1;
 i6 = HEAP32[i1 + 12 >> 2] | 0;
 i7 = HEAP8[i1 + 16 >> 0] & 1;
 HEAP32[i3 >> 2] = HEAP32[___async_retval >> 2];
 i1 = _emscripten_realloc_async_context(24) | 0;
 _bbupdate() | 0;
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 123;
 HEAP32[i1 + 4 >> 2] = i4;
 HEAP8[i1 + 8 >> 0] = i5 & 1;
 HEAP32[i1 + 12 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 + 16 >> 2] = i6;
 HEAP8[i1 + 20 >> 0] = i7 & 1;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _scene4__async_cb38(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 _free(HEAP32[(HEAP32[12936] | 0) + 160 >> 2] | 0);
 i2 = HEAP32[12936] | 0;
 HEAP32[i2 + 160 >> 2] = _malloc(Math_imul((HEAP32[i2 + 156 >> 2] | 0) + 4 | 0, HEAP32[i2 + 152 >> 2] | 0) | 0) | 0;
 i2 = HEAP32[12936] | 0;
 _backconvert(0, 0, HEAP32[i2 + 56 >> 2] | 0, HEAP32[i2 + 60 >> 2] | 0);
 HEAP32[HEAP32[22682] >> 2] = 120;
 HEAP32[34] = 0;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _draw();
 if (___async) {
  HEAP32[i2 >> 2] = 104;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i2 >> 2] = 104;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _memcpy(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 if ((i3 | 0) >= 4096) return _emscripten_memcpy_big(i1 | 0, i2 | 0, i3 | 0) | 0;
 i4 = i1 | 0;
 if ((i1 & 3) == (i2 & 3)) {
  while (i1 & 3) {
   if ((i3 | 0) == 0) return i4 | 0;
   HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
   i1 = i1 + 1 | 0;
   i2 = i2 + 1 | 0;
   i3 = i3 - 1 | 0;
  }
  while ((i3 | 0) >= 4) {
   HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
   i1 = i1 + 4 | 0;
   i2 = i2 + 4 | 0;
   i3 = i3 - 4 | 0;
  }
 }
 while ((i3 | 0) > 0) {
  HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
  i1 = i1 + 1 | 0;
  i2 = i2 + 1 | 0;
  i3 = i3 - 1 | 0;
 }
 return i4 | 0;
}
function _aa_getkey(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 while (1) {
  i4 = _emscripten_alloc_async_context(12) | 0;
  HEAP32[___async_cur_frame + 4 >> 2] = i3;
  i5 = _aa_getevent(i1, i2) | 0;
  if (___async) {
   i6 = 3;
   break;
  }
  _emscripten_free_async_context(i4 | 0);
  if (!((i5 & -2 | 0) == 258 | (i5 | 0) > 65535)) {
   i6 = 5;
   break;
  }
 }
 if ((i6 | 0) == 3) {
  HEAP32[i4 >> 2] = 290;
  HEAP32[i4 + 4 >> 2] = i1;
  HEAP32[i4 + 8 >> 2] = i2;
  i3 = STACKTOP;
  STACKTOP = i3;
  return 0;
 } else if ((i6 | 0) == 5) {
  STACKTOP = i3;
  return i5 | 0;
 }
 return 0;
}
function _tl_add_timer(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 i4 = i2 + 32 | 0;
 if ((HEAP32[i4 >> 2] | 0) == 0) {
  i5 = i2 + 24 | 0;
  i6 = i2 + 28 | 0;
 } else {
  i7 = i2 + 24 | 0;
  i8 = i2 + 28 | 0;
  HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = HEAP32[i7 >> 2];
  i9 = HEAP32[i7 >> 2] | 0;
  if ((i9 | 0) != 0) {
   HEAP32[i9 + 28 >> 2] = HEAP32[i8 >> 2];
  }
  HEAP32[i4 >> 2] = 0;
  i5 = i7;
  i6 = i8;
 }
 HEAP32[i6 >> 2] = i1;
 i6 = i1 + 24 | 0;
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i4 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 STACKTOP = i3;
 return;
}
function _set_formula(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 60 >> 2] = 289920 + (i2 * 296 | 0);
 HEAP32[i1 + 92 >> 2] = HEAP32[289968 + (i2 * 296 | 0) >> 2];
 HEAPF64[i1 >> 3] = +HEAPF64[289976 + (i2 * 296 | 0) >> 3];
 HEAPF64[i1 + 8 >> 3] = +HEAPF64[289984 + (i2 * 296 | 0) >> 3];
 HEAPF64[i1 + 1208 >> 3] = +HEAPF64[289960 + (i2 * 296 | 0) >> 3];
 HEAPF64[i1 + 1192 >> 3] = +HEAPF64[289944 + (i2 * 296 | 0) >> 3];
 HEAPF64[i1 + 1200 >> 3] = +HEAPF64[289952 + (i2 * 296 | 0) >> 3];
 HEAPF64[i1 + 1184 >> 3] = +HEAPF64[289936 + (i2 * 296 | 0) >> 3];
 _init_tables(i1);
 STACKTOP = i3;
 return;
}
function _aa_initkbd(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 i5 = HEAP32[i2 + 12 >> 2] | 0;
 i6 = _emscripten_alloc_async_context(12) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i4;
 i7 = FUNCTION_TABLE_iii[i5 & 3](i1, i3) | 0;
 if (___async) {
  HEAP32[i6 >> 2] = 281;
  HEAP32[i6 + 4 >> 2] = i1;
  HEAP32[i6 + 8 >> 2] = i2;
  i4 = STACKTOP;
  STACKTOP = i4;
  return 0;
 }
 _emscripten_free_async_context(i6 | 0);
 if ((i7 | 0) == 0) {
  i8 = 0;
  STACKTOP = i4;
  return i8 | 0;
 }
 HEAP32[i1 + 4 >> 2] = i2;
 i8 = 1;
 STACKTOP = i4;
 return i8 | 0;
}
function _addprices(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0;
 i3 = STACKTOP;
 if (!(i1 >>> 0 < i2 >>> 0)) {
  STACKTOP = i3;
  return;
 }
 i4 = i2;
 i5 = i1;
 do {
  i1 = ((i4 - i5 | 0) / 40 | 0) >> 1;
  i6 = i5 + (i1 * 40 | 0) | 0;
  i7 = i5 + (i1 * 40 | 0) + 8 | 0;
  d8 = (+HEAPF64[i2 >> 3] - +HEAPF64[i6 >> 3]) * +HEAPF64[i7 >> 3];
  HEAPF64[i7 >> 3] = d8;
  if (!((HEAP32[i5 + (i1 * 40 | 0) + 28 >> 2] | 0) == -1)) {
   HEAPF64[i7 >> 3] = d8 * .5;
  }
  _addprices(i5, i6);
  i5 = i5 + ((i1 + 1 | 0) * 40 | 0) | 0;
 } while (i5 >>> 0 < i2 >>> 0);
 STACKTOP = i3;
 return;
}
function _drawwait4() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 _memset(HEAP32[i2 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i2 + 156 >> 2] | 0, HEAP32[i2 + 152 >> 2] | 0) | 0) | 0;
 i2 = HEAP32[(HEAP32[12936] | 0) + 152 >> 2] | 0;
 _centerprint(~~(+((i2 | 0) / 4 | 0 | 0) - +(i2 | 0) * +HEAPF64[28]), ~~+HEAPF64[30], +HEAPF64[29] * .5 + 1.1, 255, 592, 0);
 i2 = HEAP32[12936] | 0;
 i3 = HEAP32[i2 + 152 >> 2] | 0;
 _centerprint(~~(+((i3 * 3 | 0) / 4 | 0 | 0) + +(i3 | 0) * +HEAPF64[28]), ~~(+(HEAP32[i2 + 156 >> 2] | 0) - +HEAPF64[30]), +HEAPF64[29] * .5 + 1.1, 255, 592, 0);
 STACKTOP = i1;
 return;
}
function _makepos2(i1) {
 i1 = i1 | 0;
 var i2 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, i7 = 0, d8 = 0.0, d9 = 0.0;
 i2 = STACKTOP;
 if ((i1 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 d3 = +((HEAP32[(HEAP32[12936] | 0) + 156 >> 2] | 0) / 2 | 0 | 0);
 d4 = +HEAPF64[19];
 d5 = +HEAPF64[28];
 d6 = +HEAPF64[30];
 i7 = 0;
 d8 = +HEAPF64[29];
 do {
  d4 = ((d3 - d6) / 60.0 + d4) * .95;
  d6 = d6 + d4;
  d9 = d8 + -.2;
  d8 = !(d9 <= 2.0) ? d9 : .1;
  d5 = d5 + .08;
  i7 = i7 + 1 | 0;
 } while ((i7 | 0) != (i1 | 0));
 HEAPF64[30] = d6;
 HEAPF64[19] = d4;
 HEAPF64[29] = d8;
 HEAPF64[28] = d5;
 STACKTOP = i2;
 return;
}
function ___divdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = i2 >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i6 = ((i2 | 0) < 0 ? -1 : 0) >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i7 = i4 >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i8 = ((i4 | 0) < 0 ? -1 : 0) >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i9 = _i64Subtract(i5 ^ i1, i6 ^ i2, i5, i6) | 0;
 i2 = tempRet0;
 i1 = i7 ^ i5;
 i5 = i8 ^ i6;
 i6 = _i64Subtract((___udivmoddi4(i9, i2, _i64Subtract(i7 ^ i3, i8 ^ i4, i7, i8) | 0, tempRet0, 0) | 0) ^ i1, tempRet0 ^ i5, i1, i5) | 0;
 return i6 | 0;
}
function _message(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, d5 = 0.0, d6 = 0.0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 i4 = (HEAP32[68188] | 0) - i2 | 0;
 if (!((i4 + -1 | 0) >>> 0 < 2499999)) {
  STACKTOP = i3;
  return;
 }
 d5 = +(i4 | 0) * 3.141592653589793 / 25.0e5 * 2.0;
 d6 = (+Math_cos(+d5) + 1.0) * 5.0 + 2.0;
 i2 = HEAP32[12936] | 0;
 i7 = HEAP32[i2 + 156 >> 2] | 0;
 if (d6 <= 0.0) {
  STACKTOP = i3;
  return;
 }
 i8 = i7 - ((Math_imul(i7, i4) | 0) / 25e5 | 0) | 0;
 _centerprint((HEAP32[i2 + 152 >> 2] | 0) / 2 | 0, i8, d6, ~~(+Math_sin(+(d5 * .5)) * 255.0), i1, 0);
 STACKTOP = i3;
 return;
}
function _vezen__async_cb71(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i1 = HEAP32[12936] | 0;
 _memset(HEAP32[i1 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i1 + 156 >> 2] | 0, HEAP32[i1 + 152 >> 2] | 0) | 0) | 0;
 _dispimg(i3, HEAP32[68184] | 0);
 i1 = HEAP32[68184] | 0;
 if ((i1 | 0) != 0) {
  _dispimg(i3, i1);
 }
 i1 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(-60, 13, 1, 285714);
 if (___async) {
  HEAP32[i1 >> 2] = 29;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i1 >> 2] = 29;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _strobikend() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(-60, 13, 1, 285714);
 if (___async) {
  HEAP32[i2 >> 2] = 14;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 _emscripten_free_async_context(i2 | 0);
 HEAP32[HEAP32[22682] >> 2] = 0;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _draw();
 if (___async) {
  HEAP32[i2 >> 2] = 15;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else {
  _emscripten_free_async_context(i2 | 0);
  STACKTOP = i1;
  return;
 }
}
function _vezen__async_cb73(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = HEAP32[i1 + 12 >> 2] | 0;
 i1 = HEAP32[12936] | 0;
 _memset(HEAP32[i1 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i1 + 156 >> 2] | 0, HEAP32[i1 + 152 >> 2] | 0) | 0) | 0;
 _dispimg(i5, HEAP32[68184] | 0);
 i5 = _emscripten_realloc_async_context(12) | 0;
 _timestuff(-60, 13, 1, 285714);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i5 >> 2] = 21;
 HEAP32[i5 + 4 >> 2] = i3;
 HEAP32[i5 + 8 >> 2] = i4;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _tl_create_timer() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 i2 = _malloc(36) | 0;
 if ((i2 | 0) == 0) {
  i3 = 0;
  STACKTOP = i1;
  return i3 | 0;
 }
 HEAP32[i2 + 8 >> 2] = -1;
 i4 = i2 + 16 | 0;
 HEAP32[i4 + 0 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 16 >> 2] = 0;
 do {
  _gettimeofday(56, 64) | 0;
 } while ((HEAP32[60 >> 2] | 0) > 999999);
 i4 = 56;
 i5 = HEAP32[i4 + 4 >> 2] | 0;
 i6 = i2;
 HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i6 + 4 >> 2] = i5;
 i3 = i2;
 STACKTOP = i1;
 return i3 | 0;
}
function _aa_hidecursor(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = i1 + 192 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = i4 + -1;
 if ((i4 | 0) != 0) {
  STACKTOP = i2;
  return;
 }
 i4 = HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] | 0;
 if ((i4 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i2;
 FUNCTION_TABLE_vii[i4 & 3](i1, 0);
 if (___async) {
  HEAP32[i3 >> 2] = 302;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 STACKTOP = i2;
 return;
}
function _calculateslow__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 do {
  if (((HEAP32[52] | 0) % 3 | 0 | 0) != 0) {
   i1 = ((_rand() | 0) & 2 | 0) == 0;
   i4 = _rand() | 0;
   if (i1) {
    i5 = ((i4 | 0) % 10 | 0) + 48 | 0;
    break;
   } else {
    i5 = ((i4 | 0) % 6 | 0) + 65 | 0;
    break;
   }
  } else {
   i5 = 32;
  }
 } while (0);
 HEAP8[i3 >> 0] = i5;
 HEAP8[i3 + 1 >> 0] = 0;
 _aa_puts(HEAP32[12936] | 0, (HEAP32[52] | 0) + -1 | 0, HEAP32[50] | 0, 0, i3);
 STACKTOP = i2;
 return;
}
function ___towrite(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i3 = i1 + 74 | 0;
 i4 = HEAP8[i3 >> 0] | 0;
 HEAP8[i3 >> 0] = i4 + 255 | i4;
 i4 = HEAP32[i1 >> 2] | 0;
 if ((i4 & 8 | 0) == 0) {
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  i3 = HEAP32[i1 + 44 >> 2] | 0;
  HEAP32[i1 + 28 >> 2] = i3;
  HEAP32[i1 + 20 >> 2] = i3;
  HEAP32[i1 + 16 >> 2] = i3 + (HEAP32[i1 + 48 >> 2] | 0);
  i5 = 0;
  STACKTOP = i2;
  return i5 | 0;
 } else {
  HEAP32[i1 >> 2] = i4 | 32;
  i5 = -1;
  STACKTOP = i2;
  return i5 | 0;
 }
 return 0;
}
function _scene6__async_cb31(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, d5 = 0.0, i6 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 _clean_autopilot();
 HEAP32[68728] = HEAP32[68728] ^ 1;
 d5 = +HEAPF64[34365] * 5.0;
 HEAPF64[34365] = d5;
 HEAPF64[34366] = -d5;
 i1 = HEAP32[12] | 0;
 i6 = _emscripten_realloc_async_context(12) | 0;
 _tl_process_group(i1) | 0;
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i6 >> 2] = 186;
 HEAP32[i6 + 4 >> 2] = i3;
 HEAP32[i6 + 8 >> 2] = i4;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _aa_getfirst(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 >> 2] | 0;
 if ((i3 | 0) == 0) {
  i4 = 0;
  STACKTOP = i2;
  return i4 | 0;
 }
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] = HEAP32[i5 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = HEAP32[i6 >> 2];
 if ((HEAP32[i1 >> 2] | 0) == (i3 | 0)) {
  i5 = HEAP32[i6 >> 2] | 0;
  HEAP32[i1 >> 2] = (i5 | 0) == (i3 | 0) ? 0 : i5;
 }
 i5 = HEAP32[i3 >> 2] | 0;
 _free(i3);
 i4 = i5;
 STACKTOP = i2;
 return i4 | 0;
}
function _scene8__async_cb94(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[44914] = HEAP32[44916];
 HEAP32[44920] = HEAP32[44918];
 HEAP32[44924] = HEAP32[44922];
 HEAP32[44932] = HEAP32[44928];
 HEAP32[44930] = HEAP32[44926];
 HEAP32[44922] = 400;
 HEAP32[44928] = 600;
 HEAP32[44926] = 600;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(0, 0, 1, 2e6);
 if (___async) {
  HEAP32[i2 >> 2] = 115;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i2 >> 2] = 115;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _memset(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = i1 + i3 | 0;
 if ((i3 | 0) >= 20) {
  i2 = i2 & 255;
  i5 = i1 & 3;
  i6 = i2 | i2 << 8 | i2 << 16 | i2 << 24;
  i7 = i4 & ~3;
  if (i5) {
   i5 = i1 + 4 - i5 | 0;
   while ((i1 | 0) < (i5 | 0)) {
    HEAP8[i1 >> 0] = i2;
    i1 = i1 + 1 | 0;
   }
  }
  while ((i1 | 0) < (i7 | 0)) {
   HEAP32[i1 >> 2] = i6;
   i1 = i1 + 4 | 0;
  }
 }
 while ((i1 | 0) < (i4 | 0)) {
  HEAP8[i1 >> 0] = i2;
  i1 = i1 + 1 | 0;
 }
 return i1 - i3 | 0;
}
function _aa_flush__async_cb56(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 i4 = HEAP32[i1 + 12 >> 2] | 0;
 i5 = HEAP32[i1 + 16 >> 2] | 0;
 i6 = HEAP32[(HEAP32[HEAP32[i1 + 4 >> 2] >> 2] | 0) + 32 >> 2] | 0;
 i1 = _emscripten_realloc_async_context(16) | 0;
 FUNCTION_TABLE_vi[i6 & 511](i3);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 278;
 HEAP32[i1 + 4 >> 2] = i4;
 HEAP32[i1 + 8 >> 2] = i5;
 HEAP32[i1 + 12 >> 2] = i3;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _strcmp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 i4 = HEAP8[i1 >> 0] | 0;
 i5 = HEAP8[i2 >> 0] | 0;
 if (i4 << 24 >> 24 == 0 ? 1 : i4 << 24 >> 24 != i5 << 24 >> 24) {
  i6 = i4;
  i7 = i5;
 } else {
  i5 = i1;
  i1 = i2;
  do {
   i5 = i5 + 1 | 0;
   i1 = i1 + 1 | 0;
   i2 = HEAP8[i5 >> 0] | 0;
   i4 = HEAP8[i1 >> 0] | 0;
  } while (!(i2 << 24 >> 24 == 0 ? 1 : i2 << 24 >> 24 != i4 << 24 >> 24));
  i6 = i2;
  i7 = i4;
 }
 STACKTOP = i3;
 return (i6 & 255) - (i7 & 255) | 0;
}
function _vezen__async_cb72(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i1 = HEAP32[12936] | 0;
 _memset(HEAP32[i1 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i1 + 156 >> 2] | 0, HEAP32[i1 + 152 >> 2] | 0) | 0) | 0;
 _dispimg(i4, HEAP32[68184] | 0);
 i4 = _emscripten_realloc_async_context(8) | 0;
 _timestuff(-60, 13, 1, 285714);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i4 >> 2] = 25;
 HEAP32[i4 + 4 >> 2] = i3;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _aa_remove(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 if ((i1 | 0) >= 0 ? (i5 = HEAP32[i2 >> 2] | 0, (i5 | 0) > (i1 | 0)) : 0) {
  i6 = i5 + -1 | 0;
  if ((i6 | 0) > (i1 | 0)) {
   i5 = i1;
   do {
    i1 = i5;
    i5 = i5 + 1 | 0;
    HEAP32[i3 + (i1 << 2) >> 2] = HEAP32[i3 + (i5 << 2) >> 2];
   } while ((i5 | 0) < (i6 | 0));
  }
  HEAP32[i3 + (i6 << 2) >> 2] = 0;
  HEAP32[i2 >> 2] = i6;
  STACKTOP = i4;
  return;
 }
 _puts(526768) | 0;
 STACKTOP = i4;
 return;
}
function _drawprujezd(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 i3 = STACKTOP;
 i4 = HEAP32[12936] | 0;
 i5 = HEAP32[i4 + 156 >> 2] | 0;
 d6 = +((HEAP32[68188] | 0) - i2 | 0);
 d7 = +((i5 | 0) / 3 | 0 | 0) + +((i5 | 0) / 4 | 0 | 0) * +Math_cos(+(d6 / 2.0e5));
 d8 = +(HEAP32[i4 + 152 >> 2] | 0);
 d9 = d8 * .75 * 2.0 / 3.0 / 3.0;
 _print(~~(d7 + +(~~(d8 - d6 * d9 / 2.0e5) | 0)), ~~((+(i5 | 0) - d7) * .5), d9, ~~d7, HEAP32[70] | 0, 255, i1);
 STACKTOP = i3;
 return;
}
function _scene10__async_cb222(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[31696] = 270;
 HEAP32[31694] = 0;
 HEAP32[31692] = 180;
 HEAPF32[31698] = 3.0;
 HEAP32[31688] = -40;
 HEAP32[31710] = 450;
 HEAP32[31708] = 0;
 HEAP32[31706] = 180;
 HEAPF32[31712] = 3.0;
 HEAP32[31702] = -40;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _do3d(4e6);
 if (___async) {
  HEAP32[i2 >> 2] = 83;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i2 >> 2] = 83;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene10__async_cb221(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAPF32[226] = 3.0;
 HEAP32[12950] = 90;
 HEAP32[22676] = 0;
 HEAP32[22678] = 180;
 _disp3d();
 i2 = HEAP32[12936] | 0;
 _aa_render(i2, HEAP32[22682] | 0, 0, 0, HEAP32[i2 + 56 >> 2] | 0, HEAP32[i2 + 60 >> 2] | 0);
 i2 = _emscripten_realloc_async_context(4) | 0;
 _strobikend();
 if (___async) {
  HEAP32[i2 >> 2] = 73;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i2 >> 2] = 73;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _mydraw1184() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 if ((HEAP32[68848] | 0) != 1) {
  HEAP32[HEAP32[22682] >> 2] = 0;
  _draw_starfield();
  STACKTOP = i1;
  return;
 }
 i2 = HEAP32[68188] | 0;
 i3 = HEAP32[68196] | 0;
 if ((i2 | 0) < (i3 | 0)) {
  i4 = HEAP32[68194] | 0;
  HEAP32[HEAP32[22682] >> 2] = (((i2 - i4 | 0) * 255 | 0) / (i3 - i4 | 0) | 0) + -255;
  _draw_starfield();
  STACKTOP = i1;
  return;
 } else {
  HEAP32[HEAP32[22682] >> 2] = 0;
  _draw_starfield();
  STACKTOP = i1;
  return;
 }
}
function _calloc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 if ((i1 | 0) != 0) {
  i4 = Math_imul(i2, i1) | 0;
  if ((i2 | i1) >>> 0 > 65535) {
   i5 = ((i4 >>> 0) / (i1 >>> 0) | 0 | 0) == (i2 | 0) ? i4 : -1;
  } else {
   i5 = i4;
  }
 } else {
  i5 = 0;
 }
 i4 = _malloc(i5) | 0;
 if ((i4 | 0) == 0) {
  STACKTOP = i3;
  return i4 | 0;
 }
 if ((HEAP32[i4 + -4 >> 2] & 3 | 0) == 0) {
  STACKTOP = i3;
  return i4 | 0;
 }
 _memset(i4 | 0, 0, i5 | 0) | 0;
 STACKTOP = i3;
 return i4 | 0;
}
function _credits__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[68188] | 0;
 HEAP32[68196] = i2;
 HEAP32[68194] = i2;
 _play();
 i2 = HEAP32[22682] | 0;
 HEAP32[i2 >> 2] = -255;
 HEAP32[34] = 28;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[68848] = 1;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(-60, 205, 1, 6e6);
 if (___async) {
  HEAP32[i2 >> 2] = 206;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i2 >> 2] = 206;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene8__async_cb92(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[44920] = HEAP32[44918];
 HEAP32[44924] = HEAP32[44922];
 HEAP32[44932] = HEAP32[44928];
 HEAP32[44930] = HEAP32[44926];
 HEAP32[44908] = 255;
 HEAP32[44928] = 120;
 HEAP32[44926] = 120;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(0, 0, 1, 2e5);
 if (___async) {
  HEAP32[i2 >> 2] = 117;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i2 >> 2] = 117;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene8__async_cb95(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[44920] = HEAP32[44918];
 HEAP32[44924] = HEAP32[44922];
 HEAP32[44932] = HEAP32[44928];
 HEAP32[44930] = HEAP32[44926];
 HEAP32[44916] = 20;
 HEAP32[44928] = 300;
 HEAP32[44926] = 300;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(0, 0, 1, 1e6);
 if (___async) {
  HEAP32[i2 >> 2] = 114;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i2 >> 2] = 114;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _makepos1(i1) {
 i1 = i1 | 0;
 var i2 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, i7 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 d3 = +((HEAP32[(HEAP32[12936] | 0) + 156 >> 2] | 0) / 2 | 0 | 0);
 d4 = +HEAPF64[19];
 d5 = +HEAPF64[29];
 d6 = +HEAPF64[30];
 i7 = 0;
 do {
  d4 = ((d3 - d6) / 60.0 + d4) * .95;
  d6 = d6 + d4;
  d5 = d5 + .2;
  i7 = i7 + 1 | 0;
 } while ((i7 | 0) != (i1 | 0));
 HEAPF64[30] = d6;
 HEAPF64[19] = d4;
 HEAPF64[29] = d5;
 STACKTOP = i2;
 return;
}
function _bbwait__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = (HEAP32[68194] | 0) + (HEAP32[i1 + 4 >> 2] | 0) | 0;
 HEAP32[68196] = i3;
 i1 = i3 - (HEAP32[68188] | 0) | 0;
 if ((i1 | 0) <= 0) {
  HEAP32[68194] = i3;
  STACKTOP = i2;
  return;
 }
 i3 = _emscripten_realloc_async_context(4) | 0;
 _tl_sleep(i1);
 if (___async) {
  HEAP32[i3 >> 2] = 128;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i3 >> 2] = 128;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _displogo(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[12936] | 0;
 i4 = ((HEAP32[i3 + 56 >> 2] | 0) / 2 | 0) + -9 | 0;
 _aa_puts(i3, i4, i1, 0, 523520);
 _aa_puts(HEAP32[12936] | 0, i4, i1 + 1 | 0, 0, 523536);
 _aa_puts(HEAP32[12936] | 0, i4, i1 + 2 | 0, 0, 523552);
 _aa_puts(HEAP32[12936] | 0, i4, i1 + 3 | 0, 0, 523456);
 _aa_puts(HEAP32[12936] | 0, i4, i1 + 4 | 0, 0, 523568);
 _aa_puts(HEAP32[12936] | 0, i4, i1 + 5 | 0, 0, 523592);
 STACKTOP = i2;
 return;
}
function _aa_uninitkbd__async_cb91(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i4 + 224 >> 2] = 0;
 i5 = HEAP32[i1 + 16 >> 2] | 0;
 i1 = _emscripten_realloc_async_context(12) | 0;
 FUNCTION_TABLE_vi[i5 & 511](i4);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 293;
 HEAP32[i1 + 4 >> 2] = i4;
 HEAP32[i1 + 8 >> 2] = i3;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _aa_initkbd__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 i5 = HEAP32[i1 + 8 >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[___async_retval >> 2];
 if ((HEAP32[i3 >> 2] | 0) == 0) {
  i6 = 0;
  i7 = ___async_retval;
  HEAP32[i7 >> 2] = i6;
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 + 4 >> 2] = i5;
 i6 = 1;
 i7 = ___async_retval;
 HEAP32[i7 >> 2] = i6;
 STACKTOP = i2;
 return;
}
function _scene8__async_cb93(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[44920] = HEAP32[44918];
 HEAP32[44924] = HEAP32[44922];
 HEAP32[44932] = HEAP32[44928];
 HEAP32[44930] = HEAP32[44926];
 HEAP32[44928] = 200;
 HEAP32[44926] = 200;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(0, 0, 1, 1e6);
 if (___async) {
  HEAP32[i2 >> 2] = 116;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i2 >> 2] = 116;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _aa_close__async_cb231(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 _aa_invalidate(i3);
 i1 = HEAP32[i3 + 160 >> 2] | 0;
 if ((i1 | 0) != 0) {
  _free(i1);
 }
 i1 = HEAP32[i3 + 164 >> 2] | 0;
 if ((i1 | 0) != 0) {
  _free(i1);
 }
 i1 = HEAP32[i3 + 168 >> 2] | 0;
 if ((i1 | 0) != 0) {
  _free(i1);
 }
 i1 = HEAP32[i3 + 216 >> 2] | 0;
 if ((i1 | 0) == 0) {
  _free(i3);
  STACKTOP = i2;
  return;
 }
 _free(i1);
 _free(i3);
 STACKTOP = i2;
 return;
}
function _bbflushwait(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 if ((HEAP32[68190] | 0) != 0) {
  STACKTOP = i2;
  return;
 }
 if (((HEAP32[68194] | 0) + i1 - (HEAP32[68188] | 0) | 0) > 0) {
  _aa_flush(HEAP32[12936] | 0);
 }
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i2;
 _bbwait(i1);
 if (___async) {
  HEAP32[i3 >> 2] = 129;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 _emscripten_free_async_context(i3 | 0);
 STACKTOP = i2;
 return;
}
function _drawwait2() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[54] | 0;
 i3 = HEAP32[12936] | 0;
 _centerprint((HEAP32[i3 + 152 >> 2] | 0) / 2 | 0, (HEAP32[i3 + 156 >> 2] | 0) / 3 | 0, 2.0, (i2 | 0) < 0 ? 0 : i2, 600, 0);
 i2 = (HEAP32[54] | 0) + 255 | 0;
 i3 = (i2 | 0) < 0 ? 0 : i2;
 i2 = HEAP32[12936] | 0;
 _centerprinth((HEAP32[i2 + 152 >> 2] | 0) / 2 | 0, (HEAP32[i2 + 156 >> 2] << 1 | 0) / 3 | 0, 8.0, (i3 | 0) > 255 ? 255 : i3, 608, 3);
 STACKTOP = i1;
 return;
}
function _load_song(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 HEAP32[68190] = 0;
 do {
  if ((HEAP32[18] | 0) != 0) {
   _write(0, 80, 1) | 0;
   HEAP32[18] = 1;
   i3 = HEAP8[i1 + 2 >> 0] | 0;
   if ((i3 | 0) == 46) {
    _write(0, 88, 1) | 0;
    break;
   } else if ((i3 | 0) == 50) {
    _write(0, 96, 1) | 0;
    break;
   } else if ((i3 | 0) == 51) {
    _write(0, 104, 1) | 0;
    break;
   } else {
    break;
   }
  }
 } while (0);
 STACKTOP = i2;
 return 0;
}
function _credits2__async_cb121(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 _memset(HEAP32[i2 + 164 >> 2] | 0, 32, Math_imul(HEAP32[i2 + 60 >> 2] | 0, HEAP32[i2 + 56 >> 2] | 0) | 0) | 0;
 i2 = HEAP32[12936] | 0;
 _memset(HEAP32[i2 + 168 >> 2] | 0, 0, Math_imul(HEAP32[i2 + 60 >> 2] | 0, HEAP32[i2 + 56 >> 2] | 0) | 0) | 0;
 HEAP32[34] = 0;
 _aa_flush(HEAP32[12936] | 0);
 _free(HEAP32[130870] | 0);
 _free(HEAP32[130872] | 0);
 STACKTOP = i1;
 return;
}
function _aa_getrenderparams() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 i2 = _calloc(1, 24) | 0;
 if ((i2 | 0) == 0) {
  i3 = 0;
  STACKTOP = i1;
  return i3 | 0;
 }
 HEAP32[i2 + 0 >> 2] = HEAP32[526864 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[526868 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[526872 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[526876 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[526880 >> 2];
 HEAP32[i2 + 20 >> 2] = HEAP32[526884 >> 2];
 i3 = i2;
 STACKTOP = i1;
 return i3 | 0;
}
function _scene8__async_cb96(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[44928] = 200;
 HEAP32[44926] = 200;
 HEAP32[44920] = HEAP32[44918];
 HEAP32[44924] = HEAP32[44922];
 HEAP32[44918] = 750;
 HEAP32[44922] = 300;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(0, 0, 1, 3e6);
 if (___async) {
  HEAP32[i2 >> 2] = 113;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i2 >> 2] = 113;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _credits2__async_cb117(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 _aa_puts(i2, ((HEAP32[i2 + 56 >> 2] | 0) / 2 | 0) + -9 | 0, (((HEAP32[i2 + 60 >> 2] | 0) + -6 | 0) / 2 | 0) + 3 | 0, 0, 523456);
 i2 = _emscripten_realloc_async_context(4) | 0;
 _bbflushwait(1e5);
 if (___async) {
  HEAP32[i2 >> 2] = 248;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i2 >> 2] = 248;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _credits2__async_cb116(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 _aa_puts(i2, ((HEAP32[i2 + 56 >> 2] | 0) / 2 | 0) + -9 | 0, (((HEAP32[i2 + 60 >> 2] | 0) + -6 | 0) / 2 | 0) + 3 | 0, 2, 523456);
 i2 = _emscripten_realloc_async_context(4) | 0;
 _bbflushwait(1e5);
 if (___async) {
  HEAP32[i2 >> 2] = 249;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i2 >> 2] = 249;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _credits2__async_cb115(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 _aa_puts(i2, ((HEAP32[i2 + 56 >> 2] | 0) / 2 | 0) + -9 | 0, (((HEAP32[i2 + 60 >> 2] | 0) + -6 | 0) / 2 | 0) + 3 | 0, 0, 523456);
 i2 = _emscripten_realloc_async_context(4) | 0;
 _bbflushwait(1e5);
 if (___async) {
  HEAP32[i2 >> 2] = 250;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i2 >> 2] = 250;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _vezen__async_cb70(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = HEAP32[i1 + 12 >> 2] | 0;
 HEAP32[HEAP32[22682] >> 2] = 0;
 i1 = _emscripten_realloc_async_context(16) | 0;
 _draw();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 18;
 HEAP32[i1 + 4 >> 2] = i3;
 HEAP32[i1 + 8 >> 2] = i4;
 HEAP32[i1 + 12 >> 2] = i5;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _devezen2() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 _backconvert(0, HEAP32[130914] | 0, HEAP32[i2 + 56 >> 2] | 0, HEAP32[i2 + 60 >> 2] | 0);
 HEAP32[34] = 35;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _timestuff(0, 0, 1, 1e6);
 if (___async) {
  HEAP32[i2 >> 2] = 266;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else {
  _emscripten_free_async_context(i2 | 0);
  STACKTOP = i1;
  return;
 }
}
function _emscripten_async_resume() {
 ___async = 0;
 ___async_unwind = 1;
 while (1) {
  if (!___async_cur_frame) return;
  dynCall_vi(HEAP32[___async_cur_frame + 8 >> 2] | 0, ___async_cur_frame + 8 | 0);
  if (___async) return;
  if (!___async_unwind) {
   ___async_unwind = 1;
   continue;
  }
  stackRestore(HEAP32[___async_cur_frame + 4 >> 2] | 0);
  _emscripten_async_stack_restore(___async_cur_frame);
  ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0;
 }
}
function _scene10__async_cb219(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[12950] = 180;
 _disp3d();
 i2 = HEAP32[12936] | 0;
 _aa_render(i2, HEAP32[22682] | 0, 0, 0, HEAP32[i2 + 56 >> 2] | 0, HEAP32[i2 + 60 >> 2] | 0);
 i2 = _emscripten_realloc_async_context(4) | 0;
 _strobikend();
 if (___async) {
  HEAP32[i2 >> 2] = 79;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i2 >> 2] = 79;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene10__async_cb218(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[12950] = 270;
 _disp3d();
 i2 = HEAP32[12936] | 0;
 _aa_render(i2, HEAP32[22682] | 0, 0, 0, HEAP32[i2 + 56 >> 2] | 0, HEAP32[i2 + 60 >> 2] | 0);
 i2 = _emscripten_realloc_async_context(4) | 0;
 _strobikend();
 if (___async) {
  HEAP32[i2 >> 2] = 82;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i2 >> 2] = 82;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _credits2__async_cb123(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[34] = 0;
 i2 = HEAP32[12936] | 0;
 _memset(HEAP32[i2 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i2 + 156 >> 2] | 0, HEAP32[i2 + 152 >> 2] | 0) | 0) | 0;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _draw();
 if (___async) {
  HEAP32[i2 >> 2] = 241;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i2 >> 2] = 241;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene10__async_cb220(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[12950] = 0;
 _disp3d();
 i2 = HEAP32[12936] | 0;
 _aa_render(i2, HEAP32[22682] | 0, 0, 0, HEAP32[i2 + 56 >> 2] | 0, HEAP32[i2 + 60 >> 2] | 0);
 i2 = _emscripten_realloc_async_context(4) | 0;
 _strobikend();
 if (___async) {
  HEAP32[i2 >> 2] = 76;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i2 >> 2] = 76;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene7__async_cb126(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[68738] = 0;
 HEAP32[68740] = 1;
 HEAPF64[34371] = 0.0;
 HEAPF64[34372] = 2.0;
 HEAPF64[34373] = -1.0;
 HEAPF64[34374] = -5.0;
 i1 = _emscripten_realloc_async_context(8) | 0;
 _timestuff(0, 0, 27, 2e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 203;
 HEAP32[i1 + 4 >> 2] = i3;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _scene7__async_cb128(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[68738] = 0;
 HEAP32[68740] = 0;
 HEAPF64[34371] = 2.0;
 HEAPF64[34372] = 2.0;
 HEAPF64[34373] = 0.0;
 HEAPF64[34374] = -2.0;
 i1 = _emscripten_realloc_async_context(8) | 0;
 _timestuff(0, 0, 27, 2e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 201;
 HEAP32[i1 + 4 >> 2] = i3;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _scene7__async_cb127(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[68738] = 0;
 HEAP32[68740] = 0;
 HEAPF64[34371] = 0.0;
 HEAPF64[34372] = -2.0;
 HEAPF64[34373] = 0.0;
 HEAPF64[34374] = 2.0;
 i1 = _emscripten_realloc_async_context(8) | 0;
 _timestuff(0, 0, 27, 2e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 202;
 HEAP32[i1 + 4 >> 2] = i3;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _draw__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 _aa_render(i2, HEAP32[22682] | 0, 0, 0, HEAP32[i2 + 152 >> 2] | 0, HEAP32[i2 + 156 >> 2] | 0);
 i2 = HEAP32[12936] | 0;
 i3 = HEAP32[i2 + 56 >> 2] | 0;
 i4 = HEAP32[36] | 0;
 i5 = (i3 - (_strlen(i4 | 0) | 0) | 0) >>> 1;
 _aa_puts(i2, i5, (HEAP32[i2 + 60 >> 2] | 0) / 2 | 0, 5, i4);
 _aa_flush(HEAP32[12936] | 0);
 STACKTOP = i1;
 return;
}
function _credits2__async_cb122(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 _displaytext(i3);
 _aa_flush(HEAP32[12936] | 0);
 i1 = HEAP32[12936] | 0;
 i4 = _emscripten_realloc_async_context(8) | 0;
 i5 = _aa_getkey(i1, 1) | 0;
 if (!___async) {
  HEAP32[___async_retval >> 2] = i5;
  ___async_unwind = 0;
 }
 HEAP32[i4 >> 2] = 254;
 HEAP32[i4 + 4 >> 2] = i3;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function copyTempDouble(i1) {
 i1 = i1 | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[i1 >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[i1 + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[i1 + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[i1 + 3 >> 0];
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[i1 + 4 >> 0];
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[i1 + 5 >> 0];
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[i1 + 6 >> 0];
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[i1 + 7 >> 0];
}
function _mycontrol(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 HEAP32[68200] = 1;
 i3 = HEAP32[68198] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 i4 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i2;
 FUNCTION_TABLE_vi[i3 & 511](i1);
 if (___async) {
  HEAP32[i4 >> 2] = 126;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 }
 _emscripten_free_async_context(i4 | 0);
 STACKTOP = i2;
 return;
}
function _messager__async_cb87(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = HEAP32[i1 + 12 >> 2] | 0;
 i1 = _emscripten_realloc_async_context(16) | 0;
 _bbflushwait(3e4);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 262;
 HEAP32[i1 + 4 >> 2] = i3;
 HEAP32[i1 + 8 >> 2] = i4;
 HEAP32[i1 + 12 >> 2] = i5;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _vezen__async_cb66(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = HEAP32[i1 + 12 >> 2] | 0;
 i1 = _emscripten_realloc_async_context(16) | 0;
 _strobikstart();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 20;
 HEAP32[i1 + 4 >> 2] = i3;
 HEAP32[i1 + 8 >> 2] = i5;
 HEAP32[i1 + 12 >> 2] = i4;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _scene1__async_cb7(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[34] = 0;
 if ((HEAP32[(HEAP32[HEAP32[12936] >> 2] | 0) + 24 >> 2] | 0) != 0) {
  HEAP32[(HEAP32[22682] | 0) + 12 >> 2] = 0;
 }
 i2 = _emscripten_realloc_async_context(4) | 0;
 _strobikstart();
 if (___async) {
  HEAP32[i2 >> 2] = 62;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 }
 ___async_unwind = 0;
 HEAP32[i2 >> 2] = 62;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _vezen__async_cb79(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = HEAP32[i1 + 12 >> 2] | 0;
 i1 = _emscripten_realloc_async_context(16) | 0;
 _bbwait(5e5);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 19;
 HEAP32[i1 + 4 >> 2] = i3;
 HEAP32[i1 + 8 >> 2] = i4;
 HEAP32[i1 + 12 >> 2] = i5;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _makepos(i1) {
 i1 = i1 | 0;
 var i2 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, i6 = 0;
 i2 = STACKTOP;
 if ((i1 | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 d3 = +((HEAP32[(HEAP32[12936] | 0) + 156 >> 2] | 0) / 2 | 0 | 0);
 d4 = +HEAPF64[19];
 d5 = +HEAPF64[30];
 i6 = 0;
 do {
  d4 = ((d3 - d5) / 60.0 + d4) * .95;
  d5 = d5 + d4;
  i6 = i6 + 1 | 0;
 } while ((i6 | 0) != (i1 | 0));
 HEAPF64[30] = d5;
 HEAPF64[19] = d4;
 STACKTOP = i2;
 return;
}
function _drawzoomer(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, d5 = 0.0, i6 = 0;
 i4 = STACKTOP;
 d5 = 1.0e6 / +((HEAP32[68188] | 0) - i2 | 0);
 if (!(d5 > 1.0)) {
  STACKTOP = i4;
  return;
 }
 i2 = ~~((d5 + -1.0) * 255.0);
 i6 = HEAP32[12936] | 0;
 _centerprint((HEAP32[i6 + 152 >> 2] | 0) / 2 | 0, (Math_imul(HEAP32[i6 + 156 >> 2] | 0, i3) | 0) / 6 | 0, d5, (i2 | 0) > 255 ? 255 : i2, i1, 0);
 STACKTOP = i4;
 return;
}
function _bbupdate__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = HEAP32[___async_retval >> 2];
 switch (HEAP32[i2 >> 2] | 0) {
 case 113:
 case 305:
  {
   HEAP32[68190] = 1;
   HEAP32[68192] = 1;
   break;
  }
 case 304:
 case 83:
 case 115:
  {
   HEAP32[68190] = 1;
   break;
  }
 default:
  {}
 }
 HEAP32[___async_retval >> 2] = HEAP32[i2 >> 2];
 STACKTOP = i1;
 return;
}
function _do3d__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i1 = (HEAP32[31710] | 0) % 360 | 0;
 HEAP32[31710] = i1;
 i2 = (HEAP32[31708] | 0) % 360 | 0;
 HEAP32[31708] = i2;
 i3 = (HEAP32[31706] | 0) % 360 | 0;
 HEAP32[31706] = i3;
 HEAP32[31696] = i1;
 HEAP32[31694] = i2;
 HEAP32[31692] = i3;
 HEAPF32[31698] = +HEAPF32[31712];
 HEAP32[31690] = HEAP32[31704];
 HEAP32[31688] = HEAP32[31702];
 HEAP32[31686] = HEAP32[31700];
 return;
}
function _aa_invalidate(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i3 = i1 + 172 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((i4 | 0) != 0) {
  _free(i4);
 }
 i4 = i1 + 176 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if ((i5 | 0) != 0) {
  _free(i5);
 }
 i5 = i1 + 180 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if ((i1 | 0) != 0) {
  _free(i1);
 }
 HEAP32[i3 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function _incrandom(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[68188] | 0;
 i3 = HEAP32[68196] | 0;
 i4 = HEAP32[68194] | 0;
 if ((i2 | 0) < ((i4 + i3 | 0) / 2 | 0 | 0)) {
  HEAP32[(HEAP32[22682] | 0) + 20 >> 2] = (i2 - i4 << 8 | 0) / (i3 - i4 | 0) | 0;
  STACKTOP = i1;
  return;
 } else {
  HEAP32[(HEAP32[22682] | 0) + 20 >> 2] = (i3 - i2 << 8 | 0) / (i3 - i4 | 0) | 0;
  STACKTOP = i1;
  return;
 }
}
function ___shlim(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 HEAP32[i1 + 104 >> 2] = i2;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = HEAP32[i1 + 4 >> 2] | 0;
 i6 = i4 - i5 | 0;
 HEAP32[i1 + 108 >> 2] = i6;
 if ((i2 | 0) != 0 & (i6 | 0) > (i2 | 0)) {
  HEAP32[i1 + 100 >> 2] = i5 + i2;
  STACKTOP = i3;
  return;
 } else {
  HEAP32[i1 + 100 >> 2] = i4;
  STACKTOP = i3;
  return;
 }
}
function _vezen__async_cb69(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 HEAP32[HEAP32[22682] >> 2] = 0;
 i1 = _emscripten_realloc_async_context(12) | 0;
 _draw();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 22;
 HEAP32[i1 + 4 >> 2] = i3;
 HEAP32[i1 + 8 >> 2] = i4;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function ___muldsi3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = i1 & 65535;
 i4 = i2 & 65535;
 i5 = Math_imul(i4, i3) | 0;
 i6 = i1 >>> 16;
 i1 = (i5 >>> 16) + (Math_imul(i4, i6) | 0) | 0;
 i4 = i2 >>> 16;
 i2 = Math_imul(i4, i3) | 0;
 return (tempRet0 = (i1 >>> 16) + (Math_imul(i4, i6) | 0) + (((i1 & 65535) + i2 | 0) >>> 16) | 0, i1 + i2 << 16 | i5 & 65535 | 0) | 0;
}
function _bb__async_cb202(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 if ((HEAP32[68192] | 0) != 0) {
  _aa_close(HEAP32[12936] | 0);
  HEAP32[___async_retval >> 2] = 0;
  STACKTOP = i1;
  return;
 }
 i2 = _emscripten_realloc_async_context(4) | 0;
 _vezen(475568, 491336, 505592, 523320);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 140;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _bb__async_cb199(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 if ((HEAP32[68192] | 0) != 0) {
  _aa_close(HEAP32[12936] | 0);
  HEAP32[___async_retval >> 2] = 0;
  STACKTOP = i1;
  return;
 }
 i2 = _emscripten_realloc_async_context(4) | 0;
 _vezen(416440, 431904, 448008, 462848);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 145;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _bb__async_cb197(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 if ((HEAP32[68192] | 0) != 0) {
  _aa_close(HEAP32[12936] | 0);
  HEAP32[___async_retval >> 2] = 0;
  STACKTOP = i1;
  return;
 }
 i2 = _emscripten_realloc_async_context(4) | 0;
 _vezen(303520, 317920, 331504, 348552);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 135;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _aa_close__async_cb232(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] | 0;
 i4 = _emscripten_realloc_async_context(8) | 0;
 FUNCTION_TABLE_vi[i1 & 511](i3);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i4 >> 2] = 301;
 HEAP32[i4 + 4 >> 2] = i3;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _scene10__async_cb227(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAPF32[31684] = 2.0;
 HEAP32[31700] = 0;
 HEAP32[31704] = 60;
 HEAP32[31708] = 0;
 HEAP32[31706] = 900;
 HEAPF32[31712] = .10000000149011612;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _do3d(115e5);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 87;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _aa_render(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0;
 i7 = STACKTOP;
 if ((HEAP32[527916 >> 2] | 0) != 255) {
  i8 = 0;
  do {
   HEAP32[526896 + (i8 << 2) >> 2] = i8;
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) != 256);
 }
 _aa_renderpalette(i1, 526896, i2, i3, i4, i5, i6);
 STACKTOP = i7;
 return;
}
function _ui_do_fractal__async_cb181(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i1 = _emscripten_realloc_async_context(12) | 0;
 _bbupdate() | 0;
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 196;
 HEAP32[i1 + 4 >> 2] = i3;
 HEAP32[i1 + 8 >> 2] = i4;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _scene6__async_cb34(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i1 = _emscripten_realloc_async_context(12) | 0;
 _bbupdate() | 0;
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 187;
 HEAP32[i1 + 4 >> 2] = i3;
 HEAP32[i1 + 8 >> 2] = i4;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _aa_showcursor__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i1 = HEAP32[i3 + 184 >> 2] | 0;
 i4 = HEAP32[i3 + 188 >> 2] | 0;
 i5 = _emscripten_realloc_async_context(4) | 0;
 _aa_gotoxy(i3, i1, i4);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i5 >> 2] = 304;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _vezen__async_cb65(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i1 = _emscripten_realloc_async_context(12) | 0;
 _strobikstart();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 24;
 HEAP32[i1 + 4 >> 2] = i3;
 HEAP32[i1 + 8 >> 2] = i4;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function ___uflow(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 if ((HEAP32[i1 + 8 >> 2] | 0) == 0 ? (___toread(i1) | 0) != 0 : 0) {
  i4 = -1;
 } else {
  if ((FUNCTION_TABLE_iiii[HEAP32[i1 + 32 >> 2] & 1](i1, i3, 1) | 0) == 1) {
   i4 = HEAPU8[i3 >> 0] | 0;
  } else {
   i4 = -1;
  }
 }
 STACKTOP = i2;
 return i4 | 0;
}
function _vezen__async_cb78(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i1 = _emscripten_realloc_async_context(12) | 0;
 _bbwait(5e5);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 23;
 HEAP32[i1 + 4 >> 2] = i3;
 HEAP32[i1 + 8 >> 2] = i4;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _drawlepic(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, d4 = 0.0, i5 = 0, d6 = 0.0, d7 = 0.0;
 i2 = STACKTOP;
 i3 = HEAP32[12936] | 0;
 d4 = +(HEAP32[i3 + 156 >> 2] | 0);
 i5 = ~~(+HEAPF32[162] * d4);
 d6 = +(HEAP32[i3 + 152 >> 2] | 0);
 d7 = d6 / +((_strlen(i1 | 0) | 0) >>> 0);
 _print(0, i5, d7, ~~(d4 * +HEAPF32[160]), HEAP32[70] | 0, 255, i1);
 STACKTOP = i2;
 return;
}
function _tl_set_interval(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 i4 = i1 + 8 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i6 = i1 + 12 | 0;
 if ((i5 | 0) > 0 ? (i1 = HEAP32[i6 >> 2] | 0, (i1 | 0) > 0) : 0) {
  i7 = i2 - i5 + i1 | 0;
 } else {
  i7 = i2;
 }
 HEAP32[i6 >> 2] = i7;
 HEAP32[i4 >> 2] = i2;
 STACKTOP = i3;
 return;
}
function _scene5__async_cb162(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[(HEAP32[22682] | 0) + 12 >> 2] = 1;
 HEAP32[68700] = 274808;
 HEAP32[68674] = 274816;
 HEAP32[34] = 18;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(60, 0, 1, 1e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 171;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene5__async_cb158(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[(HEAP32[22682] | 0) + 12 >> 2] = 2;
 HEAP32[68700] = 274832;
 HEAP32[68674] = 274840;
 HEAP32[34] = 19;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(60, 0, 1, 1e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 175;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene5__async_cb154(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[(HEAP32[22682] | 0) + 12 >> 2] = 2;
 HEAP32[68700] = 274856;
 HEAP32[68674] = 274864;
 HEAP32[34] = 20;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(60, 0, 1, 1e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 180;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _bb__async_cb209(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 if ((HEAP32[68192] | 0) != 0) {
  _aa_close(HEAP32[12936] | 0);
  HEAP32[___async_retval >> 2] = 0;
  STACKTOP = i1;
  return;
 }
 i2 = _emscripten_realloc_async_context(4) | 0;
 _credits();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 155;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _bb__async_cb204(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 if ((HEAP32[68192] | 0) != 0) {
  _aa_close(HEAP32[12936] | 0);
  HEAP32[___async_retval >> 2] = 0;
  STACKTOP = i1;
  return;
 }
 i2 = _emscripten_realloc_async_context(4) | 0;
 _scene10();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 151;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _tl_sleep(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i2;
 _emscripten_sleep((i1 | 0) / 1e3 | 0 | 0);
 if (___async) {
  HEAP32[i3 >> 2] = 4;
  i2 = STACKTOP;
  STACKTOP = i2;
  return;
 } else {
  _emscripten_free_async_context(i3 | 0);
  STACKTOP = i2;
  return;
 }
}
function _scene1__async_cb17(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i1 = STACKTOP;
 HEAP32[66] = 800;
 HEAP32[(HEAP32[22682] | 0) + 20 >> 2] = 3620;
 HEAP32[36] = 272;
 i2 = HEAP32[12936] | 0;
 i3 = _emscripten_realloc_async_context(4) | 0;
 _aa_gotoxy(i2, 0, 0);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i3 >> 2] = 44;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _bb__async_cb206(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 if ((HEAP32[68192] | 0) != 0) {
  _aa_close(HEAP32[12936] | 0);
  HEAP32[___async_retval >> 2] = 0;
  STACKTOP = i1;
  return;
 }
 i2 = _emscripten_realloc_async_context(4) | 0;
 _scene7();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 149;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _bb__async_cb205(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 if ((HEAP32[68192] | 0) != 0) {
  _aa_close(HEAP32[12936] | 0);
  HEAP32[___async_retval >> 2] = 0;
  STACKTOP = i1;
  return;
 }
 i2 = _emscripten_realloc_async_context(4) | 0;
 _scene5();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 150;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _sn_write(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 i5 = i1 + 20 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i7 = (HEAP32[i1 + 16 >> 2] | 0) - i6 | 0;
 i1 = i7 >>> 0 > i3 >>> 0 ? i3 : i7;
 _memcpy(i6 | 0, i2 | 0, i1 | 0) | 0;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + i1;
 STACKTOP = i4;
 return i3 | 0;
}
function _messaguj() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 _memset(HEAP32[i2 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i2 + 156 >> 2] | 0, HEAP32[i2 + 152 >> 2] | 0) | 0) | 0;
 _drawzoomer(HEAP32[218] | 0, (HEAP32[68194] | 0) + -65e4 | 0, HEAP8[864] | 0);
 _drawzoomer(HEAP32[212] | 0, HEAP32[68194] | 0, HEAP8[856] | 0);
 STACKTOP = i1;
 return;
}
function _llvm_cttz_i32(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP8[cttz_i8 + (i1 & 255) >> 0] | 0;
 if ((i2 | 0) < 8) return i2 | 0;
 i2 = HEAP8[cttz_i8 + (i1 >> 8 & 255) >> 0] | 0;
 if ((i2 | 0) < 8) return i2 + 8 | 0;
 i2 = HEAP8[cttz_i8 + (i1 >> 16 & 255) >> 0] | 0;
 if ((i2 | 0) < 8) return i2 + 16 | 0;
 return (HEAP8[cttz_i8 + (i1 >>> 24) >> 0] | 0) + 24 | 0;
}
function _llvm_ctlz_i32(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP8[ctlz_i8 + (i1 >>> 24) >> 0] | 0;
 if ((i2 | 0) < 8) return i2 | 0;
 i2 = HEAP8[ctlz_i8 + (i1 >> 16 & 255) >> 0] | 0;
 if ((i2 | 0) < 8) return i2 + 8 | 0;
 i2 = HEAP8[ctlz_i8 + (i1 >> 8 & 255) >> 0] | 0;
 if ((i2 | 0) < 8) return i2 + 16 | 0;
 return (HEAP8[ctlz_i8 + (i1 & 255) >> 0] | 0) + 24 | 0;
}
function _strobikstart__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i1 = HEAP32[22682] | 0;
 HEAP32[i1 >> 2] = 255;
 HEAP32[i1 + 12 >> 2] = i3;
 i3 = _emscripten_realloc_async_context(4) | 0;
 _draw();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i3 >> 2] = 12;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _tl_free_timer(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 if ((HEAP32[i1 + 32 >> 2] | 0) != 0 ? (i3 = i1 + 24 | 0, i4 = i1 + 28 | 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] = HEAP32[i3 >> 2], i5 = HEAP32[i3 >> 2] | 0, (i5 | 0) != 0) : 0) {
  HEAP32[i5 + 28 >> 2] = HEAP32[i4 >> 2];
 }
 _free(i1);
 STACKTOP = i2;
 return;
}
function _credits2__async_cb109(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 _play();
 i1 = _emscripten_realloc_async_context(12) | 0;
 _bbupdate() | 0;
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 260;
 HEAP32[i1 + 4 >> 2] = i3;
 HEAP32[i1 + 8 >> 2] = i3;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _credits2__async_cb108(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 _play();
 i1 = _emscripten_realloc_async_context(12) | 0;
 _bbupdate() | 0;
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 260;
 HEAP32[i1 + 4 >> 2] = i3;
 HEAP32[i1 + 8 >> 2] = i3;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _credits2__async_cb107(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 _play();
 i1 = _emscripten_realloc_async_context(12) | 0;
 _bbupdate() | 0;
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 260;
 HEAP32[i1 + 4 >> 2] = i3;
 HEAP32[i1 + 8 >> 2] = i3;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _scene10__async_cb230(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAPF32[31684] = 3.0;
 HEAPF32[31712] = 2.0;
 HEAP32[31708] = 90;
 HEAP32[31700] = 60;
 HEAP32[31702] = 50;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _do3d(3e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 84;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _ui_do_fractal__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i1 = STACKTOP;
 HEAP32[68842] = _tl_lookup_timer(HEAP32[68734] | 0) | 0;
 _tl_reset_timer(HEAP32[68734] | 0);
 i2 = HEAP32[68842] | 0;
 if ((i2 | 0) > 2e5) {
  HEAP32[68842] = 2e5;
  i3 = 2e5;
 } else {
  i3 = i2;
 }
 HEAPF64[34413] = +(i3 | 0) / 5.0e4;
 STACKTOP = i1;
 return;
}
function _do3d135() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 i2 = ~~(+Math_pow(+(+(((HEAP32[68188] | 0) - (HEAP32[68690] | 0) | 0) / 3e4 | 0 | 0) / 200.0), 1.3) * 200.0);
 i3 = (i2 | 0) < 0 ? 0 : i2;
 i2 = (i3 | 0) % 360 | 0;
 HEAP32[12950] = i2;
 HEAP32[22676] = (i3 + 90 | 0) % 360 | 0;
 HEAP32[22678] = i2;
 _disp3d();
 STACKTOP = i1;
 return;
}
function _aa_uninitmouse__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i1 = i3 + 224 | 0;
 i5 = HEAP32[i1 >> 2] | 0;
 if ((i5 | 0) != 0) {
  _free(i5);
 }
 HEAP32[i1 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i3 + 208 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function _credits2__async_cb106(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[68188] | 0;
 HEAP32[68196] = i2;
 HEAP32[68194] = i2;
 HEAP32[34] = 33;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(0, 0, 1, 1e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 259;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _web_flush(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_alloc_async_context(4) | 0;
 HEAP32[___async_cur_frame + 4 >> 2] = i1;
 _emscripten_sleep(1);
 if (___async) {
  HEAP32[i2 >> 2] = 306;
  i1 = STACKTOP;
  STACKTOP = i1;
  return;
 } else {
  _emscripten_free_async_context(i2 | 0);
  STACKTOP = i1;
  return;
 }
}
function _scene1__async_cb10(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAPF64[30] = +(HEAP32[(HEAP32[12936] | 0) + 156 >> 2] << 1 | 0);
 HEAP32[34] = 5;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(60, 56, 1, 5e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 57;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _vezen__async_cb68(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[HEAP32[22682] >> 2] = 0;
 i1 = _emscripten_realloc_async_context(8) | 0;
 _draw();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 26;
 HEAP32[i1 + 4 >> 2] = i3;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _scene1__async_cb6(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[HEAP32[22682] >> 2] = 0;
 i1 = _emscripten_realloc_async_context(8) | 0;
 _draw();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 64;
 HEAP32[i1 + 4 >> 2] = i3;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _credits__async_cb102(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[68848] = 4;
 HEAP32[HEAP32[22682] >> 2] = 0;
 HEAP32[34] = 29;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(-60, 205, 1, 86e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 209;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene5__async_cb153(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[68700] = 274864;
 HEAP32[68674] = 274792;
 HEAP32[34] = 20;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(-60, 181, 1, 15e5);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 182;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene5__async_cb155(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[68700] = 274792;
 HEAP32[68674] = 274856;
 HEAP32[34] = 20;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(-60, 178, 1, 1e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 179;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _precalculate() {
 var i1 = 0, i2 = 0, d3 = 0.0;
 i1 = STACKTOP;
 i2 = 0;
 do {
  d3 = +(i2 >>> 0) * .017453292519943295;
  HEAP32[53256 + (i2 << 2) >> 2] = ~~(+Math_sin(+d3) * 65536.0);
  HEAP32[51808 + (i2 << 2) >> 2] = ~~(+Math_cos(+d3) * 65536.0);
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 361);
 STACKTOP = i1;
 return;
}
function _scene5__async_cb163(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[68700] = 274792;
 HEAP32[68674] = 274808;
 HEAP32[34] = 18;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(60, 0, 1, 1e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 170;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene5__async_cb161(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[68700] = 274816;
 HEAP32[68674] = 274792;
 HEAP32[34] = 18;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(60, 0, 1, 1e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 172;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene5__async_cb159(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[68700] = 274792;
 HEAP32[68674] = 274832;
 HEAP32[34] = 19;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(60, 0, 1, 1e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 174;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene5__async_cb157(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[68700] = 274840;
 HEAP32[68674] = 274792;
 HEAP32[34] = 19;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(60, 0, 1, 1e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 176;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _decrandom(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 i3 = (HEAP32[22682] | 0) + 20 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((i4 | 0) > 0 ? (i5 = i4 + (Math_imul(i1, -30) | 0) | 0, (i5 | 0) >= 60) : 0) {
  i6 = i5;
 } else {
  i6 = 60;
 }
 HEAP32[i3 >> 2] = i6;
 STACKTOP = i2;
 return;
}
function _scene5__async_cb169(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[68674] = 274728;
 HEAP32[68688] = 0;
 HEAP32[34] = 14;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(-60, 162, 1, 6e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 163;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _main__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = HEAP32[___async_retval >> 2];
 if ((HEAP32[18] | 0) != 0) {
  _write(0, 128, 1) | 0;
  _close(0) | 0;
  _close(0) | 0;
 }
 HEAP32[___async_retval >> 2] = HEAP32[i2 >> 2];
 STACKTOP = i1;
 return;
}
function _scene1__async_cb27(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = (HEAP32[i1 + 4 >> 2] | 0) + 1 | 0;
 i1 = _emscripten_realloc_async_context(8) | 0;
 _strobikstart();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 65;
 HEAP32[i1 + 4 >> 2] = i3;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _devezen3__async_cb60(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[(HEAP32[22682] | 0) + 20 >> 2] = 100;
 HEAP32[34] = 35;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(0, 0, 1, 1e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 268;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _decrand() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 i2 = (HEAP32[68188] | 0) - (HEAP32[68194] | 0) | 0;
 if ((i2 | 0) < 4e6) {
  HEAP32[(HEAP32[22682] | 0) + 20 >> 2] = ((4e6 - i2 | 0) * 1600 | 0) / 4e6 | 0;
  STACKTOP = i1;
  return;
 } else {
  HEAP32[(HEAP32[22682] | 0) + 20 >> 2] = 0;
  STACKTOP = i1;
  return;
 }
}
function _credits2__async_cb124(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[(HEAP32[22682] | 0) + 20 >> 2] = 0;
 HEAP32[34] = 31;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(0, 0, 1, 25e5);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 240;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _credits2__async_cb110(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[68188] | 0;
 HEAP32[68196] = i2;
 HEAP32[68194] = i2;
 _play();
 i2 = _emscripten_realloc_async_context(4) | 0;
 _bbwait(1);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 243;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene5__async_cb171(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[34] = 13;
 HEAP32[68666] = 0;
 HEAP32[68674] = 274704;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(60, 0, 1, 5e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 159;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene5__async_cb152(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAPF32[(HEAP32[22682] | 0) + 8 >> 2] = 1.0;
 HEAP32[34] = 15;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(0, 0, 1, 2e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 183;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _drawwait() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 i3 = HEAP32[i2 + 56 >> 2] | 0;
 i4 = HEAP32[36] | 0;
 i5 = (i3 - (_strlen(i4 | 0) | 0) | 0) >>> 1;
 _aa_puts(i2, i5, (HEAP32[i2 + 60 >> 2] | 0) / 2 | 0, 5, i4);
 _aa_flush(HEAP32[12936] | 0);
 STACKTOP = i1;
 return;
}
function _scene5__async_cb167(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 _initlepic();
 HEAP32[68674] = 274768;
 HEAP32[34] = 16;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(-60, 157, 1, 2e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 165;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene5__async_cb164(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[(HEAP32[22682] | 0) + 20 >> 2] = 0;
 HEAP32[34] = 15;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(0, 0, 1, 2e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 169;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene5__async_cb160(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[(HEAP32[22682] | 0) + 20 >> 2] = 0;
 HEAP32[34] = 15;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(0, 0, 1, 2e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 173;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _vezen__async_cb64(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i1 = _emscripten_realloc_async_context(8) | 0;
 _strobikstart();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 28;
 HEAP32[i1 + 4 >> 2] = i3;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _fcmp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, d4 = 0.0, i5 = 0;
 i3 = STACKTOP;
 d4 = +HEAPF64[(HEAP32[i1 >> 2] | 0) + 8 >> 3] - +HEAPF64[(HEAP32[i2 >> 2] | 0) + 8 >> 3];
 if (d4 < 0.0) {
  i5 = 1;
  STACKTOP = i3;
  return i5 | 0;
 }
 i5 = (d4 > 0.0) << 31 >> 31;
 STACKTOP = i3;
 return i5 | 0;
}
function _tl_reset_timer(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 do {
  _gettimeofday(56, 64) | 0;
 } while ((HEAP32[60 >> 2] | 0) > 999999);
 i3 = 56;
 i4 = HEAP32[i3 + 4 >> 2] | 0;
 i5 = i1;
 HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i5 + 4 >> 2] = i4;
 STACKTOP = i2;
 return;
}
function _vezen__async_cb77(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i1 = _emscripten_realloc_async_context(8) | 0;
 _bbwait(5e5);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i1 >> 2] = 27;
 HEAP32[i1 + 4 >> 2] = i3;
 i2 = STACKTOP;
 STACKTOP = i2;
 return;
}
function _scene8__async_cb98(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[44906] = HEAP32[44908];
 HEAP32[44912] = 0;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(0, 0, 1, 1e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 111;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene5__async_cb168(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[68690] = HEAP32[68188];
 HEAP32[34] = 15;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(0, 0, 1, 2e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 164;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _bb__async_cb190(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[68188] | 0;
 HEAP32[68196] = i2;
 HEAP32[68194] = i2;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _devezen1();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 148;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _display8() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 i2 = 0;
 do {
  i3 = HEAP32[12936] | 0;
  _aa_puts(i3, ((HEAP32[i3 + 56 >> 2] | 0) / 2 | 0) + -2 | 0, (((HEAP32[i3 + 60 >> 2] | 0) + -6 | 0) / 2 | 0) + i2 | 0, 0, 523448);
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 6);
 STACKTOP = i1;
 return;
}
function _bb__async_cb191(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[68188] | 0;
 HEAP32[68196] = i2;
 HEAP32[68194] = i2;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _scene1();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 133;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene5__async_cb165(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[68674] = 274784;
 HEAP32[34] = 17;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(-60, 167, 1, 3e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 168;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene10__async_cb229(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAPF32[31684] = .4000000059604645;
 HEAP32[31708] = 60;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _do3d(5e5);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 85;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _aa_uninitkbd__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 i4 = (HEAP32[i1 + 4 >> 2] | 0) + 220 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if ((i1 | 0) != 0) {
  _free(i1);
 }
 HEAP32[i4 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 STACKTOP = i2;
 return;
}
function _scene3__async_cb183(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[HEAP32[22682] >> 2] = 0;
 _free(HEAP32[44010] | 0);
 i2 = HEAP32[12936] | 0;
 _memset(HEAP32[i2 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i2 + 156 >> 2] | 0, HEAP32[i2 + 152 >> 2] | 0) | 0) | 0;
 STACKTOP = i1;
 return;
}
function ___uremdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 i6 = i5 | 0;
 ___udivmoddi4(i1, i2, i3, i4, i6) | 0;
 STACKTOP = i5;
 return (tempRet0 = HEAP32[i6 + 4 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
}
function ___strdup(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 i3 = (_strlen(i1 | 0) | 0) + 1 | 0;
 i4 = _malloc(i3) | 0;
 if ((i4 | 0) == 0) {
  i5 = 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 _memcpy(i4 | 0, i1 | 0, i3 | 0) | 0;
 i5 = i4;
 STACKTOP = i2;
 return i5 | 0;
}
function _scene1__async_cb14(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[64] = 40;
 HEAP32[62] = 1;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(20, 46, 3, 2e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 50;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _aa_init__async_cb1(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 i4 = HEAP32[HEAP32[i1 + 4 >> 2] >> 2] | 0;
 if ((i4 | 0) != 0) {
  _free(i4);
 }
 _free(i3);
 _puts(526e3) | 0;
 HEAP32[___async_retval >> 2] = 0;
 STACKTOP = i2;
 return;
}
function _ui_waitfunc__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12] | 0;
 i3 = _emscripten_realloc_async_context(4) | 0;
 _tl_process_group(i2) | 0;
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i3 >> 2] = 194;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene8__async_cb97(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[44910] = HEAP32[44912];
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(0, 0, 1, 5e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 112;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _main__async_cb184(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 i3 = _bb() | 0;
 if (!___async) {
  HEAP32[___async_retval >> 2] = i3;
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 8;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene10__async_cb228(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAPF32[31684] = 5.0;
 HEAP32[31708] = 90;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _do3d(5e5);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 86;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _messager__async_cb88(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 i3 = _emscripten_realloc_async_context(4) | 0;
 _aa_gotoxy(i2, 0, 0);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i3 >> 2] = 264;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene5__async_cb170(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[68674] = 274720;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(-60, 160, 1, 3e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 161;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene1__async_cb12(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[34] = 4;
 _play();
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(20, 52, 1, 6e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 53;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _credits__async_cb104(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[68848] = 2;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(-60, 205, 1, 4e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 207;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _credits__async_cb103(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[68848] = 3;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(-60, 205, 1, 8e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 208;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene1__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 i3 = _emscripten_realloc_async_context(4) | 0;
 _aa_hidecursor(i2);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i3 >> 2] = 45;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _devezen4__async_cb210(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[34] = 38;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(0, 0, 1, 5e5);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 270;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function ___muldi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = i1;
 i1 = i3;
 i3 = ___muldsi3(i5, i1) | 0;
 i6 = tempRet0;
 return (tempRet0 = (Math_imul(i2, i1) | 0) + (Math_imul(i4, i5) | 0) + i6 | i6 & 0, i3 | 0 | 0) | 0;
}
function _scene6__async_cb33(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[34] = 26;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(60, 0, 1, 3e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 192;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene5__async_cb166(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[34] = 15;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(0, 0, 1, 2e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 166;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene5__async_cb156(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[34] = 15;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(0, 0, 1, 2e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 177;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene5__async_cb151(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[34] = 21;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(0, 0, 1, 2e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 184;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene1__async_cb18(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[66] = 1;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(600, 39, 2, 2e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 43;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene1__async_cb13(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[62] = 40;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(20, 46, 3, 2e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 51;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _credits2__async_cb125(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 _load_song(523440) | 0;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _bbupdate() | 0;
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 242;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene4__async_cb35(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[HEAP32[22682] >> 2] = 255;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _draw();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 106;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene1__async_cb15(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[64] = 1;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(20, 46, 3, 2e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 49;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _strobikend__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[HEAP32[22682] >> 2] = 0;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _draw();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 15;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _calculatefastest(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 i3 = HEAP32[64] | 0;
 if ((i3 | 0) != 0) {
  HEAP32[64] = i3 + i1;
 }
 i3 = HEAP32[62] | 0;
 if ((i3 | 0) == 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[62] = i3 + i1;
 STACKTOP = i2;
 return;
}
function _vezen__async_cb67(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 HEAP32[HEAP32[22682] >> 2] = 0;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _draw();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 30;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _mydraw146() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 _memset(HEAP32[i2 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i2 + 156 >> 2] | 0, HEAP32[i2 + 152 >> 2] | 0) | 0) | 0;
 _dvojprujezd(HEAP32[68194] | 0, 275e3, 275256);
 STACKTOP = i1;
 return;
}
function _bb__async_cb196(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _vezen(361088, 376448, 390592, 404e3);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 152;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _strncpy(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 while ((i4 | 0) < (i3 | 0)) {
  HEAP8[i1 + i4 >> 0] = i5 ? 0 : HEAP8[i2 + i4 >> 0] | 0;
  i5 = i5 ? 1 : (HEAP8[i2 + i4 >> 0] | 0) == 0;
  i4 = i4 + 1 | 0;
 }
 return i1 | 0;
}
function _scene1__async_cb20(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(-200, 39, 2, 2e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 41;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene1__async_cb19(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(-420, 39, 2, 2e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 42;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene1__async_cb23(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(-40, 35, 2, 2e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 37;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene1__async_cb22(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(-80, 35, 2, 2e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 38;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene1__async_cb21(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(-30, 39, 2, 2e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 40;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene3__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(-35, 90, 9, 42e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 91;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene1__async_cb16(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(20, 46, 3, 2e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 48;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene1__async_cb11(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(20, 54, 1, 2e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 55;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene1__async_cb9(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(60, 58, 1, 2e5);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 59;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene1__async_cb8(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(60, 60, 1, 3e5);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 61;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene1__async_cb5(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _timestuff(20, 46, 3, 2e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 47;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _ui_do_fractal__async_cb182(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _bbupdate() | 0;
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 199;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _ui_display() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 HEAP32[68722] = 1;
 i2 = HEAP32[12936] | 0;
 _aa_render(i2, HEAP32[22682] | 0, 0, 0, HEAP32[i2 + 152 >> 2] | 0, HEAP32[i2 + 156 >> 2] | 0);
 _aa_flush(HEAP32[12936] | 0);
 STACKTOP = i1;
 return;
}
function _scene4__async_cb50(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _bbflushwait(1e5);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 105;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene4__async_cb49(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _bbflushwait(1e5);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 107;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene10__async_cb217(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _strobikstart();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 75;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene10__async_cb216(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _strobikstart();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 78;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _mydraw3() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 _memset(HEAP32[i2 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i2 + 156 >> 2] | 0, HEAP32[i2 + 152 >> 2] | 0) | 0) | 0;
 _drawlepic(HEAP32[68674] | 0);
 STACKTOP = i1;
 return;
}
function _credits2__async_cb114(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _bbwait(1e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 251;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _bb__async_cb195(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _messager(272920);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 136;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _bb__async_cb194(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _messager(273328);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 141;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _bb__async_cb193(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _messager(273712);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 146;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _bb__async_cb192(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _messager(274136);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 153;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _vezen__async_cb75(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _bbupdate() | 0;
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 32;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene10__async_cb225(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _bbwait(5e5);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 74;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene10__async_cb224(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _bbwait(5e5);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 77;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene10__async_cb223(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _bbwait(5e5);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 80;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _scene10__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _strobikstart();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 81;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _bb__async_cb187(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _bbupdate() | 0;
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 147;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _aa_getevent__async_cb178(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = HEAP32[___async_retval >> 2];
 HEAP32[___async_retval >> 2] = HEAP32[i2 >> 2];
 STACKTOP = i1;
 return;
}
function copyTempFloat(i1) {
 i1 = i1 | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[i1 >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[i1 + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[i1 + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[i1 + 3 >> 0];
}
function _vezen__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _bbwait(1e6);
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 33;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _mydraw1147() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 _memset(HEAP32[i2 + 160 >> 2] | 0, 0, Math_imul(HEAP32[i2 + 156 >> 2] | 0, HEAP32[i2 + 152 >> 2] | 0) | 0) | 0;
 _drawlepic(275264);
 STACKTOP = i1;
 return;
}
function _bb__async_cb189(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _devezen2();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 137;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _bb__async_cb188(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _devezen3();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 142;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _bb__async_cb186(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _devezen4();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 154;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _bitshift64Ashr(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((i3 | 0) < 32) {
  tempRet0 = i2 >> i3;
  return i1 >>> i3 | (i2 & (1 << i3) - 1) << 32 - i3;
 }
 tempRet0 = (i2 | 0) < 0 ? -1 : 0;
 return i2 >> i3 - 32 | 0;
}
function _bb__async_cb208(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _scene8();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 143;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _bb__async_cb207(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _scene4();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 138;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _bb__async_cb203(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _scene6();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 144;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _bb__async_cb198(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _scene2();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 139;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _bb__async_cb185(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _scene3();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 134;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _vezen__async_cb76(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 i2 = _emscripten_realloc_async_context(4) | 0;
 _draw();
 if (!___async) {
  ___async_unwind = 0;
 }
 HEAP32[i2 >> 2] = 31;
 i1 = STACKTOP;
 STACKTOP = i1;
 return;
}
function _getwidth(d1) {
 d1 = +d1;
 var i2 = 0, d3 = 0.0;
 i2 = HEAP32[12936] | 0;
 d3 = +(HEAP32[i2 + 156 >> 2] | 0);
 return +(d3 / d1 * +(HEAP32[i2 + 152 >> 2] | 0) * .75 / d3 * +(HEAP32[i2 + 52 >> 2] | 0) / +(HEAP32[i2 + 48 >> 2] | 0));
}
function _sprintf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 i3 = _vsprintf(i1, i2, i5) | 0;
 STACKTOP = i4;
 return i3 | 0;
}
function _web_init(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = STACKTOP;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 31;
 _aa_recommendlow(526808, 527920);
 _aaweb_init();
 STACKTOP = i4;
 return 1;
}
function _mydraw77() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 _aa_render(i2, HEAP32[22682] | 0, 0, 0, HEAP32[i2 + 56 >> 2] | 0, HEAP32[i2 + 60 >> 2] | 0);
 _aa_flush(HEAP32[12936] | 0);
 STACKTOP = i1;
 return;
}
function _bitshift64Shl(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((i3 | 0) < 32) {
  tempRet0 = i2 << i3 | (i1 & (1 << i3) - 1 << 32 - i3) >>> 32 - i3;
  return i1 << i3;
 }
 tempRet0 = i1 << i3 - 32;
 return 0;
}
function _emscripten_alloc_async_context(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = _emscripten_async_stack_alloc(i1 + 8 | 0) | 0;
 HEAP32[i2 >> 2] = ___async_cur_frame;
 ___async_cur_frame = i2;
 return ___async_cur_frame + 8 | 0;
}
function _i64Subtract(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i5 = i2 - i4 >>> 0;
 i5 = i2 - i4 - (i3 >>> 0 > i1 >>> 0 | 0) >>> 0;
 return (tempRet0 = i5, i1 - i3 >>> 0 | 0) | 0;
}
function _bitshift64Lshr(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((i3 | 0) < 32) {
  tempRet0 = i2 >>> i3;
  return i1 >>> i3 | (i2 & (1 << i3) - 1) << 32 - i3;
 }
 tempRet0 = 0;
 return i2 >>> i3 - 32 | 0;
}
function _mydraw8() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 _do3d135();
 i2 = HEAP32[68194] | 0;
 HEAP32[12944] = (((HEAP32[68188] | 0) - i2 | 0) * 400 | 0) / ((HEAP32[68196] | 0) - i2 | 0) | 0;
 STACKTOP = i1;
 return;
}
function _aa_gotoxy__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 i3 = HEAP32[i1 + 12 >> 2] | 0;
 HEAP32[i2 + 184 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i2 + 188 >> 2] = i3;
 return;
}
function _set_zbuff() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 i2 = HEAP32[12936] | 0;
 HEAP32[12938] = _malloc(Math_imul(HEAP32[i2 + 152 >> 2] << 2, HEAP32[i2 + 156 >> 2] | 0) | 0) | 0;
 STACKTOP = i1;
 return;
}
function _emscripten_async_stack_alloc(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = ___async_stacktop;
 ___async_stacktop = ___async_stacktop + i1 | 0;
 ___async_stacktop = ___async_stacktop + 7 & -8;
 return i2 | 0;
}
function _scene8__async_cb(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = STACKTOP;
 _free(HEAP32[272728 >> 2] | 0);
 i2 = HEAP32[22682] | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 STACKTOP = i1;
 return;
}
function _web_getsize(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = STACKTOP;
 HEAP32[i2 >> 2] = _aaweb_get_width() | 0;
 HEAP32[i3 >> 2] = _aaweb_get_height() | 0;
 STACKTOP = i1;
 return;
}
function _wctomb(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 if ((i1 | 0) == 0) {
  i4 = 0;
 } else {
  i4 = _wcrtomb(i1, i2, 0) | 0;
 }
 STACKTOP = i3;
 return i4 | 0;
}
function _i64Add(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i5 = i1 + i3 >>> 0;
 return (tempRet0 = i2 + i4 + (i5 >>> 0 < i1 >>> 0 | 0) >>> 0, i5 | 0) | 0;
}
function _incrandom301() {
 var i1 = 0;
 i1 = HEAP32[68194] | 0;
 HEAP32[(HEAP32[22682] | 0) + 20 >> 2] = (((HEAP32[68188] | 0) - i1 | 0) * 100 | 0) / ((HEAP32[68196] | 0) - i1 | 0) | 0;
 return;
}
function runPostSets() {}
function _rand_r(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (Math_imul(HEAP32[i1 >> 2] | 0, 31010991) | 0) + 1735287159 & 2147483647;
 HEAP32[i1 >> 2] = i2;
 return i2 | 0;
}
function _scene7__async_cb(i1) {
 i1 = i1 | 0;
 HEAP32[(HEAP32[12936] | 0) + 160 >> 2] = HEAP32[i1 + 4 >> 2];
 i1 = HEAP32[22682] | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 2;
 return;
}
function _incgama(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[68194] | 0;
 HEAPF32[(HEAP32[22682] | 0) + 8 >> 2] = +((HEAP32[68188] | 0) - i1 | 0) * 4.0 / +((HEAP32[68196] | 0) - i1 | 0) + 1.0;
 return;
}
function _decgama(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[68196] | 0;
 HEAPF32[(HEAP32[22682] | 0) + 8 >> 2] = +(i1 - (HEAP32[68188] | 0) | 0) * 4.0 / +(i1 - (HEAP32[68194] | 0) | 0) + 1.0;
 return;
}
function _vsprintf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 i5 = _vsnprintf(i1, 2147483647, i2, i3) | 0;
 STACKTOP = i4;
 return i5 | 0;
}
function dynCall_iiiii(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return FUNCTION_TABLE_iiiii[i1 & 1](i2 | 0, i3 | 0, i4 | 0, i5 | 0) | 0;
}
function _decontr() {
 var i1 = 0;
 i1 = HEAP32[68194] | 0;
 HEAP32[(HEAP32[22682] | 0) + 4 >> 2] = (i1 - (HEAP32[68188] | 0) << 8 | 0) / ((HEAP32[68196] | 0) - i1 | 0) | 0;
 return;
}
function _emscripten_realloc_async_context(i1) {
 i1 = i1 | 0;
 _emscripten_async_stack_restore(___async_cur_frame);
 return (_emscripten_async_stack_alloc(i1 + 8 | 0) | 0) + 8 | 0;
}
function dynCall_viiii(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 FUNCTION_TABLE_viiii[i1 & 0](i2 | 0, i3 | 0, i4 | 0, i5 | 0);
}
function _decbright290() {
 var i1 = 0;
 i1 = HEAP32[68194] | 0;
 HEAP32[HEAP32[22682] >> 2] = (i1 - (HEAP32[68188] | 0) << 8 | 0) / ((HEAP32[68196] | 0) - i1 | 0) | 0;
 return;
}
function _towhite() {
 var i1 = 0;
 i1 = HEAP32[68194] | 0;
 HEAP32[HEAP32[22682] >> 2] = ((HEAP32[68188] | 0) - i1 << 8 | 0) / ((HEAP32[68196] | 0) - i1 | 0) | 0;
 return;
}
function _toblack() {
 var i1 = 0;
 i1 = HEAP32[68194] | 0;
 HEAP32[HEAP32[22682] >> 2] = (i1 - (HEAP32[68188] | 0) << 8 | 0) / ((HEAP32[68196] | 0) - i1 | 0) | 0;
 return;
}
function _emscripten_free_async_context(i1) {
 i1 = i1 | 0;
 _emscripten_async_stack_restore(___async_cur_frame);
 ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0;
}
function _tl_lookup_timer(i1) {
 i1 = i1 | 0;
 return (HEAP32[60 >> 2] | 0) - (HEAP32[i1 + 4 >> 2] | 0) + (((HEAP32[14] | 0) - (HEAP32[i1 >> 2] | 0) | 0) * 1e6 | 0) | 0;
}
function ___udivdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i5 = ___udivmoddi4(i1, i2, i3, i4, 0) | 0;
 return i5 | 0;
}
function dynCall_idddd(i1, d2, d3, d4, d5) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 d5 = +d5;
 return FUNCTION_TABLE_idddd[i1 & 3](+d2, +d3, +d4, +d5) | 0;
}
function _inccolor(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[68194] | 0;
 HEAP32[68688] = ((HEAP32[68188] | 0) - i1 << 8 | 0) / ((HEAP32[68196] | 0) - i1 | 0) | 0;
 return;
}
function _mydraw7() {
 var i1 = 0;
 i1 = STACKTOP;
 _do3d135();
 _drawpravotoc(HEAP32[68674] | 0, HEAP32[68700] | 0, HEAP32[68194] | 0);
 STACKTOP = i1;
 return;
}
function dynCall_iiii(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return FUNCTION_TABLE_iiii[i1 & 1](i2 | 0, i3 | 0, i4 | 0) | 0;
}
function _tl_update_time() {
 var i1 = 0;
 i1 = STACKTOP;
 do {
  _gettimeofday(56, 64) | 0;
 } while ((HEAP32[60 >> 2] | 0) > 999999);
 STACKTOP = i1;
 return;
}
function _mydraw6() {
 var i1 = 0;
 i1 = STACKTOP;
 _do3d135();
 _drawhorotoc(HEAP32[68674] | 0, HEAP32[68700] | 0, HEAP32[68194] | 0);
 STACKTOP = i1;
 return;
}
function _mydraw5() {
 var i1 = 0;
 i1 = STACKTOP;
 _do3d135();
 _drawlevotoc(HEAP32[68674] | 0, HEAP32[68700] | 0, HEAP32[68194] | 0);
 STACKTOP = i1;
 return;
}
function dynCall_viii(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 FUNCTION_TABLE_viii[i1 & 3](i2 | 0, i3 | 0, i4 | 0);
}
function _web_gotoxy(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = STACKTOP;
 _aaweb_gotoxy(i2 | 0, i3 | 0);
 STACKTOP = i1;
 return;
}
function _isspace(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((i1 | 0) == 32) {
  i2 = 1;
 } else {
  i2 = (i1 + -9 | 0) >>> 0 < 5;
 }
 return i2 & 1 | 0;
}
function stackAlloc(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + i1 | 0;
 STACKTOP = STACKTOP + 7 & -8;
 return i2 | 0;
}
function _devezen1__async_cb(i1) {
 i1 = i1 | 0;
 i1 = STACKTOP;
 _free(HEAP32[130918] | 0);
 _free(HEAP32[130920] | 0);
 STACKTOP = i1;
 return;
}
function _credits__async_cb101(i1) {
 i1 = i1 | 0;
 i1 = STACKTOP;
 _free(HEAP32[68860] | 0);
 _free(HEAP32[68862] | 0);
 STACKTOP = i1;
 return;
}
function _strobikuj(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[22682] | 0;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + (i1 * 50 | 0);
 return;
}
function _scalbnl(d1, i2) {
 d1 = +d1;
 i2 = i2 | 0;
 var i3 = 0, d4 = 0.0;
 i3 = STACKTOP;
 d4 = +_scalbn(d1, i2);
 STACKTOP = i3;
 return +d4;
}
function _frexpl(d1, i2) {
 d1 = +d1;
 i2 = i2 | 0;
 var i3 = 0, d4 = 0.0;
 i3 = STACKTOP;
 d4 = +_frexp(d1, i2);
 STACKTOP = i3;
 return +d4;
}
function _mydraw2() {
 var i1 = 0;
 i1 = STACKTOP;
 _do3d135();
 _drawprujezd(HEAP32[68674] | 0, HEAP32[68194] | 0);
 STACKTOP = i1;
 return;
}
function dynCall_iii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return FUNCTION_TABLE_iii[i1 & 3](i2 | 0, i3 | 0) | 0;
}
function _strlen(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1;
 while (HEAP8[i2 >> 0] | 0) {
  i2 = i2 + 1 | 0;
 }
 return i2 - i1 | 0;
}
function _introscreen() {
 var i1 = 0;
 i1 = STACKTOP;
 HEAP32[36] = 160;
 _drawwait();
 HEAP32[36] = 272;
 STACKTOP = i1;
 return;
}
function _devezen3__async_cb(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[22682] | 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 return;
}
function _play() {
 var i1 = 0;
 i1 = STACKTOP;
 if ((HEAP32[18] | 0) != 0) {
  _write(0, 112, 1) | 0;
 }
 STACKTOP = i1;
 return;
}
function _devezen4__async_cb(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[22682] | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 return;
}
function _destrobikuj(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[22682] | 0;
 HEAP32[i2 >> 2] = HEAP32[i2 >> 2] >> i1;
 return;
}
function _clean_autopilot() {
 HEAPF64[36316] = 1.0e3;
 HEAPF64[36317] = 0.0;
 HEAP32[72636] = 0;
 HEAP32[72638] = 0;
 return;
}
function _web_setattr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = STACKTOP;
 _aaweb_setattr(i2 | 0);
 STACKTOP = i1;
 return;
}
function _atof(i1) {
 i1 = i1 | 0;
 var i2 = 0, d3 = 0.0;
 i2 = STACKTOP;
 d3 = +_strtod(i1, 0);
 STACKTOP = i2;
 return +d3;
}
function setThrew(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if ((__THREW__ | 0) == 0) {
  __THREW__ = i1;
  threwValue = i2;
 }
}
function dynCall_vii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 FUNCTION_TABLE_vii[i1 & 3](i2 | 0, i3 | 0);
}
function _web_print(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = STACKTOP;
 _aaweb_print(i2 | 0);
 STACKTOP = i1;
 return;
}
function _mydraw4() {
 var i1 = 0;
 i1 = STACKTOP;
 _do3d135();
 _drawlepic(HEAP32[68674] | 0);
 STACKTOP = i1;
 return;
}
function _scene4__async_cb48(i1) {
 i1 = i1 | 0;
 i1 = STACKTOP;
 _free(HEAP32[44868] | 0);
 STACKTOP = i1;
 return;
}
function _initlepic() {
 HEAPF32[156] = 0.0;
 HEAPF32[158] = 0.0;
 HEAPF32[160] = 0.0;
 HEAPF32[162] = 0.0;
 return;
}
function _flip_buffers() {
 HEAP32[(HEAP32[12936] | 0) + 160 >> 2] = HEAP32[(HEAP32[68736] | 0) + 40 >> 2];
 return;
}
function b0(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(0);
 return 0;
}
function _scene10__async_cb226(i1) {
 i1 = i1 | 0;
 HEAPF32[(HEAP32[22682] | 0) + 8 >> 2] = 1.0;
 return;
}
function _tl_set_multihandler(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 20 >> 2] = i2;
 return;
}
function _decaaval(i1) {
 i1 = i1 | 0;
 HEAP32[68666] = (HEAP32[68666] | 0) + (i1 * 7 | 0);
 return;
}
function _aa_getevent__async_cb176(i1) {
 i1 = i1 | 0;
 HEAP32[___async_retval >> 2] = 258;
 return;
}
function b8(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(8);
}
function dynCall_vi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 FUNCTION_TABLE_vi[i1 & 511](i2 | 0);
}
function b3(d1, d2, d3, d4) {
 d1 = +d1;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 abort(3);
 return 0;
}
function _decbright(i1) {
 i1 = i1 | 0;
 HEAP32[54] = (HEAP32[54] | 0) - (i1 << 4);
 return;
}
function _aa_init__async_cb2(i1) {
 i1 = i1 | 0;
 HEAP32[___async_retval >> 2] = 0;
 return;
}
function _bbinit__async_cb(i1) {
 i1 = i1 | 0;
 HEAP32[___async_retval >> 2] = 1;
 return;
}
function b4(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(4);
 return 0;
}
function _bbwait__async_cb90(i1) {
 i1 = i1 | 0;
 HEAP32[68194] = HEAP32[68196];
 return;
}
function _emscripten_async_stack_restore(i1) {
 i1 = i1 | 0;
 ___async_stacktop = i1;
}
function b5(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(5);
}
function _isgraph(i1) {
 i1 = i1 | 0;
 return (i1 + -33 | 0) >>> 0 < 94 | 0;
}
function _isdigit(i1) {
 i1 = i1 | 0;
 return (i1 + -48 | 0) >>> 0 < 10 | 0;
}
function _scene5__async_cb(i1) {
 i1 = i1 | 0;
 HEAP32[12944] = 0;
 return;
}
function _aaweb_init229(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return 1;
}
function _aaweb_getchar(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return 0;
}
function b7(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(7);
 return 0;
}
function dynCall_v(i1) {
 i1 = i1 | 0;
 FUNCTION_TABLE_v[i1 & 63]();
}
function _web_cursor(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}
function _strobikstart__async_cb129(i1) {
 i1 = i1 | 0;
 return;
}
function _aa_showcursor__async_cb80(i1) {
 i1 = i1 | 0;
 return;
}
function _calculatefast__async_cb(i1) {
 i1 = i1 | 0;
 return;
}
function _aa_hidecursor__async_cb(i1) {
 i1 = i1 | 0;
 return;
}
function _strobikend__async_cb99(i1) {
 i1 = i1 | 0;
 return;
}
function b2(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(2);
}
function _bbflushwait__async_cb(i1) {
 i1 = i1 | 0;
 return;
}
function _aa_flush__async_cb59(i1) {
 i1 = i1 | 0;
 return;
}
function _aa_flush__async_cb58(i1) {
 i1 = i1 | 0;
 return;
}
function _web_flush__async_cb(i1) {
 i1 = i1 | 0;
 return;
}
function _mycontrol__async_cb(i1) {
 i1 = i1 | 0;
 return;
}
function stackRestore(i1) {
 i1 = i1 | 0;
 STACKTOP = i1;
}
function _tl_sleep__async_cb(i1) {
 i1 = i1 | 0;
 return;
}
function _scene6__async_cb32(i1) {
 i1 = i1 | 0;
 return;
}
function _scene2__async_cb61(i1) {
 i1 = i1 | 0;
 return;
}
function _scene1__async_cb26(i1) {
 i1 = i1 | 0;
 return;
}
function _messager__async_cb(i1) {
 i1 = i1 | 0;
 return;
}
function _devezen2__async_cb(i1) {
 i1 = i1 | 0;
 return;
}
function setTempRet0(i1) {
 i1 = i1 | 0;
 tempRet0 = i1;
}
function _vezen__async_cb63(i1) {
 i1 = i1 | 0;
 return;
}
function _ui_changed() {
 HEAP32[68720] = 2;
 return;
}
function _rand() {
 return _rand_r(___rand_seed) | 0;
}
function _ui_tbreak() {
 HEAP32[68720] = 2;
 return;
}
function _aaweb_uninit(i1) {
 i1 = i1 | 0;
 return;
}
function _web_uninit(i1) {
 i1 = i1 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0;
}
function stackSave() {
 return STACKTOP | 0;
}
function b1(i1) {
 i1 = i1 | 0;
 abort(1);
}
function setAsync() {
 ___async = 1;
}
function b6() {
 abort(6);
}

// EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiiii = [b0,_web_init];
  var FUNCTION_TABLE_vi = [b1,_web_uninit,_web_flush,_aaweb_uninit,_tl_sleep__async_cb,_tl_process_group__async_cb,_tl_process_group__async_cb86,_main__async_cb184,_main__async_cb,_draw__async_cb,_strobikuj,_strobikstart__async_cb,_strobikstart__async_cb129,_destrobikuj,_strobikend__async_cb,_strobikend__async_cb99,_vezen__async_cb74,_vezen__async_cb70,_vezen__async_cb79,_vezen__async_cb66,_vezen__async_cb73,_vezen__async_cb69,_vezen__async_cb78,_vezen__async_cb65,_vezen__async_cb72,_vezen__async_cb68,_vezen__async_cb77,_vezen__async_cb64,_vezen__async_cb71
  ,_vezen__async_cb67,_vezen__async_cb76,_vezen__async_cb75,_vezen__async_cb,_vezen__async_cb63,_scene1__async_cb4,_calculateslow,_scene1__async_cb23,_scene1__async_cb22,_scene1__async_cb21,_calculatefast,_scene1__async_cb20,_scene1__async_cb19,_scene1__async_cb18,_scene1__async_cb17,_scene1__async_cb,_scene1__async_cb5,_calculatefastest,_scene1__async_cb16,_scene1__async_cb15,_scene1__async_cb14,_scene1__async_cb13,_scene1__async_cb12,_decrandom,_scene1__async_cb11,_decbright,_scene1__async_cb10,_makepos,_scene1__async_cb9,_makepos1
  ,_scene1__async_cb8,_makepos2,_scene1__async_cb7,_scene1__async_cb25,_scene1__async_cb6,_scene1__async_cb27,_scene1__async_cb24,_scene1__async_cb26,_calculateslow__async_cb,_calculatefast__async_cb,_scene2__async_cb62,_scene2__async_cb61,_scene2__async_cb,_scene10__async_cb221,_scene10__async_cb225,_scene10__async_cb217,_scene10__async_cb220,_scene10__async_cb224,_scene10__async_cb216,_scene10__async_cb219,_scene10__async_cb223,_scene10__async_cb,_scene10__async_cb218,_scene10__async_cb222,_scene10__async_cb230,_scene10__async_cb229,_scene10__async_cb228,_scene10__async_cb227,_scene10__async_cb226,_do3d__async_cb
  ,_scene3__async_cb,_do_plasma,_scene3__async_cb183,_scene4__async_cb47,_scene4__async_cb46,_scene4__async_cb45,_scene4__async_cb44,_scene4__async_cb43,_scene4__async_cb42,_scene4__async_cb41,_scene4__async_cb40,_scene4__async_cb39,_scene4__async_cb38,_scene4__async_cb37,_scene4__async_cb36,_scene4__async_cb50,_scene4__async_cb35,_scene4__async_cb49,_scene4__async_cb,_drawfire,_scene4__async_cb48,_scene8__async_cb98,_scene8__async_cb97,_scene8__async_cb96,_scene8__async_cb95,_scene8__async_cb94,_scene8__async_cb93,_scene8__async_cb92,_scene8__async_cb,_bbupdate__async_cb
  ,_timestuff__async_cb83,_mycontrol,_timestuff__async_cb,_timestuff__async_cb84,_timestuff__async_cb82,_timestuff__async_cb85,_timestuff__async_cb81,_mycontrol__async_cb,_bbwait__async_cb,_bbwait__async_cb90,_bbflushwait__async_cb,_bbinit__async_cb,_bb__async_cb,_bb__async_cb191,_bb__async_cb185,_bb__async_cb197,_bb__async_cb195,_bb__async_cb189,_bb__async_cb207,_bb__async_cb198,_bb__async_cb202,_bb__async_cb194,_bb__async_cb188,_bb__async_cb208,_bb__async_cb203,_bb__async_cb199,_bb__async_cb193,_bb__async_cb187,_bb__async_cb190,_bb__async_cb206
  ,_bb__async_cb205,_bb__async_cb204,_bb__async_cb196,_bb__async_cb192,_bb__async_cb186,_bb__async_cb209,_bb__async_cb200,_bb__async_cb201,_ctrllepic,_scene5__async_cb171,_scene5__async_cb170,_decaaval,_scene5__async_cb169,_inccolor,_scene5__async_cb168,_scene5__async_cb167,_scene5__async_cb166,_scene5__async_cb165,_incrandom,_scene5__async_cb164,_scene5__async_cb163,_scene5__async_cb162,_scene5__async_cb161,_scene5__async_cb160,_scene5__async_cb159,_scene5__async_cb158,_scene5__async_cb157,_scene5__async_cb156,_scene5__async_cb155,_incgama
  ,_scene5__async_cb154,_scene5__async_cb153,_decgama,_scene5__async_cb152,_scene5__async_cb151,_scene5__async_cb,_scene6__async_cb31,_scene6__async_cb34,_scene6__async_cb,_scene6__async_cb30,_scene6__async_cb29,_scene6__async_cb28,_scene6__async_cb33,_scene6__async_cb32,_ui_waitfunc__async_cb,_ui_waitfunc__async_cb100,_ui_do_fractal__async_cb181,_ui_do_fractal__async_cb180,_ui_do_fractal__async_cb179,_ui_do_fractal__async_cb182,_ui_do_fractal__async_cb,_scene7__async_cb128,_scene7__async_cb127,_scene7__async_cb126,_scene7__async_cb,_credits__async_cb,_move_starfield,_credits__async_cb104,_credits__async_cb103,_credits__async_cb102
  ,_credits__async_cb101,_do_fractal__async_cb,_do_fractal__async_cb135,_do_fractal__async_cb136,_do_fractal__async_cb137,_do_fractal__async_cb138,_do_fractal__async_cb139,_do_fractal__async_cb148,_do_fractal__async_cb150,_do_fractal__async_cb140,_do_fractal__async_cb141,_do_fractal__async_cb142,_do_fractal__async_cb149,_do_fractal__async_cb143,_do_fractal__async_cb147,_do_fractal__async_cb144,_do_fractal__async_cb145,_do_fractal__async_cb146,_calcline__async_cb,_calcline__async_cb211,_calcline__async_cb212,_calcline__async_cb213,_calcline__async_cb214,_calcline__async_cb215,_calccolumn__async_cb,_calccolumn__async_cb130,_calccolumn__async_cb131,_calccolumn__async_cb132,_calccolumn__async_cb133,_calccolumn__async_cb134
  ,_credits2__async_cb124,_credits2__async_cb123,_credits2__async_cb125,_credits2__async_cb110,_credits2__async_cb112,_credits2__async_cb120,_credits2__async_cb119,_credits2__async_cb118,_credits2__async_cb117,_credits2__async_cb116,_credits2__async_cb115,_credits2__async_cb114,_credits2__async_cb111,_credits2__async_cb113,_credits2__async_cb122,_credits2__async_cb,_credits2__async_cb109,_credits2__async_cb108,_credits2__async_cb107,_credits2__async_cb106,_credits2__async_cb121,_credits2__async_cb105,_messager__async_cb87,_messager__async_cb89,_messager__async_cb88,_messager__async_cb,_devezen1__async_cb,_devezen2__async_cb,_devezen3__async_cb60,_devezen3__async_cb
  ,_devezen4__async_cb210,_devezen4__async_cb,_aa_flush__async_cb,_aa_flush__async_cb51,_aa_flush__async_cb52,_aa_flush__async_cb53,_aa_flush__async_cb54,_aa_flush__async_cb55,_aa_flush__async_cb56,_aa_flush__async_cb57,_aa_flush__async_cb58,_aa_flush__async_cb59,_aa_initkbd__async_cb,_aa_getevent__async_cb,_aa_getevent__async_cb172,_aa_getevent__async_cb173,_aa_getevent__async_cb174,_aa_getevent__async_cb175,_aa_getevent__async_cb176,_aa_getevent__async_cb177,_aa_getevent__async_cb178,_aa_getkey__async_cb,_aa_uninitmouse__async_cb,_aa_uninitkbd__async_cb91,_aa_uninitkbd__async_cb,_aa_resize__async_cb,_aa_init__async_cb,_aa_init__async_cb3,_aa_init__async_cb1,_aa_init__async_cb2
  ,_aa_close__async_cb,_aa_close__async_cb232,_aa_close__async_cb231,_aa_hidecursor__async_cb,_aa_showcursor__async_cb,_aa_showcursor__async_cb80,_aa_gotoxy__async_cb,_web_flush__async_cb,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1];
  var FUNCTION_TABLE_vii = [b2,_web_setattr,_web_print,_web_cursor];
  var FUNCTION_TABLE_idddd = [b3,_mand_calc,_mand3_calc,b3];
  var FUNCTION_TABLE_iiii = [b4,_sn_write];
  var FUNCTION_TABLE_viii = [b5,_web_getsize,_web_gotoxy,b5];
  var FUNCTION_TABLE_v = [b6,_draw,_drawwait,_drawwait3,_drawwait2,_drawwait4,_mydraw,_messaguj,_draw3d,_draw_plasma,_mydraw77,_mydraw78,_mydraw3,_mydraw134,_mydraw1,_do3d135,_mydraw4,_mydraw2,_mydraw6,_mydraw5,_mydraw7,_mydraw8,_flip_buffers,_ui_waitfunc,_ui_changed,_mydraw1147,_mydraw146,_juliov,_mydraw1184
  ,_drawcredits,_decrand,_pryc,_morphdraw,_decbright290,_toblack1,_toblack,_incrandom301,_decontr,_towhite,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6];
  var FUNCTION_TABLE_iii = [b7,_aaweb_init229,_aaweb_getchar,_fcmp];
  var FUNCTION_TABLE_viiii = [b8];

    return { _emscripten_async_stack_restore: _emscripten_async_stack_restore, _i64Subtract: _i64Subtract, _free: _free, _main: _main, _rand_r: _rand_r, _emscripten_free_async_context: _emscripten_free_async_context, _i64Add: _i64Add, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _strlen: _strlen, _memset: _memset, _malloc: _malloc, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _memcpy: _memcpy, _emscripten_async_stack_alloc: _emscripten_async_stack_alloc, _emscripten_async_resume: _emscripten_async_resume, _strncpy: _strncpy, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _calloc: _calloc, _rand: _rand, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, setAsync: setAsync, dynCall_iiiii: dynCall_iiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_idddd: dynCall_idddd, dynCall_iiii: dynCall_iiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
  
// EMSCRIPTEN_END_ASM

})({
 "Math": Math,
 "Int8Array": Int8Array,
 "Int16Array": Int16Array,
 "Int32Array": Int32Array,
 "Uint8Array": Uint8Array,
 "Uint16Array": Uint16Array,
 "Uint32Array": Uint32Array,
 "Float32Array": Float32Array,
 "Float64Array": Float64Array
}, {
 "abort": abort,
 "assert": assert,
 "asmPrintInt": asmPrintInt,
 "asmPrintFloat": asmPrintFloat,
 "min": Math_min,
 "invoke_iiiii": invoke_iiiii,
 "invoke_vi": invoke_vi,
 "invoke_vii": invoke_vii,
 "invoke_idddd": invoke_idddd,
 "invoke_iiii": invoke_iiii,
 "invoke_viii": invoke_viii,
 "invoke_v": invoke_v,
 "invoke_iii": invoke_iii,
 "invoke_viiii": invoke_viiii,
 "_fabs": _fabs,
 "_sin": _sin,
 "_llvm_pow_f64": _llvm_pow_f64,
 "_send": _send,
 "_aaweb_get_height": _aaweb_get_height,
 "_aaweb_setattr": _aaweb_setattr,
 "_fmod": _fmod,
 "_fmodl": _fmodl,
 "___buildEnvironment": ___buildEnvironment,
 "_fflush": _fflush,
 "_pwrite": _pwrite,
 "_strerror_r": _strerror_r,
 "_signal": _signal,
 "___setErrNo": ___setErrNo,
 "_sbrk": _sbrk,
 "_emscripten_memcpy_big": _emscripten_memcpy_big,
 "_fileno": _fileno,
 "_sysconf": _sysconf,
 "_srand": _srand,
 "_close": _close,
 "_aaweb_get_width": _aaweb_get_width,
 "_cos": _cos,
 "_fputs": _fputs,
 "_pread": _pread,
 "_puts": _puts,
 "_printf": _printf,
 "__reallyNegative": __reallyNegative,
 "_write": _write,
 "_aaweb_init": _aaweb_init,
 "___errno_location": ___errno_location,
 "_select": _select,
 "_recv": _recv,
 "_emscripten_sleep": _emscripten_sleep,
 "_aaweb_gotoxy": _aaweb_gotoxy,
 "_copysign": _copysign,
 "_getenv": _getenv,
 "_mkport": _mkport,
 "__exit": __exit,
 "_aaweb_print": _aaweb_print,
 "_copysignl": _copysignl,
 "_abort": _abort,
 "_fwrite": _fwrite,
 "_time": _time,
 "_fprintf": _fprintf,
 "_strerror": _strerror,
 "_gettimeofday": _gettimeofday,
 "__formatString": __formatString,
 "_fputc": _fputc,
 "_sqrt": _sqrt,
 "_exit": _exit,
 "_read": _read,
 "STACKTOP": STACKTOP,
 "STACK_MAX": STACK_MAX,
 "tempDoublePtr": tempDoublePtr,
 "ABORT": ABORT,
 "cttz_i8": cttz_i8,
 "ctlz_i8": ctlz_i8,
 "___rand_seed": ___rand_seed,
 "___async": ___async,
 "___async_unwind": ___async_unwind,
 "___async_stacktop": ___async_stacktop,
 "___async_retval": ___async_retval,
 "___async_cur_frame": ___async_cur_frame,
 "NaN": NaN,
 "Infinity": Infinity,
 "_stderr": _stderr
}, buffer);
var _emscripten_async_stack_restore = Module["_emscripten_async_stack_restore"] = asm["_emscripten_async_stack_restore"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _rand_r = Module["_rand_r"] = asm["_rand_r"];
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _emscripten_async_stack_alloc = Module["_emscripten_async_stack_alloc"] = asm["_emscripten_async_stack_alloc"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _calloc = Module["_calloc"] = asm["_calloc"];
var _rand = Module["_rand"] = asm["_rand"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_idddd = Module["dynCall_idddd"] = asm["dynCall_idddd"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
Runtime.stackAlloc = asm["stackAlloc"];
Runtime.stackSave = asm["stackSave"];
Runtime.stackRestore = asm["stackRestore"];
Runtime.setTempRet0 = asm["setTempRet0"];
Runtime.getTempRet0 = asm["getTempRet0"];
var i64Math = (function() {
 var goog = {
  math: {}
 };
 goog.math.Long = (function(low, high) {
  this.low_ = low | 0;
  this.high_ = high | 0;
 });
 goog.math.Long.IntCache_ = {};
 goog.math.Long.fromInt = (function(value) {
  if (-128 <= value && value < 128) {
   var cachedObj = goog.math.Long.IntCache_[value];
   if (cachedObj) {
    return cachedObj;
   }
  }
  var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
  if (-128 <= value && value < 128) {
   goog.math.Long.IntCache_[value] = obj;
  }
  return obj;
 });
 goog.math.Long.fromNumber = (function(value) {
  if (isNaN(value) || !isFinite(value)) {
   return goog.math.Long.ZERO;
  } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
   return goog.math.Long.MIN_VALUE;
  } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
   return goog.math.Long.MAX_VALUE;
  } else if (value < 0) {
   return goog.math.Long.fromNumber(-value).negate();
  } else {
   return new goog.math.Long(value % goog.math.Long.TWO_PWR_32_DBL_ | 0, value / goog.math.Long.TWO_PWR_32_DBL_ | 0);
  }
 });
 goog.math.Long.fromBits = (function(lowBits, highBits) {
  return new goog.math.Long(lowBits, highBits);
 });
 goog.math.Long.fromString = (function(str, opt_radix) {
  if (str.length == 0) {
   throw Error("number format error: empty string");
  }
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
   throw Error("radix out of range: " + radix);
  }
  if (str.charAt(0) == "-") {
   return goog.math.Long.fromString(str.substring(1), radix).negate();
  } else if (str.indexOf("-") >= 0) {
   throw Error('number format error: interior "-" character: ' + str);
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
  var result = goog.math.Long.ZERO;
  for (var i = 0; i < str.length; i += 8) {
   var size = Math.min(8, str.length - i);
   var value = parseInt(str.substring(i, i + size), radix);
   if (size < 8) {
    var power = goog.math.Long.fromNumber(Math.pow(radix, size));
    result = result.multiply(power).add(goog.math.Long.fromNumber(value));
   } else {
    result = result.multiply(radixToPower);
    result = result.add(goog.math.Long.fromNumber(value));
   }
  }
  return result;
 });
 goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
 goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
 goog.math.Long.TWO_PWR_32_DBL_ = goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
 goog.math.Long.TWO_PWR_31_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ / 2;
 goog.math.Long.TWO_PWR_48_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
 goog.math.Long.TWO_PWR_64_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
 goog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;
 goog.math.Long.ZERO = goog.math.Long.fromInt(0);
 goog.math.Long.ONE = goog.math.Long.fromInt(1);
 goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
 goog.math.Long.MAX_VALUE = goog.math.Long.fromBits(4294967295 | 0, 2147483647 | 0);
 goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 2147483648 | 0);
 goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
 goog.math.Long.prototype.toInt = (function() {
  return this.low_;
 });
 goog.math.Long.prototype.toNumber = (function() {
  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
 });
 goog.math.Long.prototype.toString = (function(opt_radix) {
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
   throw Error("radix out of range: " + radix);
  }
  if (this.isZero()) {
   return "0";
  }
  if (this.isNegative()) {
   if (this.equals(goog.math.Long.MIN_VALUE)) {
    var radixLong = goog.math.Long.fromNumber(radix);
    var div = this.div(radixLong);
    var rem = div.multiply(radixLong).subtract(this);
    return div.toString(radix) + rem.toInt().toString(radix);
   } else {
    return "-" + this.negate().toString(radix);
   }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
  var rem = this;
  var result = "";
  while (true) {
   var remDiv = rem.div(radixToPower);
   var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
   var digits = intval.toString(radix);
   rem = remDiv;
   if (rem.isZero()) {
    return digits + result;
   } else {
    while (digits.length < 6) {
     digits = "0" + digits;
    }
    result = "" + digits + result;
   }
  }
 });
 goog.math.Long.prototype.getHighBits = (function() {
  return this.high_;
 });
 goog.math.Long.prototype.getLowBits = (function() {
  return this.low_;
 });
 goog.math.Long.prototype.getLowBitsUnsigned = (function() {
  return this.low_ >= 0 ? this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
 });
 goog.math.Long.prototype.getNumBitsAbs = (function() {
  if (this.isNegative()) {
   if (this.equals(goog.math.Long.MIN_VALUE)) {
    return 64;
   } else {
    return this.negate().getNumBitsAbs();
   }
  } else {
   var val = this.high_ != 0 ? this.high_ : this.low_;
   for (var bit = 31; bit > 0; bit--) {
    if ((val & 1 << bit) != 0) {
     break;
    }
   }
   return this.high_ != 0 ? bit + 33 : bit + 1;
  }
 });
 goog.math.Long.prototype.isZero = (function() {
  return this.high_ == 0 && this.low_ == 0;
 });
 goog.math.Long.prototype.isNegative = (function() {
  return this.high_ < 0;
 });
 goog.math.Long.prototype.isOdd = (function() {
  return (this.low_ & 1) == 1;
 });
 goog.math.Long.prototype.equals = (function(other) {
  return this.high_ == other.high_ && this.low_ == other.low_;
 });
 goog.math.Long.prototype.notEquals = (function(other) {
  return this.high_ != other.high_ || this.low_ != other.low_;
 });
 goog.math.Long.prototype.lessThan = (function(other) {
  return this.compare(other) < 0;
 });
 goog.math.Long.prototype.lessThanOrEqual = (function(other) {
  return this.compare(other) <= 0;
 });
 goog.math.Long.prototype.greaterThan = (function(other) {
  return this.compare(other) > 0;
 });
 goog.math.Long.prototype.greaterThanOrEqual = (function(other) {
  return this.compare(other) >= 0;
 });
 goog.math.Long.prototype.compare = (function(other) {
  if (this.equals(other)) {
   return 0;
  }
  var thisNeg = this.isNegative();
  var otherNeg = other.isNegative();
  if (thisNeg && !otherNeg) {
   return -1;
  }
  if (!thisNeg && otherNeg) {
   return 1;
  }
  if (this.subtract(other).isNegative()) {
   return -1;
  } else {
   return 1;
  }
 });
 goog.math.Long.prototype.negate = (function() {
  if (this.equals(goog.math.Long.MIN_VALUE)) {
   return goog.math.Long.MIN_VALUE;
  } else {
   return this.not().add(goog.math.Long.ONE);
  }
 });
 goog.math.Long.prototype.add = (function(other) {
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 + b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
 });
 goog.math.Long.prototype.subtract = (function(other) {
  return this.add(other.negate());
 });
 goog.math.Long.prototype.multiply = (function(other) {
  if (this.isZero()) {
   return goog.math.Long.ZERO;
  } else if (other.isZero()) {
   return goog.math.Long.ZERO;
  }
  if (this.equals(goog.math.Long.MIN_VALUE)) {
   return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
  } else if (other.equals(goog.math.Long.MIN_VALUE)) {
   return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
  }
  if (this.isNegative()) {
   if (other.isNegative()) {
    return this.negate().multiply(other.negate());
   } else {
    return this.negate().multiply(other).negate();
   }
  } else if (other.isNegative()) {
   return this.multiply(other.negate()).negate();
  }
  if (this.lessThan(goog.math.Long.TWO_PWR_24_) && other.lessThan(goog.math.Long.TWO_PWR_24_)) {
   return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
  }
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
 });
 goog.math.Long.prototype.div = (function(other) {
  if (other.isZero()) {
   throw Error("division by zero");
  } else if (this.isZero()) {
   return goog.math.Long.ZERO;
  }
  if (this.equals(goog.math.Long.MIN_VALUE)) {
   if (other.equals(goog.math.Long.ONE) || other.equals(goog.math.Long.NEG_ONE)) {
    return goog.math.Long.MIN_VALUE;
   } else if (other.equals(goog.math.Long.MIN_VALUE)) {
    return goog.math.Long.ONE;
   } else {
    var halfThis = this.shiftRight(1);
    var approx = halfThis.div(other).shiftLeft(1);
    if (approx.equals(goog.math.Long.ZERO)) {
     return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
    } else {
     var rem = this.subtract(other.multiply(approx));
     var result = approx.add(rem.div(other));
     return result;
    }
   }
  } else if (other.equals(goog.math.Long.MIN_VALUE)) {
   return goog.math.Long.ZERO;
  }
  if (this.isNegative()) {
   if (other.isNegative()) {
    return this.negate().div(other.negate());
   } else {
    return this.negate().div(other).negate();
   }
  } else if (other.isNegative()) {
   return this.div(other.negate()).negate();
  }
  var res = goog.math.Long.ZERO;
  var rem = this;
  while (rem.greaterThanOrEqual(other)) {
   var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
   var log2 = Math.ceil(Math.log(approx) / Math.LN2);
   var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
   var approxRes = goog.math.Long.fromNumber(approx);
   var approxRem = approxRes.multiply(other);
   while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
    approx -= delta;
    approxRes = goog.math.Long.fromNumber(approx);
    approxRem = approxRes.multiply(other);
   }
   if (approxRes.isZero()) {
    approxRes = goog.math.Long.ONE;
   }
   res = res.add(approxRes);
   rem = rem.subtract(approxRem);
  }
  return res;
 });
 goog.math.Long.prototype.modulo = (function(other) {
  return this.subtract(this.div(other).multiply(other));
 });
 goog.math.Long.prototype.not = (function() {
  return goog.math.Long.fromBits(~this.low_, ~this.high_);
 });
 goog.math.Long.prototype.and = (function(other) {
  return goog.math.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
 });
 goog.math.Long.prototype.or = (function(other) {
  return goog.math.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
 });
 goog.math.Long.prototype.xor = (function(other) {
  return goog.math.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
 });
 goog.math.Long.prototype.shiftLeft = (function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
   return this;
  } else {
   var low = this.low_;
   if (numBits < 32) {
    var high = this.high_;
    return goog.math.Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);
   } else {
    return goog.math.Long.fromBits(0, low << numBits - 32);
   }
  }
 });
 goog.math.Long.prototype.shiftRight = (function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
   return this;
  } else {
   var high = this.high_;
   if (numBits < 32) {
    var low = this.low_;
    return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);
   } else {
    return goog.math.Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);
   }
  }
 });
 goog.math.Long.prototype.shiftRightUnsigned = (function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
   return this;
  } else {
   var high = this.high_;
   if (numBits < 32) {
    var low = this.low_;
    return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);
   } else if (numBits == 32) {
    return goog.math.Long.fromBits(high, 0);
   } else {
    return goog.math.Long.fromBits(high >>> numBits - 32, 0);
   }
  }
 });
 var navigator = {
  appName: "Modern Browser"
 };
 var dbits;
 var canary = 0xdeadbeefcafe;
 var j_lm = (canary & 16777215) == 15715070;
 function BigInteger(a, b, c) {
  if (a != null) if ("number" == typeof a) this.fromNumber(a, b, c); else if (b == null && "string" != typeof a) this.fromString(a, 256); else this.fromString(a, b);
 }
 function nbi() {
  return new BigInteger(null);
 }
 function am1(i, x, w, j, c, n) {
  while (--n >= 0) {
   var v = x * this[i++] + w[j] + c;
   c = Math.floor(v / 67108864);
   w[j++] = v & 67108863;
  }
  return c;
 }
 function am2(i, x, w, j, c, n) {
  var xl = x & 32767, xh = x >> 15;
  while (--n >= 0) {
   var l = this[i] & 32767;
   var h = this[i++] >> 15;
   var m = xh * l + h * xl;
   l = xl * l + ((m & 32767) << 15) + w[j] + (c & 1073741823);
   c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
   w[j++] = l & 1073741823;
  }
  return c;
 }
 function am3(i, x, w, j, c, n) {
  var xl = x & 16383, xh = x >> 14;
  while (--n >= 0) {
   var l = this[i] & 16383;
   var h = this[i++] >> 14;
   var m = xh * l + h * xl;
   l = xl * l + ((m & 16383) << 14) + w[j] + c;
   c = (l >> 28) + (m >> 14) + xh * h;
   w[j++] = l & 268435455;
  }
  return c;
 }
 if (j_lm && navigator.appName == "Microsoft Internet Explorer") {
  BigInteger.prototype.am = am2;
  dbits = 30;
 } else if (j_lm && navigator.appName != "Netscape") {
  BigInteger.prototype.am = am1;
  dbits = 26;
 } else {
  BigInteger.prototype.am = am3;
  dbits = 28;
 }
 BigInteger.prototype.DB = dbits;
 BigInteger.prototype.DM = (1 << dbits) - 1;
 BigInteger.prototype.DV = 1 << dbits;
 var BI_FP = 52;
 BigInteger.prototype.FV = Math.pow(2, BI_FP);
 BigInteger.prototype.F1 = BI_FP - dbits;
 BigInteger.prototype.F2 = 2 * dbits - BI_FP;
 var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
 var BI_RC = new Array;
 var rr, vv;
 rr = "0".charCodeAt(0);
 for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
 rr = "a".charCodeAt(0);
 for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
 rr = "A".charCodeAt(0);
 for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
 function int2char(n) {
  return BI_RM.charAt(n);
 }
 function intAt(s, i) {
  var c = BI_RC[s.charCodeAt(i)];
  return c == null ? -1 : c;
 }
 function bnpCopyTo(r) {
  for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];
  r.t = this.t;
  r.s = this.s;
 }
 function bnpFromInt(x) {
  this.t = 1;
  this.s = x < 0 ? -1 : 0;
  if (x > 0) this[0] = x; else if (x < -1) this[0] = x + DV; else this.t = 0;
 }
 function nbv(i) {
  var r = nbi();
  r.fromInt(i);
  return r;
 }
 function bnpFromString(s, b) {
  var k;
  if (b == 16) k = 4; else if (b == 8) k = 3; else if (b == 256) k = 8; else if (b == 2) k = 1; else if (b == 32) k = 5; else if (b == 4) k = 2; else {
   this.fromRadix(s, b);
   return;
  }
  this.t = 0;
  this.s = 0;
  var i = s.length, mi = false, sh = 0;
  while (--i >= 0) {
   var x = k == 8 ? s[i] & 255 : intAt(s, i);
   if (x < 0) {
    if (s.charAt(i) == "-") mi = true;
    continue;
   }
   mi = false;
   if (sh == 0) this[this.t++] = x; else if (sh + k > this.DB) {
    this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
    this[this.t++] = x >> this.DB - sh;
   } else this[this.t - 1] |= x << sh;
   sh += k;
   if (sh >= this.DB) sh -= this.DB;
  }
  if (k == 8 && (s[0] & 128) != 0) {
   this.s = -1;
   if (sh > 0) this[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;
  }
  this.clamp();
  if (mi) BigInteger.ZERO.subTo(this, this);
 }
 function bnpClamp() {
  var c = this.s & this.DM;
  while (this.t > 0 && this[this.t - 1] == c) --this.t;
 }
 function bnToString(b) {
  if (this.s < 0) return "-" + this.negate().toString(b);
  var k;
  if (b == 16) k = 4; else if (b == 8) k = 3; else if (b == 2) k = 1; else if (b == 32) k = 5; else if (b == 4) k = 2; else return this.toRadix(b);
  var km = (1 << k) - 1, d, m = false, r = "", i = this.t;
  var p = this.DB - i * this.DB % k;
  if (i-- > 0) {
   if (p < this.DB && (d = this[i] >> p) > 0) {
    m = true;
    r = int2char(d);
   }
   while (i >= 0) {
    if (p < k) {
     d = (this[i] & (1 << p) - 1) << k - p;
     d |= this[--i] >> (p += this.DB - k);
    } else {
     d = this[i] >> (p -= k) & km;
     if (p <= 0) {
      p += this.DB;
      --i;
     }
    }
    if (d > 0) m = true;
    if (m) r += int2char(d);
   }
  }
  return m ? r : "0";
 }
 function bnNegate() {
  var r = nbi();
  BigInteger.ZERO.subTo(this, r);
  return r;
 }
 function bnAbs() {
  return this.s < 0 ? this.negate() : this;
 }
 function bnCompareTo(a) {
  var r = this.s - a.s;
  if (r != 0) return r;
  var i = this.t;
  r = i - a.t;
  if (r != 0) return this.s < 0 ? -r : r;
  while (--i >= 0) if ((r = this[i] - a[i]) != 0) return r;
  return 0;
 }
 function nbits(x) {
  var r = 1, t;
  if ((t = x >>> 16) != 0) {
   x = t;
   r += 16;
  }
  if ((t = x >> 8) != 0) {
   x = t;
   r += 8;
  }
  if ((t = x >> 4) != 0) {
   x = t;
   r += 4;
  }
  if ((t = x >> 2) != 0) {
   x = t;
   r += 2;
  }
  if ((t = x >> 1) != 0) {
   x = t;
   r += 1;
  }
  return r;
 }
 function bnBitLength() {
  if (this.t <= 0) return 0;
  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
 }
 function bnpDLShiftTo(n, r) {
  var i;
  for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];
  for (i = n - 1; i >= 0; --i) r[i] = 0;
  r.t = this.t + n;
  r.s = this.s;
 }
 function bnpDRShiftTo(n, r) {
  for (var i = n; i < this.t; ++i) r[i - n] = this[i];
  r.t = Math.max(this.t - n, 0);
  r.s = this.s;
 }
 function bnpLShiftTo(n, r) {
  var bs = n % this.DB;
  var cbs = this.DB - bs;
  var bm = (1 << cbs) - 1;
  var ds = Math.floor(n / this.DB), c = this.s << bs & this.DM, i;
  for (i = this.t - 1; i >= 0; --i) {
   r[i + ds + 1] = this[i] >> cbs | c;
   c = (this[i] & bm) << bs;
  }
  for (i = ds - 1; i >= 0; --i) r[i] = 0;
  r[ds] = c;
  r.t = this.t + ds + 1;
  r.s = this.s;
  r.clamp();
 }
 function bnpRShiftTo(n, r) {
  r.s = this.s;
  var ds = Math.floor(n / this.DB);
  if (ds >= this.t) {
   r.t = 0;
   return;
  }
  var bs = n % this.DB;
  var cbs = this.DB - bs;
  var bm = (1 << bs) - 1;
  r[0] = this[ds] >> bs;
  for (var i = ds + 1; i < this.t; ++i) {
   r[i - ds - 1] |= (this[i] & bm) << cbs;
   r[i - ds] = this[i] >> bs;
  }
  if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;
  r.t = this.t - ds;
  r.clamp();
 }
 function bnpSubTo(a, r) {
  var i = 0, c = 0, m = Math.min(a.t, this.t);
  while (i < m) {
   c += this[i] - a[i];
   r[i++] = c & this.DM;
   c >>= this.DB;
  }
  if (a.t < this.t) {
   c -= a.s;
   while (i < this.t) {
    c += this[i];
    r[i++] = c & this.DM;
    c >>= this.DB;
   }
   c += this.s;
  } else {
   c += this.s;
   while (i < a.t) {
    c -= a[i];
    r[i++] = c & this.DM;
    c >>= this.DB;
   }
   c -= a.s;
  }
  r.s = c < 0 ? -1 : 0;
  if (c < -1) r[i++] = this.DV + c; else if (c > 0) r[i++] = c;
  r.t = i;
  r.clamp();
 }
 function bnpMultiplyTo(a, r) {
  var x = this.abs(), y = a.abs();
  var i = x.t;
  r.t = i + y.t;
  while (--i >= 0) r[i] = 0;
  for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
  r.s = 0;
  r.clamp();
  if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
 }
 function bnpSquareTo(r) {
  var x = this.abs();
  var i = r.t = 2 * x.t;
  while (--i >= 0) r[i] = 0;
  for (i = 0; i < x.t - 1; ++i) {
   var c = x.am(i, x[i], r, 2 * i, 0, 1);
   if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
    r[i + x.t] -= x.DV;
    r[i + x.t + 1] = 1;
   }
  }
  if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
  r.s = 0;
  r.clamp();
 }
 function bnpDivRemTo(m, q, r) {
  var pm = m.abs();
  if (pm.t <= 0) return;
  var pt = this.abs();
  if (pt.t < pm.t) {
   if (q != null) q.fromInt(0);
   if (r != null) this.copyTo(r);
   return;
  }
  if (r == null) r = nbi();
  var y = nbi(), ts = this.s, ms = m.s;
  var nsh = this.DB - nbits(pm[pm.t - 1]);
  if (nsh > 0) {
   pm.lShiftTo(nsh, y);
   pt.lShiftTo(nsh, r);
  } else {
   pm.copyTo(y);
   pt.copyTo(r);
  }
  var ys = y.t;
  var y0 = y[ys - 1];
  if (y0 == 0) return;
  var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
  var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;
  var i = r.t, j = i - ys, t = q == null ? nbi() : q;
  y.dlShiftTo(j, t);
  if (r.compareTo(t) >= 0) {
   r[r.t++] = 1;
   r.subTo(t, r);
  }
  BigInteger.ONE.dlShiftTo(ys, t);
  t.subTo(y, y);
  while (y.t < ys) y[y.t++] = 0;
  while (--j >= 0) {
   var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
   if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
    y.dlShiftTo(j, t);
    r.subTo(t, r);
    while (r[i] < --qd) r.subTo(t, r);
   }
  }
  if (q != null) {
   r.drShiftTo(ys, q);
   if (ts != ms) BigInteger.ZERO.subTo(q, q);
  }
  r.t = ys;
  r.clamp();
  if (nsh > 0) r.rShiftTo(nsh, r);
  if (ts < 0) BigInteger.ZERO.subTo(r, r);
 }
 function bnMod(a) {
  var r = nbi();
  this.abs().divRemTo(a, null, r);
  if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
  return r;
 }
 function Classic(m) {
  this.m = m;
 }
 function cConvert(x) {
  if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m); else return x;
 }
 function cRevert(x) {
  return x;
 }
 function cReduce(x) {
  x.divRemTo(this.m, null, x);
 }
 function cMulTo(x, y, r) {
  x.multiplyTo(y, r);
  this.reduce(r);
 }
 function cSqrTo(x, r) {
  x.squareTo(r);
  this.reduce(r);
 }
 Classic.prototype.convert = cConvert;
 Classic.prototype.revert = cRevert;
 Classic.prototype.reduce = cReduce;
 Classic.prototype.mulTo = cMulTo;
 Classic.prototype.sqrTo = cSqrTo;
 function bnpInvDigit() {
  if (this.t < 1) return 0;
  var x = this[0];
  if ((x & 1) == 0) return 0;
  var y = x & 3;
  y = y * (2 - (x & 15) * y) & 15;
  y = y * (2 - (x & 255) * y) & 255;
  y = y * (2 - ((x & 65535) * y & 65535)) & 65535;
  y = y * (2 - x * y % this.DV) % this.DV;
  return y > 0 ? this.DV - y : -y;
 }
 function Montgomery(m) {
  this.m = m;
  this.mp = m.invDigit();
  this.mpl = this.mp & 32767;
  this.mph = this.mp >> 15;
  this.um = (1 << m.DB - 15) - 1;
  this.mt2 = 2 * m.t;
 }
 function montConvert(x) {
  var r = nbi();
  x.abs().dlShiftTo(this.m.t, r);
  r.divRemTo(this.m, null, r);
  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
  return r;
 }
 function montRevert(x) {
  var r = nbi();
  x.copyTo(r);
  this.reduce(r);
  return r;
 }
 function montReduce(x) {
  while (x.t <= this.mt2) x[x.t++] = 0;
  for (var i = 0; i < this.m.t; ++i) {
   var j = x[i] & 32767;
   var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;
   j = i + this.m.t;
   x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
   while (x[j] >= x.DV) {
    x[j] -= x.DV;
    x[++j]++;
   }
  }
  x.clamp();
  x.drShiftTo(this.m.t, x);
  if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
 }
 function montSqrTo(x, r) {
  x.squareTo(r);
  this.reduce(r);
 }
 function montMulTo(x, y, r) {
  x.multiplyTo(y, r);
  this.reduce(r);
 }
 Montgomery.prototype.convert = montConvert;
 Montgomery.prototype.revert = montRevert;
 Montgomery.prototype.reduce = montReduce;
 Montgomery.prototype.mulTo = montMulTo;
 Montgomery.prototype.sqrTo = montSqrTo;
 function bnpIsEven() {
  return (this.t > 0 ? this[0] & 1 : this.s) == 0;
 }
 function bnpExp(e, z) {
  if (e > 4294967295 || e < 1) return BigInteger.ONE;
  var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e) - 1;
  g.copyTo(r);
  while (--i >= 0) {
   z.sqrTo(r, r2);
   if ((e & 1 << i) > 0) z.mulTo(r2, g, r); else {
    var t = r;
    r = r2;
    r2 = t;
   }
  }
  return z.revert(r);
 }
 function bnModPowInt(e, m) {
  var z;
  if (e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
  return this.exp(e, z);
 }
 BigInteger.prototype.copyTo = bnpCopyTo;
 BigInteger.prototype.fromInt = bnpFromInt;
 BigInteger.prototype.fromString = bnpFromString;
 BigInteger.prototype.clamp = bnpClamp;
 BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
 BigInteger.prototype.drShiftTo = bnpDRShiftTo;
 BigInteger.prototype.lShiftTo = bnpLShiftTo;
 BigInteger.prototype.rShiftTo = bnpRShiftTo;
 BigInteger.prototype.subTo = bnpSubTo;
 BigInteger.prototype.multiplyTo = bnpMultiplyTo;
 BigInteger.prototype.squareTo = bnpSquareTo;
 BigInteger.prototype.divRemTo = bnpDivRemTo;
 BigInteger.prototype.invDigit = bnpInvDigit;
 BigInteger.prototype.isEven = bnpIsEven;
 BigInteger.prototype.exp = bnpExp;
 BigInteger.prototype.toString = bnToString;
 BigInteger.prototype.negate = bnNegate;
 BigInteger.prototype.abs = bnAbs;
 BigInteger.prototype.compareTo = bnCompareTo;
 BigInteger.prototype.bitLength = bnBitLength;
 BigInteger.prototype.mod = bnMod;
 BigInteger.prototype.modPowInt = bnModPowInt;
 BigInteger.ZERO = nbv(0);
 BigInteger.ONE = nbv(1);
 function bnpFromRadix(s, b) {
  this.fromInt(0);
  if (b == null) b = 10;
  var cs = this.chunkSize(b);
  var d = Math.pow(b, cs), mi = false, j = 0, w = 0;
  for (var i = 0; i < s.length; ++i) {
   var x = intAt(s, i);
   if (x < 0) {
    if (s.charAt(i) == "-" && this.signum() == 0) mi = true;
    continue;
   }
   w = b * w + x;
   if (++j >= cs) {
    this.dMultiply(d);
    this.dAddOffset(w, 0);
    j = 0;
    w = 0;
   }
  }
  if (j > 0) {
   this.dMultiply(Math.pow(b, j));
   this.dAddOffset(w, 0);
  }
  if (mi) BigInteger.ZERO.subTo(this, this);
 }
 function bnpChunkSize(r) {
  return Math.floor(Math.LN2 * this.DB / Math.log(r));
 }
 function bnSigNum() {
  if (this.s < 0) return -1; else if (this.t <= 0 || this.t == 1 && this[0] <= 0) return 0; else return 1;
 }
 function bnpDMultiply(n) {
  this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
  ++this.t;
  this.clamp();
 }
 function bnpDAddOffset(n, w) {
  if (n == 0) return;
  while (this.t <= w) this[this.t++] = 0;
  this[w] += n;
  while (this[w] >= this.DV) {
   this[w] -= this.DV;
   if (++w >= this.t) this[this.t++] = 0;
   ++this[w];
  }
 }
 function bnpToRadix(b) {
  if (b == null) b = 10;
  if (this.signum() == 0 || b < 2 || b > 36) return "0";
  var cs = this.chunkSize(b);
  var a = Math.pow(b, cs);
  var d = nbv(a), y = nbi(), z = nbi(), r = "";
  this.divRemTo(d, y, z);
  while (y.signum() > 0) {
   r = (a + z.intValue()).toString(b).substr(1) + r;
   y.divRemTo(d, y, z);
  }
  return z.intValue().toString(b) + r;
 }
 function bnIntValue() {
  if (this.s < 0) {
   if (this.t == 1) return this[0] - this.DV; else if (this.t == 0) return -1;
  } else if (this.t == 1) return this[0]; else if (this.t == 0) return 0;
  return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
 }
 function bnpAddTo(a, r) {
  var i = 0, c = 0, m = Math.min(a.t, this.t);
  while (i < m) {
   c += this[i] + a[i];
   r[i++] = c & this.DM;
   c >>= this.DB;
  }
  if (a.t < this.t) {
   c += a.s;
   while (i < this.t) {
    c += this[i];
    r[i++] = c & this.DM;
    c >>= this.DB;
   }
   c += this.s;
  } else {
   c += this.s;
   while (i < a.t) {
    c += a[i];
    r[i++] = c & this.DM;
    c >>= this.DB;
   }
   c += a.s;
  }
  r.s = c < 0 ? -1 : 0;
  if (c > 0) r[i++] = c; else if (c < -1) r[i++] = this.DV + c;
  r.t = i;
  r.clamp();
 }
 BigInteger.prototype.fromRadix = bnpFromRadix;
 BigInteger.prototype.chunkSize = bnpChunkSize;
 BigInteger.prototype.signum = bnSigNum;
 BigInteger.prototype.dMultiply = bnpDMultiply;
 BigInteger.prototype.dAddOffset = bnpDAddOffset;
 BigInteger.prototype.toRadix = bnpToRadix;
 BigInteger.prototype.intValue = bnIntValue;
 BigInteger.prototype.addTo = bnpAddTo;
 var Wrapper = {
  abs: (function(l, h) {
   var x = new goog.math.Long(l, h);
   var ret;
   if (x.isNegative()) {
    ret = x.negate();
   } else {
    ret = x;
   }
   HEAP32[tempDoublePtr >> 2] = ret.low_;
   HEAP32[tempDoublePtr + 4 >> 2] = ret.high_;
  }),
  ensureTemps: (function() {
   if (Wrapper.ensuredTemps) return;
   Wrapper.ensuredTemps = true;
   Wrapper.two32 = new BigInteger;
   Wrapper.two32.fromString("4294967296", 10);
   Wrapper.two64 = new BigInteger;
   Wrapper.two64.fromString("18446744073709551616", 10);
   Wrapper.temp1 = new BigInteger;
   Wrapper.temp2 = new BigInteger;
  }),
  lh2bignum: (function(l, h) {
   var a = new BigInteger;
   a.fromString(h.toString(), 10);
   var b = new BigInteger;
   a.multiplyTo(Wrapper.two32, b);
   var c = new BigInteger;
   c.fromString(l.toString(), 10);
   var d = new BigInteger;
   c.addTo(b, d);
   return d;
  }),
  stringify: (function(l, h, unsigned) {
   var ret = (new goog.math.Long(l, h)).toString();
   if (unsigned && ret[0] == "-") {
    Wrapper.ensureTemps();
    var bignum = new BigInteger;
    bignum.fromString(ret, 10);
    ret = new BigInteger;
    Wrapper.two64.addTo(bignum, ret);
    ret = ret.toString(10);
   }
   return ret;
  }),
  fromString: (function(str, base, min, max, unsigned) {
   Wrapper.ensureTemps();
   var bignum = new BigInteger;
   bignum.fromString(str, base);
   var bigmin = new BigInteger;
   bigmin.fromString(min, 10);
   var bigmax = new BigInteger;
   bigmax.fromString(max, 10);
   if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
    var temp = new BigInteger;
    bignum.addTo(Wrapper.two64, temp);
    bignum = temp;
   }
   var error = false;
   if (bignum.compareTo(bigmin) < 0) {
    bignum = bigmin;
    error = true;
   } else if (bignum.compareTo(bigmax) > 0) {
    bignum = bigmax;
    error = true;
   }
   var ret = goog.math.Long.fromString(bignum.toString());
   HEAP32[tempDoublePtr >> 2] = ret.low_;
   HEAP32[tempDoublePtr + 4 >> 2] = ret.high_;
   if (error) throw "range error";
  })
 };
 return Wrapper;
})();
if (memoryInitializer) {
 if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
  var data = Module["readBinary"](memoryInitializer);
  HEAPU8.set(data, STATIC_BASE);
 } else {
  addRunDependency("memory initializer");
  Browser.asyncLoad(memoryInitializer, (function(data) {
   HEAPU8.set(data, STATIC_BASE);
   removeRunDependency("memory initializer");
  }), (function(data) {
   throw "could not load memory initializer " + memoryInitializer;
  }));
 }
}
function ExitStatus(status) {
 this.name = "ExitStatus";
 this.message = "Program terminated with exit(" + status + ")";
 this.status = status;
}
ExitStatus.prototype = new Error;
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
 if (!Module["calledRun"] && shouldRunNow) run();
 if (!Module["calledRun"]) dependenciesFulfilled = runCaller;
};
Module["callMain"] = Module.callMain = function callMain(args) {
 assert(runDependencies == 0, "cannot call main when async dependencies remain! (listen on __ATMAIN__)");
 assert(__ATPRERUN__.length == 0, "cannot call main when preRun functions remain to be called");
 args = args || [];
 ensureInitRuntime();
 var argc = args.length + 1;
 function pad() {
  for (var i = 0; i < 4 - 1; i++) {
   argv.push(0);
  }
 }
 var argv = [ allocate(intArrayFromString(Module["thisProgram"] || "/bin/this.program"), "i8", ALLOC_NORMAL) ];
 pad();
 for (var i = 0; i < argc - 1; i = i + 1) {
  argv.push(allocate(intArrayFromString(args[i]), "i8", ALLOC_NORMAL));
  pad();
 }
 argv.push(0);
 argv = allocate(argv, "i32", ALLOC_NORMAL);
 initialStackTop = STACKTOP;
 try {
  var ret = Module["_main"](argc, argv, 0);
  if (!Module["noExitRuntime"]) {
   exit(ret);
  }
 } catch (e) {
  if (e instanceof ExitStatus) {
   return;
  } else if (e == "SimulateInfiniteLoop") {
   Module["noExitRuntime"] = true;
   return;
  } else {
   if (e && typeof e === "object" && e.stack) Module.printErr("exception thrown: " + [ e, e.stack ]);
   throw e;
  }
 } finally {
  calledMain = true;
 }
};
function run(args) {
 args = args || Module["arguments"];
 if (preloadStartTime === null) preloadStartTime = Date.now();
 if (runDependencies > 0) {
  Module.printErr("run() called, but dependencies remain, so not running");
  return;
 }
 preRun();
 if (runDependencies > 0) return;
 if (Module["calledRun"]) return;
 function doRun() {
  if (Module["calledRun"]) return;
  Module["calledRun"] = true;
  if (ABORT) return;
  ensureInitRuntime();
  preMain();
  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
   Module.printErr("pre-main prep time: " + (Date.now() - preloadStartTime) + " ms");
  }
  if (Module["_main"] && shouldRunNow) {
   Module["callMain"](args);
  }
  postRun();
 }
 if (Module["setStatus"]) {
  Module["setStatus"]("Running...");
  setTimeout((function() {
   setTimeout((function() {
    Module["setStatus"]("");
   }), 1);
   doRun();
  }), 1);
 } else {
  doRun();
 }
}
Module["run"] = Module.run = run;
function exit(status) {
 ABORT = true;
 EXITSTATUS = status;
 STACKTOP = initialStackTop;
 exitRuntime();
 throw new ExitStatus(status);
}
Module["exit"] = Module.exit = exit;
function abort(text) {
 if (text) {
  Module.print(text);
  Module.printErr(text);
 }
 ABORT = true;
 EXITSTATUS = 1;
 var extra = "\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";
 throw "abort() at " + stackTrace() + extra;
}
Module["abort"] = Module.abort = abort;
if (Module["preInit"]) {
 if (typeof Module["preInit"] == "function") Module["preInit"] = [ Module["preInit"] ];
 while (Module["preInit"].length > 0) {
  Module["preInit"].pop()();
 }
}
var shouldRunNow = true;
if (Module["noInitialRun"]) {
 shouldRunNow = false;
}
run();




